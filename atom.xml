<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>孤舟蓑笠翁，独钓寒江雪</title>
  <subtitle>程序猿的世界</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-02-28T03:39:09.771Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>寒江蓑笠</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>读书 2019</title>
    <link href="http://yoursite.com/2019/02/28/personal-reading-2019/"/>
    <id>http://yoursite.com/2019/02/28/personal-reading-2019/</id>
    <published>2019-02-28T02:00:00.000Z</published>
    <updated>2019-02-28T03:39:09.771Z</updated>
    
    <content type="html"><![CDATA[<h3 id="《乖，摸摸头》"><a href="#《乖，摸摸头》" class="headerlink" title="《乖，摸摸头》"></a>《乖，摸摸头》</h3><p>2019.1</p>
<h3 id="《一本书读懂24中互联网思维》"><a href="#《一本书读懂24中互联网思维》" class="headerlink" title="《一本书读懂24中互联网思维》"></a>《一本书读懂24中互联网思维》</h3><p>2019.1</p>
<ul>
<li>1.用户思维</li>
<li>2.屌丝思维</li>
<li>3.粉丝思维</li>
<li>4.服务思维</li>
<li>5.爆点思维</li>
<li>6.社交化思维</li>
<li>7.产品经理思维</li>
<li>8.极致思维</li>
<li>9.痛点思维</li>
<li>10.简约思维</li>
<li>11.微创新思维</li>
<li>12.迭代思维</li>
<li>13.颠覆式创新思维</li>
<li>14.流量思维</li>
<li>15.免费思维</li>
<li>16.信用思维</li>
<li>17.跨界思维</li>
<li>18.整合思维</li>
<li>19.开放思维</li>
<li>20.平台思维</li>
<li>21.顺势思维</li>
<li>22.连接思维</li>
<li>23.大数据思维</li>
<li>24.物联网思维</li>
</ul>
<h3 id="《独角兽之路》"><a href="#《独角兽之路》" class="headerlink" title="《独角兽之路》"></a>《独角兽之路》</h3><h3 id="《厚黑学》"><a href="#《厚黑学》" class="headerlink" title="《厚黑学》"></a>《厚黑学》</h3>]]></content>
    
    <summary type="html">
    
      2019读书记录
    
    </summary>
    
      <category term="读书" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="读书" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>读书 2018</title>
    <link href="http://yoursite.com/2018/12/30/personal-reading-2018/"/>
    <id>http://yoursite.com/2018/12/30/personal-reading-2018/</id>
    <published>2018-12-30T02:00:00.000Z</published>
    <updated>2019-02-28T03:41:42.419Z</updated>
    
    <content type="html"><![CDATA[<h3 id="《极简投资》"><a href="#《极简投资》" class="headerlink" title="《极简投资》"></a>《极简投资》</h3><h3 id="《互联网-小米案例版》"><a href="#《互联网-小米案例版》" class="headerlink" title="《互联网+ 小米案例版》"></a>《互联网+ 小米案例版》</h3><ul>
<li>平稳期，大家膜拜执行，务虚成贬义词。但变革期，张小龙说过：执行力很重要，但思辨胜于执行；雷军说：不要用战术的勤奋，掩盖战略的懒惰；刘芹说：天道不一定酬勤，选择大于努力；任正非说：过去我们打巷战，提拔务实的人，但以后我们要给务虚土壤。看清楚，想明白，才能务实，否则就如无头苍蝇，瞎忙。</li>
</ul>
<h3 id="《技术管理之巅》"><a href="#《技术管理之巅》" class="headerlink" title="《技术管理之巅》"></a>《技术管理之巅》</h3><ul>
<li>三流的企业靠监督人、二流的企业靠制度管理人、一流的企业靠文化激励人</li>
</ul>
<h3 id="《腾讯传》"><a href="#《腾讯传》" class="headerlink" title="《腾讯传》"></a>《腾讯传》</h3><h3 id="《大败局二》"><a href="#《大败局二》" class="headerlink" title="《大败局二》"></a>《大败局二》</h3><h3 id="《颠覆者：周鸿祎自传》"><a href="#《颠覆者：周鸿祎自传》" class="headerlink" title="《颠覆者：周鸿祎自传》"></a>《颠覆者：周鸿祎自传》</h3><h3 id="《10人以下团队管理手册》"><a href="#《10人以下团队管理手册》" class="headerlink" title="《10人以下团队管理手册》"></a>《10人以下团队管理手册》</h3><h3 id="《以幽默的方式过一生》"><a href="#《以幽默的方式过一生》" class="headerlink" title="《以幽默的方式过一生》"></a>《以幽默的方式过一生》</h3><h3 id="《敏捷革命》"><a href="#《敏捷革命》" class="headerlink" title="《敏捷革命》"></a>《敏捷革命》</h3><p>2018.11<br>Scrum Master的工作职责就是召集会议，确保团队运作过程是透明的，而且，最重要的是，帮助团队发现障碍。<br>冲刺周期经常被称为“时间限制”。其时间跨度必须是固定的，必须有一致性，你不能把一个周期设定为一周，下一个周期却设为三周。必须设置固定的节奏，每个人都知道自己能在一个固定期限内完成多少工作。<br>然而，对于每个冲刺周期而言，还有一个重要元素，即一旦团队决定要完成某些任务，那么这些任务就锁定了，团队之外的任何人再给他们增加任务。</p>
<p>每日例会有一定的规则：第一个规则就是，每一天，会议召开的时间是固定的，每个成员都要出席。一天中的任意时刻都可以，只要是在同一个时刻就好，重点在于给团队一个固定的节奏。<br>第二个规则是开会时间不能超过15分钟。我们系统会议直接了当，直击重点。如果某件事需要进一步讨论，那么就记录下来，在每日立会结束之后再做进一步讨论。之所以这么做，就是为了用最少的时间，讨论出最易于付诸实践的，最宝贵的信息。<br>第三个规则是每个人豆芽积极参与。为了达到这个效果，每个人都要开会时站起来，不要坐下。这样一来就会促使每个人积极交流，持续倾听他人的看法。这样还有助于缩短会议时间。<br>只是由于这个原因，这样的会议才经常被称为每日立会或者每日Scrum。</p>
<h3 id="《小狗钱钱》"><a href="#《小狗钱钱》" class="headerlink" title="《小狗钱钱》"></a>《小狗钱钱》</h3><p>2018.11</p>
<h3 id="《淘宝天猫店是如何运营的：网店从0到千万实操手册》"><a href="#《淘宝天猫店是如何运营的：网店从0到千万实操手册》" class="headerlink" title="《淘宝天猫店是如何运营的：网店从0到千万实操手册》"></a>《淘宝天猫店是如何运营的：网店从0到千万实操手册》</h3><p>2018.12<br>在营销界，有个广泛使用的“四四二法则”，直销大师艾德.梅尔提出的 成功=40%定位+40%产品和定价+20%营销</p>
<h3 id="《小强升职记：时间管理故事书》"><a href="#《小强升职记：时间管理故事书》" class="headerlink" title="《小强升职记：时间管理故事书》"></a>《小强升职记：时间管理故事书》</h3><p>2018.12<br>处理任何工作事务四部总结：</p>
<ul>
<li>将所有的任务放入工作篮，不论是谁在什么时候交给我的任务。</li>
<li>将可以置之不理的任务清除；将必须在某天处理或者必须转交别人处理的任务拿出来；将那些可以在两分钟之内完成的任务立即完成。</li>
<li>将需要在特定日期处理的事情写进日程表；将需要别人处理的事情立即转交并且设置到期提醒；将需要现在处理的事情摆在办公桌上</li>
<li>在自己最高效的时段，做最重要的事情；其他的事情也做合理安排。</li>
</ul>
<p>猴子法则：甩掉自己身上的猴子，或者将猴子放回到他的主人身上。尽量不要当猴子饲养员。<br>老板问：关于水利系统软件的那个项目，想和你谈一谈。<br>你回答：好的老板，不过能否请你先发给我一份关于水利系统软件的资料？</p>
<p>脑袋里只装着一件事<br>它的好处：专注、成就感、摆脱压力</p>
]]></content>
    
    <summary type="html">
    
      2018读书记录
    
    </summary>
    
      <category term="读书" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="读书" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>Android Architecture Components -- ViewModel</title>
    <link href="http://yoursite.com/2018/09/20/android-architecture-components-viewmodel/"/>
    <id>http://yoursite.com/2018/09/20/android-architecture-components-viewmodel/</id>
    <published>2018-09-20T02:00:00.000Z</published>
    <updated>2018-12-21T06:10:42.695Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://developer.android.google.cn/topic/libraries/architecture/viewmodel" target="_blank" rel="external">官方文档</a></p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>ViewModel 我们在 MVC、MVP 和 MVVM 架构中经常见到这个概念。<br>本文来介绍 LifeCycle 库中的 ViewModel 库。<br>ViewModel 库是用来保存应用UI数据的类，它可以在配置变更（比如屏幕选择导致的Activit重建）后继续存在，可以避免因数据Activit重建需要数据保存和恢复问题而导致的各种错误。<br>因此，Android 推荐使用这样的架构设计，将应用中所有的UI数据保存在ViewModel中，而不是Activity中，这样能保证数据不受比如configuration change 带来的Activity重建而带来的影响。<br>Android 开发中一个常见的坑是很多的变量、逻辑和数据放在Activity和Fragment中，这样的代码比较混乱和难以维护，这种开发模式违反了单一职责的原则，ViewModel可以有效地划分责任，具体地，它可以用来保存 Activity 的所有UI数据，然后Activity仅负责了解如何在屏幕上显示该数据和接受用户互动，但是它不会处理这些互动，如果应用要加载和存储数据，建议创建一个 Repository 的存储区类。<br>另外还应该确保 ViewModel 不会因为承担过多的责任而变的臃肿，要避免这种情况，可以创建 Presenter 类，或者实现一种更成熟的架构。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>要创建一个 ViewModel，首先要扩展ViewModel类，然后将Activity中之前与UI相关的实例变量摆放在这个ViewModel中，然后在 Activity 中的 onCreate 中从 ViewModel Provider 的框架实用类再获取 ViewModel。<br>请注意 ViewModel Provider 将获取一个 Activity 的实例，它可以确保Activity重建后获取一个新的Activity实例，不过，请确保它始终和同一个ViewModel关联。<br>对于ViewModel实例，你可以通过getter函数在Activity中直接获取数据。<br>ViewModel可以单独使用，当然可以和 LiveData 相结合，ViewModel 返回一个 LiveData 对象，然后在 Activity中创建监听，然后更新数据。<br>使用 ViewModel 和 LiveData 可以创建反应式界面。也就是说当底层数据更新时，UI界面会相应自动更新。<br>当然还可以和 Data Binding 结合使用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">public class LiveDataTimerViewModel extends ViewModel &#123;</div><div class="line"></div><div class="line">    private static final int ONE_SECOND = 1000;</div><div class="line"></div><div class="line">    private MutableLiveData&lt;Long&gt; mElapsedTime = new MutableLiveData&lt;&gt;();</div><div class="line"></div><div class="line">    private long mInitialTime;</div><div class="line"></div><div class="line">    public LiveDataTimerViewModel() &#123;</div><div class="line">        mInitialTime = SystemClock.elapsedRealtime();</div><div class="line">        Timer timer = new Timer();</div><div class="line"></div><div class="line">        // Update the elapsed time every second.</div><div class="line">        timer.scheduleAtFixedRate(new TimerTask() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                final long newValue = (SystemClock.elapsedRealtime() - mInitialTime) / 1000;</div><div class="line">                mElapsedTime.postValue(newValue);</div><div class="line">            &#125;</div><div class="line">        &#125;, ONE_SECOND, ONE_SECOND);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public LiveData&lt;Long&gt; getElapsedTime() &#123;</div><div class="line">        return mElapsedTime;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">private LiveDataTimerViewModel mLiveDataTimerViewModel;</div><div class="line"></div><div class="line">@Override</div><div class="line">protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">    super.onCreate(savedInstanceState);</div><div class="line"></div><div class="line">    setContentView(R.layout.chrono_activity_3);</div><div class="line"></div><div class="line">    mLiveDataTimerViewModel = ViewModelProviders.of(this).get(LiveDataTimerViewModel.class);</div><div class="line"></div><div class="line">    final Observer&lt;Long&gt; elapsedTimeObserver = new Observer&lt;Long&gt;() &#123;</div><div class="line">        @Override</div><div class="line">        public void onChanged(@Nullable final Long aLong) &#123;</div><div class="line">            String newText = ChronoActivity3.this.getResources().getString(</div><div class="line">                    R.string.seconds, aLong);</div><div class="line">            ((TextView) findViewById(R.id.timer_textview)).setText(newText);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    mLiveDataTimerViewModel.getElapsedTime().observe(this, elapsedTimeObserver);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ViewModel的默认构造函数是没有任何参数的，如果你想要修改，可以使用ViewModelFactory类创建一个自定义的构造函数，</p>
<h2 id="ViewModel-的生命周期"><a href="#ViewModel-的生命周期" class="headerlink" title="ViewModel 的生命周期"></a>ViewModel 的生命周期</h2><p>ViewModel 的生命周期是由传递给 <code>ViewModelProviders.of(this)</code> 的生命周期决定的，ViewModel 初始化后保留在内存中，直到 Activity 永久消失，比如退出并销毁。<br>下图展示了 ViewModel 的生命周期：</p>
<p><img src="/images/android-architecture-components-viewmodel/viewmodel-lifecycle.png" alt="效果图"></p>
<p>在系统第一次调用 Activity 的 onCreate() 方法时初始化 ViewModel，系统可能会在Activity的整个生命周期内多次调用 onCreate()，例如当设备屏幕旋转时。 ViewModel 的生命周期从第一次请求 ViewModel 开始，直到 Activity 被 FINISHED 并销毁。</p>
<h2 id="Fragment-之间共享数据"><a href="#Fragment-之间共享数据" class="headerlink" title="Fragment 之间共享数据"></a>Fragment 之间共享数据</h2><p>我们经常遇到在一个Activity中有多个 Fragment 需要互相通信的情况，一般的做法可能就是两个 Fragment 都需要定义一些接口，而它们的 Activity 必须将两者联系在一起。 此外，Fragment 必须处理另一个 Fragment 尚未创建或可见的情况。<br>使用 ViewModel 可以解决这个问题， Fragment 可以通过一个在 Activity 范围内共享的 ViewModel 来处理彼此的通信。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">public class SharedViewModel extends ViewModel &#123;</div><div class="line">    private final MutableLiveData&lt;Item&gt; selected = new MutableLiveData&lt;Item&gt;();</div><div class="line"></div><div class="line">    public void select(Item item) &#123;</div><div class="line">        selected.setValue(item);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public LiveData&lt;Item&gt; getSelected() &#123;</div><div class="line">        return selected;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">public class MasterFragment extends Fragment &#123;</div><div class="line">    private SharedViewModel model;</div><div class="line">    public void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        model = ViewModelProviders.of(getActivity()).get(SharedViewModel.class);</div><div class="line">        itemSelector.setOnClickListener(item -&gt; &#123;</div><div class="line">            model.select(item);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class DetailFragment extends Fragment &#123;</div><div class="line">    public void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        SharedViewModel model = ViewModelProviders.of(getActivity()).get(SharedViewModel.class);</div><div class="line">        model.getSelected().observe(this, &#123; item -&gt;</div><div class="line">           // Update the UI.</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>请注意，在获取ViewModel时，两个Fragment都要使用getActivity()。这样，这两个Fragment会收到同一个SharedViewModel实例，该实例的作用域为Activity。<br>这样做有以下好处：</p>
<ul>
<li>这个 Activity 不需要做任何事情，也不需要知道 Fragment 之间的交流。</li>
<li>除了 SharedViewModel 的接口之外，Fragment不需要了解彼此。 如果其中一个 Fragment 消失，另一个 Fragment 继续照常工作。</li>
<li>每个 Fragment 都有自己的生命周期，不受其他生命周期的影响。 一个 Fragment 替换成另一个 Fragment，UI继续工作也没有任何问题。</li>
</ul>
<h2 id="用-ViewModel-来代替-Loaders"><a href="#用-ViewModel-来代替-Loaders" class="headerlink" title="用 ViewModel 来代替 Loaders"></a>用 ViewModel 来代替 Loaders</h2><p>在之前我们会经常使用 CursorLoader 来保持应用程序中的数据与数据库同步。那么现在就可以用 ViewModel 来代替 Loader 的使用了。使用 ViewModel 可以将 UI controller 与数据加载操作分开，这意味着在类之间的强引用减少了。<br>Loader 通用的做法是使用 CursorLoader 来观察数据库中的数据，当数据库的数据变化时，Loader 会自动触发一次数据加载并更新UI，如下图：</p>
<p><img src="/images/android-architecture-components-viewmodel/viewmodel-loader.png" alt="效果图"></p>
<p>现在我们可以使用 ViewModel + LiveData + Room 的组合来代替 Loader，ViewModel 确保设备配置改变后数据仍然存在，当数据发生变化时，Room 会通知 LiveData，而 LiveData 可以来更新 UI。如下图：</p>
<p><img src="/images/android-architecture-components-viewmodel/viewmodel-replace-loader.png" alt="效果图"></p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h3 id="不要将-Context-传入-ViewModel"><a href="#不要将-Context-传入-ViewModel" class="headerlink" title="不要将 Context 传入 ViewModel"></a>不要将 Context 传入 ViewModel</h3><p>也就是说 Activity、Fragment和View都不能被传入，正如之前介绍，ViewModel 可以比相联的 Activity 和Fragment 的生命周期都要长。假设你在 ViewModel 中存储了一个Activity，当旋转屏幕导致Activity销毁时，但是 ViewModel 还保存着已经被销毁的 Activity 的引用，这样就会造成内存泄漏。<br>如果你需要比ViewModel生命周期长的Application类，可以使用 AndroidViewModel的子类，通过这个子类就可以直接使用 Application 的引用了。</p>
<h3 id="ViewModel-和-onSaveInstanceState-并用"><a href="#ViewModel-和-onSaveInstanceState-并用" class="headerlink" title="ViewModel 和 onSaveInstanceState 并用"></a>ViewModel 和 onSaveInstanceState 并用</h3><p>ViewModel 不应该取代 onSaveInstanceState 的使用，他们两者是相辅相成的。当进程被关闭时，ViewModel将被销毁，但是 onSaveInstanceState 将不会受到影响。<br>另外，ViewModel可以用来存储大量数据，而 onSaveInstanceState 就只可以用来存储有限的数据了。我们尽可能把多一点的UI数据存储到ViewModel中。在Activity重新创建是不需要重新加载或者生成数据。<br>如果进程被关闭，我们应该用 onSaveInstanceState 来存储足够还原 UI 状态的最少数据。</p>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>照例来看看源码实现。</p>
<h3 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h3><p><code>ViewModelProviders.of(this).get(TimerViewModel.class)</code> 这个方法会返回一个 <code>TimerViewModel</code> 实例对象。<br>先来看一下 ViewModelProvider 的 get 方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public &lt;T extends ViewModel&gt; T get(@NonNull String key, @NonNull Class&lt;T&gt; modelClass) &#123;</div><div class="line">    // 首先从 ViewModelStore 根据key中获取缓存的实例</div><div class="line">    // key 的形式 android.arch.lifecycle.ViewModelProvider.DefaultKey:com.example.heqiang.testsomething.jetpack.TimerViewModel</div><div class="line">    ViewModel viewModel = mViewModelStore.get(key);</div><div class="line"></div><div class="line">    if (modelClass.isInstance(viewModel)) &#123;</div><div class="line">        // 如果有缓存，那么返回缓存对象</div><div class="line">        return (T) viewModel;</div><div class="line">    &#125; else &#123;</div><div class="line">        //noinspection StatementWithEmptyBody</div><div class="line">        if (viewModel != null) &#123;</div><div class="line">            // TODO: log a warning.</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    // 如果没有，生成一个对象，并放入到 ViewModelStore</div><div class="line">    viewModel = mFactory.create(modelClass);</div><div class="line">    mViewModelStore.put(key, viewModel);</div><div class="line">    //noinspection unchecked</div><div class="line">    return (T) viewModel;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ViewModelStore 其实就是内部维护了一个 HashMap 来存放 ViewModel 对象的。<br>ViewModelStore 是在 ViewModelProviders.of 方法中创建 ViewModelProvider </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public static ViewModelProvider of(@NonNull FragmentActivity activity,</div><div class="line">        @Nullable Factory factory) &#123;</div><div class="line">    Application application = checkApplication(activity);</div><div class="line">    if (factory == null) &#123;</div><div class="line">        factory = ViewModelProvider.AndroidViewModelFactory.getInstance(application);</div><div class="line">    &#125;</div><div class="line">    return new ViewModelProvider(ViewModelStores.of(activity), factory);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public static ViewModelStore of(@NonNull FragmentActivity activity) &#123;</div><div class="line">    // 如果实现了 ViewModelStoreOwner 接口，那么直接调用个方法获取</div><div class="line">    if (activity instanceof ViewModelStoreOwner) &#123;</div><div class="line">        return ((ViewModelStoreOwner) activity).getViewModelStore();</div><div class="line">    &#125;</div><div class="line">    // 获取 HolderFragment 实例来获取 ViewModelStore</div><div class="line">    return holderFragmentFor(activity).getViewModelStore();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>HolderFragment.holderFragmentFor()</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">HolderFragment holderFragmentFor(FragmentActivity activity) &#123;</div><div class="line">    FragmentManager fm = activity.getSupportFragmentManager();</div><div class="line">    // 获取 HolderFragment</div><div class="line">    HolderFragment holder = findHolderFragment(fm);</div><div class="line">    // 如果已经创建，返回</div><div class="line">    if (holder != null) &#123;</div><div class="line">        return holder;</div><div class="line">    &#125;</div><div class="line">    // 从缓存列表中获取</div><div class="line">    holder = mNotCommittedActivityHolders.get(activity);</div><div class="line">    if (holder != null) &#123;</div><div class="line">        return holder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if (!mActivityCallbacksIsAdded) &#123;</div><div class="line">        mActivityCallbacksIsAdded = true;</div><div class="line">        // 注册生命周期回调，当生命周期结束时remove缓存的 HolderFragment</div><div class="line">        activity.getApplication().registerActivityLifecycleCallbacks(mActivityCallbacks);</div><div class="line">    &#125;</div><div class="line">    // 创建 HolderFragment 并添加到 HolderFragment</div><div class="line">    holder = createHolderFragment(fm);</div><div class="line">    mNotCommittedActivityHolders.put(activity, holder);</div><div class="line">    return holder;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从上面这系列分析可以看到，ViewModel 生命周期和 ViewModelStore 相关，而 ViewModelStore 又和 HolderFragment 相关。<br>那么 HolderFragment 是什么呢？接下来分析。</p>
<h3 id="HolderFragment"><a href="#HolderFragment" class="headerlink" title="HolderFragment"></a>HolderFragment</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class HolderFragment extends Fragment implements ViewModelStoreOwner &#123;</div><div class="line">    private static final HolderFragmentManager sHolderFragmentManager = new HolderFragmentManager();</div><div class="line"></div><div class="line">    private ViewModelStore mViewModelStore = new ViewModelStore();</div><div class="line"></div><div class="line">    public HolderFragment() &#123;</div><div class="line">        setRetainInstance(true);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCreate(@Nullable Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        sHolderFragmentManager.holderFragmentCreated(this);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onDestroy() &#123;</div><div class="line">        super.onDestroy();</div><div class="line">        mViewModelStore.clear();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @NonNull</div><div class="line">    @Override</div><div class="line">    public ViewModelStore getViewModelStore() &#123;</div><div class="line">        return mViewModelStore;</div><div class="line">    &#125;</div><div class="line">    ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>HolderFragment 继承自 Fragment 实现了 ViewModelStoreOwner 接口，在生命周期结束的 onDestroy() 执行 ViewModelStore.clear()，然后这个方法会调用 ViewModel 的 onCleared() 方法。<br>那么 HolderFragment 是怎么做到在 Activity 配置变更导致 Activity 重建的情况下而不销毁呢？<br>玄机就在 <code>setRetainInstance(true)</code> 这里。<br>我们称之为 Fragment 的非中断保存，设置了这个属性的 Fragment 当它依附的 Activity 由于配置变更导致的重建时，该 Fragment 不会销毁。<br>ViewModel 维持它的生命周期正式巧用了 Fragment 的这一特性。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>综合上面的源码分析，我们可以得到下面的结论：</p>
<ul>
<li>ViewModel 的生命周期和 HolderFragment 保持同步。</li>
<li>HolderFragment 持有 ViewModelStore，ViewModelStore 持有 ViewModel，ViewModel 以键值对缓存在 ViewModelStore 的 HashMap 中。</li>
<li>一个 Activity 或者 Fragment 只会有一个HolderFragment。</li>
<li>一个 Activity 或者 Fragment 可以有多个 ViewModel。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      本文介绍 Android 生命周期架构组件 ViewModel 的基本使用
    
    </summary>
    
      <category term="Android 架构" scheme="http://yoursite.com/categories/Android-%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Architecture Components" scheme="http://yoursite.com/tags/Architecture-Components/"/>
    
      <category term="ViewModel" scheme="http://yoursite.com/tags/ViewModel/"/>
    
  </entry>
  
  <entry>
    <title>Android Architecture Components -- LiveData</title>
    <link href="http://yoursite.com/2018/09/16/android-architecture-components-livedata/"/>
    <id>http://yoursite.com/2018/09/16/android-architecture-components-livedata/</id>
    <published>2018-09-16T02:00:00.000Z</published>
    <updated>2018-12-12T01:53:51.171Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>LiveData 也是属于 LifeCycle 库的一个组件。<br>LiveData 是一种具有生命周期感知能力的可观察数据持有类。可以理解为它是一种可观测数据容器，它会在数据变化是通知观测器，以便更新界面。<br>假设有一个UI界面和一个数据对象，这个数据对象保存了你想要在UI界面上显示的的数据，那么这个数据对象就可以用 LiveData 实现，UI界面可以设置为“观察” LiveData 对象。那么界面就可以在数据有更新时收到通知，随后，UI界面就可以使用新数据进行重新绘制。<br>简而言之，LiveData 可以使UI界面上显示的内容和数据随时保持同步。<br>LiveData 对象通常保存在 ViewModel 类中，当然也可以单独使用它，它还可以结合 Room 组件一起使用来监控数据库数据的变化，还可以和 DataBinding 组件一起使用，这个我们后面再介绍。<br>总结起来，LiveData 有一下特点：</p>
<ul>
<li>保证数据与界面的同步更新：LiveData采用了观察者模式设计，其中LiveData是被观察者，当数据发生变化时会通知观察者进行数据更新。通过这点，可以确保数据和界面的实时性。</li>
<li>避免内存泄漏：观察者被绑定在 Lifecycle 对象上，当 Lifecycle 销毁时会自动移除这些观察者。</li>
<li>Activity和Fragment停止活动时不会引起崩溃：当观察者处于非活动状态时，比如Activity或Fragment处在后台时，即使数据有更新，观察者也不会收到数据变化通知。这样可以避免在这个时候更新UI导致Crash。</li>
<li>不需要手动处理生命周期事件：LiveData 时可以感知生命周期的组件，UI 组件仅在活动状态时收到数据更新通知。</li>
<li>始终能够保持最新数据：如果被观察者在非活动状态下有数据更新，那么在转为活动状态时，可以收到最新一次的数据更新通知，以便于来更新界面保持和数据同步。</li>
<li>适应配置的变化：由于数据和组件的分离，当Activity或者Fragment由于配置改变而重新创建，比如旋转屏幕，因为数据是保存在LiveData中，它们可以马上获取到最新的数据。</li>
<li>数据共享：我们可以把LiveData扩展成单例模式，并包装成系统服务，那么就可以在应用程序中共享数据，需要这些数据的观察者只需要观察该LiveData对象即可。</li>
</ul>
<h2 id="LiveData-类介绍"><a href="#LiveData-类介绍" class="headerlink" title="LiveData 类介绍"></a>LiveData 类介绍</h2><p>介绍它的方法的使用：</p>
<ul>
<li>observer：添加观察LiveData数据变化的观察者。会传递一个 LifecycleOwner 对象，当 Lifecycle 处于激活状态时才会通知数据变化，如果不在激活状态，即使数据有变化也不会通知。当 Lifecycle 对象被销毁时， 观察者 observer 会被自动 remove。</li>
<li>onActive：当LiveData有激活状态的观察者时被调用。可以有下面的情况：当调用 observer 使观察者由0变为1时；有设置观察者时，当应用从后台转为前台处于活动状态时。</li>
<li>onInactive：当LiveData没有激活状态的观察者时被调用。可以有下面的情况：当调用 removeObserver 使观察者由1变为0时；有设置观察者时，当应用从前台转为后台处于活动状态时。</li>
<li>setValue：可以更新LiveData对象持有的数据并通知观察LiveData的所有观察者。只能在主线程中调用。</li>
<li>postValue：和 setValue 功能一样，不同的是只能在后台线程中调用。</li>
<li>Observer：观察者，当LiveData数据变化时会调用它的onChanged方法。</li>
</ul>
<p>LiveData 是可以感知生命周期的组件，它可以在多个 Activity、Fragment 中使用，你可以单例的形式来使用它。</p>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">implementation &quot;android.arch.lifecycle:livedata:1.1.1&quot;</div></pre></td></tr></table></figure>
<h3 id="直接使用-LiveData-对象"><a href="#直接使用-LiveData-对象" class="headerlink" title="直接使用 LiveData 对象"></a>直接使用 LiveData 对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">Observer&lt;Integer&gt; observer = new Observer&lt;Integer&gt;() &#123;</div><div class="line">    @Override</div><div class="line">    public void onChanged(@Nullable Integer integer) &#123;</div><div class="line">        Log.e(&quot;Test&quot;,&quot;onChanged &quot;+ integer);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">final MutableLiveData&lt;Integer&gt; liveData = new MutableLiveData&lt;&gt;();</div><div class="line">liveData.observe(this, observer);</div><div class="line"></div><div class="line">Timer timer = new Timer();</div><div class="line">TimerTask task = new TimerTask() &#123;</div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        liveData.postValue(mTime);</div><div class="line">        mTime ++;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">timer.schedule(task, 0, 1000);</div></pre></td></tr></table></figure>
<p>在 Activity 的onCreate 方法中生成一个 LiveData 对象并为它设置观察者对象。<br>用定时器来定时更新LiveData的值。</p>
<h3 id="使用扩展-LiveData-对象"><a href="#使用扩展-LiveData-对象" class="headerlink" title="使用扩展 LiveData 对象"></a>使用扩展 LiveData 对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_room);</div><div class="line"></div><div class="line">        Observer&lt;Integer&gt; observer = new Observer&lt;Integer&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            public void onChanged(@Nullable Integer integer) &#123;</div><div class="line">                Log.e(&quot;Test&quot;,&quot;onChanged &quot;+ integer);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        TimeLiveData.getInstance().observe(this, observer);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">public class TimeLiveData extends LiveData&lt;Integer&gt; &#123;</div><div class="line">    private volatile static TimeLiveData mInstance;</div><div class="line">    private int mTime;</div><div class="line"></div><div class="line">    public static TimeLiveData getInstance() &#123;</div><div class="line">        if (mInstance == null) &#123;</div><div class="line">            synchronized (TimeLiveData.class)&#123;</div><div class="line">                if(mInstance == null) &#123;</div><div class="line">                    mInstance = new TimeLiveData();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return mInstance;</div><div class="line">    &#125;</div><div class="line">    private TimeLiveData() &#123;</div><div class="line">        super();</div><div class="line">        Timer timer = new Timer();</div><div class="line">        TimerTask task = new TimerTask() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                postValue(mTime);</div><div class="line">                mTime ++;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        timer.schedule(task, 0, 1000);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void setValue(Integer value) &#123;</div><div class="line">        super.setValue(value);</div><div class="line">        Log.e(&quot;Test&quot;,&quot;setValue&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onActive() &#123;</div><div class="line">        super.onActive();</div><div class="line">        Log.e(&quot;Test&quot;,&quot;onActive&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onInactive() &#123;</div><div class="line">        super.onInactive();</div><div class="line">        Log.e(&quot;Test&quot;,&quot;onInactive&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>TimeLiveData 对象内用定时器来模拟时间变化。</p>
<h2 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h2><p>类似于 RxJava 的map操作符，LiveData 也可以做数据转换的工作。<br>LifeCycle 提供了 Transformations 工具类的 map 和 switchMap 来实现数据转化：</p>
<ul>
<li>Transformations.map()：提供 LiveData 持有的数据的转换。map 方法返回转换后的一个 LiveData 对象。</li>
<li>Transformations.switchMap()：源 LiveData 持有数据源到目标 LiveData 的转化，switchMap 的 Function 对象的 apply 方法参数为源 LiveData 的数据，返回一个新的 LiveData 对象，switchMap 返回为转换后的 LiveData。</li>
</ul>
<h3 id="Transformations-map"><a href="#Transformations-map" class="headerlink" title="Transformations.map"></a>Transformations.map</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">LiveData&lt;String&gt; liveData1 = Transformations.map(liveData, new Function&lt;Integer, String&gt;() &#123;</div><div class="line">    @Override</div><div class="line">    public String apply(Integer input) &#123;</div><div class="line">        return String.valueOf(input);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">liveData1.observe(this, new Observer&lt;String&gt;() &#123;</div><div class="line">    @Override</div><div class="line">    public void onChanged(@Nullable String s) &#123;</div><div class="line">        Log.e(&quot;Test&quot;,&quot;onChanged1 &quot;+ s);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="Transformations-switchMap"><a href="#Transformations-switchMap" class="headerlink" title="Transformations.switchMap"></a>Transformations.switchMap</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">mMutableLiveData = new MutableLiveData&lt;&gt;();</div><div class="line">LiveData liveData2= Transformations.switchMap(liveData, new Function&lt;Integer, LiveData&lt;String&gt;&gt;() &#123;</div><div class="line">    @Override</div><div class="line">    public LiveData&lt;String&gt; apply(Integer input) &#123;</div><div class="line">        mMutableLiveData.setValue(String.valueOf(input));</div><div class="line">        return mMutableLiveData;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">liveData2.observe(this, new Observer&lt;String&gt;() &#123;</div><div class="line">    @Override</div><div class="line">    public void onChanged(@Nullable String s) &#123;</div><div class="line">        Log.e(&quot;Test&quot;,&quot;onChanged2 &quot;+ s);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="和-Room-结合"><a href="#和-Room-结合" class="headerlink" title="和 Room 结合"></a>和 Room 结合</h2><p>Room 的使用可以参考前面的博客<a href="http://www.heqiangfly.com/2017/12/02/android-architecture-components-room/" target="_blank" rel="external">Android Architecture Components – Room </a>。<br>我们现在在前面的基础上结合 LiveData 来监听数据的更新。<br>Room 支持查询对象返回 LiveData 对象，这样我们就可以创建对该 LiveData 对象的监听，当更新数据库时，观察者会收到数据的更新的通知，这时我们就可以进行更新界面操作。</p>
<h3 id="LiveData-结合-Room-实践"><a href="#LiveData-结合-Room-实践" class="headerlink" title="LiveData 结合 Room 实践"></a>LiveData 结合 Room 实践</h3><p>在数据访问对象 UserDao 中添加添加下面的方法，返回一个 LiveData 对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@Dao</div><div class="line">public interface UserDao &#123;</div><div class="line">    ......</div><div class="line"></div><div class="line">    @Query(&quot;SELECT * FROM user&quot;)</div><div class="line">    LiveData&lt;List&lt;User&gt;&gt; getAllData();</div><div class="line"></div><div class="line">    ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后注册监听：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">DBManager.getInstance(RoomActivity.this).getAllData().observe(RoomActivity.this, new Observer&lt;List&lt;User&gt;&gt;() &#123;</div><div class="line">    @Override</div><div class="line">    public void onChanged(@Nullable List&lt;User&gt; users) &#123;</div><div class="line">        for( User user : users) &#123;</div><div class="line">            Log.e(&quot;Test&quot;, &quot;getDatas: &quot;+ user.getFirstName()+&quot;, &quot;+user.getLastName());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>后面当数据库有数据更新时就可以收到通知了。</p>
<h2 id="和-RxJava-区别"><a href="#和-RxJava-区别" class="headerlink" title="和 RxJava 区别"></a>和 RxJava 区别</h2><p>LiveData 与 RxJava 都是基于观察者模式, 功能上也有重合, Google 在官方文档上也明确表示, 如果你正在使用 RxJava, Agera 等类似功能的库, 只要你能正确的处理数据流的生命周期, 就完全可以继续使用它们来替代 LiveData。</p>
<h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><h3 id="注册监听"><a href="#注册监听" class="headerlink" title="注册监听"></a>注册监听</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">@MainThread</div><div class="line">public void observe(@NonNull LifecycleOwner owner, @NonNull Observer&lt;T&gt; observer) &#123;</div><div class="line">    if (owner.getLifecycle().getCurrentState() == DESTROYED) &#123;</div><div class="line">        // ignore</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    // 实例化LifecycleBoundObserver，它继承 ObserverWrapper 并实现 GenericLifecycleObserver</div><div class="line">    LifecycleBoundObserver wrapper = new LifecycleBoundObserver(owner, observer);</div><div class="line">    // 将Observer放入mObservers列表</div><div class="line">    ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);</div><div class="line">    if (existing != null &amp;&amp; !existing.isAttachedTo(owner)) &#123;</div><div class="line">        throw new IllegalArgumentException(&quot;Cannot add the same observer&quot;</div><div class="line">                + &quot; with different lifecycles&quot;);</div><div class="line">    &#125;</div><div class="line">    if (existing != null) &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    // 这册 LifeCycle 监听</div><div class="line">    owner.getLifecycle().addObserver(wrapper);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到 observe 主要做了两件事情：</p>
<ul>
<li>把数据观察者放到观察者列表中</li>
<li>注册 LifeCycle 监听，前面说 LiveData 可以感知生命周期变化，就是通过它来实现的。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@MainThread</div><div class="line">public void removeObserver(@NonNull final Observer&lt;T&gt; observer) &#123;</div><div class="line">    assertMainThread(&quot;removeObserver&quot;);</div><div class="line">    ObserverWrapper removed = mObservers.remove(observer);</div><div class="line">    if (removed == null) &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    // 删除LifeCycle监听</div><div class="line">    removed.detachObserver();</div><div class="line">    // 看是否需要调用 onInactive，如果此时观察者数量为0，则调用 onInactive</div><div class="line">    removed.activeStateChanged(false);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="onChange-数据变化通知"><a href="#onChange-数据变化通知" class="headerlink" title="onChange 数据变化通知"></a>onChange 数据变化通知</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">├── LiveData.setValue</div><div class="line">    └── LiveData.dispatchingValue(ObserverWrapper observer)</div><div class="line">        └── Observer.onChanged</div></pre></td></tr></table></figure>
<p>观察者模式，不多解释。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">private void considerNotify(ObserverWrapper observer) &#123;</div><div class="line">    // 如果观察者已经处于非活动状态，直接返回</div><div class="line">    if (!observer.mActive) &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    // Check latest state b4 dispatch. Maybe it changed state but we didn&apos;t get the event yet.</div><div class="line">    //</div><div class="line">    // we still first check observer.active to keep it as the entrance for events. So even if</div><div class="line">    // the observer moved to an active state, if we&apos;ve not received that event, we better not</div><div class="line">    // notify for a more predictable notification order.</div><div class="line">    // 如果观察者此次为非活动状态，尝试上报 onInactive</div><div class="line">    if (!observer.shouldBeActive()) &#123;</div><div class="line">        observer.activeStateChanged(false);</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    if (observer.mLastVersion &gt;= mVersion) &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    observer.mLastVersion = mVersion;</div><div class="line">    //noinspection unchecked</div><div class="line">    observer.mObserver.onChanged((T) mData);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="onActive-和-onInactive-通知"><a href="#onActive-和-onInactive-通知" class="headerlink" title="onActive 和 onInactive 通知"></a>onActive 和 onInactive 通知</h3><p>先来看一下 LifecycleBoundObserver.onStateChanged 方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void onStateChanged(LifecycleOwner source, Lifecycle.Event event) &#123;</div><div class="line">    // 当 LifeCycle 对象销毁时，清除Observer</div><div class="line">    if (mOwner.getLifecycle().getCurrentState() == DESTROYED) &#123;</div><div class="line">        removeObserver(mObserver);</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    activeStateChanged(shouldBeActive());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">boolean shouldBeActive() &#123;</div><div class="line">    return mOwner.getLifecycle().getCurrentState().isAtLeast(STARTED);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>必须时 STARTED 或者 RESUMED 状态，shouldBeActive() 才会返回true。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">void activeStateChanged(boolean newActive) &#123;</div><div class="line">    if (newActive == mActive) &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    // immediately set active state, so we&apos;d never dispatch anything to inactive</div><div class="line">    // owner</div><div class="line">    mActive = newActive;</div><div class="line">    boolean wasInactive = LiveData.this.mActiveCount == 0;</div><div class="line">    LiveData.this.mActiveCount += mActive ? 1 : -1;</div><div class="line">    // 从非活动状态转为活动状态时调用 onActive</div><div class="line">    if (wasInactive &amp;&amp; mActive) &#123;</div><div class="line">        onActive();</div><div class="line">    &#125;</div><div class="line">    // 从活动状态转为非活动状态时调用 onInactive</div><div class="line">    if (LiveData.this.mActiveCount == 0 &amp;&amp; !mActive) &#123;</div><div class="line">        onInactive();</div><div class="line">    &#125;</div><div class="line">    // 活动状态时发送数据更新事件</div><div class="line">    if (mActive) &#123;</div><div class="line">        dispatchingValue(this);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      本文介绍 Android 生命周期架构组件 LiveData 的基本使用
    
    </summary>
    
      <category term="Android 架构" scheme="http://yoursite.com/categories/Android-%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Architecture Components" scheme="http://yoursite.com/tags/Architecture-Components/"/>
    
      <category term="LiveData" scheme="http://yoursite.com/tags/LiveData/"/>
    
  </entry>
  
  <entry>
    <title>Android Architecture Components -- LifeCycle</title>
    <link href="http://yoursite.com/2018/09/10/android-architecture-components-lifecycle/"/>
    <id>http://yoursite.com/2018/09/10/android-architecture-components-lifecycle/</id>
    <published>2018-09-10T02:00:00.000Z</published>
    <updated>2018-12-12T01:56:43.882Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><a href="https://developer.android.com/topic/libraries/architecture/lifecycle#java" target="_blank" rel="external">LifeCycle 官方文档</a><br>Google 提供的Android Architecture Components中包含了 LifeCycle，Lifecycle 实现的一个重要目的，是实现 Android 中与 Activity 和 Fragment 生命周期相关的逻辑控制进一步的解耦。<br>以前我们写和 Android 生命周期相关的逻辑时，会把相关的代码放在对应的生命周期方法中。这样做的后果时生命周期的代码很臃肿，耦合程度很高。比如在前面介绍的<a href="http://www.heqiangfly.com/2017/09/06/android-architecture-google-mvp-basic/" target="_blank" rel="external">Android 架构 android-architecture 之 todo-mvp 介绍 </a>中需要在 Presenter 中实现生命周期逻辑时是这样做的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class TaskDetailFragment extends Fragment implements TaskDetailContract.View &#123;</div><div class="line">    ......</div><div class="line">    @Override</div><div class="line">    public void onResume() &#123;</div><div class="line">        super.onResume();</div><div class="line">        mPresenter.subscribe();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onPause() &#123;</div><div class="line">        super.onPause();</div><div class="line">        mPresenter.unsubscribe();</div><div class="line">    &#125;</div><div class="line">    ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>LifeCycle 它可以有效避免内存泄漏和解决 Android 生命周期的常见难题。LifeCycle 已经更新到 2.0 版，现已纳入 Jetpack 并包含数据绑定库的新集成。<br>LifeCycle 组件也是 LiveData 和 ViewModel 的基础组件。LifeCycle 简单独立，可以单独使用，也可以配合上述组件使用。</p>
<ul>
<li>LifeCycleOwner：Lifecycle 持有者，LifecycleOwner 时一个接口，它仅有一个方法 <code>getLifecycle()</code> 用来表明它持有Lifecycle 对象。它一般是具有生命周期的 Activity 或者 Fragment 组件。</li>
<li>LifecycleObserver：Lifecycle 的观察者，当它通过 Lifecycle 的 <code>addObserver</code> 方法注册后，它便可以观察 LifeCycleOwner 的生命周期事件。</li>
<li>State：生命周期状态，当 LifeCycleOwner 生命周期状态改变时，LifecycleRegistry 通过 <code>markState</code> 方法标记 Lifecycle 进入的状态，并向 LifecycleObserver 分发消息。</li>
<li>Event：生命周期事件，可以在LifecycleObserver中通过注解标记接受某个生命周期状态的方法。</li>
</ul>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>Lifecycle 已经是稳定版，它包含在support library 26.1.0 及之后的依赖包中，如果我们的项目基于这些依赖包，那么不需要额外的引用。如果是之前的版本，则要额外添加 LifeCycle 的依赖。<br>LifeCycle 是 ViewModel 和 LiveData 的基础构件，它们的依赖包中也都包含 Lifecycle。</p>
<h3 id="实现-LifecycleOwner"><a href="#实现-LifecycleOwner" class="headerlink" title="实现 LifecycleOwner"></a>实现 LifecycleOwner</h3><h4 id="26-1-0之前的AppCompatActivity"><a href="#26-1-0之前的AppCompatActivity" class="headerlink" title="26.1.0之前的AppCompatActivity"></a>26.1.0之前的AppCompatActivity</h4><p>添加依赖：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">implementation &quot;android.arch.lifecycle:runtime:1.1.1&quot;</div></pre></td></tr></table></figure>
<p>添加 LifecycleOwner：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity implements LifecycleOwner&#123;</div><div class="line">    private LifecycleRegistry mLifecycleRegistry;</div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        mLifecycleRegistry = new LifecycleRegistry(this);</div><div class="line">        mLifecycleRegistry.addObserver(new MyObserver());</div><div class="line">        mLifecycleRegistry.markState(Lifecycle.State.CREATED);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    @NonNull</div><div class="line">    @Override</div><div class="line">    public Lifecycle getLifecycle() &#123;</div><div class="line">        return mLifecycleRegistry;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onStart() &#123;</div><div class="line">        super.onStart();</div><div class="line">        mLifecycleRegistry.markState(Lifecycle.State.STARTED);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onResume() &#123;</div><div class="line">        super.onResume();</div><div class="line">        mLifecycleRegistry.markState(Lifecycle.State.RESUMED);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //...... 省略其他生命周期方法</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现LifecycleObserver接口，参考下节。</p>
<h4 id="26-1-0和之后的AppCompatActivity"><a href="#26-1-0和之后的AppCompatActivity" class="headerlink" title="26.1.0和之后的AppCompatActivity"></a>26.1.0和之后的AppCompatActivity</h4><p>26.1.0以及以后的 <code>AppCompatActivity</code> 类的父类已经实现了 <code>LifecycleOwner</code> 接口。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">public class SupportActivity extends Activity implements LifecycleOwner &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class RoomActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_room);</div><div class="line">        getLifecycle().addObserver(new MyObserver());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现LifecycleObserver接口，参考下节。</p>
<h3 id="实现-LifecycleObserver"><a href="#实现-LifecycleObserver" class="headerlink" title="实现 LifecycleObserver"></a>实现 LifecycleObserver</h3><p>关于实现 LifecycleObserver 我们介绍下面两种方法：</p>
<ul>
<li>一个是直接实现 LifecycleObserver 接口，然后通过为方法添加注解的方式来接收生命周期变化的事件。</li>
<li>一个是实现 DefaultLifecycleObserver 接口，重写我们感兴趣的生命回调周期方法。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class MyObserver implements LifecycleObserver &#123;</div><div class="line">    private final static String TAG = &quot;MyObserver&quot;;</div><div class="line">    @OnLifecycleEvent(Lifecycle.Event.ON_CREATE)</div><div class="line">    public void onCreate()&#123;</div><div class="line">        Log.e(TAG,&quot;MyObserver onCreate&quot;);</div><div class="line">    &#125;</div><div class="line">    @OnLifecycleEvent(Lifecycle.Event.ON_RESUME)</div><div class="line">    public void onResume()&#123;</div><div class="line">        Log.e(TAG,&quot;MyObserver onResume&quot;);</div><div class="line">    &#125;</div><div class="line">    @OnLifecycleEvent(Lifecycle.Event.ON_START)</div><div class="line">    public void onStart()&#123;</div><div class="line">        Log.e(TAG,&quot;MyObserver onStart&quot;);</div><div class="line">    &#125;</div><div class="line">    @OnLifecycleEvent(Lifecycle.Event.ON_PAUSE)</div><div class="line">    public void onPause()&#123;</div><div class="line">        Log.e(TAG,&quot;MyObserver onPause&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 省略其他声明周期方法</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>要想使用 DefaultLifecycleObserver 需要添加下面的支持 java8 的依赖：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">implementation &apos;android.arch.lifecycle:common-java8:1.1.1&apos;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">public class MyObserver implements DefaultLifecycleObserver &#123;</div><div class="line">    @Override</div><div class="line">    public void onCreate(@NonNull LifecycleOwner owner) &#123;</div><div class="line">        Log.e(&quot;Test&quot;,&quot;onCreate&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onStart(@NonNull LifecycleOwner owner) &#123;</div><div class="line">        Log.e(&quot;Test&quot;,&quot;onStart&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onResume(@NonNull LifecycleOwner owner) &#123;</div><div class="line">        Log.e(&quot;Test&quot;,&quot;onResume&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onPause(@NonNull LifecycleOwner owner) &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onStop(@NonNull LifecycleOwner owner) &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onDestroy(@NonNull LifecycleOwner owner) &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>DefaultLifecycleObserver 类中的文档提到，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Callback interface for listening to &#123;@link LifecycleOwner&#125; state changes.</div><div class="line"> * &lt;p&gt;</div><div class="line"> * If you use Java 8 language, &lt;b&gt;always&lt;/b&gt; prefer it over annotations.</div><div class="line"> */</div></pre></td></tr></table></figure>
<p>如果你使用了 Java8，那么就推荐使用 DefaultLifecycleObserver。</p>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>顺便瞅瞅源码是如何实现的。</p>
<h3 id="生命周期方法注册"><a href="#生命周期方法注册" class="headerlink" title="生命周期方法注册"></a>生命周期方法注册</h3><p>LifecycleObserver 的注册是通过 LifecycleRegistry 来完成的， 它实现了 Lifecycle 接口，并持有了 LifecycleOwner 的一个弱引用，可以避免导致 Fragment / Activity 的内存泄漏。</p>
<p>主要来看一下 LifecycleRegistry.addObserver 方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">public void addObserver(@NonNull LifecycleObserver observer) &#123;</div><div class="line">    State initialState = mState == DESTROYED ? DESTROYED : INITIALIZED;</div><div class="line">    // 生成一个 ObserverWithState 对象</div><div class="line">    ObserverWithState statefulObserver = new ObserverWithState(observer, initialState);</div><div class="line">    // 把 ObserverWithState 对象放到 mObserverMap中，由此可见，可以注册多个 LifecycleObserver</div><div class="line">    ObserverWithState previous = mObserverMap.putIfAbsent(observer, statefulObserver);</div><div class="line"></div><div class="line">    if (previous != null) &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    LifecycleOwner lifecycleOwner = mLifecycleOwner.get();</div><div class="line">    if (lifecycleOwner == null) &#123;</div><div class="line">        // it is null we should be destroyed. Fallback quickly</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    boolean isReentrance = mAddingObserverCounter != 0 || mHandlingEvent;</div><div class="line">    // 这里是看看有没有未分发的事件</div><div class="line">    // 如果 addObserver 用在 markState 之后，那么就存在未分发的事件</div><div class="line">    State targetState = calculateTargetState(observer);</div><div class="line">    mAddingObserverCounter++;</div><div class="line">    while ((statefulObserver.mState.compareTo(targetState) &lt; 0</div><div class="line">            &amp;&amp; mObserverMap.contains(observer))) &#123;</div><div class="line">        pushParentState(statefulObserver.mState);</div><div class="line">        statefulObserver.dispatchEvent(lifecycleOwner, upEvent(statefulObserver.mState));</div><div class="line">        popParentState();</div><div class="line">        // mState / subling may have been changed recalculate</div><div class="line">        targetState = calculateTargetState(observer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if (!isReentrance) &#123;</div><div class="line">        // we do sync only on the top level.</div><div class="line">        sync();</div><div class="line">    &#125;</div><div class="line">    mAddingObserverCounter--;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ObserverWithState 封装了 State 和 GenericLifecycleObserver，后面事件的分发是通过 GenericLifecycleObserver 来进行的。GenericLifecycleObserver 同样实现了 LifecycleObserver 并增加了一个方法 onStateChanged。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">static class ObserverWithState &#123;</div><div class="line">    State mState;</div><div class="line">    GenericLifecycleObserver mLifecycleObserver;</div><div class="line"></div><div class="line">    ObserverWithState(LifecycleObserver observer, State initialState) &#123;</div><div class="line">        // 根据 LifecycleObserver 生成 GenericLifecycleObserver 对象</div><div class="line">        mLifecycleObserver = Lifecycling.getCallback(observer);</div><div class="line">        mState = initialState;</div><div class="line">    &#125;</div><div class="line">    // 触发生命周期回调时会走这个方法</div><div class="line">    void dispatchEvent(LifecycleOwner owner, Event event) &#123;</div><div class="line">        State newState = getStateAfter(event);</div><div class="line">        mState = min(mState, newState);</div><div class="line">        mLifecycleObserver.onStateChanged(owner, event);</div><div class="line">        mState = newState;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>来看一下 Lifecycling.getCallback 方法，这个方法的作用就是根据 LifecycleObserver 的不同实现来生成不同的事件分发方法，比如我们前面介绍的可以直接实现 LifecycleObserver 或者是 实现 DefaultLifecycleObserver。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">static GenericLifecycleObserver getCallback(Object object) &#123;</div><div class="line">    // DefaultLifecycleObserver 继承了 DefaultLifecycleObserver</div><div class="line">    // 如果 LifecycleObserver 继承 DefaultLifecycleObserver 那么就</div><div class="line">    // 返回 FullLifecycleObserverAdapter</div><div class="line">    if (object instanceof FullLifecycleObserver) &#123;</div><div class="line">        return new FullLifecycleObserverAdapter((FullLifecycleObserver) object);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if (object instanceof GenericLifecycleObserver) &#123;</div><div class="line">        return (GenericLifecycleObserver) object;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    final Class&lt;?&gt; klass = object.getClass();</div><div class="line">    int type = getObserverConstructorType(klass);</div><div class="line">    if (type == GENERATED_CALLBACK) &#123;</div><div class="line">        List&lt;Constructor&lt;? extends GeneratedAdapter&gt;&gt; constructors =</div><div class="line">                sClassToAdapters.get(klass);</div><div class="line">        if (constructors.size() == 1) &#123;</div><div class="line">            GeneratedAdapter generatedAdapter = createGeneratedAdapter(</div><div class="line">                    constructors.get(0), object);</div><div class="line">            return new SingleGeneratedAdapterObserver(generatedAdapter);</div><div class="line">        &#125;</div><div class="line">        GeneratedAdapter[] adapters = new GeneratedAdapter[constructors.size()];</div><div class="line">        for (int i = 0; i &lt; constructors.size(); i++) &#123;</div><div class="line">            adapters[i] = createGeneratedAdapter(constructors.get(i), object);</div><div class="line">        &#125;</div><div class="line">        return new CompositeGeneratedAdaptersObserver(adapters);</div><div class="line">    &#125;</div><div class="line">    // 如果直接继承 LifecycleObserver 通过注解方式注册生命周期回调方法</div><div class="line">    // 就返回 ReflectiveGenericLifecycleObserver</div><div class="line">    return new ReflectiveGenericLifecycleObserver(object);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="生命周期状态分发"><a href="#生命周期状态分发" class="headerlink" title="生命周期状态分发"></a>生命周期状态分发</h3><p>先来看一下事件分发流程的初始流程，因为如果 LifecycleOwner 的使用方式不一样，初始流程也是不一样的。<br>先来看使用 26.1.0和之后的AppCompatActivity的情况：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">├── ReportFragment.ReportFragment</div><div class="line">    └── LifecycleRegistry.handleLifecycleEvent</div><div class="line">        └── LifecycleRegistry.sync()</div></pre></td></tr></table></figure>
<p>使用 26.1.0 之后Activity实现LifecycleOwner的情况：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">├── LifecycleRegistry.markState</div><div class="line">    └── LifecycleRegistry.moveToState</div><div class="line">        └── LifecycleRegistry.sync()</div></pre></td></tr></table></figure>
<p>这里没什么好介绍的，大家自行了解即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">private void forwardPass(LifecycleOwner lifecycleOwner) &#123;</div><div class="line">    Iterator&lt;Entry&lt;LifecycleObserver, ObserverWithState&gt;&gt; ascendingIterator =</div><div class="line">            mObserverMap.iteratorWithAdditions();</div><div class="line">    while (ascendingIterator.hasNext() &amp;&amp; !mNewEventOccurred) &#123;</div><div class="line">        Entry&lt;LifecycleObserver, ObserverWithState&gt; entry = ascendingIterator.next();</div><div class="line">        ObserverWithState observer = entry.getValue();</div><div class="line">        while ((observer.mState.compareTo(mState) &lt; 0 &amp;&amp; !mNewEventOccurred</div><div class="line">                &amp;&amp; mObserverMap.contains(entry.getKey()))) &#123;</div><div class="line">            pushParentState(observer.mState);</div><div class="line">            observer.dispatchEvent(lifecycleOwner, upEvent(observer.mState));</div><div class="line">            popParentState();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实事件的分发主要就是 ObserverWithState.dispatchEvent 的调用，然后调用生成的 GenericLifecycleObserver 对象的 onStateChanged 方法。</p>
<h4 id="ReflectiveGenericLifecycleObserver-onStateChanged"><a href="#ReflectiveGenericLifecycleObserver-onStateChanged" class="headerlink" title="ReflectiveGenericLifecycleObserver.onStateChanged"></a>ReflectiveGenericLifecycleObserver.onStateChanged</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class ReflectiveGenericLifecycleObserver implements GenericLifecycleObserver &#123;</div><div class="line">    private final Object mWrapped;</div><div class="line">    private final CallbackInfo mInfo;</div><div class="line"></div><div class="line">    ReflectiveGenericLifecycleObserver(Object wrapped) &#123;</div><div class="line">        mWrapped = wrapped;</div><div class="line">        mInfo = ClassesInfoCache.sInstance.getInfo(mWrapped.getClass());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onStateChanged(LifecycleOwner source, Event event) &#123;</div><div class="line">        mInfo.invokeCallbacks(source, event, mWrapped);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在添加 LifecycleObserver 时会根据 LifecycleObserver 对象生成 ReflectiveGenericLifecycleObserver，根据 LifecycleObserver 生成一个 CallbackInfo 对象。<br>CallbackInfo 保存了添加了 OnLifecycleEvent 注解的方法以及它对应的生命周期事件。<br>分发事件通过 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">void invokeCallbacks(LifecycleOwner source, Lifecycle.Event event, Object target) &#123;</div><div class="line">    invokeMethodsForEvent(mEventToHandlers.get(event), source, event, target);</div><div class="line">    invokeMethodsForEvent(mEventToHandlers.get(Lifecycle.Event.ON_ANY), source, event,</div><div class="line">            target);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过反射来调用注册的回调方法。</p>
<h4 id="FullLifecycleObserverAdapter-onStateChanged"><a href="#FullLifecycleObserverAdapter-onStateChanged" class="headerlink" title="FullLifecycleObserverAdapter.onStateChanged"></a>FullLifecycleObserverAdapter.onStateChanged</h4><p>这个方法其实很简单，就是直接调用 FullLifecycleObserver 的几个生命周期回调方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public void onStateChanged(LifecycleOwner source, Lifecycle.Event event) &#123;</div><div class="line">    switch (event) &#123;</div><div class="line">        case ON_CREATE:</div><div class="line">            mObserver.onCreate(source);</div><div class="line">            break;</div><div class="line">        case ON_START:</div><div class="line">            mObserver.onStart(source);</div><div class="line">            break;</div><div class="line">        case ON_RESUME:</div><div class="line">            mObserver.onResume(source);</div><div class="line">            break;</div><div class="line">        case ON_PAUSE:</div><div class="line">            mObserver.onPause(source);</div><div class="line">            break;</div><div class="line">        case ON_STOP:</div><div class="line">            mObserver.onStop(source);</div><div class="line">            break;</div><div class="line">        case ON_DESTROY:</div><div class="line">            mObserver.onDestroy(source);</div><div class="line">            break;</div><div class="line">        case ON_ANY:</div><div class="line">            throw new IllegalArgumentException(&quot;ON_ANY must not been send by anybody&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      本文介绍 Android 生命周期架构组件 LifeCycle 的基本使用
    
    </summary>
    
      <category term="Android 架构" scheme="http://yoursite.com/categories/Android-%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Architecture Components" scheme="http://yoursite.com/tags/Architecture-Components/"/>
    
      <category term="LifeCycle" scheme="http://yoursite.com/tags/LifeCycle/"/>
    
  </entry>
  
  <entry>
    <title>Android JetPack</title>
    <link href="http://yoursite.com/2018/09/02/android-architecture-components-jetpack/"/>
    <id>http://yoursite.com/2018/09/02/android-architecture-components-jetpack/</id>
    <published>2018-09-02T02:00:00.000Z</published>
    <updated>2018-12-31T13:43:51.360Z</updated>
    
    <content type="html"><![CDATA[<p>相关博客：<br><a href="http://www.heqiangfly.com/2017/12/02/android-architecture-components-room/" target="_blank" rel="external">Android Architecture Components – Room</a><br><a href="http://www.heqiangfly.com/2018/09/10/android-architecture-components-lifecycle/" target="_blank" rel="external">Android Architecture Components – LifeCycle</a><br><a href="http://www.heqiangfly.com/2018/09/16/android-architecture-components-livedata/" target="_blank" rel="external">Android Architecture Components – LiveData</a><br><a href="http://www.heqiangfly.com/2018/09/20/android-architecture-components-viewmodel/" target="_blank" rel="external">Android Architecture Components – ViewModel </a></p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Google 在 2018 Google I/O 大会上推出了 Android Jetpack，它包含了开发库、工具以及最佳实践指南。<br>Jetpack 是背包式飞行器的意思，是一种小巧的个人飞行器。顾名思义，通过使用Android  Jetpack 这套组件，可以帮助开发者更高效、更容易地构建优秀的应用。为此，Android 官方团队也把 Jetpack 的Logo 设计成了一个背着火箭的小机器人。<br>除了在 2018 Google I/O 大会上新添加的功能外，它还把以前退出的一些功能囊括其中，比如 Architecture Components 等。并且，Android 团队将继续在Android平台上为 Jetpack 添加新的功能。<br>下面来看一下 Jetpack 包含了哪些功能，下图会随着 Jetpack 功能的更新保持同步更新：</p>
<p><img src="https://raw.githubusercontent.com/googlesamples/android-sunflower/master/screenshots/jetpack_donut.png" alt="效果图"></p>
<p>接下来也会通过一系列的博客来介绍 Jetpack 的使用。<br>先来看一下 Jetpack 中的架构组件，这些组件关联使用将更能发挥它的作用，我们将采取循序渐进，由浅入深的方式来逐步介绍这些组件的使用。<br>Google 官方Demo源码：<br><a href="https://github.com/googlecodelabs/android-lifecycles" target="_blank" rel="external">https://github.com/googlecodelabs/android-lifecycles</a><br><a href="https://github.com/googlesamples/android-architecture-components" target="_blank" rel="external">https://github.com/googlesamples/android-architecture-components</a><br><a href="https://github.com/googlesamples/android-sunflower" target="_blank" rel="external">https://github.com/googlesamples/android-sunflower</a></p>
<h2 id="关于AndroidX"><a href="#关于AndroidX" class="headerlink" title="关于AndroidX"></a>关于AndroidX</h2><p>先来个插曲介绍一下 AndroidX，后面 Android 会把 support 库放到 AndroidX 中，仅仅会改变包名和 Maven 库的名字，类的名字不会改变。</p>
<h2 id="添加依赖汇总"><a href="#添加依赖汇总" class="headerlink" title="添加依赖汇总"></a>添加依赖汇总</h2><p><a href="https://developer.android.google.cn/topic/libraries/architecture/adding-components" target="_blank" rel="external">官方文档</a></p>
<h3 id="添加-Google-Maven-仓库"><a href="#添加-Google-Maven-仓库" class="headerlink" title="添加 Google Maven 仓库"></a>添加 Google Maven 仓库</h3><p>在project下的build.gradle中添加Maven仓库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">        google()//添加Google Maven仓库</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><h4 id="LifeCycle"><a href="#LifeCycle" class="headerlink" title="LifeCycle"></a>LifeCycle</h4><p>包含 LiveData 和 ViewModel 的依赖。</p>
<h5 id="Android-X"><a href="#Android-X" class="headerlink" title="Android X"></a>Android X</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    def lifecycle_version = &quot;2.0.0&quot;</div><div class="line"></div><div class="line">    // ViewModel and LiveData</div><div class="line">    implementation &quot;androidx.lifecycle:lifecycle-extensions:$lifecycle_version&quot;</div><div class="line">    // alternatively - just ViewModel</div><div class="line">    implementation &quot;androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version&quot; // use -ktx for Kotlin</div><div class="line">    // alternatively - just LiveData</div><div class="line">    implementation &quot;androidx.lifecycle:lifecycle-livedata:$lifecycle_version&quot;</div><div class="line">    // alternatively - Lifecycles only (no ViewModel or LiveData). Some UI</div><div class="line">    //     AndroidX libraries use this lightweight import for Lifecycle</div><div class="line">    implementation &quot;androidx.lifecycle:lifecycle-runtime:$lifecycle_version&quot;</div><div class="line"></div><div class="line">    annotationProcessor &quot;androidx.lifecycle:lifecycle-compiler:$lifecycle_version&quot; // use kapt for Kotlin</div><div class="line">    // alternately - if using Java8, use the following instead of lifecycle-compiler</div><div class="line">    implementation &quot;androidx.lifecycle:lifecycle-common-java8:$lifecycle_version&quot;</div><div class="line"></div><div class="line">    // optional - ReactiveStreams support for LiveData</div><div class="line">    implementation &quot;androidx.lifecycle:lifecycle-reactivestreams:$lifecycle_version&quot; // use -ktx for Kotlin</div><div class="line"></div><div class="line">    // optional - Test helpers for LiveData</div><div class="line">    testImplementation &quot;androidx.arch.core:core-testing:$lifecycle_version&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="AndroidX-之前版本"><a href="#AndroidX-之前版本" class="headerlink" title="AndroidX 之前版本"></a>AndroidX 之前版本</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    def lifecycle_version = &quot;1.1.1&quot;</div><div class="line"></div><div class="line">    // ViewModel and LiveData</div><div class="line">    implementation &quot;android.arch.lifecycle:extensions:$lifecycle_version&quot;</div><div class="line">    // alternatively - just ViewModel</div><div class="line">    implementation &quot;android.arch.lifecycle:viewmodel:$lifecycle_version&quot; // use -ktx for Kotlin</div><div class="line">    // alternatively - just LiveData</div><div class="line">    implementation &quot;android.arch.lifecycle:livedata:$lifecycle_version&quot;</div><div class="line">    // alternatively - Lifecycles only (no ViewModel or LiveData).</div><div class="line">    //     Support library depends on this lightweight import</div><div class="line">    implementation &quot;android.arch.lifecycle:runtime:$lifecycle_version&quot;</div><div class="line"></div><div class="line">    annotationProcessor &quot;android.arch.lifecycle:compiler:$lifecycle_version&quot; // use kapt for Kotlin</div><div class="line">    // alternately - if using Java8, use the following instead of compiler</div><div class="line">    // 比如你想使用 DefaultLifecycleObserver 就要依赖 java8</div><div class="line">    implementation &quot;android.arch.lifecycle:common-java8:$lifecycle_version&quot;</div><div class="line"></div><div class="line">    // optional - ReactiveStreams support for LiveData</div><div class="line">    implementation &quot;android.arch.lifecycle:reactivestreams:$lifecycle_version&quot;</div><div class="line"></div><div class="line">    // optional - Test helpers for LiveData</div><div class="line">    testImplementation &quot;android.arch.core:core-testing:$lifecycle_version&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Room"><a href="#Room" class="headerlink" title="Room"></a>Room</h4><h5 id="AndroidX"><a href="#AndroidX" class="headerlink" title="AndroidX"></a>AndroidX</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    def room_version = &quot;2.1.0-alpha03&quot;</div><div class="line"></div><div class="line">    implementation &quot;androidx.room:room-runtime:$room_version&quot;</div><div class="line">    annotationProcessor &quot;androidx.room:room-compiler:$room_version&quot; // use kapt for Kotlin</div><div class="line"></div><div class="line">    // optional - RxJava support for Room</div><div class="line">    implementation &quot;androidx.room:room-rxjava2:$room_version&quot;</div><div class="line"></div><div class="line">    // optional - Guava support for Room, including Optional and ListenableFuture</div><div class="line">    implementation &quot;androidx.room:room-guava:$room_version&quot;</div><div class="line"></div><div class="line">    // optional - Coroutines support for Room</div><div class="line">    implementation &quot;androidx.room:room-coroutines:$room_version&quot;</div><div class="line"></div><div class="line">    // Test helpers</div><div class="line">    testImplementation &quot;androidx.room:room-testing:$room_version&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="AndroidX-之前版本-1"><a href="#AndroidX-之前版本-1" class="headerlink" title="AndroidX 之前版本"></a>AndroidX 之前版本</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    def room_version = &quot;1.1.1&quot;</div><div class="line"></div><div class="line">    implementation &quot;android.arch.persistence.room:runtime:$room_version&quot;</div><div class="line">    annotationProcessor &quot;android.arch.persistence.room:compiler:$room_version&quot; // use kapt for Kotlin</div><div class="line"></div><div class="line">    // optional - RxJava support for Room</div><div class="line">    implementation &quot;android.arch.persistence.room:rxjava2:$room_version&quot;</div><div class="line"></div><div class="line">    // optional - Guava support for Room, including Optional and ListenableFuture</div><div class="line">    implementation &quot;android.arch.persistence.room:guava:$room_version&quot;</div><div class="line"></div><div class="line">    // Test helpers</div><div class="line">    testImplementation &quot;android.arch.persistence.room:testing:$room_version&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    // ViewModel and LiveData</div><div class="line">    implementation &quot;android.arch.lifecycle:extensions:1.1.1&quot;</div><div class="line">    // alternatively, just ViewModel</div><div class="line">    implementation &quot;android.arch.lifecycle:viewmodel:1.1.1&quot;</div><div class="line">    // alternatively, just LiveData</div><div class="line">    implementation &quot;android.arch.lifecycle:livedata:1.1.1&quot;</div><div class="line"> </div><div class="line">    annotationProcessor &quot;android.arch.lifecycle:compiler:1.1.1&quot;</div><div class="line"> </div><div class="line">    // Room (use 1.1.0-beta3 for latest beta)</div><div class="line">    implementation &quot;android.arch.persistence.room:runtime:1.0.0&quot;</div><div class="line">    annotationProcessor &quot;android.arch.persistence.room:compiler:1.0.0&quot;</div><div class="line"> </div><div class="line">    // Paging</div><div class="line">    implementation &quot;android.arch.paging:runtime:1.0.0-rc1&quot;</div><div class="line"> </div><div class="line">    // Test helpers for LiveData</div><div class="line">    testImplementation &quot;android.arch.core:core-testing:1.1.1&quot;</div><div class="line"> </div><div class="line">    // Test helpers for Room</div><div class="line">    testImplementation &quot;android.arch.persistence.room:testing:1.0.0&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      本文介绍 Android JetPack 开发工具套件
    
    </summary>
    
      <category term="Android 架构" scheme="http://yoursite.com/categories/Android-%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="JetPack" scheme="http://yoursite.com/tags/JetPack/"/>
    
  </entry>
  
  <entry>
    <title>Gradle 使用指南 -- Plugin 断点调试</title>
    <link href="http://yoursite.com/2018/08/02/development-tool-gradle-plugin-debug/"/>
    <id>http://yoursite.com/2018/08/02/development-tool-gradle-plugin-debug/</id>
    <published>2018-08-02T02:00:00.000Z</published>
    <updated>2018-12-12T01:56:07.194Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>大家都知道 Gradle 插件的开发是基于Groovy，而Groovy 是一种基于 Java 平台的语言。平时我们用 Android Studio 开发 Android 时，可以使用到它强大的调试功能。那么插件开发过程中是不是可以调试呢？答案是可以的。下面就来简单介绍一下。</p>
<h2 id="调试方法"><a href="#调试方法" class="headerlink" title="调试方法"></a>调试方法</h2><h3 id="创建-Remote-调试任务"><a href="#创建-Remote-调试任务" class="headerlink" title="创建 Remote 调试任务"></a>创建 Remote 调试任务</h3><p>选择 Edit Configurations …，点击添加，在弹出的对话框中选择 Remote。</p>
<p><img src="/images/development-tool-gradle-plugin-debug/edig-config.png" alt="效果图"></p>
<p><img src="/images/development-tool-gradle-plugin-debug/create-remote-debug.png" alt="效果图"></p>
<p>这时会生成一个 Remote debug 配置，名字可以随意制定，其他按照默认配置就可以，点击 OK 按钮。</p>
<p><img src="/images/development-tool-gradle-plugin-debug/remote-debug-config.png" alt="效果图"></p>
<h3 id="配置调试环境"><a href="#配置调试环境" class="headerlink" title="配置调试环境"></a>配置调试环境</h3><p>在终端中输入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export GRADLE_OPTS=&quot;-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005&quot;</div></pre></td></tr></table></figure>
<h3 id="开始调试"><a href="#开始调试" class="headerlink" title="开始调试"></a>开始调试</h3><p>首先在 Groovy 文件中添加断点。<br><strong>注意</strong>：.gradle 文件是无法断点调试的。<br>然后在终端中输入下面命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gradlew small  -Dorg.gradle.debug=true</div></pre></td></tr></table></figure>
<p>这时会打印：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Listening for transport dt_socket at address: 5005</div></pre></td></tr></table></figure>
<p>表示在等待 attach 调试器了。</p>
<p>点击图中 Debug 按钮：</p>
<p><img src="/images/development-tool-gradle-plugin-debug/debug-button.png" alt="效果图"></p>
<p>这时在 Android Studio 的调试器终端中会打印：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Connected to the target VM, address: &apos;localhost:5005&apos;, transport: &apos;socket&apos;</div></pre></td></tr></table></figure>
<p>在刚才输入执行 task 任务的终端中打印：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Starting a Gradle Daemon, 1 incompatible and 1 stopped Daemons could not be reused, use --status for details</div><div class="line"></div><div class="line">&gt; Starting Daemon</div></pre></td></tr></table></figure>
<p>这时需要再点击一下 Debug 按钮，这时就可以断点调试了。</p>
<p><img src="/images/development-tool-gradle-plugin-debug/debug-result.png" alt="效果图"></p>
<h2 id="断开调试"><a href="#断开调试" class="headerlink" title="断开调试"></a>断开调试</h2><p>如果想断开调试，点击 Debug 面板中的小红叉❌，在弹出对话框中点击 Disconnect 按钮就行了。</p>
<p><img src="/images/development-tool-gradle-plugin-debug/debug-cancel.png" alt="效果图"></p>
<p><img src="/images/development-tool-gradle-plugin-debug/debug-cancel-dialog.png" alt="效果图"></p>
<h2 id="继续调试"><a href="#继续调试" class="headerlink" title="继续调试"></a>继续调试</h2><p>如果想继续调试，首先要点击工具栏中的 Debug 按钮，然后在终端中输入 Gradle 命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gradlew small  -Dorg.gradle.debug=true</div></pre></td></tr></table></figure>
<p>然后再点击 Debug 按钮，才能继续断点调试。<br>如果不点击 Debug 按钮，直接输入 Gradle 命令，会有下面报错：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ERROR: transport error 202: bind failed: Address already in use</div><div class="line">ERROR: JDWP Transport dt_socket failed to initialize, TRANSPORT_INIT(510)</div><div class="line">JDWP exit error AGENT_ERROR_TRANSPORT_INIT(197): No transports initialized [debugInit.c:750]</div></pre></td></tr></table></figure>
<!-- 
https://segmentfault.com/a/1190000008266525
https://fucknmb.com/2017/04/07/Intellij-IDEA%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/
https://blog.csdn.net/ceabie/article/details/55271161
-->
]]></content>
    
    <summary type="html">
    
      介绍如何在 Gradle Plugin 开发过程中进行断点调试
    
    </summary>
    
      <category term="Gradle" scheme="http://yoursite.com/categories/Gradle/"/>
    
    
      <category term="开发工具" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Gradle" scheme="http://yoursite.com/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>区块链 -- 区块链基础100问</title>
    <link href="http://yoursite.com/2018/05/02/block-chain-basic-questions/"/>
    <id>http://yoursite.com/2018/05/02/block-chain-basic-questions/</id>
    <published>2018-05-02T02:00:00.000Z</published>
    <updated>2018-09-14T14:27:47.781Z</updated>
    
    <content type="html"><![CDATA[<h1 id="比特币及区块链的发展历史"><a href="#比特币及区块链的发展历史" class="headerlink" title="比特币及区块链的发展历史"></a>比特币及区块链的发展历史</h1><h2 id="1-从物物交换到比特币"><a href="#1-从物物交换到比特币" class="headerlink" title="1.从物物交换到比特币"></a>1.从物物交换到比特币</h2><p>　　货币一开始是实物货币，如贝壳、金银等，因为他们具有稀缺性，用于充当一般等价物。<br>　　后来我们开始用纸币进行支付。面值100元的纸币制作成本可能只有几厘钱，却能够换取价值100元的物品，这是因为有国家的信用背书，让人们相信这一文不值的纸币能够换100元的商品。<br>　　随着互联网的发展，我们从纸币过度到记账货币，比如发工资只是在银行卡账户上做数字的加法，买衣服只是做减法。整个过程中都是银行在记账，且只有银行有记账权。<br>　　在2008全球经济危机中，美国政府因为有记账权所以可以无限增发货币。中本聪觉得这样很不靠谱，于是他想创建一种新型支付体系：大家都有权来记账，货币不能超发，整个账本完全公开透明，十分公平。这就是比特币产生的原因和动机。</p>
<h2 id="2-什么是比特币"><a href="#2-什么是比特币" class="headerlink" title="2.什么是比特币"></a>2.什么是比特币</h2><p>　　比特币（Bitcoin，简写BTC）概念由中本聪（化名）提出，是一种点对点、去中心化的数字资产；2009年，中本聪打包了第一个区块，并获得50枚比特币的挖矿奖励，挖矿奖励每4年减半一次，按此计算，比特币预计2140年发行完毕，总量为2100万枚。<br>　　随着比特币的发展，比特币逐渐受到认可：德国为全球首个接受比特币支付的国家；微软、戴尔等知名企业也纷纷接受比特币支付。<br>　　举个栗子，你能直接用比特币买到美国本土生产的外星人电脑。不仅如此，投资者们还可以在火币网等交易平台投资比特币，交易获利。<br>　　现在明白什么是比特币了吗？不明白就继续往下看呗！“区块链100问”让你变身区块链砖家。</p>
<h2 id="3-比特币白皮书的诞生"><a href="#3-比特币白皮书的诞生" class="headerlink" title="3.比特币白皮书的诞生"></a>3.比特币白皮书的诞生</h2><p>　　2008年的美国发生金融危机，波及到世界各地，各国法定货币大幅贬值，人们手里的钱变得不值钱了。<br>　　2008年11月1日，这个历史性的时刻，一位自称中本聪的人在网络上发表了一篇《比特币：一种点对点的电子现金系统》的论文，文中描述了一个全新的货币系统：比特币。<br>　　比特币系统是一种去中心化的数字货币系统，它解决了在没有中心机构的情况下，总量恒定的货币的发行和流通问题。通过比特币系统转账，信息公开透明，可以放心地将比特币转给地球另一端的人，每一笔转账信息都会被全网记录。白皮书的问世，也标志着比特币的底层技术区块链的诞生。</p>
<h2 id="4-第一个比特币诞生了"><a href="#4-第一个比特币诞生了" class="headerlink" title="4.第一个比特币诞生了"></a>4.第一个比特币诞生了</h2><p>　　北京时间2009年1月4日，距离比特币白皮书的发布已经过去3个月了。<br>　　终于，在这个伟大的日子里，白皮书的作者中本聪在位于芬兰赫尔辛基的一个小型服务器上，亲手创建了第一个区块——即比特币的创世区块（Genesis Block），并获得了第一笔50枚比特币的奖励，第一个比特币就此问世。<br>　　当时正处于08年金融危机，为了纪念比特币的诞生，中本聪将当天的《泰晤士报》头版标题——“The Times 03/Jan/2009 ，Chancellor on brink of second bailout for banks”刻在了第一个区块上。<br>　　中本聪这一举动，清晰地展示着比特币的诞生时间，厉害了我的中本聪！</p>
<h2 id="5-谁是中本聪"><a href="#5-谁是中本聪" class="headerlink" title="5.谁是中本聪"></a>5.谁是中本聪</h2><p>　　中本聪是比特币的开发者兼创始者。<br>　　2008年11月1日中本聪发表了比特币白皮书，并于2009年1月3日首次挖出比特币，谁能动用创世区块里的比特币谁便是中本聪本人，所以谁是中本聪呢？<br>　　历史上出现过很多个“中本聪”：<br>　　2013年，有人爆料在数学领域有过卓越贡献的望月新一就是中本聪，但是并没有提出直接证据。<br>　　2014年，黑客黑进了中本聪用过的邮箱，并找到了邮件的主人多利安·中本（Dorian Nakamoto），随后多利安表示自己只是偶然获取了邮箱的地址和密码，并不是中本聪。<br>　　2016年，克雷格·赖特（Craig Wright）表示他是中本聪，且能提供中本聪的私钥。但随后，赖特因为无法面对大家的质疑而撤回自己的声明。</p>
<h2 id="6-密码朋克邮件组是什么"><a href="#6-密码朋克邮件组是什么" class="headerlink" title="6.密码朋克邮件组是什么"></a>6.密码朋克邮件组是什么</h2><p>　　中本聪的比特币白皮书最早发布于“密码朋克”。狭义地说，“密码朋克”是一套加密的电子邮件系统。<br>　　1992年，英特尔的高级科学家Tim May发起了密码朋克邮件列表组织。1993年，埃里克·休斯写了一本书，叫《密码朋克宣言》。这也是“密码朋克”（cypherpunk）一词首次出现。<br>　　“密码朋克”用户约1400人，讨论的话题包括数学、加密技术、计算机技术、政治和哲学，也包括私人问题。早期的成员有非常多IT精英，比如“维基解密”的创始人阿桑奇、BT下载的作者布拉姆·科恩、万维网发明者蒂姆·伯纳斯-李爵士、提出了智能合约概念的尼克·萨博、Facebook的创始人之一肖恩·帕克。<br>　　当然，还包括比特币的发明人中本聪。 据统计，比特币诞生之前，密码朋克的成员讨论、发明过失败的数字货币和支付系统多达数10个。</p>
<h2 id="7-比特币是怎么发行的"><a href="#7-比特币是怎么发行的" class="headerlink" title="7.比特币是怎么发行的"></a>7.比特币是怎么发行的</h2><p>　　比特币没有特定的发行机构，而是依靠一套去中心化的发行机制，逐步将比特币发行出去。<br>　　比特币系统相当于一个去中心化大账本，每个区块就是这个账本中的一页，系统自动生成比特币作为奖励激励矿工参与记账。<br>　　每10分钟，全体矿工一起计算一道问题，最先算出答案的矿工获得记一页账的权利，记账完成后，他将自动获得一定量的比特币，这就是新增比特币的发行过程。<br>　　根据中本聪的设计，最开始每记一次账奖励50个比特币，每记21万页账（也就是21万个区块，大约需要4年），记账的奖励就会减少一半，直到大约2140年，比特币将无法继续细分，至此，比特币发行完毕，总量2100万。所以，挖矿要趁早噢~</p>
<h2 id="8-什么批萨居然卖到3亿多"><a href="#8-什么批萨居然卖到3亿多" class="headerlink" title="8.什么批萨居然卖到3亿多"></a>8.什么批萨居然卖到3亿多</h2><p>　　2010年5月22日，早期比特币爱好者——美国程序员拉兹洛（Laszlo Hanyecz）希望能用比特币交换实物商品。<br>　　他在一个比特币论坛发帖说：希望用10000个比特币交换2个价值25美元的披萨。一位英国志愿者与拉兹洛达成交易，获得了10000个比特币的报酬。<br>　　这是比特币第一次有了价格，在整个加密社区引起了很大的轰动，人们为了纪念这次交易，把每年的5月22日称为“比特币披萨日”，比特币爱好者们聚在一起吃披萨庆祝。<br>　　以现在比特币的比特币价格计算，当时的2块披萨价值约3亿人民币，买披萨的拉兹洛哥哥哭晕在厕所。</p>
<h2 id="9-中本聪的继任者–加文-安德烈森"><a href="#9-中本聪的继任者–加文-安德烈森" class="headerlink" title="9.中本聪的继任者–加文.安德烈森"></a>9.中本聪的继任者–加文.安德烈森</h2><p>　　加文·安德烈森是比特币核心开发团队的成员之一，中本聪从互联网上销声匿迹之前用邮件保持联系的少数几个人之一。<br>　　2010年，加文开始接触比特币，并开始向中本聪提交代码，以优化比特币的核心系统，中本聪逐渐对加文的代码有了信赖。<br>　　最终有一天，中本聪问加文是否可以把他的邮箱放在比特币的主页上，加文同意了。从此，中本聪退到了幕后，加文变成了比特币的领导者。<br>　　加文组建了比特币核心开发团队，致力于修复比特币代码的安全漏洞，提升比特币软件的稳定性使其更易用。<br>　　2012年，加文创建了非盈利性的比特币基金会。比特币的发展壮大，加文及其组建的比特币核心开发团队功不可没。</p>
<h2 id="10-比特水龙头是什么"><a href="#10-比特水龙头是什么" class="headerlink" title="10.比特水龙头是什么"></a>10.比特水龙头是什么</h2><p>　　在刚诞生那几年，比特币很便宜，并且非常容易获得。2010年年底，为了让更多人知道并尝试使用比特币，程序员加文·安德烈森花50美元买入10000个比特币。<br>　　并创建了名为“比特水龙头”的网站，向所有访问网站的人无偿赠送5个比特币，当时大约价值5美分，此举对人们接受比特币有显著的效果。<br>　　后来，有人模仿加文，建立类似比特币水龙头的网站，一方面给访问网站的用户派送小额比特币，另一方面，由于这些网站往往可以获得了大量的浏览量，因此比特币水龙头网站可以通过给主要比特币网站导流赚取广告费。<br>　　比特币水龙头网站甚至形成一种新型商业模式，早期有约50%的比特币网站靠其导流。</p>
<h1 id="比特币有哪些特点"><a href="#比特币有哪些特点" class="headerlink" title="比特币有哪些特点"></a>比特币有哪些特点</h1><h2 id="11-比特币为什么还没有挖完"><a href="#11-比特币为什么还没有挖完" class="headerlink" title="11.比特币为什么还没有挖完"></a>11.比特币为什么还没有挖完</h2><p>　　每10分钟，全网矿工共同计算一道难题，竞争记账权及比特币奖励。如果全网算力不断增长，比特币将很快被挖完。<br>　　为了保证比特币稳定在约10分钟挖出一个区块，中本聪设计矿工挖矿获得比特币的难度每过2016个区块（约2周时间）动态调整一次，调整后的难度使得每生成一个区块的预期时间为10分钟。<br>　　现在的难度系数约为480PH/s，大约是创世区块的680亿倍，也就是说，以现在的算力，全网矿工需要经过约3000万亿亿次哈希运算才能找到一个符合条件的答案，生成新的区块。</p>
<h2 id="12-比特币如何实现总量恒定"><a href="#12-比特币如何实现总量恒定" class="headerlink" title="12.比特币如何实现总量恒定"></a>12.比特币如何实现总量恒定</h2><p>　　比特币是一种通缩型虚拟货币，总量是2100万个，你知道怎么来的吗？<br>　　中本聪在设计比特币的时候，规定每个比特币可以细分到小数点后8位，每个区块发行 50个比特币，每21万个区块后，每个区块的比特币产量减半。<br>　　因为比特币每10分钟产生一个区块，21万个区块大约是四年的时间，截止2017年，比特币产量已经减半2次，当前每个区块发行12.5个比特币。大约在2045年，99.95%的比特币将会发行完毕，到2140年，比特币无法继续细分，至此比特币完全发行完毕，发行总量约为2100万枚比特币（注：实际是20999999.97690000个）。<br>　　尽管比特币通缩的货币政策是否合理在货币学上争议很大，但这一发行机制激励着矿工尽早投入到比特币挖矿中，使得比特币系统获得了大量算力和安全性。</p>
<h2 id="13-比特币和Q币有哪些不同"><a href="#13-比特币和Q币有哪些不同" class="headerlink" title="13.比特币和Q币有哪些不同"></a>13.比特币和Q币有哪些不同</h2><p>　　比特币是一种去中心化的数字资产，没有发行主体。Q币是由腾讯公司发行的电子货币，类似于电子积分，其实不是货币。<br>　　Q币需要有中心化的发行机构，Q币因为腾讯公司的信用背书，才能被认可和使用。使用范围也局限在腾讯的游戏和服务中，Q币的价值完全基于人们对腾讯公司的信任。<br>　　比特币不通过中心化机构发行，但却能够得到全球的广泛认可，是因为比特币可以自证其信，比特币的发行和流通由全网矿工共同记账，不需要中心机构也能确保任何人都无法窜改账本。</p>
<h2 id="14-各国对区块链资产的态度如何"><a href="#14-各国对区块链资产的态度如何" class="headerlink" title="14.各国对区块链资产的态度如何"></a>14.各国对区块链资产的态度如何</h2><p>　　从全球范围来看，各国政府对于区块链、区块链资产的态度不一，但整体来说都还处于探索期。<br>　　欧美国家积极监管。德国是最早将比特币等数字资产认定为私有财产的国家。美国CFTC（美国商品期货委员会）将比特币定性为大宗商品。纽约州目前颁发了3张BitLicense。<br>　　亚洲的情况不一样。日本积极支持。今年4月，日本实施了《支付服务法案》，正式承认比特币是一种合法的支付方式。<br>　　韩国积极监管。7月，韩国《比特币监管法案》面世，设置了5亿韩元的投资者准入门槛。<br>　　中国严格监管。9月，中国人民银行等七部委联合发布《关于防范代币发行融资风险的公告》，规定在中国，交易平台不得从事法定货币与 “虚拟货币”之间的兑换业务。</p>
<h1 id="比特币转帐的原理"><a href="#比特币转帐的原理" class="headerlink" title="比特币转帐的原理"></a>比特币转帐的原理</h1><h2 id="15-比特币怎么转帐"><a href="#15-比特币怎么转帐" class="headerlink" title="15.比特币怎么转帐"></a>15.比特币怎么转帐</h2><p>　　生活中我们都有自己的银行账户，转账是在银行账户之间进行的。同样，比特币转账就是把比特币从一个比特币地址转移到另一个比特币地址上的过程。<br>　　如果你想要转账比特币给别人，你需要在比特币交易平台、比特币钱包或者比特币客户端中，输入你的比特币地址、接收方地址、转账金额和手续费金额。<br>　　确定支付后交易信息会在比特币网络进行全网广播。矿工每隔10分钟会将比特币网络中未被记账的交易打包进一个区块，这就完成了一次确认，此时比特币已转到对方账户。<br>　　通常需要经过6次确认，确保交易记录不能被任何人窜改，转账才算真正完成。</p>
<h2 id="16-比特币转帐要付多少手续费"><a href="#16-比特币转帐要付多少手续费" class="headerlink" title="16.比特币转帐要付多少手续费"></a>16.比特币转帐要付多少手续费</h2><p>　　比特币转账手续费是交易者付给矿工的一笔费用，用于激励矿工竞争记账，为比特币提供足够的算力，从而确保比特币网络的安全，有的地方也叫做矿工费。<br>　　用户在比特币网络发起一笔转账时，一般需要支付给记账矿工一定的转账手续费。转账手续费一般为0.001-0.0015个比特币，由于区块能容纳交易记录的容量有限，矿工会优先打包手续费高的交易，所以多付手续费可以更快被记账。<br>　　比特币交易手续费的存在能提高转账门槛，有效防止区块链中充斥垃圾信息，并且能够保证在比特币被挖完之后矿工仍有动力维护比特币网络。</p>
<h2 id="17-区块链转帐居然按字节收费"><a href="#17-区块链转帐居然按字节收费" class="headerlink" title="17.区块链转帐居然按字节收费"></a>17.区块链转帐居然按字节收费</h2><p>　　我们经常在银行间进行转账，银行间转账手续费一般是按照转账金额的一定比例收取。<br>　　比如跨行转账手续费约为5‰，异地转账的手续费为1‰-1%不等，而跨国转账除了支付以上手续费以外，还需支付50-200元每笔的电报费。<br>　　而区块链资产之间的转账手续费与转账的金额大小无关，按字节收费。以比特币转账为例，一笔普通交易约占250字节，手续费约为0.001-0.0015个比特币（约20-30元）。如果你需要在一笔交易中同时转账给多个比特币地址，那么这笔交易所占字节数会更大，所以你需要多付一些手续费，才会有矿工及时打包你的交易。<br>　　即便如此，从转账成本来看，用区块链进行跨国转账还是有很大的优势。</p>
<h2 id="18-比特币地址是什么"><a href="#18-比特币地址是什么" class="headerlink" title="18.比特币地址是什么"></a>18.比特币地址是什么</h2><p>　　比特币地址是一串由字母和数字组成的26位到34位字符串，看起来有些像乱码。<br>　　通过区块链可以查到每个比特币地址的所有转账记录。<br>　　比特币地址就是个人的比特币账户，相当于你的银行卡卡号，任何人都可以通过你的比特币地址给你转账比特币。<br>　　如何获取自己专属的比特币地址呢？你可以下载一个比特币钱包，或者在交易平台上注册。每个人的比特币地址都是独一无二的。有地址就可以进行比特币转账啦。下载比特币客户端或者比特币钱包，也能注册自己的比特币地址。快去创建你的专属比特币地址吧~</p>
<h2 id="19-比特币节点是什么"><a href="#19-比特币节点是什么" class="headerlink" title="19.比特币节点是什么"></a>19.比特币节点是什么</h2><p>　　比特币是一种点对点的电子现金系统，更直接地说，是节点对节点。每笔交易由发起方向周围的节点进行广播，节点收到之后再广播给自己周围的节点，最终扩散至全网。<br>　　每一个比特币钱包都是一个节点，其中拥有完整区块链账本的节点叫做全节点。2017年10月，比特币全网约有9300个全节点，负责比特币转账交易的广播和验证。<br>　　转账交易发生后，由所有节点共同广播至全网，挖矿的节点验证该交易正确后会记录至区块链账本。<br>　　美国、德国、法国拥有的比特币全节点数最多，中国的全节点数量约占全球5%（数据来源于： bitnodes.21.co）。运行比特币节点不提供任何奖励，且不需要全节点也可以进行比特币转账，所以比特币的全节点数只占节点数的一小部分。</p>
<h2 id="20-从发出交易到矿工打包需要几步"><a href="#20-从发出交易到矿工打包需要几步" class="headerlink" title="20.从发出交易到矿工打包需要几步"></a>20.从发出交易到矿工打包需要几步</h2><p>　　当你发起一笔比特币转账后，你需要将交易广播至全网，挖矿节点接到这笔交易后，先将其放入本地内存池进行一些基本验证，比如该笔交易花费的比特币是否是未被花费的交易。<br>　　如果验证成功，则将其放入“未确认交易池”（Unconfirm Transaction），等待被打包；如果验证失败，则该交易会被标记为“无效交易”（Invalid Transaction），不会被打包。也就是说，挖矿节点在比拼算力的同时还需要及时验证每笔交易，更新自己的“未确认交易池”。节点抢到记账权后，将从“未确认交易池”中抽取约近千笔“未确认交易”进行打包。<br>　　有时候我们的交易不能被及时打包，是因为“未确认交易池”中的交易笔数太多，而每个区块能记录的交易笔数有限，这时候就会造成区块拥堵。</p>
<h2 id="21-比特币的数字签名是什么"><a href="#21-比特币的数字签名是什么" class="headerlink" title="21.比特币的数字签名是什么"></a>21.比特币的数字签名是什么</h2><p>　　比特币的数字签名，就是只有比特币转账的转出方生成的，一段防伪造的字符串。通过验证该数字串，一方面证明该交易是转出方发起的，另一方面证明交易信息在传输中没有被更改。<br>　　数字签名通过数字摘要技术把交易信息缩短成固定长度的字符串。举个栗子，牛牛发起一笔比特币转账，需要先将该交易进行数字摘要，缩短成一段字符串，然后用自己的私钥对摘要进行加密，形成数字签名。完成后，牛牛需要将原文（交易信息）和数字签名一起广播给矿工，矿工用牛牛的公钥进行验证，如果验证成功，说明该笔交易确实是牛牛发出的，且信息未被更改。<br>　　同时，数字签名加密的私钥和解密的公钥不一致，采用非对称加密技术。看起来好复杂，其实转账只需要你输入私钥就瞬间完成啦！</p>
<h2 id="22-比特币交易和找零机制是怎样的"><a href="#22-比特币交易和找零机制是怎样的" class="headerlink" title="22.比特币交易和找零机制是怎样的"></a>22.比特币交易和找零机制是怎样的</h2><p>　　比特币转账可以一次把多个地址的余额转出，也可以一次转入多个地址。<br>　　举个栗子，你需要支付给牛牛5个比特币，但是你的A/B/C 3个地址里各有1/2/2个比特币，每个地址的余额都不足以支付5个比特币。<br>　　这时候，你可以发起一笔转账，同时把A/B/C三个地址共5个比特币转账给牛牛。再举个栗子，如果你的比特币地址有5个比特币，但是你只需要转1个给牛牛。你需要在转账的时候告诉矿工：我有5个比特币，其中1个转给牛牛，另外4个转回给我自己（可以是原地址或创建新的地址）。<br>　　千万别忘了说哦，不然剩余的4个比特币就全给矿工当手续费了。这就是比特币的找零机制。</p>
<h1 id="区块链产业链上游–挖矿"><a href="#区块链产业链上游–挖矿" class="headerlink" title="区块链产业链上游–挖矿"></a>区块链产业链上游–挖矿</h1><h2 id="23-挖矿是什么"><a href="#23-挖矿是什么" class="headerlink" title="23.挖矿是什么"></a>23.挖矿是什么</h2><p>　　挖矿是将一段时间内比特币系统中发生的交易进行确认，并记录在区块链上形成新区块的过程，挖矿的人叫做矿工。简单说来，挖矿就是记账的过程，矿工是记账员，区块链就是账本。<br>　　怎样激励矿工来挖矿呢？比特币系统的记账权力是去中心化的，即每个矿工都有记账的权利。成功抢到记账权的矿工，会获得系统新生的比特币奖励。因此，挖矿就是生产比特币的过程。<br>　　中本聪最初设计比特币时规定每产生210000个区块，比特币奖励减半一次，直至比特币不能再被细分。因为比特币和黄金一样总量有限。所以比特币被称为数字黄金，比特币生产也俗称挖矿。</p>
<h2 id="24-比特币怎么挖矿"><a href="#24-比特币怎么挖矿" class="headerlink" title="24.比特币怎么挖矿"></a>24.比特币怎么挖矿</h2><p>　　比特币通过挖矿产生。每10分钟，全网矿工一起计算一道算术题，谁先算出答案，就相当于挖到了这个区块，该矿工便能获得系统新生的比特币奖励。<br>　　在比特币刚诞生的时候，通过计算机的CPU便可以挖矿。随着挖矿的矿工越来越多，目前用CPU已经不能挖出比特币了，大家开始用矿机挖矿。<br>　　如果你想挖矿，首先需要准备好矿机、比特币地址、挖矿软件等。但是目前比特币网络算力太大，个人购置少量矿机也很难挖出区块。很多矿工加入矿池一起挖矿，矿场只负责计算，矿池负责信息打包。<br>　　矿池挖到比特币之后根据矿场的算力占比分配收益，以此保证更加稳定的投入产出。</p>
<h2 id="26-矿工是怎么挖矿的"><a href="#26-矿工是怎么挖矿的" class="headerlink" title="26.矿工是怎么挖矿的"></a>26.矿工是怎么挖矿的</h2><p>　　在区块链兴起之前，矿工专指挖煤矿的工人，群体印象是浑身沾满了煤屑，衣服以外都是黝黑皮肤的人。<br>　　区块链诞生之后，矿工不再只是煤矿工人的简称，有了一种全新的含义：从事虚拟货币挖矿的人。<br>　　和传统的“矿工”不同，区块链产业区块链领域的矿工具有更多的科技色彩。矿工的主要工作是交易确认和数据打包，如果你想成为一名矿工，其实也比较简单，购买一台专用的计算设备，下载挖矿软件，就可以开始挖矿了。挖矿不需要矿工亲自动手，实际是由电脑在执行特定的运算，对于矿工来说只要保证矿机电力供应和网络连接就可以了。</p>
<h2 id="27-矿机是什么"><a href="#27-矿机是什么" class="headerlink" title="27.矿机是什么"></a>27.矿机是什么</h2><p>　　以比特币为例，比特币矿机就是通过运行大量计算争夺记账权从而获得新生比特币奖励的专业设备，一般由挖矿芯片、散热片和风扇组成，只执行单一的计算程序，耗电量较大。<br>　　挖矿实际是矿工之间比拼算力，拥有较多算力的矿工挖到比特币的概率更大。随着全网算力上涨，用传统的设备（CPU、GPU）挖到比特的难度越来越大，人们开发出专门用来挖矿的芯片。芯片是矿机最核心的零件。芯片运转的过程会产生大量的热，为了散热降温，比特币矿机一般配有散热片和风扇。<br>　　用户在电脑上下载比特币挖矿软件，用该软件分配好每台矿机的任务，就可以开始挖矿了。每种币的算法不同，所需要的矿机也各不相同。</p>
<h2 id="28-比特币挖矿机的进化史"><a href="#28-比特币挖矿机的进化史" class="headerlink" title="28.比特币挖矿机的进化史"></a>28.比特币挖矿机的进化史</h2><p>　　自从比特币诞生以来，比特币挖矿经历了以下四个阶段：<br>　　CPU挖矿-GPU挖矿-专业矿机挖矿-矿池挖矿。<br>　　2009年1月3日，比特币创始人中本聪用电脑CPU挖出了第一批比特币。<br>　　随着大家对比特币的认可，挖矿的人越来越多，全网算力不断上升，挖矿难度逐渐上涨。<br>　　2010年9月18日第一个显卡挖矿软件发布。一张显卡相当于几十个CPU，挖矿能力得到明显提升。<br>　　之后又有人发明了基于挖矿芯片的专业挖矿设备，即矿机。目前行业领先的蚂蚁矿机装有将近200张BM1387芯片，相当于3万多张GPU的算力。<br>　　随着更多矿机加入挖矿，单独的矿机也很难挖到比特币了。于是，矿工将自己的矿机集中起来，形成了矿场和矿池。</p>
<h2 id="29-矿场长什么样"><a href="#29-矿场长什么样" class="headerlink" title="29.矿场长什么样"></a>29.矿场长什么样</h2><p>　　矿场是集中管理矿机的场所，一般选址在电费相对比较便宜并且比较稳定的地方。早期的矿场运营比较粗放，就是搭一个架子，然后把矿机放上去，就可以开始运营了。后来发现这种运行方式下，矿机损坏率高，维修成本太高了。<br>　　后来开始有了通风、还有隔尘等方案，再往后发展，就有了有室内温度和湿度的严格控制。现在整个矿场的运营方案还在不断升级和进化。<br>　　因为矿机运行起来噪音比较大，一台矿机运转时，在一米处测试噪音达73dB(a)左右，几千台矿机运转起来的时候对周围的影响可想而知，所以有些地方经过设计和装修改造，出现了静音矿场。</p>
<h2 id="29-矿池怎么挖矿"><a href="#29-矿池怎么挖矿" class="headerlink" title="29.矿池怎么挖矿"></a>29.矿池怎么挖矿</h2><p>　　随着参与挖矿的人数越来越多，比特币全网的算力不断上涨，单个设备或少量的算力都很难再挖到比特币。这时候，矿池诞生了。<br>　　矿池突破地理位置的限制，将分散在全球的矿工及矿场的算力进行联结，一起挖矿。矿池负责信息打包，接入进来的矿场负责竞争记账权。由于集合了很多矿工的算力，所以矿池的算力占比大，挖到比特币的概率更高。矿池挖矿所产生的比特币奖励会按照每个矿工贡献算力的占比进行分配。相较单独挖矿，加入矿池可以获得更加稳定的收益。<br>　　目前全球算力较大的矿池有鱼池（F2Pool）、蚁池（AntPool）、币网（BW Pool）、国池（BTCC Pool）、BitFury。除了BitFury，其余都来自中国。</p>
<h2 id="30-算力是什么"><a href="#30-算力是什么" class="headerlink" title="30.算力是什么"></a>30.算力是什么</h2><p>　　在通过“挖矿”得到比特币的过程中，我们需要找到其相应的解，而要找到其解，并没有固定算法，只能靠计算机随机的哈希碰撞。<br>　　一台矿机每秒钟能做多少次哈希碰撞，就是其“算力”的代表，单位写成hash/s。<br>　　算力可以简单的理解为计算能力。目前主流的矿机为14T左右的计算量级，即一台矿机就能每秒做至少1.4*10的13次方次哈希碰撞，我们可以说，这一台14T规格的矿机就有14T的算力。矿工所掌握的所有矿机占比特币全网总算力的百分比是多少，就代表TA在这10分钟竞争中能够获胜的概率就是多少。<br>　　举个例子，如果比特币现在全网的算力是100，而某个矿工拥有10的算力，那么TA每次竞争记账成功的概率就是1/10。</p>
<h2 id="31-竞争记账是什么"><a href="#31-竞争记账是什么" class="headerlink" title="31.竞争记账是什么"></a>31.竞争记账是什么</h2><p>　　竞争记账是比特币系统的记账方式，它解决了如何在去中心化的记账系统中，保证比特币账本一致性的问题。比特币系统中没有中心化的记账机构，每一个节点都有记账权，如何保证账本一致性是一个重要的问题。<br>　　在比特币网络中，全网矿工共同参与算力竞争，算力高的矿工计算能力更强，更容易获得记账权。成功抢到记账权的矿工负责记账，并将账本信息同步给整个网络。作为回报，矿工将获得系统新生成的比特币奖励。<br>　　随着比特币价格上涨，为了获得比特币，越来越多人参与竞争比特币记账权，全网算力难度呈指数级上升。</p>
<h1 id="区块链产业链中游–交易"><a href="#区块链产业链中游–交易" class="headerlink" title="区块链产业链中游–交易"></a>区块链产业链中游–交易</h1><h2 id="32-如何投资区块链资产"><a href="#32-如何投资区块链资产" class="headerlink" title="32.如何投资区块链资产"></a>32.如何投资区块链资产</h2><p>　　从2008年中本聪发布比特币白皮书至今，区块链资产的种类日益增加，投资方式也更加丰富。<br>　　2009年比特币刚诞生那会儿，投资者以极客为主，但是随着更多专业投资者的加入，区块链资产的投资方式更加丰富。<br>　　目前，投资者参与区块链资产投资的渠道很多，场内交易、场外交易、中心化交易平台、去中心化交易平台都可以进行投资。不仅投资渠道变多了，投资方式也更丰富了，投资者可以通过趋势交易、对冲、跨平台搬砖等交易方式投资获利。</p>
<h2 id="33-如何在交易平台投资区块链资产"><a href="#33-如何在交易平台投资区块链资产" class="headerlink" title="33.如何在交易平台投资区块链资产"></a>33.如何在交易平台投资区块链资产</h2><p>　　相较于点对点交易、挖矿等，在交易平台购买是目前获得区块链资产最主流的方式，即场内交易。<br>　　区块链资产的场内交易和股票类似，由平台帮你撮合，你不知道也不需要知道跟你成交的对手是谁，你的成交对手有可能是一个人，也有可能是很多人。<br>　　无论是买入还是卖出，交易平台会记录所有人的挂单价格，买卖双方通过实时买卖盘可以获取最新成交价格。同时，交易平台会将历史成交价格及成交量汇总成K线图，方便投资者用于分析行情走势。<br>　　比如huobi.pro就是全球比较主流的交易平台。</p>
<h2 id="34-量化交易是什么"><a href="#34-量化交易是什么" class="headerlink" title="34.量化交易是什么"></a>34.量化交易是什么</h2><p>　　量化交易，有时候也称自动化交易，是指以先进的数学模型替代人为的主观判断。<br>　　极大地减少了投资者情绪波动的影响，避免在市场极度狂热或悲观的情况下做出非理性的投资决策。<br>　　量化交易有很多种，包括跨平台搬砖、趋势交易、对冲等。跨平台搬砖是指，当不同目标平台价差达到一定金额，在价高的平台卖出，在价低的平台买入。<br>　　趋势交易会更加复杂一些，它根据趋势的指标来发出卖出和买入的信号。对冲是指同时进行两笔与行情相关、买卖方向相反、数量相当、盈亏相抵的交易，以达到对冲风险的效果。量化交易是成熟交易市场的标志。</p>
<h2 id="35-区块链资产如何在场外交易"><a href="#35-区块链资产如何在场外交易" class="headerlink" title="35.区块链资产如何在场外交易"></a>35.区块链资产如何在场外交易</h2><p>　　场外交易也叫OTC交易。用户需要自己寻找交易对手，不通过撮合成交，成交价格由交易双方协商确定，交易双方可以借助当面协商或者电话通讯等方式充分沟通。<br>　　场外交易是最原始的交易方式。比特币刚诞生的时候，并没有交易平台，投资者只能通过场外交易交易比特币，且大多采用一手交钱一手交货的交易方式。<br>　　现在，已经有很多规范化的场外交易平台，投资者可以直接在交易平台上选择交易对手方，和场内交易一样便捷。通过交易平台，可以有效避免在场外交易中因信息不对称导致人货两空的情况。<br>　　目前比较主流的场外交易平台有 Localbitcoins 和 huobi.pro 等。</p>
<h2 id="36-去中心化交易平台是什么"><a href="#36-去中心化交易平台是什么" class="headerlink" title="36.去中心化交易平台是什么"></a>36.去中心化交易平台是什么</h2><p>　　2013年至今，诞生了很多去中心化交易平台。与中心化交易平台不同，去中心化交易平台不需要注册账户，使用个人数字资产账户即可参与交易。<br>　　其次，去中心化交易平台每笔交易都通过区块链进行，需要等待区块链的确认才算交易成功。同时，去中心化交易平台不负责保管用户的资产和私钥等信息，一方面避免了交易平台的道德风险，另一方面要求你千万保管好自己的私钥。<br>　　由于去中心化交易平台普遍存在流动性低、交易处理速度慢等特点，目前交易总量仅占全球数字资产交易总量的0.03%。目前，去中心化交易平台项目Airswap、Kyber、0x、OmiseGo的代币都可以在huobi.pro上进行交易。</p>
<h2 id="37-币币交易是什么"><a href="#37-币币交易是什么" class="headerlink" title="37.币币交易是什么"></a>37.币币交易是什么</h2><p>　　随着区块链资产种类的增加，传统的法定货币对区块链资产的交易已经不能满足全球投资者的投资需求，更多专业投资者开始尝试币币交易。<br>　　币币交易是指用一种区块链资产定价另一种区块链资产，比如说用比特币定价以太坊会产生ETH/BTC交易对。该交易对的价格表示你需要用多少比特币可以买到一个以太坊。<br>　　通过币币交易，你可以直接用一种区块链资产换取另一种区块链资产，中间不涉及法定货币的中转或者结算。现在全球比特币的交易量，将近一半来自币币交易，法定货币与比特币交易的比例逐渐缩小。目前比较知名的币币交易交易平台有huobi.pro等。</p>
<h1 id="区块链产业链中游–存储"><a href="#区块链产业链中游–存储" class="headerlink" title="区块链产业链中游–存储"></a>区块链产业链中游–存储</h1><h2 id="38-比特币钱包是干嘛的"><a href="#38-比特币钱包是干嘛的" class="headerlink" title="38.比特币钱包是干嘛的"></a>38.比特币钱包是干嘛的</h2><p>　　比特币是一种点对点的电子现金系统，没有实物形态，可以存储在比特币钱包里。比特币钱包里存储着你的比特币信息，包括比特币地址（类似于你的银行卡账号）、私钥（类似于你银行卡的密码）。<br>　　就像实物钱包里可以存放多张银行卡，比特币钱包里也可以存储多个比特币地址，以及每个比特币地址所对应的独立的私钥。比特币钱包的核心功能就是保护你的私钥，如果钱包丢失，你将永远失去这笔比特币。<br>　　比特币钱包有很多种形态，如PC或手机钱包客户端、在线网页钱包、甚至是记录了比特币私钥的小本本（纸钱包）或者大脑（脑钱包）。你可以根据需求来选择适合自己的钱包。俗话说“鸡蛋不要放在一个篮子里”，采用多种方式分散存储也是降低风险的有效方式。</p>
<h2 id="39-冷钱包-热钱包"><a href="#39-冷钱包-热钱包" class="headerlink" title="39.冷钱包 热钱包"></a>39.冷钱包 热钱包</h2><p>　　比特币钱包按照私钥的存储方式，可以分为冷钱包、热钱包两种。<br>　　冷钱包是指网络不能访问到你私钥的钱包。冷钱包往往依靠“冷”设备确保比特币私钥的安全，比如不联网的电脑、手机、写着私钥地址的小本本等。冷钱包避免了被黑客盗取私钥的风险，但是可能面临物理安全风险，比如电脑丢失损坏等。<br>　　热钱包是指互联网能购访问你私钥的钱包。热钱包往往是在线钱包的形式。使用热钱包时，最好在不同平台设置不同密码，且开启二次认证，以确保自己的资产安全。<br>　　无论是使用冷钱包还是热钱包，只要其他人知道了你的比特币私钥，就能转走你的比特币。记住，谁手握私钥，谁才是比特币真正的主人。</p>
<h2 id="40-全节点钱包和轻钱包"><a href="#40-全节点钱包和轻钱包" class="headerlink" title="40.全节点钱包和轻钱包"></a>40.全节点钱包和轻钱包</h2><p>　　前面我们知道了钱包的多种形态，也知道了钱包其实就是“私钥、地址和区块链数据的管理工具”。根据区块链数据的维护方式和钱包的去中心化程度，我们可以把钱包分为：全节点钱包、轻钱包、中心化钱包。<br>　　全节点的代表是 bitcoin-core 核心钱包，需要同步所有区块链数据，占用很大的内存，但是可以完全实现去中心化。轻钱包依赖比特币网络上其他全节点，仅同步与自己相关的数据，基本可以实现去中心化。<br>　　中心化钱包不依赖比特币网络，所有的数据均从自己的中心化服务器中获得，但是交易效率很高，可以实时到账，你在交易平台注册的账号就是中心化钱包。</p>
<h1 id="区块链产业链下游"><a href="#区块链产业链下游" class="headerlink" title="区块链产业链下游"></a>区块链产业链下游</h1><h2 id="41-比特币可以用于支付吗"><a href="#41-比特币可以用于支付吗" class="headerlink" title="41.比特币可以用于支付吗"></a>41.比特币可以用于支付吗</h2><p>　　比特币作为一种数字资产，目前在部分国家可以用于支付，比如日本和德国。大部分商家通过第三方支付机构间接接受比特币，即买方购物支付比特币，第三方机构收到比特币后立即兑换成法币，商家收到的是法币而不是比特币。<br>　　商家这种把交易限定在第三方平台内的做法，使得交易时不用真的转账比特币，只是双方资产数字的变化，让比特币“秒到账”成为了现实。<br>　　用比特币支付操作很简单，一般是打开手机上的比特币钱包扫描二维码，或者点击比特币地址跳转到PC客户端进行支付就可以。和微信、支付宝等在线支付不同，使用比特币支付，扫码之后会先展示比特币的实时汇率，买卖双方确认后再进行支付。</p>
<h1 id="区块链到底长什么样"><a href="#区块链到底长什么样" class="headerlink" title="区块链到底长什么样"></a>区块链到底长什么样</h1><h2 id="42-区块链和比特币是什么关系"><a href="#42-区块链和比特币是什么关系" class="headerlink" title="42.区块链和比特币是什么关系"></a>42.区块链和比特币是什么关系</h2><p>　　区块链技术是比特币的底层技术，比特币是区块链的第一个应用。前面提到，比特币的交易信息都被记录在一个去中心化的账本上面，这个账本就是区块链。<br>　　如果我们把区块链类比成一个实物账本，那么每个区块就相当于这个账本中的一页，每10分钟生成一页新的账本，每一页账本上记载着比特币网络这10分钟的交易信息。每个区块之间依据密码学原理，按照时间顺序依次相连，形成链状结构，因此得名区块链。<br>　　自白皮书《比特币：一种点对点的电子现金系统》诞生后，国内外各大金融机构争相研究比特币底层技术区块链，并寻求区块链技术的实际应用。</p>
<h2 id="43-区块链技术的发展历史"><a href="#43-区块链技术的发展历史" class="headerlink" title="43.区块链技术的发展历史"></a>43.区块链技术的发展历史</h2><p>　　比特币刚诞生的时候，并没有“区块链”这个概念，人们用bitcoin（小写b）表示比特币，用Bitcoin（大写B）表示其底层技术，也就是我们现在说的区块链技术。<br>　　2015年，经济学人发布了封面文章《重塑世界的区块链技术》后，区块链技术在全球掀起一股金融科技狂潮，世界各大金融机构、银行争相研究区块链技术，仅2016年就有数十亿美元投资到区块链相关企业当中。<br>　　2017年9月，中国政府网（www.gov.cn）发表文章《我国区块链产业有望走在世界前列》，公开支持区块链技术发展，并向13亿中国人民普及了区块链技术。区块链在金融、保险、零售、公证等实体经济领域的应用开始加速落地。</p>
<h2 id="44-区块链，制造信用的机器"><a href="#44-区块链，制造信用的机器" class="headerlink" title="44.区块链，制造信用的机器"></a>44.区块链，制造信用的机器</h2><p>　　区块链并不是新发明的一种技术，而是一系列技术的集成，包括非对称加密技术、时间戳、共识机制等。<br>　　以比特币为例，区块链通过时间戳（Timestamp）和工作量证明（Proof of Work）机制解决了双重支付（Double Spending）和拜占庭将军问题（Byzantine Generals’ Problem），即保证同一笔比特币不可能被花费2次，并且在整个去中心化的区块链网络中，在所有节点间保持一致。<br>　　非对称加密机制保证私钥的安全性，时间戳保证区块按顺序连接成链，工作量证明机制解决了在去中心化系统中如何公平地分发2100万个比特币的问题。<br>　　区块链技术具有匿名性、去中心化、公开透明等特点。所以，区块链被誉为制造信用的机器。</p>
<h2 id="45-区块如何连接成区块链"><a href="#45-区块如何连接成区块链" class="headerlink" title="45.区块如何连接成区块链"></a>45.区块如何连接成区块链</h2><p>　　区块链由一串使用密码学算法产生的区块连接而成。每一个区块上写满了交易记录，区块按顺序相连形成链状结构，也就是区块链大账本。<br>　　以比特币为例，矿工在生成新区块时，需要根据前一个区块的哈希值、新交易区块和随机数，来计算新的哈希值和随机数。也就是说每一个区块都是在前一个区块数据的基础上生成的，该机制保证了区块链数据的唯一性。<br>　　因为交易记录细微的变化也会彻底改变哈希值的结果，所以矿工在进行算力竞争的时候无法作弊，每个矿工都必须等前一个区块生成之后才能根据前一个区块的数据开始计算符合条件的随机数，保证了挖矿的公平性。</p>
<h2 id="46-区块链记录哪些信息"><a href="#46-区块链记录哪些信息" class="headerlink" title="46.区块链记录哪些信息"></a>46.区块链记录哪些信息</h2><p>　　区块链是比特币网络的大账本，而每个区块相当于账本中的一页。那么“账本”内记载了哪些信息呢？目前比特币每个区块内主要记载了区块头、交易详情、交易计数器和区块大小等数据。<br>　　“区块头”内包含了除交易信息以外的所有信息，主要包括上一区块头哈希值：用于保证区块按顺序串连；时间戳：记录该区块的生成时间；随机数：即全网矿工一起PK的算术题答案；难度目标：该算术题的难度系数打分。<br>　　“交易详情”详细记载了每笔交易的转出方、收入方、金额及转出方的数字签名，是每个区块内的主要内容。<br>　　“交易计数器”表述每个区块中包含交易的数量。<br>　　“区块大小”表示每个区块数据的大小，当前每个区块限定在1MB以内，不排除以后有扩大的可能。</p>
<h2 id="47-时间戳是什么"><a href="#47-时间戳是什么" class="headerlink" title="47.时间戳是什么"></a>47.时间戳是什么</h2><p>　　区块链通过时间戳保证每个区块依次顺序相连。时间戳使区块链上每一笔数据都具有时间标记。简单来说，时间戳证明了区块链上什么时候发生了什么事情，且任何人无法篡改。<br>　　时间戳在区块链中扮演公证人的角色，而且比传统的公证制度更为可信，因为区块链上记录的信息无法被任何人以任何方式修改。<br>　　因为运用了时间戳，区块链技术很适合用于知识产权保护等领域。举个例子，你写了一篇论文，在发布之前想先找行业专家指点一下，但是你担心专家直接用他的名义发表。这时候你只需先保存在链上，便可以轻松证明版权。</p>
<h2 id="48-最长区块链才是正确的区块链"><a href="#48-最长区块链才是正确的区块链" class="headerlink" title="48.最长区块链才是正确的区块链"></a>48.最长区块链才是正确的区块链</h2><p>　　比特币白皮书规定，节点永远认为最长链是正确的区块链，并将持续在它上面延长。所有矿工都在最长链上挖矿，有利于区块链账本的唯一性。如果给你转账的比特币交易不记录在最长链上，你将有可能面临财产损失。<br>　　怎样算是“最长的区块链”呢？因为全世界的矿工同时在挖矿，有可能同时有2个矿工算出了正确的答案，那么区块链就会形成分叉，剩下的矿工有可能在其中任意一条分叉上继续挖矿，延长区块链。<br>　　所以我们通常要求在比特币转账被打包之后，还需要经历6个区块的确认，确保矿工不会再回到另一条分叉上挖矿时，才算真正的转账成功。</p>
<h2 id="49-区块链的分类–公有链，私有链和联盟链"><a href="#49-区块链的分类–公有链，私有链和联盟链" class="headerlink" title="49.区块链的分类–公有链，私有链和联盟链"></a>49.区块链的分类–公有链，私有链和联盟链</h2><p>　　区块链按准入机制分成3类：公有链，私有链和联盟链。以后还可能诞生其他类型的区块链。<br>　　公有链公开透明。世界上任何个体或者团体都可以在公有链发送交易，且交易能够获得该区块链的有效确认。每个人都可以竞争记账权。比特币区块链就是公有链的典型代表。<br>　　联盟链半公开。是某个群体或组织内部使用的区块链，需要预先指定几个节点为记账人，每个区块的生成由所有预选记账人共同决定，其他节点可以交易，但是没有记账权。<br>　　私有链则完全封闭。仅采用区块链技术进行记账，记账权并不公开，且只记录内部的交易，由公司或者个人独享。</p>
<h1 id="区块链资产都有哪些特点"><a href="#区块链资产都有哪些特点" class="headerlink" title="区块链资产都有哪些特点"></a>区块链资产都有哪些特点</h1><h2 id="50-区块链资产的特点–全球流通"><a href="#50-区块链资产的特点–全球流通" class="headerlink" title="50.区块链资产的特点–全球流通"></a>50.区块链资产的特点–全球流通</h2><p>　　区块链资产有几大特点，其中之一就是全球流通。区块链资产首先是基于互联网的。只要有互联网的地方，区块链资产就可以进行流通。这里的互联网可以是万维网，也可以是各种局域网，所以，区块链资产是全球流通的。<br>　　甚至你在月球、火星上，你只要有互联网，我就可以把我的区块链资产转账给你。<br>　　相较于中心化的方式，区块链资产在全球流通的转账手续费非常低。比如比特币早期转账手续费为0.0001BTC，现在就稍微有点贵了，其他如Bitcoin Cash网络转账手续费为0.0001BCC，达世转账手续费为0.002Dash，以太坊的转账手续费为0.01ETH，折合人民币才几块钱，非常便宜。相对于传统转账来说，区块链资产到账也非常快，一般几分钟到1小时就能到账。</p>
<h2 id="51-区块链资产的特点–匿名性"><a href="#51-区块链资产的特点–匿名性" class="headerlink" title="51.区块链资产的特点–匿名性"></a>51.区块链资产的特点–匿名性</h2><p>　　区块链资产的第二大特点是匿名性。就是别人无法知道你的区块链资产有多少，以及和谁进行了转账。这种匿名性是分不同程度的。<br>　　比特币的匿名性是最基本的。你在区块链网络上只能查到转账记录，但是不知道地址背后是谁。但是，一旦知道这个地址背后对应的人是谁，也就能查到其所有相关的转账记录及资产。达世币和门罗币匿名性做得更高。即使你查到了这个地址背后的人是谁，你也无法知道它所有的转账信息。<br>　　而Zcash将匿名性做到极致，只有拥有私钥的人才能查到所有的转账信息。</p>
<h2 id="52-区块链资产的特点–去中心化"><a href="#52-区块链资产的特点–去中心化" class="headerlink" title="52.区块链资产的特点–去中心化"></a>52.区块链资产的特点–去中心化</h2><p>　　区块链资产的第三大特点是记账去中心化。<br>　　你给别人的转账，不会因为记账机构要放假，所以延迟几天到账；不会因为记账机构要盈利，所以要付很高手续费；更不会因为记账机构作弊，而受到损失。<br>　　因为它的记账是全网共同进行的。你给别人转账记录的账本，不会因为你这里或者对方那里的账本数据丢失，而无法统一，因为这个账本是全网共同维护，每个全节点都有备份。如果你转账0.5个币给火币牛牛，你们俩一起看全网的记录数据就好：有没有到账、几个确认了等等，十分透明公正。</p>
<h2 id="53-区块链资产的特点–不可复制"><a href="#53-区块链资产的特点–不可复制" class="headerlink" title="53.区块链资产的特点–不可复制"></a>53.区块链资产的特点–不可复制</h2><p>　　区块链资产的第四大特点就是不可复制。互联网上信息的传播方式是拷贝。我发送给火币牛牛一个很好玩的图片，网络是把我手里的照片复制了一份给牛牛，并不是真的从我这里拿走，我的手机里依然保存着这张图片。<br>　　网络上的著作权一直是个大问题。文字、图片、影像很容易被拷贝，给它们的版权所有者带来很大困扰。<br>　　区块链资产之所以能够成为资产，很重要的因素就是因为它的不可复制性。它可传递是通过加密技术而不是拷贝。一份价值1000元的区块链资产，我发送给牛牛，这1000元资产就从我的账户转移到牛牛的账户里，我不再拥有这1000元资产。不可复制性，是保证它成为资产的一个重要因素。</p>
<h1 id="区块链有哪些技术原理"><a href="#区块链有哪些技术原理" class="headerlink" title="区块链有哪些技术原理"></a>区块链有哪些技术原理</h1><h2 id="54-区块链的共识机制是什么？"><a href="#54-区块链的共识机制是什么？" class="headerlink" title="54.区块链的共识机制是什么？"></a>54.区块链的共识机制是什么？</h2><p>　　在区块链系统当中，没有一个像银行一样的中心化记账机构，保证每一笔交易在所有记账节点上的一致性，即让全网达成共识至关重要。共识机制解决的就是这个问题。<br>　　目前主要的共识机制有工作量证明机制PoW和权益证明机制PoS。<br>　　PoW通过评估你的工作量来决定你获得记账权的机率，工作量越大，就越有可能获得此次记账机会。<br>　　PoS通过评估你持有代币的数量和时长来决定你获得记账权的机率。这就类似于股票的分红制度，持有股权相对多的人能够获得更多的分红。<br>　　DPOS与POS原理相似，只是选了一些“人大代表”。 与PoS的主要区别在于节点选举若干代理人，由代理人验证和记账。<br>　　随着技术的发展，未来可能还会诞生更先进的共识机制。</p>
<h2 id="55-工作量证明机制（POW）是什么"><a href="#55-工作量证明机制（POW）是什么" class="headerlink" title="55.工作量证明机制（POW）是什么"></a>55.工作量证明机制（POW）是什么</h2><p>　　工作量证明（Proof of Work，简称POW）是共识机制的一种，可简单理解为一份证明，证明你做过一定量的工作，即我通过查看工作结果就能知道你完成了指定量的工作。<br>　　比特币挖矿采用的就是工作量证明机制，比特币网络通过调节计算难度，保证每次竞争记账都需要全网矿工计算约10分钟，才能算出一个满足条件的结果。该结果即“区块头”里包含的随机数。<br>　　工作量证明是指，如果矿工找到了一个满足条件的结果，我们便可以认为全网矿工完成了指定难度系数的工作量。获得记账权的几率取决于矿工工作量占比全网的比例，如果占比30%，那么获得记账权的几率也是30%。所以提高工作量占比才能提高竞争力，才能获得更多新诞生的比特币！</p>
<h2 id="56-权益证明机制（PoS）是什么"><a href="#56-权益证明机制（PoS）是什么" class="headerlink" title="56.权益证明机制（PoS）是什么"></a>56.权益证明机制（PoS）是什么</h2><p>　　权益证明机制（Proof of Stake），简称POS，也称股权证明机制，类似于把资产存在银行里，银行会通过你持有数字资产的数量和时间给你分配相应的收益。<br>　　同理，采用PoS的数字资产，系统根据你的币龄给你分配相应的权益，币龄是你持币数量和时间的乘积。比如你持有100个币，总共持有了30天，那么，此时你的币龄就为3000。<br>　　相较PoW（工作量证明机制），PoS存在2个优势。第一，PoS不会造成过多的电力浪费，因为PoS不需要靠比拼算力挖矿。第二，POS更难进行51%攻击。拥有51%币才能发起攻击，网络受到攻击却会造成自己利益受损，显然很不划算。<br>　　目前，有很多数字资产用PoW发行新币，用PoS维护区块链网络安全。</p>
<h2 id="57-股权授权证明机制（DPoS）是什么"><a href="#57-股权授权证明机制（DPoS）是什么" class="headerlink" title="57.股权授权证明机制（DPoS）是什么"></a>57.股权授权证明机制（DPoS）是什么</h2><p>　　股份授权证明机制，简称DPoS，类似于董事会投票，持币者投出一定数量的节点，代理他们进行验证和记账。为了激励更多人参与竞选，系统会生成少量代币作为奖励。比特股、点点币等数字资产都采用该方式。<br>　　DPoS有点像议会制度或人民代表大会制度。如果代表不能履行他们的职责，比如轮到他们记账时，他们没能完成则会被除名，网络会选出新的节点来取代他们。<br>　　DPoS的每个客户端都有能力决定哪些节点可以被信任。相较PoW（工作量证明机制），DPoS大幅提高区块链处理数据的能力，甚至可以实现秒到账，同时也大幅降低维护区块链网络安全的费用，从而使数字资产的交易速度接近Visa等中心化结算系统。</p>
<h2 id="58-零知识证明是什么"><a href="#58-零知识证明是什么" class="headerlink" title="58.零知识证明是什么"></a>58.零知识证明是什么</h2><p>　　零知识证明是指证明者能够在不向验证者提供信息本身内容的情况下，使验证者相信某个论断是真实可信的一种技术。目前匿名性非常突出的数字资产ZCash的匿名交易就是依靠“零知识证明”实现的。<br>　　举个例子，A要向B证明自己拥有某个房间的钥匙，假设该房间只能用钥匙打开锁，而其他任何方法都打不开。这时候，A可以选择把钥匙交给B，B用这把钥匙打开该房间的锁，从而证明A拥有该房间的正确的钥匙。<br>　　或者A自己用钥匙打开房间，从房间里拿出来一个物体出示给B，B知道这个物体确实只有房间里有。方法二的原理就是零知识证明。<br>　　零知识证明可以在不泄漏信息本身内容的情况下，证明我知道这个秘密，可以有效解决许多验证问题。</p>
<h2 id="59-哈希算法是什么"><a href="#59-哈希算法是什么" class="headerlink" title="59.哈希算法是什么"></a>59.哈希算法是什么</h2><p>　　哈希算法是一种只能加密，不能解密的密码学算法，可以将任意长度的信息转换成一段固定长度的字符串。<br>　　这段字符串有两个特点：<br>　　1. 就算输入值只改变一点，输出的哈希值也会天差地别。<br>　　2. 只有完全一样的输入值才能得到完全一样的输出值。<br>　　3. 输入值与输出值之间没有规律，所以不能通过输出值算出输入值。要想找到指定的输出值，只能采用枚举法：不断更换输入值，寻找满足条件的输出值。<br>　　哈希算法保证了比特币挖矿不能逆向推导出结果。所以，矿工持续不断地进行运算，本质上是在暴力破解正确的输入值，谁最先找到谁就能获得比特币奖励。</p>
<h2 id="60-非对称加密是什么"><a href="#60-非对称加密是什么" class="headerlink" title="60.非对称加密是什么"></a>60.非对称加密是什么</h2><p>　　对称加密算法是指在加密和解密时使用的是同一个秘钥。与对称加密算法不同，非对称加密算法需要公钥和私钥。公钥和私钥是一对，如果用公钥对数据进行加密，只有用对应的私钥才能解密。<br>　　非对称加密与对称加密相比，其安全性更好。对称加密的通信双方使用相同的秘钥，如果一方的秘钥遭泄露，那么整个通信就会被破解。<br>　　而非对称加密使用一对秘钥，一个用来加密，一个用来解密，而且公钥是公开的，秘钥是自己保存的，在通讯前不需要先同步秘钥，避免了在同步私钥过程中被黑客盗取信息的风险。</p>
<h1 id="区块链扩容和分叉的故事"><a href="#区块链扩容和分叉的故事" class="headerlink" title="区块链扩容和分叉的故事"></a>区块链扩容和分叉的故事</h1><h2 id="61-扩容是什么"><a href="#61-扩容是什么" class="headerlink" title="61.扩容是什么"></a>61.扩容是什么</h2><p>　　在比特币诞生之初，比特币的创始人中本聪并没有特意限制区块的大小，区块最大可以达到32MB。<br>　　当时，平均每个区块大小为1-2KB，有人认为区块链上限过高容易造成计算资源的浪费，还容易发生DDOS攻击。因此，为了保证比特币系统的安全和稳定，中本聪决定临时将区块大小限制在1MB。<br>　　那时比特币的用户数量少，交易量也没有那么大，并不会造成区块拥堵。2013年至今，比特币价格直线飙升，用户越来越多，比特币网络拥堵、交易费用上升的问题逐渐涌现出来。<br>　　比特币社区开始探索如何给比特币“扩容”，即通过修改比特币底层代码，从而达到提高交易处理能力的目的。</p>
<h2 id="62-比特币为什么要扩容"><a href="#62-比特币为什么要扩容" class="headerlink" title="62.比特币为什么要扩容"></a>62.比特币为什么要扩容</h2><p>　　目前比特币区块大小为1M，每秒大约只能处理7个交易。随着比特币交易量不断增长，比特币网络已经难以迅速地进行转账交易确认，比特币网络出现拥堵。<br>　　比特币区块链上最高时有上万笔交易积压，比特币转账交易费高达几十美元，网络拥堵时，比特币交易甚至需要花费好几天才能被打包。大家开始讨论如何扩容。<br>　　自2013年起，人们提出了很多关于比特币扩容的方案，有人说要提高区块大小上限、有人说要拿出区块内部分无用信息……但是这些方案都没有获得广泛认可。因此，比特币扩容一直争论不休。<br>　　2017年8月，隔离见证激活，比特币单个区块的信息处理能力提高至以前的1.7倍。隔离见证是Segwit2X扩容方案的第一步。</p>
<h2 id="63-隔离见证是什么"><a href="#63-隔离见证是什么" class="headerlink" title="63.隔离见证是什么"></a>63.隔离见证是什么</h2><p>　　隔离见证是区块链扩容的一种方法，已经在莱特币和比特币上成功实施。<br>　　目前区块链上每个区块内不仅记录了每笔转账交易的具体信息，即在哪个时间点账户收到或转出多少比特币，还包含了每笔交易的数字签名，用来验证该交易的合法性。矿工在打包区块的时候需要用数字签名一一验证每笔交易，确认没有问题之后才会将该笔交易记录在区块里。<br>　　但是对于普通用户来说，他只关心每个账户有多少资产，并不需要一一验证每笔交易。隔离见证就是把区块内的数字签名信息拿出去，让每个区块可以承载更多笔交易，从而达到扩容的目的。</p>
<h2 id="64-区块链分叉是什么"><a href="#64-区块链分叉是什么" class="headerlink" title="64.区块链分叉是什么"></a>64.区块链分叉是什么</h2><p>　　在中心化系统中升级软件十分简单，在应用商店点击“升级”即可。但是在区块链等去中心化系统中，“升级”并不是那么简单，甚至可能一言不合造成区块链分叉。<br>　　简单说，分叉是指区块链在进行“升级”时发生了意见分歧，从而导致区块链分叉。因为没有中心化机构，比特币等数字资产每次代码升级都需要获得比特币社区的一致认可，如果比特币社区无法达成一致，区块链很可能形成分叉。<br>　　以比特币为例，2017年7月，为了解决比特币区块链拥堵问题，一些比特币爱好者提出了bitcoin cash分叉方案，导致比特币区块链一分为二。<br>　　根据分叉后的区块链是否能兼容旧区块链，分叉又分为“硬分叉”和“软分叉”。</p>
<h2 id="65-比特币居然生儿子了"><a href="#65-比特币居然生儿子了" class="headerlink" title="65.比特币居然生儿子了"></a>65.比特币居然生儿子了</h2><p>　　现在比特币社区有很多种扩容方案，如果有某种扩容方案可以获得足够的算力支持，成功激活，那么比特币网络将避免分叉的风险。<br>　　但是，因为比特币没有中心化的权利机构，很难达成共识。如果没有任何一种方案获得足够的算力支持，比特币区块链将形成分叉，届时将会产生多种比特币分叉币。原先持有比特币的人，在分叉后将自动且免费拥有分叉后产生的每种分叉币。因为分叉币都是免费获得的，所以又被称为糖果。<br>　　2017年8月，社区就扩容方案达成共识，激活了隔离见证扩容方案，比特币区块链的处理速度扩大至1.8倍。随后4个月里，比特币相继发生了多次分叉，产生了多个分叉币，很多比特币爱好者戏称比特币”生了很多儿子“。</p>
<h2 id="66-软分叉和硬分叉是什么"><a href="#66-软分叉和硬分叉是什么" class="headerlink" title="66.软分叉和硬分叉是什么"></a>66.软分叉和硬分叉是什么</h2><p>　　硬分叉，是指当比特币代码发生改变后，旧节点拒绝接受由新节点创造的区块。不符合原规则的区块将被忽略，矿工会按照原规则，在他们最后验证的区块之后创建新的区块。<br>　　而软分叉是指旧的节点并不会意识到比特币代码发生改变，并继续接受由新节点创造的区块。矿工们可能会在他们完全没有理解，或者验证过的区块上进行工作。<br>　　软分叉和硬分叉都”向后兼容”，这样才能保证新节点可以从头验证区块链。向后兼容是指新软件接受由旧软件所产生的数据或者代码，比如说Windows 10可以运行Windows XP的应用。而软分叉还可以”向前兼容”。向前兼容是指旧软件可以接受由新软件所产生的数据以及代码，比如你用Word 2013保存的文档，假如仍然可以用Word 2011打开，就是一种“向前兼容”。</p>
<h2 id="67-重放攻击是什么"><a href="#67-重放攻击是什么" class="headerlink" title="67.重放攻击是什么"></a>67.重放攻击是什么</h2><p>　　如果比特币真的发生分叉，作为普通用户，最大的风险就是重放攻击。<br>　　重放攻击是什么呢？如果比特币分裂为一种或多种比特币，如BTC1/BTC2/BTC3等，每个比特币账户内将根据他的比特币余额，同时存在对应数量的所有分叉币。<br>　　由于每条链上的地址和私钥、算法等都相同，交易格式也完全相同，导致在其中一条区块链上发起的交易，完全可以放到另一条区块链上去重新广播，可能也会得到确认。这就是“重放攻击”。<br>　　简单来说，在你转账BTC1的时候，你的BTC2/BTC3也可能同时被转走。<br>　　但是，目前很多分叉币做了双向防重放攻击处理，避免了分叉后被重放攻击的风险。</p>
<h2 id="68-硬分叉的故事–以太经典ETC"><a href="#68-硬分叉的故事–以太经典ETC" class="headerlink" title="68.硬分叉的故事–以太经典ETC"></a>68.硬分叉的故事–以太经典ETC</h2><p>　　以太坊（ETH）和以太经典（ETC）是硬分叉的典型案例。<br>　　The DAO计划基于以太坊智能合约建立一个众筹平台，于2016年5月正式发布，截止当年6月，募集资金超过1.6亿美元。之后，The DAO被黑客利用智能合约的漏洞，转移了市值五千万美元的以太币。为了挽回投资者资产，以太坊社区投票表决决定将更改以太坊代码，希望索回资金。为此，以太坊在第1920000区块进行硬分叉，回滚所有以太币（包括被黑客占有的）。<br>　　但是，有一部分人认为以太坊这种作法违背了区块链的去中心化和不可篡改精神，坚持在原链上挖矿，从而形成两条链，一条为不承认回滚交易的链-以太经典（ETC），一条为承认回滚交易的链即以太坊（ETH），各自代表不同的社区共识以及价值观。分叉时持有以太币的人在分叉后会同时持有ETH和ETC。</p>
<h1 id="区块链项目分类和应用"><a href="#区块链项目分类和应用" class="headerlink" title="区块链项目分类和应用"></a>区块链项目分类和应用</h1><h2 id="69-区块链项目分类和应用"><a href="#69-区块链项目分类和应用" class="headerlink" title="69.区块链项目分类和应用"></a>69.区块链项目分类和应用</h2><p>　　从目前主流的区块链项目来看，区块链项目主要为四类：第一类：币类；第二类：平台类；第三类：应用类；第四类：资产代币化。<br>　　币类主要充当区块链资产领域的“交换媒介”，交换媒介指一般等价物，比如以前的黄金、银票等。<br>　　平台类项目是指建立技术平台，用于满足各种区块链应用开发，可以降低在区块链上开发应用的门槛。<br>　　应用类项目范围比较广泛，涵盖金融、社交、游戏、产权保护等诸多领域，也是目前区块链资产增长最快的领域。<br>　　资产代币化项目是指是实物资产的区块链映射，也就是实物资产上链，目前不超过10个品种。<br>　　下面几期节目，火小币将深入介绍每类区块链项目的典型代表~</p>
<h2 id="70-区块链项目之一–币类"><a href="#70-区块链项目之一–币类" class="headerlink" title="70.区块链项目之一–币类"></a>70.区块链项目之一–币类</h2><p>　　第一类是币类项目，也是最早的区块链项目。币类项目主要包括比特币和莱特币等项目。<br>　　此外，还有一类资产具有匿名的特点，主要功能包括实现支付的同时可以保护支付双方的隐私，比较知名的有达世币（Dash）、门罗币（Monero）及采用零知识证明的大零币（Zcash）等。<br>　　币类主要充当区块链资产领域的“交换媒介”，交换媒介就是你用来换取商品的一般等价物，比如以前黄金、白银、银票可以作为交换媒介。<br>　　目前全球的数字资产种类超过1000个品种，币类区块链项目数量增长不快，截止2018年1月市值最大的依旧是比特币。比特币大家已经很熟悉了，接下来几集火小币将详细介绍一下莱特币、新经币、达世币、门罗币、Zcash。</p>
<h2 id="71-莱特币是什么"><a href="#71-莱特币是什么" class="headerlink" title="71.莱特币是什么"></a>71.莱特币是什么</h2><p>　　莱特币，英文叫Litecoin，简称LTC，诞生于2011年11月9日，创始人是查理·李（Charlie Lee）。<br>　　莱特币的宗旨是改进比特币，所以它和比特币有很多相似之处，在行业中有“比特金，莱特银”的说法。相较比特币，莱特币总量更大一些，确认速度更快一些。<br>　　莱特币总量是比特币的四倍，8400万枚；它的产量减半时间和比特币一样都是4年；它的共识机制和比特币一样都是工作量证明机制（PoW）；它的区块时间是2.5分钟，是比特币的四分之一，每2.5分钟打包一个区块；莱特币的区块奖励最早是50枚莱特币，截止目前（2018年1月）莱特币区块奖励为25莱特币，已发行量约为5400万。</p>
<h2 id="72-达世币Dash是什么"><a href="#72-达世币Dash是什么" class="headerlink" title="72.达世币Dash是什么"></a>72.达世币Dash是什么</h2><p>　　达世币诞生于2014年1月18日，匿名程度较比特币更高。<br>　　达世币有三种转账方式，一是像比特币一样的普通转账；二是即时交易。不需要矿工打包确认，就可以确认交易，几乎可以实现秒到；三是匿名交易。从区块链上看不到是谁和谁进行了转账。<br>　　达世币如何进行匿名交易呢？达世币中除了普通节点之外，还有一种节点叫“主节点”。主节点可以提供一系列服务，如：匿名交易和即时支付。想进行匿名交易的交易者发起匿名申请，由主节点进行混币，一般是3笔交易一起进行混币。举个例子，一桌人把自己的钱都放在桌上，混在一起，然后再分别拿回相应面值的钱，这样就不知道你手里的钱到底是谁的了，这就是混币。混币后，网络就不知道究竟谁转账给了谁。</p>
<h2 id="73-新经币是什么"><a href="#73-新经币是什么" class="headerlink" title="73.新经币是什么"></a>73.新经币是什么</h2><p>　　新经币，简称NEM，诞生于2015年4月1日，是第一个采用测试驱动开发模式开发出来的数字资产。<br>　　什么是测试驱动呢？就是先进行测试，然后再进行编程。举个常用的例子，建筑工人在盖房子的时候，喜欢先锤一根线下来，然后按照这根线去垒砖，就能把墙砌得笔直。如果直接垒砖，后面有可能会把墙砌歪了。测试驱动开发就是仅用通过测试的代码开发。<br>　　新经币采用重要性证明PoI共识机制（配音备注：poi），根据交易量、活跃度等维度决定记账权利，所以它每60秒就能打包一个区块，相较比特币、莱特币快很多。<br>　　它的总量是90亿枚，并且在发布的最初就将所有的新经币发行完成，所以每个新区块不产生新的新经币奖励，区块奖励仅为交易手续费，对于后进者的激励不够。</p>
<h2 id="74-门罗币Monero是什么"><a href="#74-门罗币Monero是什么" class="headerlink" title="74.门罗币Monero是什么"></a>74.门罗币Monero是什么</h2><p>　　门罗币，简称XMR，诞生于2014年4月18日，比达世币晚3个月，它的总量为1844万，目前（2018年1月）已发行1562万。门罗币的区块大小没有限制，所以不存在扩容风险。<br>　　门罗币通过环形签名的方式提供匿名性。环形签名是什么意思呢？在门罗币的区块链网络里面，网络首先将签名者的公钥和另外一个公钥进行一起混合，然后对消息进行签名，使得外界无法区分集合中哪个公钥对应真正的签名者。<br>　　这很像中国古代联名上书的时候，为了不暴露哪一个是发起人，所以通常采用由所有人签名形成一个环状，没有前后顺序，这样就不知道谁是发起者了。门罗币的匿名性甚至可以做到让发送币的人不知道币打给了哪个地址、接受币的人仅打开钱包也不知道是谁打来的币。</p>
<h2 id="75-大零币Zcash是什么"><a href="#75-大零币Zcash是什么" class="headerlink" title="75.大零币Zcash是什么"></a>75.大零币Zcash是什么</h2><p>　　Zcash，全称Zero Cash，简称ZEC，中文叫大零币，研发者为Zooko Wilcox，诞生于2011年11月9日。<br>　　采用零知识证明机制提供完全的支付保密性，是目前匿名性最强的数字资产。零知识证明是什么？请回顾区块链100问第58集。目前Zcash匿名转账的时间周期比较长，大概需要20分钟。网络可以选择普通转账或匿名转账，对隐私保护级别有所影响。<br>　　Zcash的大部分代码与比特币极其相似，例如它每4年减半一次，总量是2100万枚。Zcash进一步完善了比特币匿名功能方面的不足，发行时引起了密码学和区块链界的轰动，导致其刚诞生时价格一度飙升至比特币的7倍以上。Zcash采用PoW共识机制，区块时间为2.5分钟，区块奖励为12.5个ZEC，前4年20%挖矿所得自动分配给Zcash团队和投资者。</p>
<h2 id="76-区块链项目–平台类"><a href="#76-区块链项目–平台类" class="headerlink" title="76.区块链项目–平台类"></a>76.区块链项目–平台类</h2><p>　　区块链项目第二类是平台类。平台类项目主要功能为建立技术平台，满足各种区块链应用开发所需的技术要求。<br>　　简单地说，平台类应用让开发者可以在区块链上直接发行数字资产、编写智能合约等。智能合约就是在区块链数据库上运行的计算机程序，可以在满足其源代码设定条件下自行执行。<br>　　举个例子，你在区块链上开发一个基于房屋租金协议的智能合约，当业主收到租金时就会触发自动执行，并将公寓的安全密钥给到租户。<br>　　平台类区块链项目的主要功能是建立底层的技术平台，让开发者在底层技术平台上做应用开发，相当一部分平台尚处于开发状态当中，截止到2018年1月份，市值最大的是以太坊。</p>
<h2 id="77-以太坊是什么"><a href="#77-以太坊是什么" class="headerlink" title="77.以太坊是什么"></a>77.以太坊是什么</h2><p>　　以太坊是一个可编程、可视化、更易用的区块链，它允许任何人编写智能合约和发行代币。<br>　　就像比特币一样，以太坊是去中心化的，由全网共同记账，账本公开透明且不可窜改。<br>　　与比特币不同的是，以太坊是可编程的区块链，它提供了一套图灵完备的脚本语言，因此，开发人员可以直接用C语言等高级语言编程，转换成汇编语言，大大降低了区块链应用的开发难度。类似于安卓系统，提供了非常丰富的API 和接口，让用户可以开发出各种App。<br>　　从诞生到现在，有200多个以太坊应用诞生，俄罗斯银行也与以太坊基金会达成合作，截止目前（2017年9月）以太坊市值仅次于比特币，排行第2位。</p>
<h2 id="78-EOS是什么"><a href="#78-EOS是什么" class="headerlink" title="78.EOS是什么"></a>78.EOS是什么</h2><p>　　EOS是一个区块链开发平台，具有可扩展性强、支持大规模商业应用等特点。<br>　　首先，EOS采取DPoS共识算法及其他技术手段预期实现每秒百万级别交易请求，将能够支持数千个商业级的DAPPs。<br>　　以太坊是一条公链，在以太坊链上运行的每一个应用都会消耗整条链的资源，但EOS只是区块链基础架构，开发者可以自由地在EOS上创建公链，链与链之间不会影响彼此的资源使用，不会出现因个别应用资源消耗巨大而造成网络大面积拥堵。<br>　　其次，在EOS上转账与运行智能合约并不需要消耗EOS代币，这将吸引更多的用户。<br>　　最后，EOS上出现系统错误时，其“宪法”可用于区分此错误是否确实为bug，判断社区的修复举措是否得当。</p>
<h2 id="79-以太坊是什么"><a href="#79-以太坊是什么" class="headerlink" title="79.以太坊是什么"></a>79.以太坊是什么</h2><p>　　以太坊（Ethereum），简称ETH。2013年底，Vitalik发布以太坊白皮书，2014年7月，开始以太币的预售。那时候圈内人称这种代币发行叫“币众筹”。通过为期42天的预售，以太坊团队通过预售60102216个以太币，募集了3万多个比特币；另外还对预售之前参与开发的早期贡献者、长期从事项目研究的开发者分别按照当时以太币发售总量的9.9%进行分配。所以以太坊正式发行时有 7200多万个以太币。<br>　　以太坊预售结束后，采用工作量证明机制PoW进行挖矿，每年按照当时发行总量的26%奖励矿工。2014年10月，以太坊将区块的出块时间从60秒缩减到了12秒，目前基本稳定在15秒，每个区块奖励5个以太币。<br>　　虽然都是采用PoW挖矿机制，但是以太坊的出块机制和比特币还是有所区别。由于以太坊的出块时间短，导致以太坊很容易形成孤块，孤块是指不在最长链上的区块。比特币的孤块没有任何区块奖励，但是在以太坊中，孤块可以被引用，被引用的孤块被称为“叔块”（uncle block），它们打包的数据也会记录在区块链中。和比特币不一样，以太坊的叔块有奖励，每个叔块最多可以获得4.375个以太币的奖励。<br>　　以太坊是一个可编程的、图灵完备的区块链开发平台，相当于一个去中心化的全球计算机。在一个编程系统之上，通常会有一些编译和执行的虚拟机来去做支撑。JAVA有JVM，在以太坊里，也有以太坊的虚拟机EVM，可以执行任意复杂的算法代码。开发者可以使用现有的JavaScript 或Python等编程语言，在以太坊上创造出自己想要的应用。通过以太坊的虚拟机，你可以很简便地发行数字资产，编写智能合约，建立和运行去中心化的应用，成立去中心化自治组织等。<br>　　以太币（ETH）又被称为以太坊内部的燃料。和币类数字资产不同，以太坊除了用于转账，还用于支付智能合约的费用。<br>　　为了避免以太坊区块链上充斥垃圾合约和垃圾应用，在以太坊上建立和运行智能合约，你必须用ETH支付智能合约费用。举个例子，在以太坊区块链上转账你新创造的数字资产，需要用ETH支付手续费，而不是你新创造的数字资产。</p>
<h2 id="80-区块链项目–应用类"><a href="#80-区块链项目–应用类" class="headerlink" title="80.区块链项目–应用类"></a>80.区块链项目–应用类</h2><p>　　区块链项目第三类是应用类。应用类项目就是基于区块链开发平台（例如以太坊）开发的能够解决实体经济各个领域诸多问题的区块链项目。<br>　　例如基于区块链的预测平台Augur，基于区块链的算力交易平台Golem，基于区块链的奢侈品溯源平台VeChain，基于区块链提供资产兑换及转移服务的OmiseGo。利用区块链技术，这些项目可以更好地解决信任问题、跨国界流通等问题，同时，利用区块链上的智能合约和代币，可以更好地实现自动执行，大大提高社会经济活动的效率。<br>　　应用类区块链项目范围比较广泛，涵盖金融、社交、游戏、产权保护等诸多领域，也是目前区块链项目市值增长最快的领域。</p>
<h2 id="81-Augur是什么"><a href="#81-Augur是什么" class="headerlink" title="81.Augur是什么"></a>81.Augur是什么</h2><p>　　Augur是基于以太坊区块链打造的去中心化预测平台，于2015年6月正式发布，是以太坊上的第一款应用。<br>　　Augur采用了一个叫“群体智慧”的概念，它的意思是，一群人的智慧会高于这群人中最聪明的人。所以，Augur的预测结果往往比较接近事情的真实走向。<br>　　依靠群体智慧来预判事件的发展结果，可以有效地消除对手方风险和服务器的中心化风险。同时，利用区块链全球流通的属性，Augur创建了一个全球性的市场。如何保证每个人都作出理性的预测呢？用户用Augur代币进行预测和下注，如果预测正确，你将获得对手方的筹码，如果预测错误，你将损失下注的成本。</p>
<h2 id="82-Golem是什么"><a href="#82-Golem是什么" class="headerlink" title="82.Golem是什么"></a>82.Golem是什么</h2><p>　　Golem是第一个基于以太坊区块链打造的计算资源交易平台。通过区块链，Golem能链接全球的算力资源，从而实现计算能力的全球共享。应用所有者和个体用户（算力“请求方”）可以点对点地从其他用户处租用算力（算力“供应商”）。<br>　　当前，算力市场垄断严重，他们借助市场优势享受高额利润，进而导致算力价格居高不下。<br>　　去中心化的算力交易平台或许可以显著降低算力价格，但是其发展非常依赖平台参与者的数量。<br>　　Golem代币简称GNT，在使用算力资源时需要支付GNT酬劳给算力供应商、软件开发商。GNT总量为10亿枚，82%的GNT在外面出售和流通，18%的GNT保留在Golem团队手里。</p>
<h2 id="83-区块链项目–资产数字化"><a href="#83-区块链项目–资产数字化" class="headerlink" title="83.区块链项目–资产数字化"></a>83.区块链项目–资产数字化</h2><p>　　第四类是资产代币化区块链项目。资产代币化是指将区块链资产挂钩黄金和美元等实物资产，是实物资产的区块链映射，目前只有不超过10个品种，比较典型的代表是对标美元的USDT，对标黄金的Digix Dao，DigixDAO每个代币代表1克由伦敦金银市场协会认证的黄金。<br>　　资产代币化具有方便交易，便于保管等优势。首先，资产代币化更方便交易。因为区块链资产可以拆分，具有更好地流动性。举个例子，目前房产需要整体转让，如果房产可以代币化，便可以拆分购买，更方便交易。<br>　　其次，实物资产代币化更利于保管。黄金等在实物交易中，很容易形成磨损，造成损失。但是实物资产代币化后并不需要进行实物转移，更利于实物资产的保管。</p>
<h2 id="84-DigixDao是什么"><a href="#84-DigixDao是什么" class="headerlink" title="84.DigixDao是什么"></a>84.DigixDao是什么</h2><p>　　黄金是避险的不二选择。Digix发行的黄金代币则是数字资产世界里的黄金，其代币简称DGX，能够在数字资产世界中起到避险的作用。<br>　　DGX如何实现对标黄金呢？它将黄金资产进行了上链（即：区块链）操作。举个例子，假如你有1公斤黄金准备出售，你可以将黄金切割出售，但这样太麻烦，而且容易形成损耗。<br>　　你也可以将1公斤黄金寄到新加坡，让伦敦金银协会（LBMA) 验证黄金，验证合格后会给你发放黄金资产所有权的证书。<br>　　该数字化证书可以转换为1000枚DGX代币，即1个DGX代币=1克黄金。大大地提高了黄金的流通效率。同理，需要提取黄金时，只要你拥有相应的代币，即可换成证书去提取黄金。</p>
<h2 id="85-Tether是什么"><a href="#85-Tether是什么" class="headerlink" title="85.Tether是什么"></a>85.Tether是什么</h2><p>　　USDT是Tether公司推出的对标美元（USD）的代币Tether USD。1USDT=1美元，用户可以随时使用USDT与USD进行1:1兑换。Tether公司执行1:1准备金保证制度，即每个USDT代币，都会有1美元的准备金保障，对USDT价格的恒定形成支撑。某个数字资产单价是多少USDT，也就相当于是它的单价是多少美元（USD）。<br>　　由于USDT与等量的美元是等值的，因此它是价值比较稳定的数字资产。在市场价格波动剧烈时，用户可以将账户中的区块链资产替换成USDT，达到保值避险的作用。<br>　　用户可以通过SWIFT电汇美元至Tether公司提供的银行帐户，或通过交易平台，比如otc.huobipro.com换取USDT。赎回美元时，反向操作即可。用户也可在交易平台用比特币换取USDT。</p>
<h2 id="86-山寨币和竞争币是什么"><a href="#86-山寨币和竞争币是什么" class="headerlink" title="86.山寨币和竞争币是什么"></a>86.山寨币和竞争币是什么</h2><p>　　山寨币是指以比特币代码为模板，对其底层技术区块链进行了一些修改的区块链资产，其中有技术性创新或改进的又称为竞争币。<br>　　因为比特币代码开源，导致比特币的抄袭成本很低，甚至只需复制比特币的代码，修改一些参数，便可以生成一条全新的区块链。<br>　　目前已存在的山寨币有数百种。大多数山寨币由于创始人技术实力弱、缺少技术维护、缺少市场推广等原因并不被市场认可，不具有投资价值。少数技术实力、创新能力都很强的团队开发的优秀竞争币才能被市场认可，具有投资价值，我们比较熟悉的竞争币有莱特币、以太坊等。</p>
<h2 id="87-区块链能像互联网一样改变世界"><a href="#87-区块链能像互联网一样改变世界" class="headerlink" title="87.区块链能像互联网一样改变世界"></a>87.区块链能像互联网一样改变世界</h2><p>　　互联网是一种去中心化的信息传输体系，区块链是一种去中心化的价值传输体系。两者都被誉为改变时代的伟大技术。<br>　　互联网的主要用途是实现信息的快速发送和接收，在互联网上传输word文档，其实是信息的拷贝，你有一份，别人也有一份。<br>　　区块链用于价值传输，在区块链上传递比特币，本质上是传递所有权，你的比特币变成了别人的比特币。<br>　　区块链上的数据具有高度的防篡改性，经过全网多数节点验证方可使用，一旦记录便无法修改。区块链上的每一次价值传输都被明确记录，且可以溯源。区块链能在各中心间建立信任，有人说区块链能像互联网一样改变世界。</p>
<h2 id="88-区块链有那些缺点"><a href="#88-区块链有那些缺点" class="headerlink" title="88.区块链有那些缺点"></a>88.区块链有那些缺点</h2><p>　　区块链的优势很多，劣势也很明显。<br>　　区块链上的信息公开透明，可以有效地防止黑箱操作等现象。但也意味着如果知道某个人的账户，我就能知道他的所有财富和每一笔交易，没有隐私可言。<br>　　区块链上的信息不可修改，意味着如果你转账信息填错，谁也无法帮你找回损失。<br>　　区块链是去中心化的，节点之间无需中心化机构便可以自证其信，但也意味着每个人都需有一本完整的账本，随着时间推进，账本越来越大，普通计算机可能难以运行。同时，去中心化意味着没有中心化机构替你保存密钥，一旦丢失便永远无法找回。<br>　　去中心化网络网络在各个节点之间达成一致的效率很低，很难像中心化支付方式那样快速。</p>
<h2 id="89-区块链适合应用于哪些领域"><a href="#89-区块链适合应用于哪些领域" class="headerlink" title="89.区块链适合应用于哪些领域"></a>89.区块链适合应用于哪些领域</h2><p>　　区块链是去中心化的价值传输体系，具有信息公开透明、不可篡改、全球联通且交易成本低等特点。适合运用于暂时无信任中心、解决信任的成本非常高、跨中心间价值传输等领域。目前，区块链的应用领域广泛。<br>　　档案管理、专利保护等社会管理领域，物品溯源、防伪等物联网领域，慈善捐款等公益领域均运用了区块链上信息公开透明且不可篡改的特点；<br>　　交易清算结算、私募等金融服务领域运用了区块链低交易成本的特点；<br>　　社交、通讯领域，共享租赁等共享经济领域运用了区块链全球联通的特点。<br>　　区块链的应用前景巨大，将彻底革新现有价值传输体系。</p>
<h2 id="90-目前区块链联盟盘点"><a href="#90-目前区块链联盟盘点" class="headerlink" title="90.目前区块链联盟盘点"></a>90.目前区块链联盟盘点</h2><p>　　在区块链行业发展早期阶段，很多企业、机构等组成区块链联盟，共享区块链技术研究成果，寻求区块链技术更广泛的应用。<br>　　近两年，区块链联盟涌现，截止2017年7月，目前已有由约40多家国际银行组成的R3、由Linux基金会发起的超级账本（hyperledger）、位于中国互联网核心腹地的中关村区块链产业联盟、由11家机构共同发起的China Ledger联盟、由25家金融机构联合成立的金链盟、被称为“俄罗斯版R3”的俄罗斯区块链联盟、寻求与微金融结合点的区块链微金融产业联盟、由深圳前海管理局主导的前海国际区块链生态圈联盟、位于陆家嘴的陆家嘴区块链金融发展联盟。<br>　　众人拾柴火焰高，众多机构和人才加入推动区块链的蓬勃发展。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://tech.sina.com.cn/zt_d/blockchain_100/" target="_blank" rel="external">http://tech.sina.com.cn/zt_d/blockchain_100/</a></p>
]]></content>
    
    <summary type="html">
    
      区块链基础100问，让你变身区块链达人
    
    </summary>
    
      <category term="区块链" scheme="http://yoursite.com/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="区块链" scheme="http://yoursite.com/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>Weex 源码研究 -- 事件响应流程</title>
    <link href="http://yoursite.com/2018/04/16/open-source-weex-android-event-reponse/"/>
    <id>http://yoursite.com/2018/04/16/open-source-weex-android-event-reponse/</id>
    <published>2018-04-16T02:00:00.000Z</published>
    <updated>2018-06-12T10:58:52.763Z</updated>
    
    <content type="html"><![CDATA[<h2 id="调用流程"><a href="#调用流程" class="headerlink" title="调用流程"></a>调用流程</h2><h3 id="注册流程"><a href="#注册流程" class="headerlink" title="注册流程"></a>注册流程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">├── WXComponent.addEvents()</div><div class="line">    ├── WXComponent.addEvent(String type)</div><div class="line">        ├── WXComponent.addClickListener()</div><div class="line">        ├── WXComponent.addFocusChangeListener()</div><div class="line">    ├── WXComponent.setActiveTouchListener()</div></pre></td></tr></table></figure>
<h3 id="响应流程"><a href="#响应流程" class="headerlink" title="响应流程"></a>响应流程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">├── WXComponent.addClickListener</div><div class="line">    ├── onClick()</div><div class="line">        ├── WXComponent.OnClickListener.onHostViewClick()</div><div class="line">            ├── WXComponent.fireEvent()</div><div class="line">                ├── WXSDKInstance.fireEvent()</div><div class="line">                    ├── WXBridgeManager.fireEventOnNode()</div><div class="line">                        ├── WXBridgeManager.addJSEventTask()</div><div class="line">                        ├── WXBridgeManager.sendMessage(WXJSBridgeMsgType.CALL_JS_BATCH)</div><div class="line">                        ----------------------------------------------------------------</div><div class="line">                        ├── WXBridgeManager.handleMessage(WXJSBridgeMsgType.CALL_JS_BATCH)</div><div class="line">                            ├── WXBridgeManager.invokeCallJSBatch()</div><div class="line">                                ├── WXJsonUtils.wsonWXJSObject(tasks)</div><div class="line">                                ├── WXBridgeManager.invokeExecJS()</div><div class="line">                                    ├── WXBridge.execJS()</div></pre></td></tr></table></figure>
<h2 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h2><h3 id="注册流程-1"><a href="#注册流程-1" class="headerlink" title="注册流程"></a>注册流程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">private void addEvents() &#123;</div><div class="line">  int count = mDomObj.getEvents().size();</div><div class="line">  for (int i = 0; i &lt; count; ++i) &#123;</div><div class="line">    addEvent(mDomObj.getEvents().get(i));</div><div class="line">  &#125;</div><div class="line">  setActiveTouchListener();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>addEvents()</code> 会获取 <code>mDomObj</code> 中的所有事件，然后根据每个时间的名称在 <code>addEvent()</code> 方法中为每一个事件注册监听器。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public void addEvent(String type) &#123;</div><div class="line">  if (TextUtils.isEmpty(type)</div><div class="line">          || mAppendEvents.contains(type)</div><div class="line">          || getRealView() == null) &#123;</div><div class="line">    return;</div><div class="line">  &#125;</div><div class="line">  mAppendEvents.add(type);</div><div class="line"></div><div class="line">  View view = getRealView();</div><div class="line">  if (type.equals(Constants.Event.CLICK) &amp;&amp; view != null) &#123;</div><div class="line">    addClickListener(mClickEventListener);</div><div class="line">  &#125; else if ((type.equals( Constants.Event.FOCUS) || type.equals( Constants.Event.BLUR)) ) &#123;</div><div class="line">    ......</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="响应流程-1"><a href="#响应流程-1" class="headerlink" title="响应流程"></a>响应流程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public void onHostViewClick() &#123;</div><div class="line">  Map&lt;String, Object&gt; param= WXDataStructureUtil.newHashMapWithExpectedSize(1);</div><div class="line">  Map&lt;String, Object&gt; position = WXDataStructureUtil.newHashMapWithExpectedSize(4);</div><div class="line">  int[] location = new int[2];</div><div class="line">  mHost.getLocationOnScreen(location);</div><div class="line">  position.put(&quot;x&quot;, WXViewUtils.getWebPxByWidth(location[0],mInstance.getInstanceViewPortWidth()));</div><div class="line">  position.put(&quot;y&quot;, WXViewUtils.getWebPxByWidth(location[1],mInstance.getInstanceViewPortWidth()));</div><div class="line">  position.put(&quot;width&quot;, WXViewUtils.getWebPxByWidth(mDomObj.getLayoutWidth(),mInstance.getInstanceViewPortWidth()));</div><div class="line">  position.put(&quot;height&quot;, WXViewUtils.getWebPxByWidth(mDomObj.getLayoutHeight(),mInstance.getInstanceViewPortWidth()));</div><div class="line">  param.put(Constants.Name.POSITION, position);</div><div class="line">  fireEvent(Constants.Event.CLICK,param);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 <code>WXComponent.onHostViewClick()</code> 方法中会把当前 <code>View</code> 的 location 和宽高作为参数传递给 <code>fireEvent</code> 方法。</p>
<p>来看一下 <code>WXBridgeManager.fireEventOnNode()</code> 方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public void fireEventOnNode(final String instanceId, final String ref,</div><div class="line">                            final String type, final Map&lt;String, Object&gt; data,</div><div class="line">                            final Map&lt;String, Object&gt; domChanges, List&lt;Object&gt; params,  EventResult callback) &#123;</div><div class="line">  if (TextUtils.isEmpty(instanceId) || TextUtils.isEmpty(ref)</div><div class="line">      || TextUtils.isEmpty(type) || mJSHandler == null) &#123;</div><div class="line">    return;</div><div class="line">  &#125;</div><div class="line">  if (!checkMainThread()) &#123;</div><div class="line">    throw new WXRuntimeException(</div><div class="line">        &quot;fireEvent must be called by main thread&quot;);</div><div class="line">  &#125;</div><div class="line">  // 这里会根据是否注册回调函数分两种不同情况来执行</div><div class="line">  if(callback == null) &#123;</div><div class="line">    // 没有注册回调，添加fireEvent事件到待执行的JSEventTask列表，并向 mJSHandler 发送 CALL_JS_BATCH 消息</div><div class="line">    addJSEventTask(METHOD_FIRE_EVENT, instanceId, params, ref, type, data, domChanges);</div><div class="line">    sendMessage(instanceId, WXJSBridgeMsgType.CALL_JS_BATCH);</div><div class="line">  &#125;else&#123;</div><div class="line">    // 注册了回调函数，则在 JS 线程立即执行，并执行回调函数。</div><div class="line">    asyncCallJSEventWithResult(callback, METHD_FIRE_EVENT_SYNC, instanceId, params, ref, type, data, domChanges);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里 <code>onClick</code> 事件并没有注册回调函数，因此会向 <code>mJSHandler</code> 发送 <code>CALL_JS_BATCH</code> 消息。<br>后面执行的 <code>invokeCallJSBatch</code> 和前面博客 <a href="http://www.heqiangfly.com/2018/04/10/open-source-weex-android-module-register-callback/" target="_blank" rel="external">Module 注册、调用和回调函数的执行流程</a> 执行流程是一样的，这里不在介绍。<br>这里 <code>WXBridge.execJS</code> 执行的参数为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[&#123;&quot;args&quot;:[&quot;11&quot;,&quot;click&quot;,&#123;&quot;position&quot;:&#123;&quot;height&quot;:19.791666,&quot;width&quot;:106.25,&quot;x&quot;:321.875,&quot;y&quot;:1315.625&#125;&#125;,null],&quot;method&quot;:&quot;fireEvent&quot;&#125;]</div></pre></td></tr></table></figure>
<p>把参数传递给前端后会根据 instanceId 和当前元素的 Id 执行对应的方法。</p>
]]></content>
    
    <summary type="html">
    
      介绍 Weex 事件响应流程
    
    </summary>
    
      <category term="Weex" scheme="http://yoursite.com/categories/Weex/"/>
    
    
      <category term="Weex" scheme="http://yoursite.com/tags/Weex/"/>
    
  </entry>
  
  <entry>
    <title>Weex 源码研究 -- Module 注册、调用和回调函数的执行流程</title>
    <link href="http://yoursite.com/2018/04/10/open-source-weex-android-module-register-callback/"/>
    <id>http://yoursite.com/2018/04/10/open-source-weex-android-module-register-callback/</id>
    <published>2018-04-10T02:00:00.000Z</published>
    <updated>2018-06-02T09:24:04.977Z</updated>
    
    <content type="html"><![CDATA[<h2 id="注册-Module"><a href="#注册-Module" class="headerlink" title="注册 Module"></a>注册 Module</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">├── WXSDKEngine.registerModule()</div><div class="line">    └── WXModuleManager.registerModule()</div><div class="line">        ├── WXModuleManager.registerNativeModule()</div><div class="line">        └── WXModuleManager.WXSDKManager.getInstance().registerModules()</div><div class="line">            └── WXBridgeManager.registerModules()</div><div class="line">                 └── WXBridgeManager.invokeRegisterModules()</div><div class="line">                     └── WXBridge.execJS()</div></pre></td></tr></table></figure>
<p>注册 Module 的流程和注册 Component 流程比较类似。<br><code>registerModule()</code> 也有多个重载方法，但最终调用的是 <code>WXModuleManager.registerModule()</code> 方法。<br>在介绍 <code>WXModuleManager.registerModule()</code> 方法之前，我们先看一下它的参数之一 <code>ModuleFactory</code>。这个类和注册 Component 时的 ComponentHolder 类比较类似。<br>一般情况下，我们会调用 <code>registerModule(String moduleName, Class&lt;T&gt; moduleClass,boolean global)</code> 方法来注册 Module，比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">registerModule(&quot;modal&quot;, WXModalUIModule.class, false);</div></pre></td></tr></table></figure>
<p>WXSDKEngine.registerModule(String moduleName, Class<t> moduleClass,boolean global)</t></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public static &lt;T extends WXModule&gt; boolean registerModule(String moduleName, Class&lt;T&gt; moduleClass,boolean global) throws WXException &#123;</div><div class="line">  return moduleClass != null &amp;&amp; registerModule(moduleName, new TypeModuleFactory&lt;&gt;(moduleClass), global);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这时候会以 <code>WXModalUIModule.class</code> 为参数生成一个 <code>TypeModuleFactory</code> 实例。它有三个作用分别对应三个方法：</p>
<ul>
<li>buildInstance()：生成一个 Module 对应 class 的实例</li>
<li>getMethods()：获取 class 所有的 JSMethod 注解的方法 </li>
<li>getMethodInvoker(String name)：获取注册 Module 提供的API的执行体</li>
<li>generateMethodMap()：解析该模块中的所有方法，并为它生成一个方法的执行体 <code>MethodInvoker</code></li>
</ul>
<p>先来看一下 <code>TypeModuleFactory.generateMethodMap()</code> 方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">private void generateMethodMap() &#123;</div><div class="line">  if(WXEnvironment.isApkDebugable()) &#123;</div><div class="line">    WXLogUtils.d(TAG, &quot;extractMethodNames:&quot; + mClazz.getSimpleName());</div><div class="line">  &#125;</div><div class="line">  HashMap&lt;String, Invoker&gt; methodMap = new HashMap&lt;&gt;();</div><div class="line">  try &#123;</div><div class="line">    for (Method method : mClazz.getMethods()) &#123;</div><div class="line">      // 获取该方法的所有注解</div><div class="line">      for (Annotation anno : method.getDeclaredAnnotations()) &#123;</div><div class="line">        if (anno != null) &#123;</div><div class="line">          if(anno instanceof JSMethod) &#123;</div><div class="line">            JSMethod methodAnnotation = (JSMethod) anno;</div><div class="line">            String name = JSMethod.NOT_SET.equals(methodAnnotation.alias())? method.getName():methodAnnotation.alias();</div><div class="line">            // 生成MethodInvoker实例，methodAnnotation.uiThread() 是@JSMethod(uiThread = true)注解的uiThread参数，</div><div class="line">            // 方法执行时会根据不同的uiThread参数在不同的线程执行</div><div class="line">            methodMap.put(name, new MethodInvoker(method, methodAnnotation.uiThread()));</div><div class="line">            break;</div><div class="line">          &#125;else if(anno instanceof WXModuleAnno) &#123;</div><div class="line">            WXModuleAnno methodAnnotation = (WXModuleAnno)anno;</div><div class="line">            methodMap.put(method.getName(), new MethodInvoker(method,methodAnnotation.runOnUIThread()));</div><div class="line">            break;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125; catch (Throwable e) &#123;</div><div class="line">    WXLogUtils.e(&quot;[WXModuleManager] extractMethodNames:&quot;, e);</div><div class="line">  &#125;</div><div class="line">  // 生成所有方法的 Map</div><div class="line">  mMethodMap = methodMap;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>WXModuleManager.registerModule() 方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">public static boolean registerModule(final String moduleName, final ModuleFactory factory, final boolean global) throws WXException &#123;</div><div class="line">  ...</div><div class="line">  // 在JS线程中执行注册任务</div><div class="line">  WXBridgeManager.getInstance()</div><div class="line">      .post(new Runnable() &#123;</div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">      ...</div><div class="line">      // 如果这个Module是全局的，则直接生成该Module对象，然后存储在 sGlobalModuleMap 中，那么就可以通过 WXModuleManager.findModule() 方法直接调用 Module 的方法。</div><div class="line">      if (global) &#123;</div><div class="line">        try &#123;</div><div class="line">          WXModule wxModule = factory.buildInstance();</div><div class="line">          wxModule.setModuleName(moduleName);</div><div class="line">          sGlobalModuleMap.put(moduleName, wxModule);</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">          WXLogUtils.e(moduleName + &quot; class must have a default constructor without params. &quot;, e);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      // 在 Java 层注册 Module</div><div class="line">      try &#123;</div><div class="line">        registerNativeModule(moduleName, factory);</div><div class="line">      &#125; catch (WXException e) &#123;</div><div class="line">        WXLogUtils.e(&quot;&quot;, e);</div><div class="line">      &#125;</div><div class="line">      // 在 JS 层注册 Module</div><div class="line">      registerJSModule(moduleName, factory);</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">  return true;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Native 层的注册过程很简单，在 <code>sModuleFactoryMap</code> 中保存了 Module 的 Name 及对应的 <code>ModuleFactory</code>，提供给 <code>callModuleMethod()</code> 方法调用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">static boolean registerNativeModule(String moduleName, ModuleFactory factory) throws WXException &#123;</div><div class="line">    if (factory == null) &#123;</div><div class="line">      return false;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    try &#123;</div><div class="line">      sModuleFactoryMap.put(moduleName, factory);</div><div class="line">    &#125;catch (ArrayStoreException e)&#123;</div><div class="line">      e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    return true;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>JS 层的注册也比较简单，调用 <code>WXBridge.execJS()</code> 注册。<br>WXBridgeManager.invokeRegisterModules()</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">private void invokeRegisterModules(Map&lt;String, Object&gt; modules, List&lt;Map&lt;String, Object&gt;&gt; failReceiver) &#123;</div><div class="line">  ...</div><div class="line">  // 生成参数：&#123;&quot;modal&quot;:[&quot;confirm&quot;,&quot;removeAllEventListeners&quot;,&quot;toast&quot;,&quot;prompt&quot;,&quot;alert&quot;,&quot;addEventListener&quot;]&#125;</div><div class="line">  WXJSObject[] args = &#123;new WXJSObject(WXJSObject.JSON,</div><div class="line">      WXJsonUtils.fromObjectToJSONString(modules))&#125;;</div><div class="line">  try &#123;</div><div class="line">  // 通过jni运行js方法</div><div class="line">    mWXBridge.execJS(&quot;&quot;, null, METHOD_REGISTER_MODULES, args);</div><div class="line">  &#125; catch (Throwable e) &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Module-方法调用流程"><a href="#Module-方法调用流程" class="headerlink" title="Module 方法调用流程"></a>Module 方法调用流程</h2><h3 id="方法执行流程图"><a href="#方法执行流程图" class="headerlink" title="方法执行流程图"></a>方法执行流程图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">├── WXBridge.callNativeModule</div><div class="line">    ├── WXModuleManager.callModuleMethod</div><div class="line">        ├── WXModuleManager.findModule</div><div class="line">        ├── TypeModuleFactory.getMethodInvoker</div><div class="line">        ├── WXModuleManager.dispatchCallModuleMethod</div><div class="line">            ├── NativeInvokeHelper.invoke</div><div class="line">                ├── NativeInvokeHelper.prepareArguments</div><div class="line">                ├── MethodInvoker.isRunOnUIThread()</div></pre></td></tr></table></figure>
<h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public Object invoke(final Object target,final Invoker invoker,JSONArray args) throws Exception &#123;</div><div class="line">  // 解析执行方法的参数</div><div class="line">  final Object[] params = prepareArguments(</div><div class="line">      invoker.getParameterTypes(),</div><div class="line">      args);</div><div class="line">  // 如果设置@JSMethod(uiThread = true)，那么在UI线程执行，返回值为null。</div><div class="line">  if (invoker.isRunOnUIThread()) &#123;</div><div class="line">    WXSDKManager.getInstance().postOnUiThread(new Runnable() &#123;</div><div class="line">      @Override</div><div class="line">      public void run() &#123;</div><div class="line">        try &#123;</div><div class="line">          // 在UI线程执行方法</div><div class="line">          invoker.invoke(target, params);</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">          throw new RuntimeException(target + &quot;Invoker &quot; + invoker.toString() ,e);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;, 0);</div><div class="line">  &#125; else &#123;</div><div class="line">    //设置@JSMethod(uiThread = false)的话走到这里</div><div class="line">    return invoker.invoke(target, params);</div><div class="line">  &#125;</div><div class="line">  return null;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从这个方法我们可以看出，如果模块的自定义方法需要返回值，那么就只能设置 <code>@JSMethod(uiThread = false)</code>。相当于同步方法。</p>
<p>解析参数：<br><code>paramClazzs</code> 是模块中定义的方法的参数类型数组，<code>args</code> 是JS传递过来的参数数组。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">private Object[] prepareArguments(Type[] paramClazzs, JSONArray args) throws Exception &#123;</div><div class="line">  Object[] params = new Object[paramClazzs.length];</div><div class="line">  Object value;</div><div class="line">  Type paramClazz;</div><div class="line">  // 遍历参数</div><div class="line">  for (int i = 0; i &lt; paramClazzs.length; i++) &#123;</div><div class="line">    paramClazz = paramClazzs[i];</div><div class="line">    // 确保args中的参数在模块方法定义的范围之内。</div><div class="line">    if(i&gt;=args.size())&#123;</div><div class="line">      if(!paramClazz.getClass().isPrimitive()) &#123;</div><div class="line">        params[i] = null;</div><div class="line">        continue;</div><div class="line">      &#125;else &#123;</div><div class="line">        throw new Exception(&quot;[prepareArguments] method argument list not match.&quot;);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    //  从数组中获取单个参数，并放入params数组</div><div class="line">    value = args.get(i);</div><div class="line">    if (paramClazz == JSONObject.class) &#123;</div><div class="line">      // 如果是 JSONObject 类型</div><div class="line">      if(value instanceof  JSONObject || value == null) &#123;</div><div class="line">        params[i] = value;</div><div class="line">      &#125;else if (value instanceof String)&#123;</div><div class="line">        params[i] = JSON.parseObject(value.toString());</div><div class="line">      &#125;</div><div class="line">    &#125; else if(JSCallback.class == paramClazz)&#123;</div><div class="line">      // 如果是 callback类型参数，这里的 value 其实是JS定义的callbackID。</div><div class="line">      if(value instanceof String)&#123;</div><div class="line">        // 根据sdkInstanceId和 callbackId 创建一个 SimpleJSCallback 实例对象</div><div class="line">        params[i] = new SimpleJSCallback(mInstanceId,(String)value);</div><div class="line">      &#125;else&#123;</div><div class="line">        throw new Exception(&quot;Parameter type not match.&quot;);</div><div class="line">      &#125;</div><div class="line">    &#125; else &#123;</div><div class="line">      params[i] = WXReflectionUtils.parseArgument(paramClazz,value);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  return params;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="callback执行流程"><a href="#callback执行流程" class="headerlink" title="callback执行流程"></a>callback执行流程</h2><p>为了测试 callback 的执行流程，我们自定义了下面模块：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class MyModule extends WXModule &#123;</div><div class="line">  @JSMethod(uiThread = true)</div><div class="line">  public void testCallback(JSONObject options, JSCallback callback1, JSCallback callback2) &#123;</div><div class="line">    Log.e(&quot;Test&quot;,&quot;testCallback = &quot;+options.toString());</div><div class="line">    if(callback1 != null) &#123;</div><div class="line">      callback1.invoke(new Data(&quot;success&quot;,&quot;paraSuccess1&quot;,&quot;paraSuccess2&quot;));</div><div class="line">    &#125;</div><div class="line">    if(callback2 !=null)&#123;</div><div class="line">      callback2.invoke(&quot;Test2&quot;);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  public static class Data&#123;</div><div class="line">    public String method;</div><div class="line">    public Object paras;</div><div class="line">    public Data(String method, Object... objArr)&#123;</div><div class="line">      this.method = method;</div><div class="line">      this.paras = objArr;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用该模块：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">weex.requireModule(&apos;myModule&apos;).testCallback(&#123;</div><div class="line">  type:&quot;test&quot;, </div><div class="line">  data:2</div><div class="line">  &#125;,</div><div class="line">  function (e) &#123;</div><div class="line">    console.log(&quot;callback1&quot;);</div><div class="line">  &#125;,</div><div class="line">  function (e) &#123;</div><div class="line">    console.log(&quot;callback2&quot;);</div><div class="line">  &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<p>下面来看一下 callback1 的调用流程：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">├── SimpleJSCallback.invoke()</div><div class="line">    ├── WXBridgeManager.callbackJavascript</div><div class="line">        ├── WXBridgeManager.addJSTask()</div><div class="line">            ├── WXBridgeManager.addJSTask()</div><div class="line">                ├── WXBridgeManager.addJSEventTask()</div><div class="line">        ├── sendMessage(WXJSBridgeMsgType.CALL_JS_BATCH)</div><div class="line">        -------------------------------------------------</div><div class="line">        ├── WXBridgeManager.handleMessage(WXJSBridgeMsgType.CALL_JS_BATCH)</div><div class="line">            ├── WXBridgeManager.invokeCallJSBatch</div><div class="line">                ├── WXJsonUtils.wsonWXJSObject(tasks)</div><div class="line">                ├── WXBridgeManager.invokeExecJS</div><div class="line">                    ├── WXBridge.execJS</div></pre></td></tr></table></figure>
<p>在 <code>callbackJavascript()</code> 方法中，先通过 <code>addJSTask()</code> 方法在JS线程把执行回调函数的任务放到 <code>mNextTickTasks</code> 中，等待下次执行 <code>invokeCallJSBatch()</code> 时执行该任务。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">void callbackJavascript(final String instanceId, final String callback,</div><div class="line">                        final Object data, boolean keepAlive) &#123;</div><div class="line">  if (TextUtils.isEmpty(instanceId) || TextUtils.isEmpty(callback)</div><div class="line">      || mJSHandler == null) &#123;</div><div class="line">    return;</div><div class="line">  &#125;</div><div class="line">  // 在JS线程把callback加入到执行队列中</div><div class="line">  addJSTask(METHOD_CALLBACK, instanceId, callback, data, keepAlive);</div><div class="line">  // 发送 CALL_JS_BATCH，执行一次批处理任务</div><div class="line">  sendMessage(instanceId, WXJSBridgeMsgType.CALL_JS_BATCH);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">private void addJSEventTask(final String method, final String instanceId, final List&lt;Object&gt; params, final Object... args) &#123;</div><div class="line">  post(new Runnable() &#123;</div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">      if (args == null || args.length == 0) &#123;</div><div class="line">        return;</div><div class="line">      &#125;</div><div class="line">      // 把参数放到参数列表中，包括回调函数传递的 callbackid，回调参数（data 参数），keepAlive参数</div><div class="line">      ArrayList&lt;Object&gt; argsList = new ArrayList&lt;&gt;();</div><div class="line">      for (Object arg : args) &#123;</div><div class="line">        argsList.add(arg);</div><div class="line">      &#125;</div><div class="line">      if (params != null) &#123;</div><div class="line">        ArrayMap map = new ArrayMap(4);</div><div class="line">        map.put(KEY_PARAMS, params);</div><div class="line">        argsList.add(map);</div><div class="line">      &#125;</div><div class="line">      // 把要执行的方法类型和参数列表放到 map 中。</div><div class="line">      WXHashMap&lt;String, Object&gt; task = new WXHashMap&lt;&gt;();</div><div class="line">      task.put(KEY_METHOD, method);</div><div class="line">      task.put(KEY_ARGS, argsList);</div><div class="line"></div><div class="line">      // 把该callback放到和instanceId对应的列表中，等待下次批处理执行。</div><div class="line">      if (mNextTickTasks.get(instanceId) == null) &#123;</div><div class="line">        ArrayList&lt;WXHashMap&lt;String, Object&gt;&gt; list = new ArrayList&lt;&gt;();</div><div class="line">        list.add(task);</div><div class="line">        mNextTickTasks.put(instanceId, list);</div><div class="line">      &#125; else &#123;</div><div class="line">        mNextTickTasks.get(instanceId).add(task);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">private void invokeCallJSBatch(Message message) &#123;</div><div class="line">  // 如果待执行队列中没有任务或者是未初始化framework则退出</div><div class="line">  if (mNextTickTasks.isEmpty() || !isJSFrameworkInit()) &#123;</div><div class="line">    if (!isJSFrameworkInit()) &#123;</div><div class="line">      WXLogUtils.e(&quot;[WXBridgeManager] invokeCallJSBatch: framework.js uninitialized!!  message:&quot; + message.toString());</div><div class="line">    &#125;</div><div class="line">    return;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  try &#123;</div><div class="line">    Object instanceId = message.obj;</div><div class="line">    // 轮询队列中的所有instance，看对应是否有待执行任务</div><div class="line">    ArrayList&lt;WXHashMap&lt;String, Object&gt;&gt; task = null;</div><div class="line">    Stack&lt;String&gt; instanceStack = mNextTickTasks.getInstanceStack();</div><div class="line">    int size = instanceStack.size();</div><div class="line">    for (int i = size - 1; i &gt;= 0; i--) &#123;</div><div class="line">      instanceId = instanceStack.get(i);</div><div class="line">      task = mNextTickTasks.remove(instanceId);</div><div class="line">      // 发现待执行任务则退出轮询流程</div><div class="line">      if (task != null &amp;&amp; !((ArrayList) task).isEmpty()) &#123;</div><div class="line">        break;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    Object[] tasks = ((ArrayList) task).toArray();</div><div class="line">    // 解析参数：</div><div class="line">    WXJSObject[] args = &#123;</div><div class="line">        new WXJSObject(WXJSObject.String, instanceId),</div><div class="line">        WXJsonUtils.wsonWXJSObject(tasks)&#125;;</div><div class="line">    // 执行方法</div><div class="line">    invokeExecJS(String.valueOf(instanceId), null, METHOD_CALL_JS, args);</div><div class="line">    task.clear();</div><div class="line">    for(int i=0; i&lt;tasks.length; i++)&#123;</div><div class="line">      args[i] = null;</div><div class="line">    &#125;</div><div class="line">    args = null;</div><div class="line">  &#125; catch (Throwable e) &#123;</div><div class="line">    WXLogUtils.e(&quot;WXBridgeManager&quot;, e);</div><div class="line">    String err = &quot;invokeCallJSBatch#&quot; + WXLogUtils.getStackTrace(e);</div><div class="line"> WXExceptionUtils.commitCriticalExceptionRT(null, WXErrorCode.WX_ERR_JS_FRAMEWORK.getErrorCode(),</div><div class="line">	  &quot;invokeCallJSBatch&quot;, err, null);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  // 如果还有待执行任务，则继续发CALL_JS_BATCH消息执行</div><div class="line">  if (!mNextTickTasks.isEmpty()) &#123;</div><div class="line">    mJSHandler.sendEmptyMessage(WXJSBridgeMsgType.CALL_JS_BATCH);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>解析参数：<br>WXJsonUtils.wsonWXJSObject(tasks)：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public static final WXJSObject wsonWXJSObject(Object tasks)&#123;</div><div class="line">  //CompatibleUtils.checkDiff(tasks);</div><div class="line">  if(USE_WSON) &#123;</div><div class="line">    return new WXJSObject(WXJSObject.WSON, Wson.toWson(tasks));</div><div class="line">  &#125;else&#123;</div><div class="line">    return new WXJSObject(WXJSObject.JSON, WXJsonUtils.fromObjectToJSONString(tasks));</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后调用 <code>JSON.toJSONString(obj)</code> 方法把对象解析为 json 数据。<br>解析成 <code>WXJSObject</code> 类型的参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[&#123;&quot;args&quot;:[&quot;1&quot;,&#123;&quot;method&quot;:&quot;success&quot;,&quot;paras&quot;:[&quot;paraSuccess1&quot;,&quot;paraSuccess2&quot;]&#125;,false],&quot;method&quot;:&quot;callback&quot;&#125;]</div></pre></td></tr></table></figure></p>
<!-- 
http://weex.apache.org/cn/wiki/module-introduction.html
-->
]]></content>
    
    <summary type="html">
    
      介绍 Weex Module 注册、调用流程以及回调函数的执行流程
    
    </summary>
    
      <category term="Weex" scheme="http://yoursite.com/categories/Weex/"/>
    
    
      <category term="Weex" scheme="http://yoursite.com/tags/Weex/"/>
    
  </entry>
  
  <entry>
    <title>Weex 源码研究 -- 渲染过程</title>
    <link href="http://yoursite.com/2018/03/26/open-source-weex-android-component-render/"/>
    <id>http://yoursite.com/2018/03/26/open-source-weex-android-component-render/</id>
    <published>2018-03-26T02:00:00.000Z</published>
    <updated>2018-05-29T02:28:24.838Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>先来看一下网上有开发者绘制的渲染流程图。</p>
<p><img src="/images/open-source-weex-android-component-render/render_process.png" alt="效果图"></p>
<p>这里目前的版本和这张图相比已经有了改变，比如 <code>WXDomStatement</code> -&gt; <code>DOMActionContextImpl</code>，<code>WXRenderStatement</code> -&gt; <code>RenderActionContextImpl</code>。<br>渲染的流程包括：</p>
<ol>
<li>通过 transformer 将 .we 文件转为 Js Bundle</li>
<li>JS framework 根据 Js Bundle 生成 Virtual Dom </li>
<li>通过 JS 引擎把渲染数据传给 Native 端</li>
<li>Native 端执行渲染工作，首次渲染时，会将所有结点都交给 Native Render 渲染，在 UI 更新时，计算出最小 dif，让 Native 仅渲染发生改变的结点。</li>
</ol>
<p>本文着重介绍2-4步骤的渲染工作。</p>
<h2 id="渲染流程图"><a href="#渲染流程图" class="headerlink" title="渲染流程图"></a>渲染流程图</h2><p>这个过程我们从 Demo 中的 <code>WXSDKInstance.render()</code> 说起，到 <code>IWXRenderListener.onViewCreated()</code> 回调调用结束。<br>在渲染执行之前，先注册了渲染监听器，渲染监听器，当渲染结束时，把生成的 <code>RenderContainer</code> 返回。<br>看一下流程图：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line">├── WXSDKInstance.registerRenderListener()</div><div class="line">└── WXSDKInstance.render()</div><div class="line">    └── WXSDKInstance.renderInternal()</div><div class="line">        └── WXSDKManager.createInstance()</div><div class="line">            ├── WXRenderManager.registerInstance()</div><div class="line">            └── WXBridgeManager.createInstance()</div><div class="line">                ├── WXModuleManager.createDomModule()</div><div class="line">                └── WXBridgeManager.invokeCreateInstance()</div><div class="line">                    ├── WXSDKInstance.setTemplate()</div><div class="line">                    └── invokeExecJS()</div><div class="line">                        └── WXBridge.execJS()</div><div class="line">                        ---------JS Engine----------</div><div class="line">                            └── WXBridge.callNative()</div><div class="line">                                └── WXBridgeManager.callNative()</div><div class="line">                                    ├── WXBridgeManager.getDomModule()</div><div class="line">                                    └── WXDomModule.callDomMethod()</div><div class="line">                                        └── WXDomModule.callDomMethod</div><div class="line">                                            └── WXDomModule.postAction()</div><div class="line">                                                └── WXDomManager.postAction()</div><div class="line">                                                    ├── WXDomManager.sendMessageDelayed()</div><div class="line">                                                ----------------------------</div><div class="line">                                                    └── WXDomHandler.handleMessage()</div><div class="line">                                                        ├── WXDomManager.executeAction()</div><div class="line">                                                            ├── CreateBodyAction.executeDom()</div><div class="line">                                                                └── AbstractAddElementAction.addDomInternal()</div><div class="line">                                                                    ├── WXDomObject.parse()</div><div class="line">                                                                    ├── AbstractAddElementAction.appendDomToTree()</div><div class="line">                                                                    ├── AbstractAddElementAction.createComponent()</div><div class="line">                                                                        ├── AbstractAddElementAction.generateComponentTree()</div><div class="line">                                                                            ├── WXComponentFactory.newInstance()</div><div class="line">                                                                            └── DOMActionContextImpl.registerComponent()</div><div class="line">                                                                                └── WXRenderManager.registerComponent()</div><div class="line">                                                                                    └── RenderActionContextImpl.registerComponent()</div><div class="line">                                                                    └── DOMActionContextImpl.postRenderTask(CreateBodyAction)</div><div class="line">                                                            ****************************</div><div class="line">                                                            ├── AddElementAction.executeDom()</div><div class="line">                                                                └── AbstractAddElementAction.addDomInternal()</div><div class="line">                                                                    ├── WXDomObject.parse()</div><div class="line">                                                                    ├── AbstractAddElementAction.appendDomToTree()</div><div class="line">                                                                    ├── AbstractAddElementAction.createComponent()</div><div class="line">                                                                    └── DOMActionContextImpl.postRenderTask(AddElementAction)</div><div class="line">                                                            ****************************</div><div class="line">                                                            ├── UpdateAttributeAction.executeDom()</div><div class="line">                                                            ****************************</div><div class="line">                                                            ├── CreateFinishAction.executeDom()</div><div class="line">                                                            ****************************</div><div class="line">                                                            ├── UpdateStyleAction.executeDom()</div><div class="line">                                                            ****************************</div><div class="line">                                                            ├── UpdateFinishAction.executeDom()</div><div class="line">                                                            ****************************</div><div class="line">                                                        ├── WXDomManager.batch()</div><div class="line">                                                            └── DOMActionContextImpl.layout()</div><div class="line">                                                                └── DOMActionContextImpl.consumeRenderTasks()</div><div class="line">                                                                    ├── WXRenderManager.runOnThread()</div><div class="line">                                                                        └── RenderActionTask.execute()</div><div class="line">                                                                            └── CreateBodyAction.executeRender()</div><div class="line">                                                                                ├── WXComponent(WXDiv).createView()</div><div class="line">                                                                                ├── WXComponent(WXDiv).applyLayoutAndEvent()</div><div class="line">                                                                                ├── WXComponent.bindData()</div><div class="line">                                                                                    ├── WXComponent.updateStyle()</div><div class="line">                                                                                    ├── WXComponent.updateAttrs()</div><div class="line">                                                                                    └── WXComponent.updateExtra()</div><div class="line">                                                                                ├── WXSDKInstance.onRootCreated()</div><div class="line">                                                                                ├── WXSDKInstance.onCreateFinish()</div><div class="line">                                                                                    └── RenderListener.onViewCreated()</div><div class="line">                                                                                        └── TestWeexActivity.onViewCreated()</div><div class="line">                                                                                        (调用setContentView(view))</div><div class="line">                                                                                └── WXComponent(WXDiv).onRenderFinish()</div><div class="line">                                                                    *******************************************</div><div class="line">                                                                    ├── WXRenderManager.runOnThread()</div><div class="line">                                                                        └── RenderActionTask.execute()</div><div class="line">                                                                            └── AddElementAction.executeRender()</div><div class="line">                                                                                ├── WXVContainer(WXDiv).addChild()</div><div class="line">                                                                                ├── WXVContainer(WXDiv).createChildViewAt()</div><div class="line">                                                                                ├── WXComponent(WXImage).applyLayoutAndEvent()</div><div class="line">                                                                                ├── WXComponent(WXImage).bindData()</div><div class="line">                                                                                └── WXComponent(WXImage).onRenderFinish()</div><div class="line">                                                                    *******************************************</div></pre></td></tr></table></figure>
<h2 id="解析-JS"><a href="#解析-JS" class="headerlink" title="解析 JS"></a>解析 JS</h2><p>这一过成比较简单，调用 <code>WXSDKInstance.render()</code> 方法把转换成的 JS 代码给 JS 引擎处理。<br>这里需要说明一下在 <code>WXSDKManager.createInstance()</code> 方法中，会调用 <code>WXRenderManager.registerInstance</code> 方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public void registerInstance(WXSDKInstance instance) &#123;</div><div class="line">  mRegistries.put(instance.getInstanceId(), new RenderActionContextImpl(instance));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里会获取当前 <code>WXSDKInstance</code> 的 ID，并生成 <code>RenderActionContextImpl</code> 放入到 <code>ConcurrentHashMap</code> 中去。<br><code>WXSDKInstance</code> 的 ID 在 <code>WXSDKManager</code> 中生成，每个 <code>WXSDKInstance</code> 实例在上一个基础上加一。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String generateInstanceId() &#123;</div><div class="line">  return String.valueOf(sInstanceId.incrementAndGet());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="指令分发"><a href="#指令分发" class="headerlink" title="指令分发"></a>指令分发</h2><h3 id="WXDomModule-分发JS发出的指令"><a href="#WXDomModule-分发JS发出的指令" class="headerlink" title="WXDomModule 分发JS发出的指令"></a>WXDomModule 分发JS发出的指令</h3><p><code>WXDomModule</code> 是派发渲染指令的枢纽，提供了 callDomMethod() 和 postAction()方法来派发渲染指令。<br>先看一下在 <code>WXDomModule.callDomMethod()</code> 方法中对指令的处理。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public Object callDomMethod(String method, JSONArray args, long... parseNanos) &#123;</div><div class="line"></div><div class="line">  ...</div><div class="line">  try &#123;</div><div class="line">    Action action = Actions.get(method,args);</div><div class="line">    if(action == null)&#123;</div><div class="line">      WXLogUtils.e(&quot;Unknown dom action.&quot;);</div><div class="line">    &#125;</div><div class="line">    if(action instanceof DOMAction)&#123;</div><div class="line">      postAction((DOMAction)action, CREATE_BODY.equals(method) || ADD_RULE.equals(method));</div><div class="line">    &#125;else &#123;</div><div class="line">      postAction((RenderAction)action);</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">  &#125; catch (IndexOutOfBoundsException e) &#123;</div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line">  return null;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里可以处理的 Action 包括：</p>
<ul>
<li>CreateBodyAction</li>
<li>UpdateAttributeAction</li>
<li>UpdateStyleAction</li>
<li>RemoveElementAction</li>
<li>AddElementAction</li>
<li>MoveElementAction</li>
<li>AddEventAction</li>
<li>RemoveEventAction</li>
<li>CreateFinishAction</li>
<li>RefreshFinishAction</li>
<li>UpdateFinishAction</li>
<li>ScrollToElementAction</li>
<li>AddRuleAction：参考 <a href="http://weex.apache.org/cn/references/modules/dom.html" target="_blank" rel="external">官网说明</a></li>
<li>GetComponentRectAction</li>
<li>InvokeMethodAction</li>
</ul>
<p>这里的大部分 Action 是既实现了 <code>DOMAction</code> 又实现了 <code>RenderAction</code> 接口的，这种 Action 会执行 <code>WXDomModule.postAction(DOMAction action, boolean createContext)</code> 方法，先在 WeeXDomThread 线程中执行构建 DOM 的操作。然后通过 <code>DOMActionContextImpl.postRenderTask()</code> 生成 <code>RenderActionTask</code>，再后面的批处理操作中处理这些渲染动作。<br>如果是没有实现 <code>DOMAction</code> 接口的 Action，就执行 <code>WXDomModule.postAction(RenderAction action)</code>，直接立即在 UI 线程中执行渲染操作。</p>
<h3 id="WXDomHandler-处理构建客户端DOM的指令"><a href="#WXDomHandler-处理构建客户端DOM的指令" class="headerlink" title="WXDomHandler 处理构建客户端DOM的指令"></a>WXDomHandler 处理构建客户端DOM的指令</h3><p><code>WXDomHandler</code> 处理 WXDomModule 发过来的操作指令，比如 </p>
<ul>
<li>MsgType.WX_EXECUTE_ACTION：接受一下 Dom 指令：CreateBodyAction、AddElementAction、UpdateStyleAction、UpdateAttributeAction、CreateFinishAction、UpdateFinishAction</li>
<li>MsgType.WX_DOM_BATCH：批处理前面的 Dom 操作，执行渲染动作。这个不是 WXDomModule 发过来的，在 WXDomHandler 这边生成的。2ms 执行一次批处理操作。</li>
<li>MsgType.WX_DOM_UPDATE_STYLE：被弃用的方法，更新 style。其实在 <code>MsgType.WX_EXECUTE_ACTION</code> 是可以处理 JS 端发出的 <code>UpdateStyleAction</code> 操作的了，这里保留是为了有些在 Java 侧直接调用的 UPDATE STYLE 操作。</li>
<li>MsgType.WX_CONSUME_RENDER_TASKS</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">public boolean handleMessage(Message msg) &#123;</div><div class="line">  if (msg == null) &#123;</div><div class="line">    return false;</div><div class="line">  &#125;</div><div class="line">  int what = msg.what;</div><div class="line">  Object obj = msg.obj;</div><div class="line">  WXDomTask task = null;</div><div class="line">  </div><div class="line">  if (obj != null &amp;&amp; obj instanceof WXDomTask) &#123;</div><div class="line">    task = (WXDomTask) obj;</div><div class="line">    Object action = ((WXDomTask) obj).args.get(0);</div><div class="line">    if (action != null &amp;&amp; action instanceof TraceableAction) &#123;</div><div class="line">      ((TraceableAction) action).mDomQueueTime = SystemClock.uptimeMillis() - msg.getWhen();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  // 这里为了每隔三秒执行一次批处理操作</div><div class="line">  if (!mHasBatch) &#123;</div><div class="line">    mHasBatch = true;</div><div class="line">    if(what != WXDomHandler.MsgType.WX_DOM_BATCH) &#123;</div><div class="line">      int delayTime = DELAY_TIME;</div><div class="line">      if(what == MsgType.WX_DOM_TRANSITION_BATCH)&#123;</div><div class="line">        delayTime = TRANSITION_DELAY_TIME;</div><div class="line">      &#125;</div><div class="line">      mWXDomManager.sendEmptyMessageDelayed(WXDomHandler.MsgType.WX_DOM_BATCH, delayTime);</div><div class="line">    &#125;</div><div class="line">   &#125;</div><div class="line">  switch (what) &#123;</div><div class="line">    case MsgType.WX_EXECUTE_ACTION:</div><div class="line">      mWXDomManager.executeAction(task.instanceId, (DOMAction) task.args.get(0), (boolean) task.args.get(1));</div><div class="line">      break;</div><div class="line">    case MsgType.WX_DOM_UPDATE_STYLE:</div><div class="line">      //keep this for direct native call</div><div class="line">      mWXDomManager.executeAction(task.instanceId, Actions.getUpdateStyle((String) task.args.get(0),</div><div class="line">          (JSONObject) task.args.get(1),</div><div class="line">          task.args.size() &gt; 2 &amp;&amp; (boolean) task.args.get(2)),false);</div><div class="line">      break;</div><div class="line">    case MsgType.WX_DOM_BATCH:</div><div class="line"></div><div class="line">      mWXDomManager.batch();</div><div class="line">      mHasBatch = false;</div><div class="line">      break;</div><div class="line">    case MsgType.WX_CONSUME_RENDER_TASKS:</div><div class="line">      mWXDomManager.consumeRenderTask(task.instanceId);</div><div class="line">      break;</div><div class="line">    default:</div><div class="line">      break;</div><div class="line">  &#125;</div><div class="line">  return true;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再来看一下 <code>WXDomManager.executeAction()</code> 方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">public void executeAction(String instanceId, DOMAction action, boolean createContext) &#123;</div><div class="line">  // 这里的 createContext 仅在 CreateBodyAction 和 AddRuleAction 时为 true</div><div class="line">  DOMActionContext context = mDomRegistries.get(instanceId);</div><div class="line">  // 这是是确保了 CreateBodyAction 之后才能执行其他 Action，AddRuleAction 是不需要 DOM 根节点的</div><div class="line">  if(context == null)&#123;</div><div class="line">    if(createContext)&#123;</div><div class="line">      DOMActionContextImpl oldStatement = new DOMActionContextImpl(instanceId, mWXRenderManager);</div><div class="line">      mDomRegistries.put(instanceId, oldStatement);</div><div class="line">      context = oldStatement;</div><div class="line">    &#125;else&#123;</div><div class="line">      // 如果是执行其他 action，在 context 为空的情况下会提示错误并返回。</div><div class="line">WXSDKInstance instance =  WXSDKManager.getInstance().getSDKInstance(instanceId);</div><div class="line">if(action != null &amp;&amp; instance!= null &amp;&amp; !instance.getismIsCommitedDomAtionExp())&#123;</div><div class="line">  String className = action.getClass().getSimpleName();</div><div class="line">  WXLogUtils.e(&quot;WXDomManager&quot;, className + &quot; Is Invalid Action&quot;);</div><div class="line">  if(className.contains(&quot;CreateFinishAction&quot;))&#123;</div><div class="line">	WXExceptionUtils.commitCriticalExceptionRT(instanceId,</div><div class="line">			WXErrorCode.WX_KEY_EXCEPTION_DOM_ACTION_FIRST_ACTION.getErrorCode(),</div><div class="line">			&quot;executeAction&quot;,</div><div class="line">			WXErrorCode.WX_KEY_EXCEPTION_DOM_ACTION_FIRST_ACTION.getErrorMsg() + &quot;|current action is&quot; +className, null);</div><div class="line">	instance.setmIsCommitedDomAtionExp(true);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">return;</div><div class="line"> &#125;</div><div class="line">  &#125;</div><div class="line">  long domStart = System.currentTimeMillis();</div><div class="line">  long domNanos = System.nanoTime();</div><div class="line">  // 对应的 Action 执行 Dom 操作</div><div class="line">  action.executeDom(context);</div><div class="line">  ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="构建客户端-DOM"><a href="#构建客户端-DOM" class="headerlink" title="构建客户端 DOM"></a>构建客户端 DOM</h2><p>这一节我们以处理 <code>CreateBodyAction</code> 为例来介绍一下渲染过程中构建客户端 DOM 的处理。<br>先来看一下 <code>CreateBodyAction.addDomInternal()</code> 方法。<br><code>dom</code> 参数是代表类似这样 json 字符串的一个对象。<br><code>{&quot;attr&quot;:{},&quot;ref&quot;:&quot;_root&quot;,&quot;style&quot;:{&quot;alignItems&quot;:&quot;center&quot;,&quot;height&quot;:800,&quot;justifyContent&quot;:&quot;center&quot;,&quot;width&quot;:750},&quot;type&quot;:&quot;div&quot;}</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">protected void addDomInternal(DOMActionContext context, JSONObject dom) &#123;</div><div class="line">  ......</div><div class="line">  Stopwatch.tick();</div><div class="line">  // 把json对象转换为 WXDomObject 对象</div><div class="line">  WXDomObject domObject = WXDomObject.parse(dom, instance, null);</div><div class="line">  Stopwatch.split(&quot;parseDomObject&quot;);</div><div class="line"></div><div class="line">  if (domObject == null || context.getDomByRef(domObject.getRef()) != null) &#123;</div><div class="line">    ...</div><div class="line"> return;</div><div class="line">  &#125;</div><div class="line">  appendDomToTree(context, domObject);</div><div class="line">  Stopwatch.split(&quot;appendDomToTree&quot;);</div><div class="line"></div><div class="line">  domObject.traverseTree(</div><div class="line">      context.getAddDOMConsumer(),</div><div class="line">      context.getApplyStyleConsumer()</div><div class="line">  );</div><div class="line">  Stopwatch.split(&quot;traverseTree&quot;);</div><div class="line"></div><div class="line"></div><div class="line">  //Create component in dom thread</div><div class="line">  WXComponent component = createComponent(context, domObject);</div><div class="line">  if (component == null) &#123;</div><div class="line"> return;</div><div class="line">  &#125;</div><div class="line">  Stopwatch.split(&quot;createComponent&quot;);</div><div class="line"></div><div class="line">  context.addDomInfo(domObject.getRef(), component);</div><div class="line">  //Dom 构建完成，这里把当前Action放入到待 Render 列表中，等待后面的批处理进行Render操作。</div><div class="line">  context.postRenderTask(this);</div><div class="line">  addAnimationForDomTree(context, domObject);</div><div class="line">  ....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>解析JSON：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">public static  @Nullable WXDomObject parse(JSONObject json, WXSDKInstance wxsdkInstance, WXDomObject parentDomObject)&#123;</div><div class="line">    ......</div><div class="line">    // 获取跟节点的类型，CreateBodyAction时一般为div</div><div class="line">    String type = (String) json.get(TYPE);</div><div class="line"></div><div class="line">    if (wxsdkInstance.isNeedValidate()) &#123;</div><div class="line">      ....</div><div class="line">    &#125;</div><div class="line">    // 生成 WXDomObject</div><div class="line">    WXDomObject domObject = WXDomObjectFactory.newInstance(type);</div><div class="line"></div><div class="line">    domObject.setViewPortWidth(wxsdkInstance.getInstanceViewPortWidth());</div><div class="line"></div><div class="line">    if(domObject == null)&#123;</div><div class="line">      return null;</div><div class="line">    &#125;</div><div class="line">    // 设置属性值，包括 style、attr、event、ref（结点的唯一标识符）、parent、children等</div><div class="line">    domObject.parseFromJson(json);</div><div class="line">    domObject.mDomContext = wxsdkInstance;</div><div class="line">    domObject.parent = parentDomObject;</div><div class="line">    // 添加一些子节点信息</div><div class="line">    Object children = json.get(CHILDREN);</div><div class="line">    if (children != null &amp;&amp; children instanceof JSONArray) &#123;</div><div class="line">      JSONArray childrenArray = (JSONArray) children;</div><div class="line">      int count = childrenArray.size();</div><div class="line">      for (int i = 0; i &lt; count; ++i) &#123;</div><div class="line">        domObject.add(parse(childrenArray.getJSONObject(i),wxsdkInstance, domObject),-1);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    domObject.mDomThreadNanos = System.nanoTime() - startNanos;</div><div class="line">    domObject.mDomThreadTimestamp = timestamp;</div><div class="line">    return domObject;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>生成 WXComponent：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">protected WXComponent generateComponentTree(DOMActionContext context, WXDomObject dom, WXVContainer parent) &#123;</div><div class="line">  if (dom == null) &#123;</div><div class="line">    return null;</div><div class="line">  &#125;</div><div class="line">  long startNanos = System.nanoTime();</div><div class="line">  // 生成 WXComponent，CreateBodyAction时一般为 WXDiv</div><div class="line">  WXComponent component = WXComponentFactory.newInstance(context.getInstance(), dom, parent);</div><div class="line">  if (component != null) &#123;</div><div class="line">    component.mTraceInfo.domThreadStart = dom.mDomThreadTimestamp;</div><div class="line">    component.mTraceInfo.rootEventId = mTracingEventId;</div><div class="line">    component.mTraceInfo.domQueueTime = mDomQueueTime;</div><div class="line">  &#125;</div><div class="line">  // 把生成的组件注册给 RenderActionContextImpl</div><div class="line">  context.registerComponent(dom.getRef(), component);</div><div class="line">  if (component instanceof WXVContainer) &#123;</div><div class="line">    WXVContainer parentC = (WXVContainer) component;</div><div class="line">    int count = dom.childCount();</div><div class="line">    WXDomObject child = null;</div><div class="line">    // 添加子节点</div><div class="line">    for (int i = 0; i &lt; count; ++i) &#123;</div><div class="line">      child = dom.getChild(i);</div><div class="line">      if (child != null) &#123;</div><div class="line">        WXComponent createdComponent = generateComponentTree(context, child, parentC);</div><div class="line">        if(createdComponent != null) &#123;</div><div class="line">          parentC.addChild(createdComponent);</div><div class="line">        &#125;else&#123;</div><div class="line">          ......</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  if (component != null) &#123;</div><div class="line">    component.mTraceInfo.domThreadNanos = System.nanoTime() - startNanos;</div><div class="line">  &#125;</div><div class="line">  return component;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h2><p>这一节我们以处理 <code>CreateBodyAction</code> 为例来介绍一下渲染过程中对构建客户端 DOM 的渲染处理。<br>渲染阶段的类和生成 Native 组件的类有些是一一对应的，比如：DOMActionContextImpl – RenderActionContextImpl、DOMAction – RenderAction 等。<br><code>CreateBodyAction.executeRender()</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">public void executeRender(RenderActionContext context) &#123;</div><div class="line">  WXComponent component = context.getComponent(WXDomObject.ROOT);</div><div class="line">  WXSDKInstance instance = context.getInstance();</div><div class="line">  ...</div><div class="line">  try &#123;</div><div class="line">    Stopwatch.tick();</div><div class="line">    long start = System.currentTimeMillis();</div><div class="line">    // 调用 WxComponent.initComponentHostView() 生成Host View，前面介绍过，`initComponentHostView()` 是组件必须实现的方法。</div><div class="line">    component.createView();</div><div class="line">    ...</div><div class="line">    start = System.currentTimeMillis();</div><div class="line">    // 设置lalyout，padding和事件监听</div><div class="line">    component.applyLayoutAndEvent(component);</div><div class="line">    ...</div><div class="line">    // 设置style、attrs和extra</div><div class="line">    component.bindData(component);</div><div class="line"></div><div class="line">    ...</div><div class="line">    if (component instanceof WXScroller) &#123;</div><div class="line">      WXScroller scroller = (WXScroller) component;</div><div class="line">      if (scroller.getInnerView() instanceof ScrollView) &#123;</div><div class="line">        instance.setRootScrollView((ScrollView) scroller.getInnerView());</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    // 通知一些回调</div><div class="line">    instance.onRootCreated(component);</div><div class="line">    if (instance.getRenderStrategy() != WXRenderStrategy.APPEND_ONCE) &#123;</div><div class="line">      instance.onCreateFinish();</div><div class="line">    &#125;</div><div class="line">    component.mTraceInfo.uiQueueTime = mUIQueueTime;</div><div class="line">    component.onRenderFinish(WXComponent.STATE_ALL_FINISH);</div><div class="line">  &#125; catch (Exception e) &#123;</div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>生成 Host View：<br>其实就是生成对应的Android View的过程。</p>
<p><code>WXComponent.createViewImpl()</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">protected void createViewImpl() &#123;</div><div class="line">  if (mContext != null) &#123;</div><div class="line">    mHost = initComponentHostView(mContext);</div><div class="line">    if (mHost == null &amp;&amp; !isVirtualComponent()) &#123;</div><div class="line">      //compatible</div><div class="line">      initView();</div><div class="line">    &#125;</div><div class="line">    if(mHost != null)&#123;</div><div class="line">      mHost.setId(WXViewUtils.generateViewId());</div><div class="line">      ComponentObserver observer;</div><div class="line">      if ((observer = getInstance().getComponentObserver()) != null) &#123;</div><div class="line">        observer.onViewCreated(this, mHost);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    onHostViewInitialized(mHost);</div><div class="line">  &#125;else&#123;</div><div class="line">    WXLogUtils.e(&quot;createViewImpl&quot;,&quot;Context is null&quot;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>WXDiv.initComponentHostView()</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected WXFrameLayout initComponentHostView(@NonNull Context context) &#123;</div><div class="line">  WXFrameLayout frameLayout = new WXFrameLayout(context);</div><div class="line">  frameLayout.holdComponent(this);</div><div class="line">  return frameLayout;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此，渲染流程介绍完毕。</p>
]]></content>
    
    <summary type="html">
    
      介绍 Weex Component 的渲染过程
    
    </summary>
    
      <category term="Weex" scheme="http://yoursite.com/categories/Weex/"/>
    
    
      <category term="Weex" scheme="http://yoursite.com/tags/Weex/"/>
    
  </entry>
  
  <entry>
    <title>Weex 源码研究 -- Component 和 DomObject 注册过程</title>
    <link href="http://yoursite.com/2018/03/20/open-source-weex-android-component-module-register/"/>
    <id>http://yoursite.com/2018/03/20/open-source-weex-android-component-module-register/</id>
    <published>2018-03-20T02:00:00.000Z</published>
    <updated>2018-06-02T09:24:04.976Z</updated>
    
    <content type="html"><![CDATA[<p>在 WXSDKEngine 的 <code>register()</code> 方法中进行。这个方法里面是注册 Weex 原生自带的一些组件、模块以及 DomObject，如果你想扩展组件或者模块，也是需要走注册流程的，流程和这里的是一样的。<br><a href="http://weex.apache.org/cn/guide/extend-android.html" target="_blank" rel="external">扩展 Android 的功能 </a></p>
<h2 id="注册-Component"><a href="#注册-Component" class="headerlink" title="注册 Component"></a>注册 Component</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">├── WXSDKEngine.registerComponent()</div><div class="line">    └── WXComponentRegistry.registerComponent()</div><div class="line">        ├── WXComponentRegistry.registerNativeComponent()</div><div class="line">        └── WXComponentRegistry.registerJSComponent()</div><div class="line">            └── WXSDKManager.registerComponents()</div><div class="line">                └── WXBridgeManager.registerComponents()</div><div class="line">                    └── WXBridgeManager.invokeRegisterComponents()</div></pre></td></tr></table></figure>
<p>注册 <code>Component</code> 是在 <code>WXSDKEngine.registerComponent()</code> 方法中进行的，这个方法有几个重载方法，但最终都会执行到这个方法中来：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">registerComponent</span><span class="params">(IFComponentHolder holder, <span class="keyword">boolean</span> appendTree, String ... names)</span> <span class="keyword">throws</span> WXException </span>&#123;</div><div class="line">  <span class="keyword">boolean</span> result =  <span class="keyword">true</span>;</div><div class="line">  <span class="keyword">for</span>(String name:names) &#123;</div><div class="line">    Map&lt;String, Object&gt; componentInfo = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    <span class="keyword">if</span> (appendTree) &#123;</div><div class="line">      componentInfo.put(<span class="string">"append"</span>, <span class="string">"tree"</span>);</div><div class="line">    &#125;</div><div class="line">    result  = result &amp;&amp; WXComponentRegistry.registerComponent(name, holder, componentInfo);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>先来介绍一下 <code>IFComponentHolder</code> 这个参数。我们就以 <code>WXText</code> 的注册过来介绍一下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">registerComponent(</div><div class="line">  new SimpleComponentHolder(</div><div class="line">    WXText.class,</div><div class="line">    new WXText.Creator()</div><div class="line">  ),</div><div class="line">  false,</div><div class="line">  WXBasicComponentType.TEXT</div><div class="line">);</div></pre></td></tr></table></figure>
<p>注册是实例化了一个 <code>SimpleComponentHolder</code> 类。这个类有几个方法，对应它的几个主要作用：</p>
<ul>
<li>createInstance()：生成 Component 实现类的一个实例，比如 <code>WXText</code></li>
<li>getMethods(Class clz)：获取实现类中 <code>WXComponentProp</code> 和 <code>JSMethod</code> 注解标记的属性和方法。</li>
<li>getMethods()：获取所有 <code>JSMethod</code> 注解标记方法。</li>
<li>getMethodInvoker(String name)：获取某个方法对应的实现类的实体方法。</li>
<li>getPropertyInvoker(String name)：获取某个属性对应的实现类的实体方法。</li>
</ul>
<p><img src="http://www.plantuml.com/plantuml/svg/TP1DIWD148NtVOeYgyaYEO6BG40SKH4YA8YBihiI6xkhXkxAGFmvYQTmBNWRyHfECX8qCxFzUFNUHysoOj9r3ERAQo0OBNoi0iqbLiB4UYB1KVf-__Xw-nmPurafBT4IbCS76NWs0BLu1q7GbSiBuJDysXJZ1fTSosCJMP5U9gaewUON5GjDdbV066biNlyCxEldYL2bxR--sMEmMqubPqMsLFo_FiKQiqs-qjqGtWU2NKExTtktTJadVH2N3nLRF21e0-OClLyofkDyz3ATTbzbUko6eXtI12UJ0O4PiLl7y0C0" alt="效果图"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public SimpleComponentHolder(Class&lt;? extends WXComponent&gt; clz,ComponentCreator customCreator) &#123;</div><div class="line">  this.mClz = clz;</div><div class="line">  this.mCreator = customCreator;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里传入的两个参数分别是 <code>Class</code> 和 <code>ComponentCreator</code>。<br>我们来看一下 <code>WXText.Creator()</code> 类。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public static class Creator implements ComponentCreator &#123;</div><div class="line">  public WXComponent createInstance(WXSDKInstance instance, WXDomObject node, WXVContainer parent) throws IllegalAccessException, InvocationTargetException, InstantiationException &#123;</div><div class="line">    return new WXText(instance, node, parent);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>WXText.Creator()</code> 类实现了 <code>ComponentCreator</code>，在 <code>createInstance()</code> 方法中实例化了 <code>WXText</code> 类，这样就建立了和 Native Java 类的连接。<br>我们知道，<code>IFComponentHolder</code> 是继承自 <code>ComponentCreator</code> 的，那么这里在实例化 <code>SimpleComponentHolder</code> 又传入一个 <code>ComponentCreator</code> 实例是用来做什么的呢？<br>我们再来看一下 <code>SimpleComponentHolder</code> 实现的 <code>createInstance()</code> 方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public synchronized WXComponent createInstance(WXSDKInstance instance, WXDomObject node, WXVContainer parent) throws IllegalAccessException, InvocationTargetException, InstantiationException &#123;</div><div class="line">  WXComponent component = mCreator.createInstance(instance,node,parent);</div><div class="line">  component.bindHolder(this);</div><div class="line">  return component;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里其实就是调用的 <code>WXText.Creator()</code> 实例的 <code>createInstance()</code> 方法，并把 <code>SimpleComponentHolder</code> 绑定到生成的 <code>WXComponent</code> 上。这个方法什么时候使用我们后面再说。</p>
<p>再来看一下 <code>WXComponentRegistry.registerComponent()</code> 方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">public static boolean registerComponent(final String type, final IFComponentHolder holder, final Map&lt;String, Object&gt; componentInfo) throws WXException &#123;</div><div class="line">  ...</div><div class="line">  // 在js线程中执行注册操作</div><div class="line">  WXBridgeManager.getInstance()</div><div class="line">      .post(new Runnable() &#123;</div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">      try &#123;</div><div class="line">        Map&lt;String, Object&gt; registerInfo = componentInfo;</div><div class="line">        if (registerInfo == null)&#123;</div><div class="line">          registerInfo = new HashMap&lt;&gt;();</div><div class="line">        &#125;</div><div class="line">        // 将 component 名字作为类型</div><div class="line">        registerInfo.put(&quot;type&quot;,type);</div><div class="line">        // 获取 `JSMethod` 注解标记的方法</div><div class="line">        // 这里或许有个疑问，自定义的属性去哪里了？</div><div class="line">        registerInfo.put(&quot;methods&quot;,holder.getMethods());</div><div class="line">        registerNativeComponent(type, holder);</div><div class="line">        registerJSComponent(registerInfo);</div><div class="line">        sComponentInfos.add(registerInfo);</div><div class="line">      &#125; catch (WXException e) &#123;</div><div class="line">        WXLogUtils.e(&quot;register component error:&quot;, e);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">  return true;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">private void invokeRegisterComponents(List&lt;Map&lt;String, Object&gt;&gt; components, List&lt;Map&lt;String, Object&gt;&gt; failReceiver) &#123;</div><div class="line">  ...</div><div class="line">  // 生成参数：[&#123;&quot;methods&quot;:[&quot;recoverImageList&quot;,&quot;releaseImageList&quot;],&quot;type&quot;:&quot;container&quot;&#125;]</div><div class="line">  WXJSObject[] args = &#123;new WXJSObject(WXJSObject.JSON,</div><div class="line">      WXJsonUtils.fromObjectToJSONString(components))&#125;;</div><div class="line">  try &#123;</div><div class="line">  // 通过jni运行js方法，注册到js</div><div class="line">    mWXBridge.execJS(&quot;&quot;, null, METHOD_REGISTER_COMPONENTS, args);</div><div class="line">  &#125; catch (Throwable e) &#123;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里再来介绍一下 <code>appendTree</code> 这个参数。<br>Weex 注册的 <code>Component</code> 有两种类型，一类是有 <code>{@&quot;append&quot;:@&quot;tree&quot;}</code> 属性的标签，另一类是没有 <code>{@&quot;append&quot;:@&quot;tree&quot;}</code> 属性的标签。</p>
<h2 id="注册-DomObject"><a href="#注册-DomObject" class="headerlink" title="注册 DomObject"></a>注册 DomObject</h2><p>前面博客中也说过，DomObject 包括了 <code>&lt;template&gt;</code> 在 Dom 树中的所有信息，如 style、attr、event、ref（结点的唯一标识符）、parent、children 等。<br>在源码中注册过 Component 和 Moudle 后，紧接着是注册 DomObject。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">registerDomObject(WXBasicComponentType.TEXT, WXTextDomObject.class);</div></pre></td></tr></table></figure>
<p>注册流程：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">├── WXSDKEngine.registerDomObject()</div><div class="line">    ├── WXDomRegistry.registerDomObject()</div></pre></td></tr></table></figure>
<p>WXDomRegistry.registerDomObject():</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public static boolean registerDomObject(String type, Class&lt;? extends WXDomObject&gt; clazz) throws WXException &#123;</div><div class="line">  if (clazz == null || TextUtils.isEmpty(type)) &#123;</div><div class="line">    return false;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  if (sDom.containsKey(type)) &#123;</div><div class="line">    if (WXEnvironment.isApkDebugable()) &#123;</div><div class="line">      throw new WXException(&quot;WXDomRegistry had duplicate Dom:&quot; + type);</div><div class="line">    &#125; else &#123;</div><div class="line">      WXLogUtils.e(&quot;WXDomRegistry had duplicate Dom: &quot; + type);</div><div class="line">      return false;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  sDom.put(type, clazz);</div><div class="line">  return true;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，这部分是比较简单的。仅仅是把注册的 <code>WXDomObject</code> 放到一个 <code>Map</code> 中去，在生成 Native Dom 的时候再生成 <code>WXDomObject</code> 对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">├── AbstractAddElementAction.addDomInternal()</div><div class="line">    ├── WXDomObject.parse()</div><div class="line">        ├── WXDomObjectFactory.newInstance(type)</div><div class="line">            ├── WXDomRegistry.getDomObjectClass()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      介绍 Weex Component 和 DomObject注册过程
    
    </summary>
    
      <category term="Weex" scheme="http://yoursite.com/categories/Weex/"/>
    
    
      <category term="Weex" scheme="http://yoursite.com/tags/Weex/"/>
    
  </entry>
  
  <entry>
    <title>Weex 源码研究 -- 初始化过程</title>
    <link href="http://yoursite.com/2018/03/15/open-source-weex-android-init/"/>
    <id>http://yoursite.com/2018/03/15/open-source-weex-android-init/</id>
    <published>2018-03-15T02:00:00.000Z</published>
    <updated>2018-05-29T02:28:24.838Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>从本篇博客开始，会陆续进行一些 Weex 源码分析的文章，源码的 Weex SDK Version 是基于0.17.0，JS Framework 是基于 0.23.9， 平台是基于 Android 来进行分析的。</p>
<h2 id="初始化过程"><a href="#初始化过程" class="headerlink" title="初始化过程"></a>初始化过程</h2><h3 id="WXSDKEngine-初始化"><a href="#WXSDKEngine-初始化" class="headerlink" title="WXSDKEngine 初始化"></a>WXSDKEngine 初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class WXApplication extends Application &#123;</div><div class="line"></div><div class="line">  @Override</div><div class="line">  public void onCreate() &#123;</div><div class="line">    super.onCreate();</div><div class="line">    InitConfig config=new InitConfig.Builder().setImgAdapter(new ImageAdapter()).build();</div><div class="line">    WXSDKEngine.initialize(this,config);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用了 <code>WXSDKEngine.initialize()</code> 方法，这里有 <code>InitConfig</code> 作为参数来初始化。<br>先来看一下 <code>InitConfig</code> 类。<br><code>InitConfig</code> 使用 Builder 模式来构造一个 Weex 初始化配置的一个类。不熟悉 Builder 模式的同学可以先了解一下这个设计模式。<br><code>InitConfig</code> 主要是配置一些 Adapter：</p>
<ul>
<li>IWXHttpAdapter</li>
<li>IWXImgLoaderAdapter</li>
<li>IDrawableLoader</li>
<li>IWXUserTrackAdapter</li>
<li>IWXStorageAdapter</li>
<li>IWXSoLoaderAdapter</li>
<li>URIAdapter</li>
<li>IWXJSExceptionAdapter</li>
<li>framework</li>
<li>IWebSocketAdapterFactory</li>
</ul>
<p>配置了这些 Adapter，Weex 才能更好地实现一些功能。比如前面示例代码中，如果想显示一个图片的话就必须配置 <code>IWXImgLoaderAdapter</code>，自定义完成图片的加载工作。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">├── WXSDKEngine.initialize()</div><div class="line">    └── WXSDKEngine.doInitInternal()</div><div class="line">        ├── WXBridgeManager.getInstance().post()</div><div class="line">            ├── WXSDKManager.onSDKEngineInitialize()</div><div class="line">            ├── WXSDKManager.setInitConfig()</div><div class="line">            ├── WXSoInstallMgrSdk.init()</div><div class="line">            ├── WXSoInstallMgrSdk.initSo()</div><div class="line">            └── WXSDKManager.initScriptsFramework()</div><div class="line">                └── WXBridgeManager.initScriptsFramework()</div><div class="line">                    └── WXBridgeManager.invokeInitFramework()</div><div class="line">                        └── WXBridgeManager.initFramework()</div><div class="line">                            ├── WXBridge.initFrameworkEnv()</div><div class="line">                                ├── initFrameworkMultiProcess()</div><div class="line">                                └── initFramework()</div><div class="line">                            └── WXBridgeManager.registerDomModule()</div><div class="line">                                └── WXBridgeManager.registerModules()</div><div class="line">                                    └── WXBridgeManager.invokeRegisterModules()</div><div class="line">                                        └── WXBridge.execJS()</div><div class="line">        └── WXSDKEngine.register()</div><div class="line">            ├── WXSDKEngine.registerComponent()</div><div class="line">            ├── WXSDKEngine.registerModule()</div><div class="line">            └── WXSDKEngine.registerDomObject()</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doInitInternal</span><span class="params">(<span class="keyword">final</span> Application application,<span class="keyword">final</span> InitConfig config)</span></span>&#123;</div><div class="line">   WXEnvironment.sApplication = application;</div><div class="line"><span class="keyword">if</span>(application == <span class="keyword">null</span>)&#123;</div><div class="line">  WXLogUtils.e(TAG, <span class="string">" doInitInternal application is null"</span>);</div><div class="line">  WXExceptionUtils.commitCriticalExceptionRT(<span class="keyword">null</span>,</div><div class="line">		  WXErrorCode.WX_KEY_EXCEPTION_SDK_INIT.getErrorCode(),</div><div class="line">		  <span class="string">"doInitInternal"</span>,</div><div class="line">		  WXErrorCode.WX_KEY_EXCEPTION_SDK_INIT.getErrorMsg() + <span class="string">"WXEnvironment sApplication is null"</span>,</div><div class="line">		  <span class="keyword">null</span>);</div><div class="line">&#125;</div><div class="line">   WXEnvironment.JsFrameworkInit = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">   WXBridgeManager.getInstance().post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">     <span class="meta">@Override</span></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">       WXSDKManager sm = WXSDKManager.getInstance();</div><div class="line">       sm.onSDKEngineInitialize();</div><div class="line">       <span class="keyword">if</span>(config != <span class="keyword">null</span> ) &#123;</div><div class="line">         <span class="comment">//把初始化配置设置给 WXSDKManager</span></div><div class="line">         sm.setInitConfig(config);</div><div class="line">       &#125;</div><div class="line">       <span class="comment">// 加载 libweexjsc.so V8 引擎库。</span></div><div class="line">       WXSoInstallMgrSdk.init(application,</div><div class="line">                             sm.getIWXSoLoaderAdapter(),</div><div class="line">                             sm.getWXStatisticsListener());</div><div class="line">       <span class="keyword">boolean</span> isSoInitSuccess = WXSoInstallMgrSdk.initSo(V8_SO_NAME, <span class="number">1</span>, config!=<span class="keyword">null</span>?config.getUtAdapter():<span class="keyword">null</span>);</div><div class="line">       <span class="keyword">if</span> (!isSoInitSuccess) &#123;</div><div class="line">	  WXExceptionUtils.commitCriticalExceptionRT(<span class="keyword">null</span>,</div><div class="line">			  WXErrorCode.WX_KEY_EXCEPTION_SDK_INIT.getErrorCode(),</div><div class="line">			  <span class="string">"doInitInternal"</span>,</div><div class="line">			  WXErrorCode.WX_KEY_EXCEPTION_SDK_INIT.getErrorMsg() + <span class="string">"isSoInit false"</span>,</div><div class="line">			  <span class="keyword">null</span>);</div><div class="line"></div><div class="line">         <span class="keyword">return</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="comment">// 初始化 js framework</span></div><div class="line">       sm.initScriptsFramework(config!=<span class="keyword">null</span>?config.getFramework():<span class="keyword">null</span>);</div><div class="line"></div><div class="line">       WXEnvironment.sSDKInitExecuteTime = System.currentTimeMillis() - start;</div><div class="line">       WXLogUtils.renderPerformanceLog(<span class="string">"SDKInitExecuteTime"</span>, WXEnvironment.sSDKInitExecuteTime);</div><div class="line">     &#125;</div><div class="line">   &#125;);</div><div class="line">   <span class="comment">// 注册 Component 、 Module 以及 DomObject</span></div><div class="line">   register();</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>这里大部分的初始化工作是在 <code>WXBridgeManager.getInstance().post()</code> 方法中进行的，这个方法会把这些操作放到 WeexJSBridgeThread 线程中去执行。<br>有关 Weex 的线程模型后面文章再介绍。</p>
<h4 id="初始化-Js-Framework"><a href="#初始化-Js-Framework" class="headerlink" title="初始化 Js Framework"></a>初始化 Js Framework</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initFramework</span><span class="params">(String framework)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!isJSFrameworkInit()) &#123;</div><div class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(framework)) &#123;</div><div class="line">      <span class="comment">// 这里如果在 InitConfig 没有配置 framework js 的话就默认加载 sdk 里面的 main.js</span></div><div class="line">      <span class="comment">// if (WXEnvironment.isApkDebugable()) &#123;</span></div><div class="line">      WXLogUtils.d(<span class="string">"weex JS framework from assets"</span>);</div><div class="line">      <span class="comment">// &#125;</span></div><div class="line">      framework = WXFileUtils.loadAsset(<span class="string">"main.js"</span>, WXEnvironment.getApplication());</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 如果加载 js framework 不成功，报错返回。</span></div><div class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(framework)) &#123;</div><div class="line">      setJSFrameworkInit(<span class="keyword">false</span>);</div><div class="line">WXExceptionUtils.commitCriticalExceptionRT(<span class="keyword">null</span>, WXErrorCode.WX_ERR_JS_FRAMEWORK.getErrorCode(),</div><div class="line">		<span class="string">"initFramework"</span>, <span class="string">"framework is empty!! "</span>, <span class="keyword">null</span>);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      <span class="keyword">if</span> (WXSDKManager.getInstance().getWXStatisticsListener() != <span class="keyword">null</span>) &#123;</div><div class="line">        WXSDKManager.getInstance().getWXStatisticsListener().onJsFrameworkStart();</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">      String crashFile = <span class="string">""</span>;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        crashFile = WXEnvironment.getApplication().getApplicationContext().getCacheDir().getPath();</div><div class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">boolean</span> pieSupport = <span class="keyword">true</span>;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.JELLY_BEAN) &#123;</div><div class="line">          pieSupport = <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">      &#125;</div><div class="line">      WXLogUtils.d(<span class="string">"[WXBridgeManager] initFrameworkEnv crashFile:"</span> + crashFile + <span class="string">" pieSupport:"</span> + pieSupport);</div><div class="line">      <span class="comment">// 调用 WXBridge.initFrameworkEnv() 方法调用 native 方法初始化 js framework</span></div><div class="line">      <span class="keyword">if</span> (mWXBridge.initFrameworkEnv(framework, assembleDefaultOptions(), crashFile, pieSupport) == INIT_FRAMEWORK_OK) &#123;</div><div class="line">        WXEnvironment.sJSLibInitTime = System.currentTimeMillis() - start;</div><div class="line">        WXLogUtils.renderPerformanceLog(<span class="string">"initFramework"</span>, WXEnvironment.sJSLibInitTime);</div><div class="line">        WXEnvironment.sSDKInitTime = System.currentTimeMillis() - WXEnvironment.sSDKInitStart;</div><div class="line">        WXLogUtils.renderPerformanceLog(<span class="string">"SDKInitTime"</span>, WXEnvironment.sSDKInitTime);</div><div class="line">        setJSFrameworkInit(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (WXSDKManager.getInstance().getWXStatisticsListener() != <span class="keyword">null</span>) &#123;</div><div class="line">          WXSDKManager.getInstance().getWXStatisticsListener().onJsFrameworkReady();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        execRegisterFailTask();</div><div class="line">        WXEnvironment.JsFrameworkInit = <span class="keyword">true</span>;</div><div class="line">        <span class="comment">// 注册 DomModule，后面会统一介绍注册 Module 的步骤</span></div><div class="line">        registerDomModule();</div><div class="line">        String reinitInfo = <span class="string">""</span>;</div><div class="line">        <span class="keyword">if</span> (reInitCount &gt; <span class="number">1</span>) &#123;</div><div class="line">          reinitInfo = <span class="string">"reinit Framework:"</span>;</div><div class="line">        &#125;</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        ......</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line">      ......</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      介绍 Weex 的初始化过程
    
    </summary>
    
      <category term="Weex" scheme="http://yoursite.com/categories/Weex/"/>
    
    
      <category term="Weex" scheme="http://yoursite.com/tags/Weex/"/>
    
  </entry>
  
  <entry>
    <title>Weex 源码研究 -- 相关类概述</title>
    <link href="http://yoursite.com/2018/03/10/open-source-weex-android-classes-introduction/"/>
    <id>http://yoursite.com/2018/03/10/open-source-weex-android-classes-introduction/</id>
    <published>2018-03-10T02:00:00.000Z</published>
    <updated>2018-05-29T02:28:24.837Z</updated>
    
    <content type="html"><![CDATA[<p>这里先来介绍几个 Component 相关的几个类：</p>
<h2 id="WXSDKManager"><a href="#WXSDKManager" class="headerlink" title="WXSDKManager"></a>WXSDKManager</h2><p>这个是 weex 的核心所在，直接或者间接的管理着 weex 上下文相关的所有类。以组合的形式带上 <code>WXBridgeManager</code>、<code>WXRendermanager</code> 和 <code>WXDomManager</code>。三个管理类如名称一样，负责各自的功能区域。后面会分别再介绍这三个类</p>
<h2 id="WXBridgeManager"><a href="#WXBridgeManager" class="headerlink" title="WXBridgeManager"></a>WXBridgeManager</h2><p>主要负责 和 JS 引擎交互 ，发送 native 端 java 的请求到 jni 层，并接收js引擎处理后从jni上返回的消息。</p>
<h2 id="WXRendermanager"><a href="#WXRendermanager" class="headerlink" title="WXRendermanager"></a>WXRendermanager</h2><p>将对应的Dom的节点渲染成组件。<br><code>WXRenderManager</code> 中的 <code>WXRenderHandler</code> 根据代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public WXRenderHandler() &#123;</div><div class="line">  super(Looper.getMainLooper());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到是运行在 UI 线程中的，因此，渲染都是在 UI 线程中执行的。</p>
<h2 id="RenderActionContextImpl"><a href="#RenderActionContextImpl" class="headerlink" title="RenderActionContextImpl"></a>RenderActionContextImpl</h2><p>是 <code>RenderActionContext</code> 的实现类。是渲染动作的执行类。<code>mRegistry</code> 保存了 <code>WXSDKInstance</code> 对应的所有的组件。</p>
<h2 id="RenderAction"><a href="#RenderAction" class="headerlink" title="RenderAction"></a>RenderAction</h2><h2 id="WXDomManager"><a href="#WXDomManager" class="headerlink" title="WXDomManager"></a>WXDomManager</h2><p>负责构建客户端的dom结构，在 <code>WXBridgeManager</code> 接收到消息后，会交给 <code>WxDomManager</code> 处理，<code>WxDomManager</code> 根据消息创建自己的 Dom 结构，添加、删除、修改元素。<br>WXDomManager.batch() 批处理dom操作。<br><code>WXDomManager</code> 中的 <code>mDomHandler</code> 我们根据代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mDomThread = new WXThread(&quot;WeeXDomThread&quot;, new WXDomHandler(this));</div></pre></td></tr></table></figure>
<p>可以知道它是一个名称为 WeeXDomThread 的后台线程。</p>
<h2 id="DOMActionContextImpl"><a href="#DOMActionContextImpl" class="headerlink" title="DOMActionContextImpl"></a>DOMActionContextImpl</h2><h2 id="DOMAction"><a href="#DOMAction" class="headerlink" title="DOMAction"></a>DOMAction</h2><ul>
<li>AddEventAction</li>
<li>AnimationAction</li>
<li>RemoveElementAction</li>
<li>RemoveEventAction</li>
<li>ScrollToElementAction</li>
<li>UpdateAttributeAction</li>
<li>UpdateFinishAction</li>
<li>UpdateStyleAction</li>
</ul>
<h2 id="WXDomObject"><a href="#WXDomObject" class="headerlink" title="WXDomObject"></a>WXDomObject</h2><ul>
<li>DomObject 包括了 <code>&lt;template&gt;</code> 在 Dom 树中的所有信息，如 style、attr、event、ref（结点的唯一标识符）、parent、children</li>
</ul>
<h2 id="ImmutableDomObject"><a href="#ImmutableDomObject" class="headerlink" title="ImmutableDomObject"></a>ImmutableDomObject</h2><ul>
<li>表示一个 Dom 节点</li>
</ul>
<h2 id="WXComponent"><a href="#WXComponent" class="headerlink" title="WXComponent"></a>WXComponent</h2><ul>
<li>Component 负责承载 Native View，可以通过泛型指定承载 View的类型。</li>
<li>所有组件相关的类都要继承这个类。</li>
<li>Component 会保留 DomObject 的强引用，两者实例是一一对应的。</li>
<li><p>通过调用 initComponentHostView 创建 Component 需要承载的 View，所有 的Component 必须重写 initComponentHostView 方法，返回需要承载的 View 的最外层容器。如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@Component(lazyload = false)</div><div class="line">public class WXText extends WXComponent&lt;WXTextView&gt; implements FlatComponent&lt;TextWidget&gt; &#123;</div><div class="line"> protected WXTextView initComponentHostView(@NonNull Context context) &#123;</div><div class="line">   WXTextView textView =new WXTextView(context);</div><div class="line">   textView.holdComponent(this);</div><div class="line">   return textView;</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="WXModule"><a href="#WXModule" class="headerlink" title="WXModule"></a>WXModule</h2><ul>
<li>通过 Module 可以将 Native Api 暴露给Js。</li>
<li>所有的模块都要继承这个类。</li>
</ul>
<h2 id="WXSDKInstance"><a href="#WXSDKInstance" class="headerlink" title="WXSDKInstance"></a>WXSDKInstance</h2><p>这个类前面的 demo 中已经展示了它的用法。</p>
<ul>
<li>Weex 的渲染单位，是 weex 渲染的实例对象。</li>
<li>它可以是一个纯 weex View，和可以和 Native 混合。</li>
<li>它提供了一系列跟页面渲染相关的接口：render()、renderByUrl()等。</li>
<li>提供了几个比较重要的回调接口，比如生命周期回调和渲染结果回调。方便开发者根据不同的业务场景去处理他们的逻辑。</li>
<li>这里明确两个容器的概念： <ul>
<li>Instance RootView：Weex 最外层容器， Native 接入方可以设置 Instance RootView 大小, 最终通过 <code>onViewCreated()</code> 返回给用户的View也就是 Instance RootView。用 <code>RenderContainer</code> 类来表示。</li>
<li>JS Root: JS 可以描述的最外层容器， 为 RootView 的唯一子节点， 受 JS 样式的控制。用 <code>WXComponent</code> 来表示。</li>
</ul>
</li>
<li>Instance 宽高设置遵循以下几个原则：<ul>
<li>Instance RootView 的宽高优先遵循 instance。 设置的宽高，如果开发者没有设置，则与 JS Root 节点的宽高保持一致。</li>
<li>JS Root 节点的宽高优先遵循 CSS 样式设置的宽高，如果没有设置，则使用 instance 上设置的宽高，如果 instance 也没有设置，则使用 layout 出来的宽高</li>
<li>特殊情况，当 <code>scroller</code> 和 <code>list</code> 作为 <code>JS Root</code> 时，如果不设置高度, 会给 <code>scroller</code> 和 <code>list</code> 设置 <code>flex:1</code>。</li>
<li>综上所述，Instance RootView 和 JS Root 的宽高可以不一致，应该根据需求正确的设置 Instance 的宽高，也可以在运行时动态的改变 Instance 的宽高。</li>
</ul>
</li>
</ul>
<h2 id="WXDomModule"><a href="#WXDomModule" class="headerlink" title="WXDomModule"></a>WXDomModule</h2><p>派发渲染指令的枢纽，提供了 <code>callDomMethod()</code> 和 <code>postAction()</code>方法来派发渲染指令。</p>
<ul>
<li>JSFramework 根据 Virtual Dom 计算出来的 dif，将渲染指令（Json）通过 Js Engine 发送给 Native Render 进行渲染。而 <code>WXDomModule</code> 会接收到所有渲染指令，然后将指令post 给 <code>DomHandler</code>，最后由 <code>DomHandler</code> 来派发渲染任务。</li>
<li><code>DomStatement</code> 在 Dom 线程中创建 <code>DomObject</code> 和 <code>Component</code>，<code>RenderStatement</code> 负责在 UI 线程中渲染 View；每个 <code>WXSDKInstance</code> 会持有一个 <code>DomStatement</code> 和 <code>RenderStatement</code> 实例。</li>
<li><code>RenderStatement</code> 会从 <code>DomStatementclone</code> 一份 <code>DomObject</code>，是为了避免两个线程同时操作 Dom 造成的同步问题。</li>
<li>主要有如下指令：<ul>
<li>createBody：<code>DomStatement</code> 首先在 Dom 线程中创建 JS Root 对应的 Component，然后会将 JS Root 添加到 <code>WXSDKInstance</code> 作为 GodCom 的子节点，从而生成 Component 树的最顶端。生成 Component 树后，将 createBody 任务 post 到 UI 线程，由<code>RenderStatement</code> 创建 <code>WXSDKInstance</code> 的 Rootview，并通过 onViewCreated 回调给 WXSDKInstance 的上下文。</li>
<li>addElement：首先，<code>DomStatement</code> 在 Dom 线程中创建 DomObject 和对应的 Component 实例，加入 Dom 树和 Component 树；然后将 addElement 任务 post 到 UI 线程，<code>RenderStatement</code> 会触发 Component 完成以下任务： createView（初始化 Component 承载的 View）、applyLayoutAndEvent（触发 setLayout 和 setPadding、绑定 Event）、bindData（给 View 设置 style、attr）、addChild（将 View 加入 View 树）</li>
<li>removeElement：是 addElement 的逆向操作，将 View、Component、DomObject 分别从各自的树中删除，并销毁数据回收资源。</li>
<li>moveElement：将 View、Component、DomObject 在树中移动位置，move 操作最终被拆分成一次 remove 操作和一次 add 操作。</li>
<li>addEvent：绑定事件。</li>
<li>removeEvent：撤销事件绑定。</li>
<li>updateAttrs：当结点 attr 被改变时，会触发 updateAttrs，最终会触发 <code>WXComponent</code> 中的 updateProperties 刷新 UI。</li>
<li>updateStyle：与 updateAttrs 类似。</li>
<li>createFinish：JsFramework 将所有渲染指令都发出后，会触发 createFinish，最后会触发 <code>onRenderSuccess</code> 回调。</li>
<li>updateFinish：JsFramework 将所有 update 指令发出后，会触发 updateFinish，最后会触发 <code>onUpdateFinish</code> 回调。</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      介绍 Weex 里面比较重要的几个类
    
    </summary>
    
      <category term="Weex" scheme="http://yoursite.com/categories/Weex/"/>
    
    
      <category term="Weex" scheme="http://yoursite.com/tags/Weex/"/>
    
  </entry>
  
  <entry>
    <title>Weex 源码研究 -- 序言</title>
    <link href="http://yoursite.com/2018/03/02/open-source-weex-android-introduction/"/>
    <id>http://yoursite.com/2018/03/02/open-source-weex-android-introduction/</id>
    <published>2018-03-02T02:00:00.000Z</published>
    <updated>2018-05-29T02:28:24.838Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Weex-简介"><a href="#Weex-简介" class="headerlink" title="Weex 简介"></a>Weex 简介</h2><p>一套构建高性能、可扩展的原生应用跨平台开发方案。<br>Weex V8 引擎现在也已经开源。<br><a href="http://weex.apache.org/cn/index.html" target="_blank" rel="external">Weex 官网地址</a><br><a href="https://github.com/apache/incubator-weex/" target="_blank" rel="external">Weex 源码</a><br><a href="https://github.com/alibaba/weex_js_engine" target="_blank" rel="external">V8 引擎库 Github 地址</a></p>
<h2 id="导入源码"><a href="#导入源码" class="headerlink" title="导入源码"></a>导入源码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/apache/incubator-weex.git weex</div></pre></td></tr></table></figure>
<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">├── weex</div><div class="line">    ├── android</div><div class="line">        ├── sdk</div><div class="line">        ├── commons</div><div class="line">        └── playground</div><div class="line">    ├── ios</div><div class="line">    ├── runtime</div><div class="line">    ├── packages</div><div class="line">    ├── scripts</div><div class="line">    ├── pre-build</div><div class="line">    ├── bin</div><div class="line">    ├── build</div><div class="line">    ├── examples</div><div class="line">    ├── test</div><div class="line">    └── doc</div></pre></td></tr></table></figure>
<p>打开 Android Studio，导入 android 目录下的源码，发现会有三个 Module：</p>
<ul>
<li>weex_sdk：lib Module，顾名思义，就是 weex 的 Android sdk 源码。</li>
<li>commons：lib Module，在 playground Module 中用到的通用工具代码。</li>
<li>playground：app Module，Weex 官方的 Demo，展示了一些 Weex 教程、Weex 实例以及一些 Weex 资讯。</li>
</ul>
<p>现在你就可以尽情地研究 Weex 源码了，后面我的一系列博客也会进行一些 Weex 源码（源码的 Weex SDK Version 是基于0.17.0，JS Framework 是基于 0.23.9， 平台是基于 Android）的分析，欢迎大家关注。</p>
]]></content>
    
    <summary type="html">
    
      Weex 的一些简单介绍和源码目录结构
    
    </summary>
    
      <category term="Weex" scheme="http://yoursite.com/categories/Weex/"/>
    
    
      <category term="Weex" scheme="http://yoursite.com/tags/Weex/"/>
    
  </entry>
  
  <entry>
    <title>Python实战 -- 网络爬虫之解析爱奇艺视频</title>
    <link href="http://yoursite.com/2018/02/20/python-practice-web-crawler-iqiyi/"/>
    <id>http://yoursite.com/2018/02/20/python-practice-web-crawler-iqiyi/</id>
    <published>2018-02-20T02:00:00.000Z</published>
    <updated>2018-05-29T02:28:24.839Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>说到 Python 实战示例，肯定不能不提网络爬虫，Python 简介的语法和强大的数据处理能力以及一些成熟的框架成为做爬虫项目工程师的最爱，那么本篇博客就介绍利用 Python 来解析视频网站视频源播放地址。<br>说到这个就再顺便介绍一下 Kodi，其实就是 XBMC 的前身，我最早接触 Python 其实也是缘由一个 关于 XBMC 的项目，Kodi的很多插件就是用 Python 来写的，本篇博客的爱奇艺视频解析原理也是参考了 Kodi 的插件，为了便于理解，做了一些简化，只保留了一些基本的功能。<br>大家可以参考这个开源的 <a href="https://github.com/taxigps/xbmc-addons-chinese" target="_blank" rel="external">Kodi插件</a>。<br>前面我也写过一片关于如何分析爱奇艺视频播放地址的文章，大家也可以参考一下<a href="https://blog.csdn.net/heqiangflytosky/article/details/8931905" target="_blank" rel="external">XBMC视频插件开发系列–网页数据解析</a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>废话不多说，现在开始进入正题。<br>做爬虫，网络请求是必不可少的，那么现在我们就先写一个网络数据请求的方法出来。</p>
<h3 id="网络请求方法"><a href="#网络请求方法" class="headerlink" title="网络请求方法"></a>网络请求方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">def getHttpData(url):</div><div class="line">    req = urllib2.Request(url)</div><div class="line"></div><div class="line">    try:</div><div class="line">        reponse = urllib2.urlopen(req)</div><div class="line">        httpData = reponse.read()</div><div class="line">    except:</div><div class="line">        print &quot;get http data error&quot;</div><div class="line">        return &quot;&quot;</div><div class="line"></div><div class="line">    return httpData</div></pre></td></tr></table></figure>
<p>用百度主页来测试一下，OK，可以抓取到数据。</p>
<h3 id="获取分类列表"><a href="#获取分类列表" class="headerlink" title="获取分类列表"></a>获取分类列表</h3><p>我们进入<a href="http://www.iqiyi.com/" target="_blank" rel="external">爱奇艺视频主页</a>，我们会看到视频分类列表，点击这个列表，比如电影，就进入电影的分类页面，这个时候再点击一个检索条件，比如近期热门，就进入了分类检索页面。那么我们的解析工作也就从这个页面开始。<br>首先我们点击电影，发现网址变为：<a href="http://list.iqiyi.com/www/1/----------------iqiyi--.html。" target="_blank" rel="external">http://list.iqiyi.com/www/1/----------------iqiyi--.html。</a><br>再点击电影频道下方的免费分类：<a href="http://list.iqiyi.com/www/1/----------0---11-1-1-iqiyi--.html。" target="_blank" rel="external">http://list.iqiyi.com/www/1/----------0---11-1-1-iqiyi--.html。</a><br>再点击电视剧频道：<a href="http://list.iqiyi.com/www/2/----------------iqiyi--.html。" target="_blank" rel="external">http://list.iqiyi.com/www/2/----------------iqiyi--.html。</a><br>多点击几个你就会得到这样的规律：<br>频道对应的是 <a href="http://list.iqiyi.com/www/" target="_blank" rel="external">http://list.iqiyi.com/www/</a>&lt;频道&gt;/—————-iqiyi–.html，后面的 - 分割的各种检索条件，比如资费、地区和类型等等。<br>通过这种方式我们可以把频道对应的频道ID、排序方式ID和付费类型ID给整理好：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">CHANNEL_LIST = [[&apos;电影&apos;, &apos;1&apos;], [&apos;电视剧&apos;, &apos;2&apos;], [&apos;纪录片&apos;, &apos;3&apos;], [&apos;动漫&apos;, &apos;4&apos;], [&apos;音乐&apos;, &apos;5&apos;], [&apos;综艺&apos;, &apos;6&apos;], [&apos;娱乐&apos;, &apos;7&apos;],[&apos;旅游&apos;, &apos;9&apos;], [&apos;片花&apos;, &apos;10&apos;], [&apos;教育&apos;, &apos;12&apos;], [&apos;时尚&apos;, &apos;13&apos;]]</div><div class="line">ORDER_LIST = [[&apos;4&apos;, &apos;更新时间&apos;], [&apos;11&apos;, &apos;热门&apos;]]</div><div class="line">PAYTYPE_LIST = [[&apos;&apos;, &apos;全部影片&apos;], [&apos;0&apos;, &apos;免费影片&apos;], [&apos;1&apos;, &apos;会员免费&apos;], [&apos;2&apos;, &apos;付费点播&apos;]]</div></pre></td></tr></table></figure>
<p>那么就可以把获取视频类型的方法给写出来：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">def rootList():</div><div class="line">    for name, id in CHANNEL_LIST:</div><div class="line">        u = sys.argv[0] + &quot;?mode=1&amp;name=&quot; + urllib.quote_plus(name) + &quot;&amp;id=&quot; + urllib.quote_plus(</div><div class="line">            id) + &quot;&amp;cat=&quot; + urllib.quote_plus(&quot;&quot;) + &quot;&amp;area=&quot; + urllib.quote_plus(&quot;&quot;) + &quot;&amp;year=&quot; + urllib.quote_plus(</div><div class="line">            &quot;&quot;) + &quot;&amp;order=&quot; + urllib.quote_plus(&quot;11&quot;) + &quot;&amp;page=&quot; + urllib.quote_plus(</div><div class="line">            &quot;1&quot;) + &quot;&amp;paytype=&quot; + urllib.quote_plus(&quot;0&quot;)</div><div class="line">        print name</div><div class="line">        print u</div></pre></td></tr></table></figure>
<p>通过这个方法，组装了各个分类视频需要的一些参数，这里把他们打印出来，根据需要再调用下面的方法获取各个视频。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">电影</div><div class="line">/Users/*****/iqiyi_custom.py?mode=1&amp;name=%E7%94%B5%E5%BD%B1&amp;id=1&amp;cat=&amp;area=&amp;year=&amp;order=11&amp;page=1&amp;paytype=0</div><div class="line">电视剧</div><div class="line">/Users/*****/iqiyi_custom.py?mode=1&amp;name=%E7%94%B5%E8%A7%86%E5%89%A7&amp;id=2&amp;cat=&amp;area=&amp;year=&amp;order=11&amp;page=1&amp;paytype=0</div><div class="line">......</div></pre></td></tr></table></figure>
<h3 id="获取视频列表"><a href="#获取视频列表" class="headerlink" title="获取视频列表"></a>获取视频列表</h3><p>有了视频分类列表，那么下一步就是获取你需要的视频列表以及每个视频所对应的播放页面地址了，先看代码吧，这里时主要来获取电影分类的，解析原理请看代码中的注释：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#         id   c1   c2   c3   c4   c5     c11  c12   c14</span></div><div class="line"><span class="comment"># 电影     1 area  cat                paytype year order</span></div><div class="line"><span class="comment"># 电视剧   2 area  cat                paytype year order</span></div><div class="line"><span class="comment"># 纪录片   3  cat                     paytype      order</span></div><div class="line"><span class="comment"># 动漫     4 area  cat  ver  age      paytype      order</span></div><div class="line"><span class="comment"># 音乐     5 area lang       cat  grp paytype      order</span></div><div class="line"><span class="comment"># 综艺     6 area  cat                paytype      order</span></div><div class="line"><span class="comment"># 娱乐     7       cat area           paytype      order</span></div><div class="line"><span class="comment"># 旅游     9  cat area                paytype      order</span></div><div class="line"><span class="comment"># 片花    10      area       cat      paytype      order</span></div><div class="line"><span class="comment"># 教育    12            cat           paytype      order</span></div><div class="line"><span class="comment"># 时尚    13                      cat paytype      order</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">progList</span><span class="params">(name, id, page, cat, area, year, order, paytype)</span>:</span></div><div class="line">    c1 = <span class="string">''</span></div><div class="line">    c2 = <span class="string">''</span></div><div class="line">    c3 = <span class="string">''</span></div><div class="line">    c4 = <span class="string">''</span></div><div class="line">    <span class="keyword">if</span> id == <span class="string">'7'</span>:  <span class="comment"># 娱乐</span></div><div class="line">        c3 = area</div><div class="line">    <span class="keyword">elif</span> id <span class="keyword">in</span> (<span class="string">'9'</span>, <span class="string">'10'</span>):  <span class="comment"># 旅游&amp;片花</span></div><div class="line">        c2 = area</div><div class="line">    <span class="keyword">elif</span> id != <span class="string">'3'</span>:  <span class="comment"># 非纪录片</span></div><div class="line">        c1 = area</div><div class="line">    <span class="keyword">if</span> id <span class="keyword">in</span> (<span class="string">'3'</span>, <span class="string">'9'</span>):  <span class="comment"># 纪录片&amp;旅游</span></div><div class="line">        c1 = cat</div><div class="line">    <span class="keyword">elif</span> id <span class="keyword">in</span> (<span class="string">'5'</span>, <span class="string">'10'</span>):  <span class="comment"># 音乐&amp;片花</span></div><div class="line">        c4 = cat</div><div class="line">    <span class="keyword">elif</span> id == <span class="string">'12'</span>:  <span class="comment"># 教育</span></div><div class="line">        c3 = cat</div><div class="line">    <span class="keyword">elif</span> id == <span class="string">'13'</span>:  <span class="comment"># 时尚</span></div><div class="line">        c5 = cat</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        c2 = cat</div><div class="line">    <span class="comment"># 根据分类信息组装url</span></div><div class="line">    url = <span class="string">'http://list.iqiyi.com/www/'</span> + id + <span class="string">'/'</span> + c1 + <span class="string">'-'</span> + c2 + <span class="string">'-'</span> + c3 + <span class="string">'-'</span> + c4 + <span class="string">'-------'</span> + \</div><div class="line">          paytype + <span class="string">'-'</span> + year + <span class="string">'--'</span> + order + <span class="string">'-'</span> + page + <span class="string">'-1-iqiyi--.html'</span></div><div class="line">    <span class="keyword">print</span> url</div><div class="line">    currpage = int(page)</div><div class="line">    <span class="comment"># 抓取网页数据</span></div><div class="line">    link = getHttpData(url)</div><div class="line">    <span class="comment"># 根据 data-key=&lt;数字&gt; 这个标记字符串来获取页数，匹配出来多少项就有多少页</span></div><div class="line">    match1 = re.compile(<span class="string">'data-key="([0-9]+)"'</span>).findall(link)</div><div class="line">    <span class="keyword">if</span> len(match1) == <span class="number">0</span>:</div><div class="line">        totalpages = <span class="number">1</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        totalpages = int(match1[len(match1) - <span class="number">1</span>])</div><div class="line"></div><div class="line">    <span class="comment"># &lt;div class="wrapper-piclist 和 &lt;!-- 页码 开始 --&gt; 中间的内容是有关视频列表的内容，用正则匹配获取相关内容</span></div><div class="line">    match = re.compile(<span class="string">'&lt;div class="wrapper-piclist"(.+?)&lt;!-- 页码 开始 --&gt;'</span>, re.DOTALL).findall(link)</div><div class="line">    <span class="keyword">if</span> match:</div><div class="line">        <span class="comment"># 匹配前面内容中的 &lt;li&gt; &lt;/li&gt;列表项，匹配多少项代表当前页有多少个视频</span></div><div class="line">        <span class="comment"># 正则表达式里面的 &lt;li[^&gt;]*&gt; 中[^&gt;]*非&gt;字符的0个或多个字符，防止&lt;li&gt;标签内带一些属性值</span></div><div class="line">        match = re.compile(<span class="string">'&lt;li[^&gt;]*&gt;(.+?)&lt;/li&gt;'</span>, re.DOTALL).findall(match[<span class="number">0</span>])</div><div class="line"></div><div class="line">    <span class="keyword">print</span> <span class="string">'-------'</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(match)):</div><div class="line">        <span class="comment"># 匹配alt=""冒号内的字符串，代码视频名称</span></div><div class="line">        p_name = re.compile(<span class="string">'alt="(.+?)"'</span>).findall(match[i])[<span class="number">0</span>]</div><div class="line">        <span class="comment"># 匹配src = ""冒号内的字符串，代表视频海报地址，\s* 代表0个或多个空白字符</span></div><div class="line">        p_thumb = re.compile(<span class="string">'src\s*=\s*"(.+?)"'</span>).findall(match[i])[<span class="number">0</span>]</div><div class="line">        <span class="comment"># 匹配href="([^"]*)"冒号内非"的0个或多个字符串，代表视频的播放界面，这个是后面解析视频播放地址的基础</span></div><div class="line">        p_id = re.compile(<span class="string">'href="([^"]*)"'</span>).search(match[i]).group(<span class="number">1</span>)</div><div class="line"></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="comment"># 根据 data-qidanadd-episode 是否为1来判断是否是多集的影视剧</span></div><div class="line">            p_episode = re.compile(<span class="string">'data-qidanadd-episode="(\d)"'</span>).search(match[i]).group(<span class="number">1</span>) == <span class="string">'1'</span></div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            p_episode = <span class="keyword">False</span></div><div class="line">        <span class="comment"># 匹配 &lt;span class="icon-vInfo"&gt; 和 &lt;/span&gt;中间的内容</span></div><div class="line">        match1 = re.compile(<span class="string">'&lt;span class="icon-vInfo"&gt;([^&lt;]+)&lt;/span&gt;'</span>).search(match[i])</div><div class="line">        <span class="keyword">if</span> match1:</div><div class="line">            <span class="comment"># 去掉匹配内容的空格</span></div><div class="line">            msg = match1.group(<span class="number">1</span>).strip()</div><div class="line">            <span class="keyword">if</span> (msg.find(<span class="string">'更新至'</span>) == <span class="number">0</span>) <span class="keyword">or</span> (msg.find(<span class="string">'共'</span>) == <span class="number">0</span>):</div><div class="line">                <span class="comment"># 如果内容里面有'更新至' 或者 '共' 这样字符，表示是连续剧</span></div><div class="line">                p_episode = <span class="keyword">True</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> p_episode:</div><div class="line">            <span class="comment"># 如果是连续剧 mode 设置为2</span></div><div class="line">            mode = <span class="number">2</span></div><div class="line">            <span class="comment"># 获取视频id</span></div><div class="line">            p_id = re.compile(<span class="string">'data-qidanadd-albumid="(\d+)"'</span>).search(match[i]).group(<span class="number">1</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="comment"># 否则 mode 设置为3，进入progList 方法</span></div><div class="line">            mode = <span class="number">3</span></div><div class="line">        <span class="comment"># 组装url</span></div><div class="line">        u = sys.argv[<span class="number">0</span>] + <span class="string">"?mode="</span> + str(mode) + <span class="string">"&amp;name="</span> + urllib.quote_plus(p_name) + <span class="string">"&amp;id="</span> + urllib.quote_plus(</div><div class="line">            p_id) + <span class="string">"&amp;thumb="</span> + urllib.quote_plus(p_thumb)</div><div class="line">        <span class="keyword">print</span> p_name</div><div class="line">        <span class="keyword">print</span> u</div></pre></td></tr></table></figure>
<p>调用方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">name = &apos;电影&apos;</div><div class="line">id = &apos;1&apos;</div><div class="line">cat = &apos;&apos;</div><div class="line">area = &apos;&apos;</div><div class="line">year = &apos;&apos;</div><div class="line">order = &apos;11&apos;</div><div class="line">page = &apos;1&apos;</div><div class="line">paytype = &apos;0&apos;</div><div class="line"></div><div class="line">print name, id, page, cat, area, year, order, paytype</div><div class="line">progList(name, id, page, cat, area, year, order, paytype)</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">反转人生</div><div class="line">/Users/****/iqiyi_custom.py?mode=3&amp;name=%E5%8F%8D%E8%BD%AC%E4%BA%BA%E7%94%9F&amp;id=http%3A%2F%2Fwww.iqiyi.com%2Fv_19rr7ph8kw.html%23vfrm%3D2-4-0-1&amp;thumb=%2F%2Fpic9.qiyipic.com%2Fimage%2F20180220%2Fbe%2F7a%2Fv_112880060_m_601_m2_180_236.jpg</div><div class="line">密战</div><div class="line">/Users/****/iqiyi_custom.py?mode=3&amp;name=%E5%AF%86%E6%88%98&amp;id=http%3A%2F%2Fwww.iqiyi.com%2Fv_19rrebyuec.html%23vfrm%3D2-4-0-1&amp;thumb=%2F%2Fpic4.qiyipic.com%2Fimage%2F20180220%2F38%2F76%2Fv_114269181_m_601_m2_180_236.jpg</div><div class="line">......</div></pre></td></tr></table></figure>
<h3 id="获取视频播放地址"><a href="#获取视频播放地址" class="headerlink" title="获取视频播放地址"></a>获取视频播放地址</h3><p>通过上一个方法我们可以得到一个视频列表以及该视频的播放页面地址，这里我们就选择《密战》这部电影来介绍吧。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">def getVMS(tvid, vid):</div><div class="line">    t = int(time.time() * 1000)</div><div class="line">    src = &apos;76f90cbd92f94a2e925d83e8ccd22cb7&apos;</div><div class="line">    key = &apos;d5fb4bd9d50c4be6948c97edd7254b0e&apos;</div><div class="line">    sc = hashlib.md5(str(t) + key + vid).hexdigest()</div><div class="line">    vmsreq = &apos;http://cache.m.iqiyi.com/tmts/&#123;0&#125;/&#123;1&#125;/?t=&#123;2&#125;&amp;sc=&#123;3&#125;&amp;src=&#123;4&#125;&apos;.format(tvid, vid, t, sc, src)</div><div class="line">    print &apos;vms地址&apos;</div><div class="line">    print vmsreq</div><div class="line">    return simplejson.loads(getHttpData(vmsreq))</div><div class="line"></div><div class="line">def PlayVideo(name, id, thumb):</div><div class="line">    id = id.split(&apos;,&apos;)</div><div class="line">    if len(id) == 1:</div><div class="line">        try:</div><div class="line">            if (&quot;http:&quot; in id[0]):</div><div class="line">                link = getHttpData(id[0])</div><div class="line">                tvId = re.compile(&apos;data-player-tvid=&quot;(.+?)&quot;&apos;, re.DOTALL).findall(link)[0]</div><div class="line">                videoId = re.compile(&apos;data-player-videoid=&quot;(.+?)&quot;&apos;, re.DOTALL).findall(link)[0]</div><div class="line">            else:</div><div class="line">                url = &apos;http://cache.video.qiyi.com/avlist/%s/&apos; % (id[0])</div><div class="line">                link = getHttpData(url)</div><div class="line">                data = link[link.find(&apos;=&apos;) + 1:]</div><div class="line">                json_response = simplejson.loads(data)</div><div class="line">                tvId = str(json_response[&apos;data&apos;][&apos;vlist&apos;][0][&apos;id&apos;])</div><div class="line">                videoId = json_response[&apos;data&apos;][&apos;vlist&apos;][0][&apos;vid&apos;].encode(&apos;utf-8&apos;)</div><div class="line">        except:</div><div class="line">            print &apos;未能获取视频地址&apos;</div><div class="line">            return</div><div class="line">    else:</div><div class="line">        tvId = id[0]</div><div class="line">        videoId = id[1]</div><div class="line"></div><div class="line">    # 根据一定规则获取视频流信息</div><div class="line">    info = getVMS(tvId, videoId)</div><div class="line">    if info[&quot;code&quot;] != &quot;A00000&quot;:</div><div class="line">        print &apos;无法播放此视频&apos;</div><div class="line">        return</div><div class="line"></div><div class="line">    vs = info[&quot;data&quot;][&quot;vidl&quot;]</div><div class="line">    sel = selResolution([x[&apos;vd&apos;] for x in vs])</div><div class="line">    if sel == -1:</div><div class="line">        return</div><div class="line">    # 根据分辨率获取对应地址</div><div class="line">    video_links = vs[sel][&quot;m3u&quot;]</div><div class="line"></div><div class="line">    print &apos;视频播放url&apos;</div><div class="line">    print video_links</div></pre></td></tr></table></figure>
<p>这里获得的url<code>http://cache.m.iqiyi.com/mus/870139400/ab59ce8ca82428c9a62cbaf9596d061c/afbe8fd3d73448c9//20171214/02/26/28e78579e4bfa8dcb7266c0f7487670a.m3u8?qd_originate=tmts_py&amp;tvid=870139400&amp;bossStatus=0&amp;qd_vip=0&amp;px=&amp;qd_src=3_31_312&amp;prv=&amp;previewType=&amp;previewTime=&amp;from=&amp;qd_time=1521815439747&amp;qd_p=0e7bff72&amp;qd_asc=2d335d24c5a9412e7da82ee3e003155c&amp;qypid=870139400_04022000001000000000_4&amp;qd_k=cd5ab91d76256006d732d157ce8ee616&amp;isdol=0&amp;code=2&amp;qd_s=otv&amp;vf=5299931f645288f5664953a7f30d65ea&amp;np_tag=nginx_part_tag</code>就是视频地址的url，根据这个url取得数据是m3u8格式的播放地址。这里可能要根据所使用播放器的m3u8的支持形式做一些转化。<br>其实这些分段的地址单个拿出来都是可以播放的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://dx.data.video.qiyi.com/videos/v0/20171214/02/26/d2c83af6c58ccbd91525ef8eee950886.ts?qdv=1&amp;qypid=870139400_04022000001000000000_4&amp;start=0&amp;end=334466&amp;hsize=2161&amp;tag=0&amp;v=&amp;contentlength=285384&amp;qd_uid=&amp;qd_vip=0&amp;qd_src=3_31_312&amp;qd_tm=1521816060630&amp;qd_ip=0e7bff72&amp;qd_p=0e7bff72&amp;qd_k=95668376716c9dcf32e2fbd6597c6f40&amp;sgti=&amp;dfp=&amp;qd_sc=947aee71a7bc4e65d241aeb5a4657439</div><div class="line">······</div></pre></td></tr></table></figure>
<p>好了，关于爱奇艺视频爬虫就介绍到这里。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/taxigps/xbmc-addons-chinese" target="_blank" rel="external">https://github.com/taxigps/xbmc-addons-chinese</a></p>
]]></content>
    
    <summary type="html">
    
      介绍使用 Python 来抓取爱奇艺视频网页内容来解析视频播放地址的方法
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>EventBus -- 源码分析</title>
    <link href="http://yoursite.com/2017/12/12/open-source-eventbus-source-code/"/>
    <id>http://yoursite.com/2017/12/12/open-source-eventbus-source-code/</id>
    <published>2017-12-12T02:00:00.000Z</published>
    <updated>2019-01-22T02:34:09.628Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>介绍完了 EventBus 的基本用法之后，照例要进行一下源码分析。<br>本文基于 EventBus V3.0.0 进行分析，并尽量保持同步更新。</p>
<p><a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external">github 源码地址</a></p>
<p>未完待续……</p>
<h2 id="消息订阅"><a href="#消息订阅" class="headerlink" title="消息订阅"></a>消息订阅</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public void register(Object subscriber) &#123;</div><div class="line">    // 获取订阅对象的 class 对象</div><div class="line">    Class&lt;?&gt; subscriberClass = subscriber.getClass();</div><div class="line">    List&lt;SubscriberMethod&gt; subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass);</div><div class="line">    synchronized (this) &#123;</div><div class="line">        for (SubscriberMethod subscriberMethod : subscriberMethods) &#123;</div><div class="line">            subscribe(subscriber, subscriberMethod);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="SubscriberMethodFinder"><a href="#SubscriberMethodFinder" class="headerlink" title="SubscriberMethodFinder"></a>SubscriberMethodFinder</h3><p>SubscriberMethodFinder 作用是解析并找出订阅对象中所有的订阅方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">SubscriberMethodFinder(List&lt;SubscriberInfoIndex&gt; subscriberInfoIndexes, boolean strictMethodVerification,</div><div class="line">                       boolean ignoreGeneratedIndex) &#123;</div><div class="line">    this.subscriberInfoIndexes = subscriberInfoIndexes;</div><div class="line">    this.strictMethodVerification = strictMethodVerification;</div><div class="line">    this.ignoreGeneratedIndex = ignoreGeneratedIndex;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">List&lt;SubscriberMethod&gt; findSubscriberMethods(Class&lt;?&gt; subscriberClass) &#123;</div><div class="line">    // 先找出是否有缓存</div><div class="line">    List&lt;SubscriberMethod&gt; subscriberMethods = METHOD_CACHE.get(subscriberClass);</div><div class="line">    // 如果有缓存直接返回缓存的订阅方法</div><div class="line">    if (subscriberMethods != null) &#123;</div><div class="line">        return subscriberMethods;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    if (ignoreGeneratedIndex) &#123;</div><div class="line">        // 如果设置了忽略生成的索引，关于索引，后面专门介绍</div><div class="line">        subscriberMethods = findUsingReflection(subscriberClass);</div><div class="line">    &#125; else &#123;</div><div class="line">        // 没有设置会走到这里，默认是没有设置的</div><div class="line">        subscriberMethods = findUsingInfo(subscriberClass);</div><div class="line">    &#125;</div><div class="line">    if (subscriberMethods.isEmpty()) &#123;</div><div class="line">        // 如果没有找到订阅方法，抛出异常</div><div class="line">        throw new EventBusException(&quot;Subscriber &quot; + subscriberClass</div><div class="line">                + &quot; and its super classes have no public methods with the @Subscribe annotation&quot;);</div><div class="line">    &#125; else &#123;</div><div class="line">        // 找到订阅方法，加入缓存</div><div class="line">        METHOD_CACHE.put(subscriberClass, subscriberMethods);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>获取订阅对象中的订阅方法列表：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">private List&lt;SubscriberMethod&gt; findUsingInfo(Class&lt;?&gt; subscriberClass) &#123;</div><div class="line">    FindState findState = prepareFindState();</div><div class="line">    findState.initForSubscriber(subscriberClass);</div><div class="line">    while (findState.clazz != null) &#123;</div><div class="line">        findState.subscriberInfo = getSubscriberInfo(findState);</div><div class="line">        if (findState.subscriberInfo != null) &#123;</div><div class="line">            SubscriberMethod[] array = findState.subscriberInfo.getSubscriberMethods();</div><div class="line">            for (SubscriberMethod subscriberMethod : array) &#123;</div><div class="line">                if (findState.checkAdd(subscriberMethod.method, subscriberMethod.eventType)) &#123;</div><div class="line">                    findState.subscriberMethods.add(subscriberMethod);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">            findUsingReflectionInSingleClass(findState);</div><div class="line">        &#125;</div><div class="line">        findState.moveToSuperclass();</div><div class="line">    &#125;</div><div class="line">    return getMethodsAndRelease(findState);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>解析订阅对象的注解信息。<br>因为订阅方法以及它的一些属性都是通过注解来标识的，只有解析到了这些方法才能向它们发布消息事件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">private void findUsingReflectionInSingleClass(FindState findState) &#123;</div><div class="line">    Method[] methods;</div><div class="line">    try &#123;</div><div class="line">        // 获取订阅者对象的所有方法</div><div class="line">        methods = findState.clazz.getDeclaredMethods();</div><div class="line">    &#125; catch (Throwable th) &#123;</div><div class="line">        methods = findState.clazz.getMethods();</div><div class="line">        findState.skipSuperClasses = true;</div><div class="line">    &#125;</div><div class="line">    for (Method method : methods) &#123;</div><div class="line">        int modifiers = method.getModifiers();</div><div class="line">        // 方法的修饰符必须符合下面的类型</div><div class="line">        if ((modifiers &amp; Modifier.PUBLIC) != 0 &amp;&amp; (modifiers &amp; MODIFIERS_IGNORE) == 0) &#123;</div><div class="line">            // 获取方法的参数</div><div class="line">            Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();</div><div class="line">            // 订阅方法必须接受一个参数，也就是表示消息事件的类</div><div class="line">            if (parameterTypes.length == 1) &#123;</div><div class="line">                // 获取该方法的 Subscribe 注解信息</div><div class="line">                Subscribe subscribeAnnotation = method.getAnnotation(Subscribe.class);</div><div class="line">                // 如果有这个注解</div><div class="line">                if (subscribeAnnotation != null) &#123;</div><div class="line">                    // 获取参数的 class 对象</div><div class="line">                    Class&lt;?&gt; eventType = parameterTypes[0];</div><div class="line">                    if (findState.checkAdd(method, eventType)) &#123;</div><div class="line">                        // 获取 ThreadMode 类型</div><div class="line">                        ThreadMode threadMode = subscribeAnnotation.threadMode();</div><div class="line">                        // 保存到subscriberMethods</div><div class="line">                        findState.subscriberMethods.add(new SubscriberMethod(method, eventType, threadMode,</div><div class="line">                                subscribeAnnotation.priority(), subscribeAnnotation.sticky()));</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125; else if (strictMethodVerification &amp;&amp; method.isAnnotationPresent(Subscribe.class)) &#123;</div><div class="line">                String methodName = method.getDeclaringClass().getName() + &quot;.&quot; + method.getName();</div><div class="line">                throw new EventBusException(&quot;@Subscribe method &quot; + methodName +</div><div class="line">                        &quot;must have exactly 1 parameter but has &quot; + parameterTypes.length);</div><div class="line">            &#125;</div><div class="line">        &#125; else if (strictMethodVerification &amp;&amp; method.isAnnotationPresent(Subscribe.class)) &#123;</div><div class="line">            String methodName = method.getDeclaringClass().getName() + &quot;.&quot; + method.getName();</div><div class="line">            throw new EventBusException(methodName +</div><div class="line">                    &quot; is a illegal @Subscribe method: must be public, non-static, and non-abstract&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="消息发布"><a href="#消息发布" class="headerlink" title="消息发布"></a>消息发布</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">private void postToSubscription(Subscription subscription, Object event, boolean isMainThread) &#123;</div><div class="line">    switch (subscription.subscriberMethod.threadMode) &#123;</div><div class="line">        case POSTING:</div><div class="line">            invokeSubscriber(subscription, event);</div><div class="line">            break;</div><div class="line">        case MAIN:</div><div class="line">            if (isMainThread) &#123;</div><div class="line">                invokeSubscriber(subscription, event);</div><div class="line">            &#125; else &#123;</div><div class="line">                mainThreadPoster.enqueue(subscription, event);</div><div class="line">            &#125;</div><div class="line">            break;</div><div class="line">        case MAIN_ORDERED:</div><div class="line">            if (mainThreadPoster != null) &#123;</div><div class="line">                mainThreadPoster.enqueue(subscription, event);</div><div class="line">            &#125; else &#123;</div><div class="line">                // temporary: technically not correct as poster not decoupled from subscriber</div><div class="line">                invokeSubscriber(subscription, event);</div><div class="line">            &#125;</div><div class="line">            break;</div><div class="line">        case BACKGROUND:</div><div class="line">            if (isMainThread) &#123;</div><div class="line">                backgroundPoster.enqueue(subscription, event);</div><div class="line">            &#125; else &#123;</div><div class="line">                invokeSubscriber(subscription, event);</div><div class="line">            &#125;</div><div class="line">            break;</div><div class="line">        case ASYNC:</div><div class="line">            asyncPoster.enqueue(subscription, event);</div><div class="line">            break;</div><div class="line">        default:</div><div class="line">            throw new IllegalStateException(&quot;Unknown thread mode: &quot; + subscription.subscriberMethod.threadMode);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>未完待续……</p>
]]></content>
    
    <summary type="html">
    
      介绍EventBus的源码
    
    </summary>
    
      <category term="Android开源项目" scheme="http://yoursite.com/categories/Android%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="EventBus" scheme="http://yoursite.com/tags/EventBus/"/>
    
  </entry>
  
  <entry>
    <title>EventBus -- 基本用法</title>
    <link href="http://yoursite.com/2017/12/10/open-source-eventbus-guide-base/"/>
    <id>http://yoursite.com/2017/12/10/open-source-eventbus-guide-base/</id>
    <published>2017-12-10T02:00:00.000Z</published>
    <updated>2019-01-18T07:53:55.592Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>EventBus 是有 <a href="http://greenrobot.org/" target="_blank" rel="external">greenrobot</a> 贡献的一个基于观察者模式的Android事件发布/订阅轻量级框架。使用它可以方便的实现 Android 端的 publish/subscribe 消息总线，在某些场景来代替 Intent、Handler、BroadCast 等实现在Activity、Fragment或者不同线程间的事件通信。</p>
<p><img src="https://raw.githubusercontent.com/greenrobot/EventBus/master/EventBus-Publish-Subscribe.png" alt="效果图"></p>
<p>作为一个 Android 开发者，我们平时都会用到或者了解它的用法，本文就将它的用法来做一个总结，已备查用。后面还会写一篇 EventBus 源码分析的文章。</p>
<p><a href="http://greenrobot.org/eventbus/documentation/" target="_blank" rel="external">官方使用文档</a><br><a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external">github 源码地址</a></p>
<h2 id="EventBus-使用"><a href="#EventBus-使用" class="headerlink" title="EventBus 使用"></a>EventBus 使用</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>添加 EventBus 依赖：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile &apos;org.greenrobot:eventbus:3.1.1&apos;</div></pre></td></tr></table></figure>
<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>先来了解 EventBus 的三要素：</p>
<ul>
<li>消息事件</li>
<li>事件订阅者</li>
<li>事件发布者</li>
</ul>
<p>EventBus的使用很简单，只需要下面几个步骤就可以轻松实现事件的订阅和发布：</p>
<ul>
<li>声明消息事件对象</li>
<li>需要接受事件的页面注册EventBus</li>
<li>通过EventBus发送事件，相关页面接收事件并处理</li>
<li>页面销毁，反注册EventBus</li>
</ul>
<p>声明消息事件承载类，消息事件发送后，会根据不同的消息事件对象来寻找合适的接收消息事件的方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public class Event &#123;</div><div class="line">    public String msg;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在一个 Activity 里面订阅消息事件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">    ......</div><div class="line">    EventBus.getDefault().register(this);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line">protected void onDestroy() &#123;</div><div class="line">    super.onDestroy();</div><div class="line">    EventBus.getDefault().unregister(this);</div><div class="line">    ......</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Subscribe(threadMode = ThreadMode.MAIN)</div><div class="line">public void onReceiveEvent(Event event) &#123;</div><div class="line">    Log.e(&quot;Test&quot;,&quot;Receive event = &quot;+event.msg);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用 Subscribe 注解订阅方法，使用 Event 作为参数来接受 Event 类型的消息事件。threadMode 用来指定该方法允许的线程。onReceiveEvent 这个方法的名字可以随意命名。<br>订阅方法必须是 public 的，而且不能有 Modifier.ABSTRACT | Modifier.STATIC | Modifier.VOLATILE | Modifier.SYNTHETIC。</p>
<p>然后在另外一个 Activity 中发送消息事件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public void testEvent(View view) &#123;</div><div class="line">    Event event = new Event();</div><div class="line">    event.msg = &quot;Test Event&quot;;</div><div class="line">    EventBus.getDefault().post(event);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另外注意要配置 proguard：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">-keepattributes *Annotation*</div><div class="line">-keepclassmembers class * &#123;</div><div class="line">    @org.greenrobot.eventbus.Subscribe &lt;methods&gt;;</div><div class="line">&#125;</div><div class="line">-keep enum org.greenrobot.eventbus.ThreadMode &#123; *; &#125;</div><div class="line"> </div><div class="line"># Only required if you use AsyncExecutor</div><div class="line">-keepclassmembers class * extends org.greenrobot.eventbus.util.ThrowableFailureEvent &#123;</div><div class="line">    &lt;init&gt;(java.lang.Throwable);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="进阶用法"><a href="#进阶用法" class="headerlink" title="进阶用法"></a>进阶用法</h2><p>现在来介绍一下 EventBus 的一些高级用法。</p>
<h3 id="线程模型-threadMode"><a href="#线程模型-threadMode" class="headerlink" title="线程模型 threadMode"></a>线程模型 threadMode</h3><p>在使用 Subscribe 注解订阅方法时，可以加上  threadMode 参数来指定订阅方法运行的线程。<br>threadMode 有下面几种：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public enum ThreadMode &#123;</div><div class="line">    POSTING,</div><div class="line">    MAIN,</div><div class="line">    MAIN_ORDERED,</div><div class="line">    BACKGROUND,</div><div class="line">    ASYNC</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>POSTING：接收消息事件的方法和发送消息事件的方法运行在同一个线程。这个也是 threadMode 的默认模式。</li>
<li>MAIN：接收消息事件的方法运行在Android主线程。如果发送消息事件方法也运行在主线程，那么会直接调用接收方法。如果发送方法不在主线程，会把消息加到主线程消息队列中。这种模式下不能执行一些耗时的操作。</li>
<li>MAIN_ORDERED：接收消息事件的方法也是运行在Android主线程。和 MAIN 不同的时，无论发送方法运行在什么线程，消息事件总会加入到主线程消息队列中，排队执行。</li>
<li>BACKGROUND：接收消息事件的方法运行在后台线程。如果发送方不是运行在主线程，那么会直接在发送方线程运行接收方法。如果发送方法运行在主线程，那么就会启动线程池里面的一个后台线程来运行接收方法。</li>
<li>ASYNC：接收消息事件的方法运行在后台线程。无法发送方运行在什么线程，都会重新创建线程来运行接收方法。</li>
</ul>
<h3 id="粘性事件"><a href="#粘性事件" class="headerlink" title="粘性事件"></a>粘性事件</h3><p>一般的事件在发布之后，后来注册的订阅者就无法再收到这些事件，但是粘性事件可以解决这个问题。粘性事件发出之后，EventBus 会把它保存下来，知道有新的同类型的粘性事件发出，才会将就旧的事件覆盖。后面注册的订阅者只要使用 sticky 模式，就依然可以收到以前发出的粘性事件。<br>事件订阅：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@Subscribe(sticky = true)</div><div class="line">public void onReceiveEvent(Event event) &#123;</div><div class="line">    Log.e(&quot;Test&quot;,&quot;event = &quot;+event.msg);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>事件发送：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EventBus.getDefault().postSticky(event);</div></pre></td></tr></table></figure>
<h3 id="高级配置"><a href="#高级配置" class="headerlink" title="高级配置"></a>高级配置</h3><p>我们一般获取默认配置的 EventBus 方式是这样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EventBus.getDefault().register(this);</div></pre></td></tr></table></figure>
<p>我们也可以自定义一些自己的配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">EventBus eventBus = EventBus.builder().eventInheritance(true)</div><div class="line">        .executorService(executorService)</div><div class="line">        .ignoreGeneratedIndex(true)</div><div class="line">        .logNoSubscriberMessages(false)</div><div class="line">        .sendNoSubscriberEvent(false)</div><div class="line">        .build();</div></pre></td></tr></table></figure>
<p>可以配置的项很多，这里就不一一介绍了。<br>另外我们还可以在默认配置的基础上添加我们的个性化配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">EventBus eventBus = EventBus.builder()</div><div class="line">        .throwSubscriberException(BuildConfig.DEBUG)</div><div class="line">        .installDefaultEventBus();</div></pre></td></tr></table></figure>
<h3 id="订阅事件优先级和取消事件"><a href="#订阅事件优先级和取消事件" class="headerlink" title="订阅事件优先级和取消事件"></a>订阅事件优先级和取消事件</h3><p>可以使用 Subscribe 的 priority 参数来制定接收相同事件的优先级。<br>数值越大，优先级越高，就越先收到消息。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@Subscribe(priority = 1)</div><div class="line">public void onReceiveEvent(Event event) &#123;</div><div class="line">    Log.e(&quot;Test&quot;,&quot; event = &quot;+event.msg);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>先收到消息的订阅者还可以拦截该消息事件的继续发送。那么低优先级的订阅者就不会收到消息事件了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@Subscribe(priority = 5)</div><div class="line">public void onReceiveEvent(Event event) &#123;</div><div class="line">    Log.e(&quot;Test&quot;,&quot; event = &quot;+event.msg);</div><div class="line">    EventBus.getDefault().cancelEventDelivery(event);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="订阅者索引-Subscriber-Index"><a href="#订阅者索引-Subscriber-Index" class="headerlink" title="订阅者索引 Subscriber Index"></a>订阅者索引 Subscriber Index</h3><p>Subscriber Index是一个可选的优化技术，用来加速初始化订阅者注册。</p>
<h3 id="AsyncExecutor"><a href="#AsyncExecutor" class="headerlink" title="AsyncExecutor"></a>AsyncExecutor</h3><p>AsyncExecutor 就像是一个线程池，它添加了对异常的处理。如果在发送事件过程中出现了异常，AsyncExecutor 会捕获异常并封装在消息事件内，并自动的发布出去。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">AsyncExecutor.create().execute(</div><div class="line">    new AsyncExecutor.RunnableEx() &#123;</div><div class="line">        @Override</div><div class="line">        public void run() throws LoginException &#123;</div><div class="line">            // No need to catch any Exception (here: LoginException)</div><div class="line">            remote.login();</div><div class="line">            EventBus.getDefault().postSticky(new LoggedInEvent());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@Subscribe(threadMode = ThreadMode.MAIN)</div><div class="line">public void handleLoginEvent(LoggedInEvent event) &#123;</div><div class="line">    // do something</div><div class="line">&#125;</div><div class="line"> </div><div class="line">@Subscribe(threadMode = ThreadMode.MAIN)</div><div class="line">public void handleFailureEvent(ThrowableFailureEvent event) &#123;</div><div class="line">    // do something</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过上面的方式，如果相关代码出现了异常，则会将异常封装成 ThrowableFailureEvent，自动发布出去，只要订阅者定义了接收 ThrowableFailureEvent 的方法，就可以拿到异常信息，后续的消息事件也不会再发布，如果没有出现异常，则正常发布事件。</p>
]]></content>
    
    <summary type="html">
    
      介绍EventBus的用法
    
    </summary>
    
      <category term="Android开源项目" scheme="http://yoursite.com/categories/Android%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="EventBus" scheme="http://yoursite.com/tags/EventBus/"/>
    
  </entry>
  
  <entry>
    <title>Android Architecture Components -- Room</title>
    <link href="http://yoursite.com/2017/12/02/android-architecture-components-room/"/>
    <id>http://yoursite.com/2017/12/02/android-architecture-components-room/</id>
    <published>2017-12-02T02:00:00.000Z</published>
    <updated>2018-12-12T11:25:53.857Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><a href="https://developer.android.com/training/data-storage/room/index.html" target="_blank" rel="external">官方文档</a><br>首先来介绍一下 Google 推出的 Android 架构组件（Architecture Components），测试版组件 Google 2017 IO 大会上发布，1.0 稳定版已经于2017年11月07正式推出。为 App 开发构架提供指南，并为常见任务，如生命周期管理、数据持久性等提供了一系列库。有了这些基础组件的帮助，开发者能够使用更少的样板代码写出模块化 App，将精力用于创新而非重复体力劳动。<br>在 Android 中直接使用 SQLite 数据库存在多个缺点，你必须编写大量的模版代码，必须为编写的每个查询实现对象映射，很难实施数据库迁移，还有无法随时保证在后台线程操作数据库。为了解决这些问题，Google 推出了 Room 框架。一个在 SQLite 上提供抽象层的持久存储库。<br>Room 是一个基于 SQLite 实现的 ORM 框架，使用他能帮助程序员方便快捷地实现数据存储功能。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="组件介绍"><a href="#组件介绍" class="headerlink" title="组件介绍"></a>组件介绍</h3><ul>
<li>数据库（Database）：你可以使用该组件创建数据库的持有者。该注解定义了实体列表，该类的内容定义了数据库中的 DAO 列表。这也是访问底层连接的主要入口点。注解类应该是抽象的并且扩展自 <code>RoomDatabase</code>。在运行时，你可以通过调用 <code>Room.databaseBuilder()</code> 或者 <code>Room.inMemoryDatabaseBuilder()</code> 获取实例。</li>
<li>实体（Entity）：这个组件代表了持有数据库表记录的类。对每种实体来说，创建了一个数据库表来持有所有项。你必须通过 Database中 的 <code>entities</code> 数组来引用实体类。实体的每个成员变量都被持久化在数据库中，除非你注解其为 <code>@Ignore</code>。</li>
<li>数据访问对象（DAO）：这个组件代表了作为 DAO 的类或者接口。DAO 是 Room 的主要组件，负责定义访问数据库的方法。被注解 <code>@Database</code> 的类必须包含一个无参数的抽象方法并返回被 <code>@Dao</code> 注解的类型。当编译时生成代码时，Room 会创建该类的实现。</li>
</ul>
<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>在 build.gradle 中添加一下依赖：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">        maven &#123; url &apos;https://maven.google.com&apos; &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    implementation &quot;android.arch.persistence.room:runtime:1.0.0&quot;</div><div class="line">    annotationProcessor &quot;android.arch.persistence.room:compiler:1.0.0&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@Database(entities = &#123;User.class&#125;, version = 1, exportSchema = false)</div><div class="line">public abstract class AppDatabase extends RoomDatabase &#123;</div><div class="line">    public abstract UserDao userDao();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">@Entity(tableName = &quot;user&quot;)</div><div class="line">public class User &#123;</div><div class="line">    @PrimaryKey</div><div class="line">    private int uid;</div><div class="line">    @ColumnInfo(name = &quot;first_name&quot;)</div><div class="line">    private String firstName;</div><div class="line">    @ColumnInfo(name = &quot;last_name&quot;)</div><div class="line">    private String lastName;</div><div class="line">    @Ignore</div><div class="line">    Bitmap picture;//不进行持久化</div><div class="line"></div><div class="line">    public int getUid() &#123;</div><div class="line">        return uid;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setUid(int uid) &#123;</div><div class="line">        this.uid = uid;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getFirstName() &#123;</div><div class="line">        return firstName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setFirstName(String firstName) &#123;</div><div class="line">        this.firstName = firstName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getLastName() &#123;</div><div class="line">        return lastName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setLastName(String lastName) &#123;</div><div class="line">        this.lastName = lastName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Bitmap getPicture() &#123;</div><div class="line">        return picture;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setPicture(Bitmap picture) &#123;</div><div class="line">        this.picture = picture;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当一个类被 <code>@Entity</code> 注解，并被 <code>@Database</code> 注解的 <code>entities</code> 属性引用时，Room 为这个实体在数据库中创建一个表。<br>默认情况，Room 为实体类的每个成员变量创建一个列。如果一个实体类的某个成员变量不想被持久化，你可以使用 <code>Ignore</code> 注解标记。<br>为了持久化成员变量，Room 必须可以访问它。你可以使成员变量是公共的，或者提供 <code>getter和setter</code> 方法。如果你使用 <code>getter/setter</code> 方法，请记住它们在 Room 中遵循 Java Beans 的概念。<br>默认情况下，Room 使用类名作为数据库表的表名。如果你想要数据库表有一个其他的名字，设置 <code>@Entity</code> 注解的 <code>tableName</code> 属性即可。<br>注意：SQLite中的表名是大小写敏感的。<br>和 <code>tablename</code> 属性相似，Room 使用成员名作为列名，如果你想要改变类名，在成员上添加 <code>@ColumnInfo</code> 注解并设置 <code>name</code> 即可。</p>
<h3 id="数据访问对象"><a href="#数据访问对象" class="headerlink" title="数据访问对象"></a>数据访问对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">@Dao</div><div class="line">public interface UserDao &#123;</div><div class="line">    @Query(&quot;SELECT * FROM user&quot;)</div><div class="line">    List&lt;User&gt; getAll();</div><div class="line"></div><div class="line">    @Query(&quot;SELECT * FROM user WHERE uid IN (:userIds)&quot;)</div><div class="line">    List&lt;User&gt; loadAllByIds(int[] userIds);</div><div class="line"></div><div class="line">    @Query(&quot;SELECT * FROM user WHERE first_name LIKE :first AND &quot;</div><div class="line">            + &quot;last_name LIKE :last LIMIT 1&quot;)</div><div class="line">    User findByName(String first, String last);</div><div class="line"></div><div class="line">    @Insert</div><div class="line">    void insertAll(User... users);</div><div class="line"></div><div class="line">    @Delete</div><div class="line">    void delete(User ... user);</div><div class="line"></div><div class="line">    @Update</div><div class="line">    void update(User... user);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public DBManager(Context context) &#123;</div><div class="line">    mDatabase = Room.databaseBuilder(context.getApplicationContext(),</div><div class="line">            AppDatabase.class, &quot;users&quot;).build();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译过程中如果出现下面的警告：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Error:(11, 17) 警告: Schema export directory is not provided to the annotation processor so we cannot export the schema. You can either provide `room.schemaLocation` annotation processor argument OR set exportSchema to false.</div></pre></td></tr></table></figure>
<p>解决办法：<br>在 <code>AppDatabase</code> 中添加 <code>exportSchema = false</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@Database(entities = &#123;User.class&#125;, version = 1, exportSchema = false)</div><div class="line">public abstract class AppDatabase extends RoomDatabase &#123;</div><div class="line">    public abstract UserDao userDao();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="数据库升级"><a href="#数据库升级" class="headerlink" title="数据库升级"></a>数据库升级</h3><p>比如我们想在数据库中新加一个字段：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class User &#123;</div><div class="line">    ...</div><div class="line">    @ColumnInfo(name = &quot;is_male&quot;)</div><div class="line">    private boolean isMale;</div><div class="line"></div><div class="line">    private String address;</div><div class="line">    ...</div><div class="line"></div><div class="line">    public boolean isMale() &#123;</div><div class="line">        return isMale;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setMale(boolean male) &#123;</div><div class="line">        isMale = male;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getAddress() &#123;</div><div class="line">        return address;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setAddress(String address) &#123;</div><div class="line">        this.address = address;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Room允许你编写 <code>Migration</code> 类来保护用户数据。每个 <code>Migration</code> 类指定一个 startVersion 和 endVersion。在运行时，Room 运行每个 <code>Migration</code> 类的 <code>migrate()</code> 方法，使用正确的顺序迁移至数据库的更新版本。<br>然后在创建数据库的时候使用 <code>addMigrations()</code> 方法：<br><code>AppDatabase</code> 中的 <code>version</code> 必须增加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@Database(entities = &#123;User.class&#125;, version = 3, exportSchema = false)</div><div class="line">public abstract class AppDatabase extends RoomDatabase &#123;</div><div class="line">    public abstract UserDao userDao();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>否则会报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">E AndroidRuntime: java.lang.IllegalStateException: Room cannot verify the data integrity. Looks like you&apos;ve changed schema but forgot to update the version number. You can simply fix this by increasing the version number.</div><div class="line">E AndroidRuntime: 	at android.arch.persistence.room.RoomOpenHelper.checkIdentity(RoomOpenHelper.java:119)</div><div class="line">E AndroidRuntime: 	at android.arch.persistence.room.RoomOpenHelper.onOpen(RoomOpenHelper.java:100)</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public DBManager(Context context) &#123;</div><div class="line">    mDatabase = Room.databaseBuilder(context.getApplicationContext(),</div><div class="line">            AppDatabase.class, &quot;users&quot;).addMigrations(MIGRATION_1_2,  MIGRATION_2_3).build();</div><div class="line">&#125;</div><div class="line"></div><div class="line">static final Migration MIGRATION_1_2 = new Migration(1, 2) &#123;</div><div class="line">    @Override</div><div class="line">    public void migrate(SupportSQLiteDatabase database) &#123;</div><div class="line">        database.execSQL(&quot;ALTER TABLE user ADD is_male INTEGER NOT NULL DEFAULT 0&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">static final Migration MIGRATION_2_3 = new Migration(2, 3) &#123;</div><div class="line">    @Override</div><div class="line">    public void migrate(SupportSQLiteDatabase database) &#123;</div><div class="line">        database.execSQL(&quot;ALTER TABLE user ADD address TEXT&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这里添加 <code>boolean</code> 型的字段，SQL 语句必须设置为 <code>NOT NULL</code>，而且要设置默认值，否则会报错。</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.jianshu.com/p/587f48dccf0a" target="_blank" rel="external">http://www.jianshu.com/p/587f48dccf0a</a><br><a href="https://developer.android.com/topic/libraries/architecture/room.html" target="_blank" rel="external">https://developer.android.com/topic/libraries/architecture/room.html</a></p>
]]></content>
    
    <summary type="html">
    
      本文介绍 Android 数据库架构组件 Room 的基本使用
    
    </summary>
    
      <category term="Android 架构" scheme="http://yoursite.com/categories/Android-%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Architecture Components" scheme="http://yoursite.com/tags/Architecture-Components/"/>
    
      <category term="Room" scheme="http://yoursite.com/tags/Room/"/>
    
  </entry>
  
  <entry>
    <title>Retrofit 2 源码分析二 -- RxJava2</title>
    <link href="http://yoursite.com/2017/11/10/open-source-retrofit-source-code-analysis-rxjava/"/>
    <id>http://yoursite.com/2017/11/10/open-source-retrofit-source-code-analysis-rxjava/</id>
    <published>2017-11-10T02:00:00.000Z</published>
    <updated>2018-05-06T07:22:25.867Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>RxJava的优势这里不再赘述，可以参考我前面 RxJava 系列的博客。Retrofit 2 良好的扩展性使它非常方便的添加了 RxJava 的支持。</p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>参考我的博客<a href="http://www.heqiangfly.com/2017/10/22/open-source-retrofit-guide/" target="_blank" rel="external">Retrofit 2 使用指南 </a>。<br>和上一篇博客中用内置的适配器不同的是：<br>方法声明：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public interface RequestService &#123;</div><div class="line">    ...</div><div class="line">    // 支持RxJava</div><div class="line">    @GET(&quot;heqiang/urls&quot;)</div><div class="line">    Observable&lt;RequestManager.TestBean&gt; getDataRx();</div><div class="line">    ...</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>初始化请求：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Retrofit retrofit = new Retrofit.Builder()</div><div class="line">        .client(client)</div><div class="line">        .baseUrl(&quot;http://172.17.137.69/&quot;)</div><div class="line">        .addConverterFactory(GsonConverterFactory.create())</div><div class="line">        //加入对RxJava2的支持</div><div class="line">        .addCallAdapterFactory(RxJava2CallAdapterFactory.create())</div><div class="line">        .build();</div><div class="line">mMyService = retrofit.create(RequestService.class);</div></pre></td></tr></table></figure>
<p>方法执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">public void getDataRx(final CallBack&lt;TestBean&gt; callBack)&#123;</div><div class="line">    mMyService.getDataRx().subscribeOn(Schedulers.io())</div><div class="line">            .observeOn(AndroidSchedulers.mainThread())</div><div class="line">            .subscribe(new Observer&lt;TestBean&gt;() &#123;</div><div class="line">                @Override</div><div class="line">                public void onError(Throwable e) &#123;</div><div class="line">                    Log.e(&quot;Test&quot;,&quot;onError&quot;);</div><div class="line">                    callBack.onFail(new Exception(e));</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                @Override</div><div class="line">                public void onComplete() &#123;</div><div class="line"></div><div class="line">                &#125;</div><div class="line"></div><div class="line">                @Override</div><div class="line">                public void onSubscribe(Disposable d) &#123;</div><div class="line"></div><div class="line">                &#125;</div><div class="line"></div><div class="line">                @Override</div><div class="line">                public void onNext(TestBean testBean) &#123;</div><div class="line">                    Log.e(&quot;Test&quot;,&quot;onNext = &quot;+testBean.toString());</div><div class="line">                    callBack.onSuccess(testBean);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><p>Rxjava 相关代码结构：</p>
<p><img src="/images/open-source-retrofit-source-code-analysis-rxjava/rxjava-classes.png" alt="效果图"></p>
<p>可以看到代码量不是很多。<br><code>RxJava2CallAdapterFactory</code> 和 <code>RxJava2CallAdapter</code> 两个类分别对应上篇博客分析使用内置适配器时的 <code>ExecutorCallAdapterFactory</code> 和 <code>ExecutorCallAdapterFactory.CallAdapter</code> 类，是适配器工厂和适配器类。</p>
<h3 id="RxJava2CallAdapterFactory"><a href="#RxJava2CallAdapterFactory" class="headerlink" title="RxJava2CallAdapterFactory"></a>RxJava2CallAdapterFactory</h3><p>先来看一下适配器工厂类。<br>上面的Demo中通过 <code>Retrofit.Builder()</code> 的 <code>addCallAdapterFactory(RxJava2CallAdapterFactory.create())</code> 方法指定了适配器工厂。<br><code>RxJava2CallAdapterFactory</code> 提供了三个静态的方法生成适配器工厂，它们分别可以生成同步的 <code>Observable</code>、异步的 <code>Observable</code> 以及可以制定线程调度器同步 <code>Observable</code>。<br>不理解没关系，下面会详细介绍他们的区别。<br>先来看一下这三个方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// 生成同步的 Observable 的适配器工厂</div><div class="line">public static RxJava2CallAdapterFactory create() &#123;</div><div class="line">  return new RxJava2CallAdapterFactory(null, false);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 生成异步的 Observable 的适配器工厂</div><div class="line">public static RxJava2CallAdapterFactory createAsync() &#123;</div><div class="line">  return new RxJava2CallAdapterFactory(null, true);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 生成同步的 Observable 并制定线程调度器的适配器工厂</div><div class="line">@SuppressWarnings(&quot;ConstantConditions&quot;) // Guarding public API nullability.</div><div class="line">public static RxJava2CallAdapterFactory createWithScheduler(Scheduler scheduler) &#123;</div><div class="line">  if (scheduler == null) throw new NullPointerException(&quot;scheduler == null&quot;);</div><div class="line">  return new RxJava2CallAdapterFactory(scheduler, false);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因此在动态代理类的 <code>serviceMethod.callAdapter.adapt(okHttpCall)</code> 其实执行的是 <code>RxJava2CallAdapterFactory.get()</code> 方法生成的 <code>RxJava2CallAdapter</code> 对象的 <code>adapt()</code> 方法。<br>我们先来看一下 <code>RxJava2CallAdapterFactory.get()</code> 方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public CallAdapter&lt;?, ?&gt; get(Type returnType, Annotation[] annotations, Retrofit retrofit) &#123;</div><div class="line">  // 这里的 returnType 指的是请求方法定义的类型，比如 Observable&lt;RequestManager.TestBean&gt;</div><div class="line">  // 获取返回数据类型，比如Call&lt;Requestbody&gt;的Call，Observable&lt;RequestManager.TestBean&gt; 中的 Observable</div><div class="line">  Class&lt;?&gt; rawType = getRawType(returnType);</div><div class="line"></div><div class="line">  if (rawType == Completable.class) &#123;</div><div class="line">    // 当定义的返回值是Completable类时，对于Completable我们前面也介绍过，它的特点是用户只关心 onComplete 事件</div><div class="line">    return new RxJava2CallAdapter(Void.class, scheduler, isAsync, false, true, false, false,</div><div class="line">        false, true);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  boolean isFlowable = rawType == Flowable.class;</div><div class="line">  boolean isSingle = rawType == Single.class;</div><div class="line">  boolean isMaybe = rawType == Maybe.class;</div><div class="line">  if (rawType != Observable.class &amp;&amp; !isFlowable &amp;&amp; !isSingle &amp;&amp; !isMaybe) &#123;</div><div class="line">    return null;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  boolean isResult = false;</div><div class="line">  boolean isBody = false;</div><div class="line">  Type responseType;</div><div class="line">  if (!(returnType instanceof ParameterizedType)) &#123;</div><div class="line">    ......</div><div class="line">  &#125;</div><div class="line">  // 获取响应数据类型，即泛型的参数 如 Call&lt;Requestbody&gt; 中 Requestbody</div><div class="line">  Type observableType = getParameterUpperBound(0, (ParameterizedType) returnType);</div><div class="line">  // 再次获取数据类型，observableType 是 Observable&lt;RequestManager.TestBean&gt; 中的 TestBean，这里还是返回 TestBean</div><div class="line">  Class&lt;?&gt; rawObservableType = getRawType(observableType);</div><div class="line">  if (rawObservableType == Response.class) &#123;</div><div class="line">    if (!(observableType instanceof ParameterizedType)) &#123;</div><div class="line">      throw new IllegalStateException(&quot;Response must be parameterized&quot;</div><div class="line">          + &quot; as Response&lt;Foo&gt; or Response&lt;? extends Foo&gt;&quot;);</div><div class="line">    &#125;</div><div class="line">    responseType = getParameterUpperBound(0, (ParameterizedType) observableType);</div><div class="line">  &#125; else if (rawObservableType == Result.class) &#123;</div><div class="line">    if (!(observableType instanceof ParameterizedType)) &#123;</div><div class="line">      throw new IllegalStateException(&quot;Result must be parameterized&quot;</div><div class="line">          + &quot; as Result&lt;Foo&gt; or Result&lt;? extends Foo&gt;&quot;);</div><div class="line">    &#125;</div><div class="line">    responseType = getParameterUpperBound(0, (ParameterizedType) observableType);</div><div class="line">    isResult = true;</div><div class="line">  &#125; else &#123;</div><div class="line">    responseType = observableType;</div><div class="line">    isBody = true;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  return new RxJava2CallAdapter(responseType, scheduler, isAsync, isResult, isBody, isFlowable,</div><div class="line">      isSingle, isMaybe, false);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个方法就是生成来一个 <code>RxJava2CallAdapter</code> 对象。</p>
<h3 id="RxJava2CallAdapter"><a href="#RxJava2CallAdapter" class="headerlink" title="RxJava2CallAdapter"></a>RxJava2CallAdapter</h3><p>先来看一下构造函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">RxJava2CallAdapter(Type responseType, @Nullable Scheduler scheduler, boolean isAsync,</div><div class="line">    boolean isResult, boolean isBody, boolean isFlowable, boolean isSingle, boolean isMaybe,</div><div class="line">    boolean isCompletable) &#123;</div><div class="line">  this.responseType = responseType;</div><div class="line">  this.scheduler = scheduler;</div><div class="line">  this.isAsync = isAsync;</div><div class="line">  this.isResult = isResult;</div><div class="line">  this.isBody = isBody;</div><div class="line">  this.isFlowable = isFlowable;</div><div class="line">  this.isSingle = isSingle;</div><div class="line">  this.isMaybe = isMaybe;</div><div class="line">  this.isCompletable = isCompletable;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里是一些条件的配置。<br>对于这个类重点关注它的 <code>adapt()</code> 方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">@Override public Object adapt(Call&lt;R&gt; call) &#123;</div><div class="line">  // 这里根据同步或者异步生成不同的 Observable，后面介绍</div><div class="line">  Observable&lt;Response&lt;R&gt;&gt; responseObservable = isAsync</div><div class="line">      ? new CallEnqueueObservable&lt;&gt;(call)</div><div class="line">      : new CallExecuteObservable&lt;&gt;(call);</div><div class="line"></div><div class="line">  // 生成不同的 Observable</div><div class="line">  Observable&lt;?&gt; observable;</div><div class="line">  if (isResult) &#123;</div><div class="line">    observable = new ResultObservable&lt;&gt;(responseObservable);</div><div class="line">  &#125; else if (isBody) &#123;</div><div class="line">    observable = new BodyObservable&lt;&gt;(responseObservable);</div><div class="line">  &#125; else &#123;</div><div class="line">    observable = responseObservable;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  if (scheduler != null) &#123;</div><div class="line">    observable = observable.subscribeOn(scheduler);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  if (isFlowable) &#123;</div><div class="line">    return observable.toFlowable(BackpressureStrategy.LATEST);</div><div class="line">  &#125;</div><div class="line">  if (isSingle) &#123;</div><div class="line">    return observable.singleOrError();</div><div class="line">  &#125;</div><div class="line">  if (isMaybe) &#123;</div><div class="line">    return observable.singleElement();</div><div class="line">  &#125;</div><div class="line">  if (isCompletable) &#123;</div><div class="line">    return observable.ignoreElements();</div><div class="line">  &#125;</div><div class="line">  return RxJavaPlugins.onAssembly(observable);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="CallEnqueueObservable-和-CallExecuteObservable"><a href="#CallEnqueueObservable-和-CallExecuteObservable" class="headerlink" title="CallEnqueueObservable 和 CallExecuteObservable"></a>CallEnqueueObservable 和 CallExecuteObservable</h3><p>从名字就可以看出来，这两个类分别处理异步和同步的Observable。<br>这里主要看一下这两个类的 <code>subscribeActual()</code> 方法。</p>
<p>CallEnqueueObservable.subscribeActual()</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@Override protected void subscribeActual(Observer&lt;? super Response&lt;T&gt;&gt; observer) &#123;</div><div class="line">  // Since Call is a one-shot type, clone it for each new observer.</div><div class="line">  Call&lt;T&gt; call = originalCall.clone();</div><div class="line">  CallCallback&lt;T&gt; callback = new CallCallback&lt;&gt;(call, observer);</div><div class="line">  observer.onSubscribe(callback);</div><div class="line">  call.enqueue(callback);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>CallExecuteObservable.subscribeActual()</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">@Override protected void subscribeActual(Observer&lt;? super Response&lt;T&gt;&gt; observer) &#123;</div><div class="line">  // Since Call is a one-shot type, clone it for each new observer.</div><div class="line">  Call&lt;T&gt; call = originalCall.clone();</div><div class="line">  CallDisposable disposable = new CallDisposable(call);</div><div class="line">  observer.onSubscribe(disposable);</div><div class="line"></div><div class="line">  boolean terminated = false;</div><div class="line">  try &#123;</div><div class="line">    Response&lt;T&gt; response = call.execute();</div><div class="line">    if (!disposable.isDisposed()) &#123;</div><div class="line">      observer.onNext(response);</div><div class="line">    &#125;</div><div class="line">    if (!disposable.isDisposed()) &#123;</div><div class="line">      terminated = true;</div><div class="line">      observer.onComplete();</div><div class="line">    &#125;</div><div class="line">  &#125; catch (Throwable t) &#123;</div><div class="line">    Exceptions.throwIfFatal(t);</div><div class="line">    if (terminated) &#123;</div><div class="line">      RxJavaPlugins.onError(t);</div><div class="line">    &#125; else if (!disposable.isDisposed()) &#123;</div><div class="line">      try &#123;</div><div class="line">        observer.onError(t);</div><div class="line">      &#125; catch (Throwable inner) &#123;</div><div class="line">        Exceptions.throwIfFatal(inner);</div><div class="line">        RxJavaPlugins.onError(new CompositeException(t, inner));</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实这里主要做了下面几件事：</p>
<ol>
<li>clone了原有的call，因为OkHttp.Call只能使用一次</li>
<li>设置了 CallDisposable，可用于解除订阅</li>
<li>调用 Call 的 execute() 或者 enqueue() 方法。</li>
<li>同步方法可能会调用onNext和onComplete，异步方法设置回调函数，在回调函数中调用这些方法。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      Retrofit 2 中 RxJava2 相关部分源码
    
    </summary>
    
      <category term="Android开源项目" scheme="http://yoursite.com/categories/Android%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Android开源项目" scheme="http://yoursite.com/tags/Android%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="Retrofit" scheme="http://yoursite.com/tags/Retrofit/"/>
    
  </entry>
  
  <entry>
    <title>Retrofit 2 源码分析一 -- 数据请求流程解析</title>
    <link href="http://yoursite.com/2017/11/08/open-source-retrofit-source-code-analysis-request/"/>
    <id>http://yoursite.com/2017/11/08/open-source-retrofit-source-code-analysis-request/</id>
    <published>2017-11-08T02:00:00.000Z</published>
    <updated>2018-05-29T02:28:24.836Z</updated>
    
    <content type="html"><![CDATA[<p>分析之前可以参考一下我的前面的博客<a href="http://www.heqiangfly.com/2017/10/22/open-source-retrofit-guide/" target="_blank" rel="external">Retrofit 2 使用指南 </a>，熟悉一下它的基本使用。</p>
<p>本文用到的一些类图</p>
<p><img src="http://www.plantuml.com/plantuml/svg/bP51IWD144NtTOeYgsGHJp18H1HtGiW5ofu_qgJj6RkhHL5FuYbS2zv6l8PT4jlPPZUy-V_NWzvabQJbBj3EQm0ljj0q3bw_tp--tZuNH3ugqY0EV2uXy3CnRv6dCMPqkrF68rnHB5ULFuo-PyJxWeAbfM_4xIta3jyhUYKN96U-tb-fJfOvW8lVdJ4PEkjbgaSlnLNmT3B_PIlDWtdmKKBhjZj_O9Qnagdq2BWLHJKXOzozhDTpdGQFLIBwN-7k-3xJ1h6lJ_43" alt="效果图"></p>
<h1 id="初始化请求流程"><a href="#初始化请求流程" class="headerlink" title="初始化请求流程"></a>初始化请求流程</h1><p>先来看一下如何创建一个请求。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public interface RequestService &#123;</div><div class="line">    @GET(&quot;hq/urls&quot;)</div><div class="line">    Call&lt;RequestManager.TestBean&gt; getData();</div><div class="line">&#125;</div><div class="line">    ......</div><div class="line">    </div><div class="line">        Retrofit retrofit = new Retrofit.Builder()</div><div class="line">                .client(client)</div><div class="line">                .baseUrl(&quot;http://172.17.137.68/&quot;)</div><div class="line">                .addConverterFactory(GsonConverterFactory.create())</div><div class="line">                //加入对RxJava2的支持</div><div class="line">                //.addCallAdapterFactory(RxJava2CallAdapterFactory.create())</div><div class="line">                .build();</div><div class="line">        mRequestService = retrofit.create(RequestService.class);</div></pre></td></tr></table></figure>
<p>异步请求</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public void getData(CallBack callBack)&#123;</div><div class="line">    Call&lt;TestBean&gt; call = mMyService.getData();</div><div class="line">    call.enqueue(new Callback&lt;TestBean&gt;() &#123;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onResponse(Call&lt;TestBean&gt; call, Response&lt;TestBean&gt; response) &#123;</div><div class="line">            Log.e(&quot;Test&quot;,&quot;onResponse = &quot;+response.body().toString());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onFailure(Call&lt;TestBean&gt; call, Throwable t) &#123;</div><div class="line">            Log.e(&quot;Test&quot;,&quot;onFailure = &quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>同步请求</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public TestBean getDataSync()&#123;</div><div class="line">    Call&lt;TestBean&gt; call = mRequestService.getData();</div><div class="line">    Response&lt;TestBean&gt; data = null;</div><div class="line">    try &#123;</div><div class="line">        data = call.execute();</div><div class="line">    &#125; catch (IOException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return data != null ? data.body() : null;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先这里是创建一个 <code>Retrofit</code> 对象，这里用到了建造者模式。<br>那么就先来看一下 <code>Builder().build()</code> 的源码。<br>先来看一下 <code>platform</code> 这个变量，因为后面会用到它。通过 <code>Builder</code> 的构造函数，可以看到它是通过 <code>Platform.get()</code> 来实例化的，在 Android 平台上是一个 <code>Platform.Android</code> 对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">public Retrofit build() &#123;</div><div class="line">  //  `baseUrl` 是必须设置的。</div><div class="line">  if (baseUrl == null) &#123;</div><div class="line">    throw new IllegalStateException(&quot;Base URL required.&quot;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  // callFactory 是 client() 方法设置的，如果不设置，会生成个默认的 OkHttpClient()。</div><div class="line">  okhttp3.Call.Factory callFactory = this.callFactory;</div><div class="line">  if (callFactory == null) &#123;</div><div class="line">    callFactory = new OkHttpClient();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  // callbackExecutor 是callbackExecutor()方法设置的，如果不设置，会添加平台默认的回调执行器</div><div class="line">  Executor callbackExecutor = this.callbackExecutor;</div><div class="line">  if (callbackExecutor == null) &#123;</div><div class="line">    // 这里会返回一个 Android.MainThreadExecutor 对象</div><div class="line">    callbackExecutor = platform.defaultCallbackExecutor();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  List&lt;CallAdapter.Factory&gt; adapterFactories = new ArrayList&lt;&gt;(this.adapterFactories);</div><div class="line">  // 这里会把 ExecutorCallAdapterFactory 添加到 adapterFactories 中。这个是 Retrofit 内置的适配器。</div><div class="line">  // callbackExecutor 为请求结果返回后调用客户端回调的执行器</div><div class="line">  adapterFactories.add(platform.defaultCallAdapterFactory(callbackExecutor));</div><div class="line"></div><div class="line">  // Make a defensive copy of the converters.</div><div class="line">  List&lt;Converter.Factory&gt; converterFactories =</div><div class="line">      new ArrayList&lt;&gt;(1 + this.converterFactories.size());</div><div class="line"></div><div class="line">  // 添加内置转换器</div><div class="line">  converterFactories.add(new BuiltInConverters());</div><div class="line">  converterFactories.addAll(this.converterFactories);</div><div class="line"></div><div class="line">  return new Retrofit(callFactory, baseUrl, converterFactories, adapterFactories,</div><div class="line">      callbackExecutor, validateEagerly);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再来看一下 <code>Retrofit.create</code>。<br>这部分是重点，因为请求方法的执行其实就是执行到了这里动态代理对象的 <code>invoke()</code> 方法。后面会分开来介绍。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">public &lt;T&gt; T create(final Class&lt;T&gt; service) &#123;</div><div class="line">  // InvocationHandler只能支持interface动态代理，这里检查一下service是否是interface</div><div class="line">  Utils.validateServiceInterface(service);</div><div class="line">  // validateEagerly默认为false，除非通过validateEagerly()方法配置</div><div class="line">  if (validateEagerly) &#123;</div><div class="line">    //这里会提前创建 ServiceMethod</div><div class="line">    eagerlyValidateMethods(service);</div><div class="line">  &#125;</div><div class="line">  // 返回一个动态代理对象，这里是重点</div><div class="line">  return (T) Proxy.newProxyInstance(service.getClassLoader(), new Class&lt;?&gt;[] &#123; service &#125;,</div><div class="line">      new InvocationHandler() &#123;</div><div class="line">        private final Platform platform = Platform.get();</div><div class="line"></div><div class="line">        @Override public Object invoke(Object proxy, Method method, @Nullable Object[] args)</div><div class="line">            throws Throwable &#123;</div><div class="line">          // 如果是Object的方法直接执行</div><div class="line">          if (method.getDeclaringClass() == Object.class) &#123;</div><div class="line">            return method.invoke(this, args);</div><div class="line">          &#125;</div><div class="line">          // Android平台这里返回false，如果是平台默认方法，直接执行</div><div class="line">          if (platform.isDefaultMethod(method)) &#123;</div><div class="line">            return platform.invokeDefaultMethod(method, service, proxy, args);</div><div class="line">          &#125;</div><div class="line">          // 创建 ServiceMethod</div><div class="line">          ServiceMethod&lt;Object, Object&gt; serviceMethod =</div><div class="line">              (ServiceMethod&lt;Object, Object&gt;) loadServiceMethod(method);</div><div class="line">          // 生成一个 Call 对象，OkHttpCall实现了 Call 接口</div><div class="line">          OkHttpCall&lt;Object&gt; okHttpCall = new OkHttpCall&lt;&gt;(serviceMethod, args);</div><div class="line">          // 调用适配器的adapter生成一个 范型 对象（请求方法定义的返回类型）。</div><div class="line">          return serviceMethod.callAdapter.adapt(okHttpCall);</div><div class="line">        &#125;</div><div class="line">      &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="执行请求流程"><a href="#执行请求流程" class="headerlink" title="执行请求流程"></a>执行请求流程</h1><p>比如我们Demo中的一个请求方法的执行 <code>mRequestService.getData()</code>，其实执行的方法体就是前面的动态代理对象的 <code>invoke()</code> 方法，返回一个 <code>RequestService</code> 接口中此方法定义的一个范型对象。<br>先来看一下如何生成 <code>ServiceMethod</code>：<br><code>ServiceMethod</code> 和我们前面定义的请求方法是一一对应关系的，每个 Method 对应一个 <code>ServiceMethod</code>。比如就像例子中我们调用 <code>RequestService.getData()</code> 方法就会生成一个对应的 <code>ServiceMethod</code> 对象，保存了 baseUrl、请求参数、请求类型等信息。<br>如果缓存里没有，则新建一个并放入到缓存中。至于这个 <code>ServiceMethod</code> 是我们后面再详细分析。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">ServiceMethod&lt;?, ?&gt; loadServiceMethod(Method method) &#123;</div><div class="line">  ServiceMethod&lt;?, ?&gt; result = serviceMethodCache.get(method);</div><div class="line">  if (result != null) return result;</div><div class="line"></div><div class="line">  synchronized (serviceMethodCache) &#123;</div><div class="line">    result = serviceMethodCache.get(method);</div><div class="line">    if (result == null) &#123;</div><div class="line">      result = new ServiceMethod.Builder&lt;&gt;(this, method).build();</div><div class="line">      serviceMethodCache.put(method, result);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接着会根据 <code>ServiceMethod</code> 对象和参数生成一个 <code>OkHttpCall</code> 对象，然后再根据适配器的 adapter 方法把 <code>OkHttpCall</code> 转化为 <code>ExecutorCallbackCall</code> （使用内置适配器时）。<br>这部分接下来也会详细介绍。</p>
<h2 id="ServiceMethod"><a href="#ServiceMethod" class="headerlink" title="ServiceMethod"></a>ServiceMethod</h2><p><code>ServiceMethod</code> 方法也比较简单，一些属性包含了一个Http请求的基本信息。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">final class ServiceMethod&lt;R, T&gt; &#123;</div><div class="line">  // Upper and lower characters, digits, underscores, and hyphens, starting with a character.</div><div class="line">  static final String PARAM = &quot;[a-zA-Z][a-zA-Z0-9_-]*&quot;;</div><div class="line">  static final Pattern PARAM_URL_REGEX = Pattern.compile(&quot;\\&#123;(&quot; + PARAM + &quot;)\\&#125;&quot;);</div><div class="line">  static final Pattern PARAM_NAME_REGEX = Pattern.compile(PARAM);</div><div class="line"></div><div class="line">  final okhttp3.Call.Factory callFactory;</div><div class="line">  final CallAdapter&lt;R, T&gt; callAdapter;</div><div class="line"></div><div class="line">  private final HttpUrl baseUrl;</div><div class="line">  private final Converter&lt;ResponseBody, R&gt; responseConverter;</div><div class="line">  private final String httpMethod;</div><div class="line">  private final String relativeUrl;</div><div class="line">  private final Headers headers;</div><div class="line">  private final MediaType contentType;</div><div class="line">  private final boolean hasBody;</div><div class="line">  private final boolean isFormEncoded;</div><div class="line">  private final boolean isMultipart;</div><div class="line">  private final ParameterHandler&lt;?&gt;[] parameterHandlers;</div><div class="line"></div><div class="line">  ServiceMethod(Builder&lt;R, T&gt; builder) &#123;</div><div class="line">    ......</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  Request toRequest(@Nullable Object... args) throws IOException &#123;</div><div class="line">    ......</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  R toResponse(ResponseBody body) throws IOException &#123;</div><div class="line">    ......</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们重点来看一下 <code>ServiceMethod.Builder()</code> 类。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Builder(Retrofit retrofit, Method method) &#123;</div><div class="line">  this.retrofit = retrofit;</div><div class="line">  this.method = method;</div><div class="line">  this.methodAnnotations = method.getAnnotations();</div><div class="line">  this.parameterTypes = method.getGenericParameterTypes();</div><div class="line">  this.parameterAnnotationsArray = method.getParameterAnnotations();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它的构造函数会传入 <code>Retrofit</code> 和 <code>Method</code> 对象作为参数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">public ServiceMethod build() &#123;</div><div class="line">  // 获取该方法对应的适配器</div><div class="line">  callAdapter = createCallAdapter();</div><div class="line">  responseType = callAdapter.responseType();</div><div class="line">  ......</div><div class="line">  // 获取该方法对应的转换器</div><div class="line">  responseConverter = createResponseConverter();</div><div class="line"></div><div class="line">  // 解析方法注解，根据方法注解调用不同的方法生成请求参数</div><div class="line">  for (Annotation annotation : methodAnnotations) &#123;</div><div class="line">    parseMethodAnnotation(annotation);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  ......</div><div class="line"></div><div class="line">  int parameterCount = parameterAnnotationsArray.length;</div><div class="line">  parameterHandlers = new ParameterHandler&lt;?&gt;[parameterCount];</div><div class="line">  for (int p = 0; p &lt; parameterCount; p++) &#123;</div><div class="line">    Type parameterType = parameterTypes[p];</div><div class="line">    if (Utils.hasUnresolvableType(parameterType)) &#123;</div><div class="line">      ......</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Annotation[] parameterAnnotations = parameterAnnotationsArray[p];</div><div class="line">    ......</div><div class="line">    // 解析参数</div><div class="line">    parameterHandlers[p] = parseParameter(p, parameterType, parameterAnnotations);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  ......</div><div class="line"></div><div class="line">  return new ServiceMethod&lt;&gt;(this);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>先来看一下 <code>build</code> 方法的调用流程（使用内置适配器时）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">├── ServiceMethod.Builder().build()</div><div class="line">    ├── ServiceMethod.Builder().createCallAdapter()</div><div class="line">        ├── Retrofit.callAdapter()</div><div class="line">            ├── Retrofit.nextCallAdapter()</div><div class="line">                ├── ExecutorCallAdapterFactory.get()</div><div class="line">                    └──  new CallAdapter()</div><div class="line">    ├── ServiceMethod.Builder().createResponseConverter()</div><div class="line">    ├── ServiceMethod.Builder().parseMethodAnnotation()</div><div class="line">    └── new ServiceMethod&lt;&gt;(this)</div></pre></td></tr></table></figure>
<h3 id="获取适配器"><a href="#获取适配器" class="headerlink" title="获取适配器"></a>获取适配器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public CallAdapter&lt;?, ?&gt; nextCallAdapter(@Nullable CallAdapter.Factory skipPast, Type returnType,</div><div class="line">    Annotation[] annotations) &#123;</div><div class="line">  ......</div><div class="line"></div><div class="line">  int start = adapterFactories.indexOf(skipPast) + 1;</div><div class="line">  for (int i = start, count = adapterFactories.size(); i &lt; count; i++) &#123;</div><div class="line">    // 获取可以处理当前请求的适配器</div><div class="line">    CallAdapter&lt;?, ?&gt; adapter = adapterFactories.get(i).get(returnType, annotations, this);</div><div class="line">    if (adapter != null) &#123;</div><div class="line">      return adapter;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  ......</div><div class="line">  throw new IllegalArgumentException(builder.toString());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里会遍历我们添加的所有适配器，并调用适配器的 <code>get()</code> 方法，这个方法会根据当前请求方法的返回值类型来决定是否处理。<br>这里以内置的适配器来介绍一下：<br>ExecutorCallAdapterFactory.get():</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public CallAdapter&lt;?, ?&gt; get(Type returnType, Annotation[] annotations, Retrofit retrofit) &#123;</div><div class="line">  // 这个适配器工厂只处理返回值为 Call 的请求方法</div><div class="line">  if (getRawType(returnType) != Call.class) &#123;</div><div class="line">    return null;</div><div class="line">  &#125;</div><div class="line">  final Type responseType = Utils.getCallResponseType(returnType);</div><div class="line">  // 生成一个 CallAdapter</div><div class="line">  return new CallAdapter&lt;Object, Call&lt;?&gt;&gt;() &#123;</div><div class="line">    @Override public Type responseType() &#123;</div><div class="line">      return responseType;</div><div class="line">    &#125;</div><div class="line">    // 后面在动态代理类里面调用serviceMethod.callAdapter.adapt(okHttpCall)时会生成一个ExecutorCallbackCall对象</div><div class="line">    @Override public Call&lt;Object&gt; adapt(Call&lt;Object&gt; call) &#123;</div><div class="line">      return new ExecutorCallbackCall&lt;&gt;(callbackExecutor, call);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="获取转换器"><a href="#获取转换器" class="headerlink" title="获取转换器"></a>获取转换器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">├── ServiceMethod.createResponseConverter()</div><div class="line">    └── Retrofit.responseBodyConverter(Type type, Annotation[] annotations)</div><div class="line">        └── Retrofit.nextResponseBodyConverter()</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public &lt;T&gt; Converter&lt;ResponseBody, T&gt; nextResponseBodyConverter(</div><div class="line">    @Nullable Converter.Factory skipPast, Type type, Annotation[] annotations) &#123;</div><div class="line">  ......</div><div class="line">  int start = converterFactories.indexOf(skipPast) + 1;</div><div class="line">  // 这里遍历所有的转换器，比如我们前面添加了 GsonConverterFactory，那么就有两个转换器，还有个默认的内置转换器 BuiltInConverters</div><div class="line">  // 我们看源码知道BuiltInConverters只处理 ResponseBody 和 Void两种返回结果，Demo中我们自定义RequestManager.TestBean返回结果，肯定是指定 GsonConverterFactory来作为转换器</div><div class="line">  for (int i = start, count = converterFactories.size(); i &lt; count; i++) &#123;</div><div class="line">    Converter&lt;ResponseBody, ?&gt; converter =</div><div class="line">        converterFactories.get(i).responseBodyConverter(type, annotations, this);</div><div class="line">    if (converter != null) &#123;</div><div class="line">      return (Converter&lt;ResponseBody, T&gt;) converter;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  ......</div><div class="line">  throw new IllegalArgumentException(builder.toString());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="处理方法注解"><a href="#处理方法注解" class="headerlink" title="处理方法注解"></a>处理方法注解</h3><p>这一部分主要是根据方法注解的类型解析生成 <code>ServiceMethod</code> 的一些属性，比如：<code>httpMethod</code>、<code>hasBody</code> 和 <code>relativeUrl</code> 等。<br><code>ServiceMethod.Builder.parseMethodAnnotation()</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">private void parseMethodAnnotation(Annotation annotation) &#123;</div><div class="line">  if (annotation instanceof DELETE) &#123;</div><div class="line">    parseHttpMethodAndPath(&quot;DELETE&quot;, ((DELETE) annotation).value(), false);</div><div class="line">  &#125; else if (annotation instanceof GET) &#123;</div><div class="line">    parseHttpMethodAndPath(&quot;GET&quot;, ((GET) annotation).value(), false);</div><div class="line">  &#125; else if (annotation instanceof HEAD) &#123;</div><div class="line">    parseHttpMethodAndPath(&quot;HEAD&quot;, ((HEAD) annotation).value(), false);</div><div class="line">    if (!Void.class.equals(responseType)) &#123;</div><div class="line">      throw methodError(&quot;HEAD method must use Void as response type.&quot;);</div><div class="line">    &#125;</div><div class="line">  &#125; else if (annotation instanceof PATCH) &#123;</div><div class="line">    ......//省略，具体代码可以看源码</div><div class="line">  &#125; else if (annotation instanceof FormUrlEncoded) &#123;</div><div class="line">    if (isMultipart) &#123;</div><div class="line">      throw methodError(&quot;Only one encoding annotation is allowed.&quot;);</div><div class="line">    &#125;</div><div class="line">    isFormEncoded = true;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">private void parseHttpMethodAndPath(String httpMethod, String value, boolean hasBody) &#123;</div><div class="line">  if (this.httpMethod != null) &#123;</div><div class="line">    throw methodError(&quot;Only one HTTP method is allowed. Found: %s and %s.&quot;,</div><div class="line">        this.httpMethod, httpMethod);</div><div class="line">  &#125;</div><div class="line">  this.httpMethod = httpMethod;</div><div class="line">  this.hasBody = hasBody;</div><div class="line"></div><div class="line">  ......//省略，具体代码可以看源码</div><div class="line"></div><div class="line">  this.relativeUrl = value;</div><div class="line">  this.relativeUrlParamNames = parsePathParameters(value);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="OkHttpCall"><a href="#OkHttpCall" class="headerlink" title="OkHttpCall"></a>OkHttpCall</h2><p>这部分主要针对动态代理类中 <code>OkHttpCall&lt;Object&gt; okHttpCall = new OkHttpCall&lt;&gt;(serviceMethod, args)</code> 这段方法的执行。<br>前面我们说过，适配器处理对网络请求（内置适配器是生成的 Call 对象）都是委托给 OkHttpCall 来处理的。<br>先来看一下这个类：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line">final class OkHttpCall&lt;T&gt; implements Call&lt;T&gt; &#123;</div><div class="line">  private final ServiceMethod&lt;T, ?&gt; serviceMethod;</div><div class="line">  private final @Nullable Object[] args;</div><div class="line"></div><div class="line">  private volatile boolean canceled;</div><div class="line"></div><div class="line">  @GuardedBy(&quot;this&quot;)</div><div class="line">  private @Nullable okhttp3.Call rawCall;</div><div class="line">  @GuardedBy(&quot;this&quot;)</div><div class="line">  private @Nullable Throwable creationFailure; // Either a RuntimeException or IOException.</div><div class="line">  @GuardedBy(&quot;this&quot;)</div><div class="line">  private boolean executed;</div><div class="line"></div><div class="line">  OkHttpCall(ServiceMethod&lt;T, ?&gt; serviceMethod, @Nullable Object[] args) &#123;</div><div class="line">    this.serviceMethod = serviceMethod;</div><div class="line">    this.args = args;</div><div class="line">  &#125;</div><div class="line">  @Override public void enqueue(final Callback&lt;T&gt; callback) &#123;</div><div class="line">    checkNotNull(callback, &quot;callback == null&quot;);</div><div class="line"></div><div class="line">    okhttp3.Call call;</div><div class="line">    Throwable failure;</div><div class="line"></div><div class="line">    synchronized (this) &#123;</div><div class="line">      if (executed) throw new IllegalStateException(&quot;Already executed.&quot;);</div><div class="line">      executed = true;</div><div class="line"></div><div class="line">      call = rawCall;</div><div class="line">      failure = creationFailure;</div><div class="line">      if (call == null &amp;&amp; failure == null) &#123;</div><div class="line">        try &#123;</div><div class="line">          call = rawCall = createRawCall();</div><div class="line">        &#125; catch (Throwable t) &#123;</div><div class="line">          failure = creationFailure = t;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if (failure != null) &#123;</div><div class="line">      callback.onFailure(this, failure);</div><div class="line">      return;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if (canceled) &#123;</div><div class="line">      call.cancel();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    call.enqueue(new okhttp3.Callback() &#123;</div><div class="line">      @Override public void onResponse(okhttp3.Call call, okhttp3.Response rawResponse)</div><div class="line">          throws IOException &#123;</div><div class="line">        Response&lt;T&gt; response;</div><div class="line">        try &#123;</div><div class="line">          response = parseResponse(rawResponse);</div><div class="line">        &#125; catch (Throwable e) &#123;</div><div class="line">          callFailure(e);</div><div class="line">          return;</div><div class="line">        &#125;</div><div class="line">        callSuccess(response);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      @Override public void onFailure(okhttp3.Call call, IOException e) &#123;</div><div class="line">        callFailure(e);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      private void callFailure(Throwable e) &#123;</div><div class="line">        try &#123;</div><div class="line">          callback.onFailure(OkHttpCall.this, e);</div><div class="line">        &#125; catch (Throwable t) &#123;</div><div class="line">          t.printStackTrace();</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      private void callSuccess(Response&lt;T&gt; response) &#123;</div><div class="line">        try &#123;</div><div class="line">          callback.onResponse(OkHttpCall.this, response);</div><div class="line">        &#125; catch (Throwable t) &#123;</div><div class="line">          t.printStackTrace();</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @Override public Response&lt;T&gt; execute() throws IOException &#123;</div><div class="line">    okhttp3.Call call;</div><div class="line"></div><div class="line">    synchronized (this) &#123;</div><div class="line">      if (executed) throw new IllegalStateException(&quot;Already executed.&quot;);</div><div class="line">      executed = true;</div><div class="line"></div><div class="line">      if (creationFailure != null) &#123;</div><div class="line">        if (creationFailure instanceof IOException) &#123;</div><div class="line">          throw (IOException) creationFailure;</div><div class="line">        &#125; else &#123;</div><div class="line">          throw (RuntimeException) creationFailure;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      call = rawCall;</div><div class="line">      if (call == null) &#123;</div><div class="line">        try &#123;</div><div class="line">          call = rawCall = createRawCall();</div><div class="line">        &#125; catch (IOException | RuntimeException e) &#123;</div><div class="line">          creationFailure = e;</div><div class="line">          throw e;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if (canceled) &#123;</div><div class="line">      call.cancel();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return parseResponse(call.execute());</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>execute()</code> 对应的就是同步请求方法。<br>主要来分析一下 <code>enqueue()</code> 方法，这个方法对应的就是异步请求方法。请求加入队列的方法最终也是由 <code>okhttp3.Call</code> 来执行的。那么就要来看一下 <code>okhttp3.Call</code> 是如何生成的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">private okhttp3.Call createRawCall() throws IOException &#123;</div><div class="line">  // 调用 ServiceMethod.toRequest() 方法生成请求</div><div class="line">  Request request = serviceMethod.toRequest(args);</div><div class="line">  // 生成 okhttp3.Call</div><div class="line">  okhttp3.Call call = serviceMethod.callFactory.newCall(request);</div><div class="line">  if (call == null) &#123;</div><div class="line">    throw new NullPointerException(&quot;Call.Factory returned null.&quot;);</div><div class="line">  &#125;</div><div class="line">  return call;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>serviceMethod.callFactory.newCall(request)</code> 会调用 <code>Retrofit.callFactory</code> 来生成请求，<code>Retrofit.callFactory</code> 是通过 <code>Retrofit.client(OkHttpClient client)</code> 方法来设置的。<br>因此， <code>okhttp3.Call</code> 是最终由 <code>OkHttpClient</code> 来创建的，那么请求的执行也是由 <code>OkHttpClient</code> 来执行的。 </p>
<h2 id="CallAdapter-和-CallAdapter-Factory"><a href="#CallAdapter-和-CallAdapter-Factory" class="headerlink" title="CallAdapter 和 CallAdapter.Factory"></a>CallAdapter 和 CallAdapter.Factory</h2><p><code>CallAdapter</code>是一个接口，前文所说的适配器都是实现了这个接口。<code>ExecutorCallAdapterFactory</code> 的匿名内部类和 <code>RxJava2CallAdapter</code>。<br>这里再来介绍一下 <code>CallAdapter.Factory</code> 类。它是 <code>CallAdapter</code> 的工厂类，是一个抽象类，<code>ExecutorCallAdapterFactory</code> 和 <code>RxJava2CallAdapterFactory</code> 都是继承这个类。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">public interface CallAdapter&lt;R, T&gt; &#123;</div><div class="line">  // 从http的响应数据转换成java类时用到的数据的类型 如Call&lt;T&gt; 中的 T</div><div class="line">  // 这个 T 会作为Converter.Factory.responseBodyConverter 的第一个参数</div><div class="line">  Type responseType();</div><div class="line"></div><div class="line">  // 这个方法就是动态代理类中执行的方法，委托Call生成一个T对象	</div><div class="line">  T adapt(Call&lt;R&gt; call);</div><div class="line"></div><div class="line">  // 用于向Retrofit提供CallAdapter的工厂类</div><div class="line">  abstract class Factory &#123;</div><div class="line">    // 在这个方法中判断是否是我们支持的类型，returnType 即Call&lt;Requestbody&gt;和Observable&lt;Requestbody&gt;</div><div class="line">    // RxJavaCallAdapterFactory 就是判断returnType是不是Observable&lt;?&gt; 类型</div><div class="line">    // 不支持时返回null</div><div class="line">    public abstract @Nullable CallAdapter&lt;?, ?&gt; get(Type returnType, Annotation[] annotations,</div><div class="line">        Retrofit retrofit);</div><div class="line"></div><div class="line">    // 用于根据index获取泛型的参数 如 Call&lt;Requestbody&gt; 中 index为0时的Requestbody，</div><div class="line">    // index为 1 时 Map&lt;String, ? extends Runnable&gt; 的 Runnable</div><div class="line">    protected static Type getParameterUpperBound(int index, ParameterizedType type) &#123;</div><div class="line">      return Utils.getParameterUpperBound(index, type);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 用于获取泛型的原始类型 如 Call&lt;Requestbody&gt; 中的 Call</div><div class="line">    // 上面的get方法需要使用该方法。</div><div class="line">    protected static Class&lt;?&gt; getRawType(Type type) &#123;</div><div class="line">      return Utils.getRawType(type);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="适配器处理请求流程"><a href="#适配器处理请求流程" class="headerlink" title="适配器处理请求流程"></a>适配器处理请求流程</h2><p>适配器处理请求是在动态代理类的 <code>serviceMethod.callAdapter.adapt(okHttpCall)</code> 方法处理。我们前面已经介绍过，使用使用内置适配器时，会由 <code>ExecutorCallAdapterFactory.get()</code> 方法生成的 <code>CallAdapter</code> 对象的 <code>adapt()</code> 方法执行。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@Override public Call&lt;Object&gt; adapt(Call&lt;Object&gt; call) &#123;</div><div class="line">  return new ExecutorCallbackCall&lt;&gt;(callbackExecutor, call);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个方法返回了 <code>ExecutorCallAdapterFactor.ExecutorCallbackCall</code> 对象，以 <code>Android.MainThreadExecutor</code> 和 <code>OkHttpCall</code> 来作为参数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ExecutorCallbackCall(Executor callbackExecutor, Call&lt;T&gt; delegate) &#123;</div><div class="line">  this.callbackExecutor = callbackExecutor;</div><div class="line">  this.delegate = delegate;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在创建请求流程一节中我们展示的Demo中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Call&lt;TestBean&gt; call = mRequestService.getData();</div><div class="line">call.enqueue(new Callback&lt;TestBean&gt;() &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onResponse(Call&lt;TestBean&gt; call, Response&lt;TestBean&gt; response) &#123;</div><div class="line">        Log.e(&quot;Test&quot;,&quot;onResponse = &quot;+response.body().toString());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onFailure(Call&lt;TestBean&gt; call, Throwable t) &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><code>mRequestService.getData()</code> 返回的其实就是 <code>ExecutorCallAdapterFactor.ExecutorCallbackCall</code> 对象，后面的 <code>call.enqueue</code> 方式其实就是调用的 <code>ExecutorCallAdapterFactor.ExecutorCallbackCall.enqueue()</code> 方法。<br>返回相应结果时，需要调用客户端设置的回调方法，这个回调方法是在客户端设置的回调执行器中调用的，如果没有设置，那么默认就是 <code>Android.MainThreadExecutor</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">@Override public void enqueue(final Callback&lt;T&gt; callback) &#123;</div><div class="line">  checkNotNull(callback, &quot;callback == null&quot;);</div><div class="line"></div><div class="line">  delegate.enqueue(new Callback&lt;T&gt;() &#123;</div><div class="line">    @Override public void onResponse(Call&lt;T&gt; call, final Response&lt;T&gt; response) &#123;</div><div class="line">      // 结果的执行由客户端设置的回调执行器来执行。</div><div class="line">      callbackExecutor.execute(new Runnable() &#123;</div><div class="line">        @Override public void run() &#123;</div><div class="line">          if (delegate.isCanceled()) &#123;</div><div class="line">            // Emulate OkHttp&apos;s behavior of throwing/delivering an IOException on cancellation.</div><div class="line">            callback.onFailure(ExecutorCallbackCall.this, new IOException(&quot;Canceled&quot;));</div><div class="line">          &#125; else &#123;</div><div class="line">            callback.onResponse(ExecutorCallbackCall.this, response);</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override public void onFailure(Call&lt;T&gt; call, final Throwable t) &#123;</div><div class="line">      callbackExecutor.execute(new Runnable() &#123;</div><div class="line">        @Override public void run() &#123;</div><div class="line">          callback.onFailure(ExecutorCallbackCall.this, t);</div><div class="line">        &#125;</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里我们可以看到，<code>ExecutorCallbackCall</code> （使用内置适配器时）中相关的请求操作其实都是委托给 <code>OkHttpCall</code> 来执行的。执行的结果通过 <code>Android.MainThreadExecutor</code> 在主线程中执行回调函数。<br>具体的执行流程请看上面一节。</p>
<h2 id="处理响应结果"><a href="#处理响应结果" class="headerlink" title="处理响应结果"></a>处理响应结果</h2><p>这部分比较简单，主要是调用转换器的 <code>convert()</code> 方法把消息体转换成我们想要的数据类。<code>Response&lt;T&gt;</code> 这里用到了范型，是在定义请求方法时我们指定的类，比如 <code>RequestManager.TestBean</code>。<br>这里以我们前面Demo中定义的 <code>GsonConverterFactory</code> 转换器来看一下执行流程：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">├── OkHttpCall.parseResponse()</div><div class="line">    └── ServiceMethod.toResponse()</div><div class="line">        └── GsonResponseBodyConverter.convert()</div></pre></td></tr></table></figure>
<p><code>OkHttpCall.parseResponse()</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">Response&lt;T&gt; parseResponse(okhttp3.Response rawResponse) throws IOException &#123;</div><div class="line">  ResponseBody rawBody = rawResponse.body();</div><div class="line"></div><div class="line">  rawResponse = rawResponse.newBuilder()</div><div class="line">      .body(new NoContentResponseBody(rawBody.contentType(), rawBody.contentLength()))</div><div class="line">      .build();</div><div class="line"></div><div class="line">  int code = rawResponse.code();</div><div class="line">  if (code &lt; 200 || code &gt;= 300) &#123;</div><div class="line">    try &#123;</div><div class="line">      // Buffer the entire body to avoid future I/O.</div><div class="line">      ResponseBody bufferedBody = Utils.buffer(rawBody);</div><div class="line">      return Response.error(bufferedBody, rawResponse);</div><div class="line">    &#125; finally &#123;</div><div class="line">      rawBody.close();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  if (code == 204 || code == 205) &#123;</div><div class="line">    rawBody.close();</div><div class="line">    return Response.success(null, rawResponse);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  ExceptionCatchingRequestBody catchingBody = new ExceptionCatchingRequestBody(rawBody);</div><div class="line">  try &#123;</div><div class="line">    T body = serviceMethod.toResponse(catchingBody);</div><div class="line">    return Response.success(body, rawResponse);</div><div class="line">  &#125; catch (RuntimeException e) &#123;</div><div class="line">    catchingBody.throwIfCaught();</div><div class="line">    throw e;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此，Retrofit 数据请求流程部分源码解析已经完成。</p>
]]></content>
    
    <summary type="html">
    
      Retrofit 2 数据请求流程的简单介绍
    
    </summary>
    
      <category term="Android开源项目" scheme="http://yoursite.com/categories/Android%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Android开源项目" scheme="http://yoursite.com/tags/Android%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="Retrofit" scheme="http://yoursite.com/tags/Retrofit/"/>
    
  </entry>
  
  <entry>
    <title>Retrofit 2 源码分析 -- 启动篇</title>
    <link href="http://yoursite.com/2017/11/06/open-source-retrofit-source-code-analysis-start/"/>
    <id>http://yoursite.com/2017/11/06/open-source-retrofit-source-code-analysis-start/</id>
    <published>2017-11-06T02:00:00.000Z</published>
    <updated>2018-05-06T07:22:25.867Z</updated>
    
    <content type="html"><![CDATA[<p>使用过 Retrofit 的同学都知道用 Retrofit 进行网络请求是非常便利的，学会了使用之后，我们一般都按捺不住要去研究源码去一查究竟了。通过研究源代码，才能更好地理解并掌握它的使用。<br>Retrofit 其实就是对 OKHttp 做了一层封装，使用了一些精妙的设计模式，使用面向接口的方式进行网络请求。</p>
<h2 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h2><p><a href="https://github.com/square/retrofit" target="_blank" rel="external">GitHub 源码地址</a><br><a href="http://square.github.io/retrofit/" target="_blank" rel="external">官方文档地址</a></p>
<h2 id="导入源码"><a href="#导入源码" class="headerlink" title="导入源码"></a>导入源码</h2><p><code>Retrofit</code> 是 Maven 项目，对于经常使用 Android Studio 的我们还是希望在 AS 中看代码的，这样就需要将 Maven 项目转化成 AS 项目：<br>其实很简单，只需要在 Maven 根目录下运行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle init --type pom</div></pre></td></tr></table></figure>
<p>然后用 Android Studio 打开根目录即可倒入源码。</p>
<p>参考<a href="http://www.cnblogs.com/softidea/p/5631341.html" target="_blank" rel="external">链接</a></p>
<h2 id="源码结构"><a href="#源码结构" class="headerlink" title="源码结构"></a>源码结构</h2><p><img src="/images/open-source-retrofit-source-code-analysis-start/retrofit-source-code-structure.png" alt="效果图"></p>
<p>adapter-<em> 和 converter-</em> 这几个模块是官方提供的适配器和转化器，Retrofit 的主要代码在 retrofit 模块中。</p>
<p><img src="/images/open-source-retrofit-source-code-analysis-start/retrofit-source-code-classes.png" alt="效果图"></p>
<p>可以看到 Retrofit 的源码其实比较简单的，后面我进一步进行分析。</p>
<!-- 
https://www.jianshu.com/p/52f3ca09e2ed
https://www.jianshu.com/p/7148b70f923f
https://www.jianshu.com/p/c40267f8e9b8
-->
]]></content>
    
    <summary type="html">
    
      Retrofit 2 源码的简单介绍
    
    </summary>
    
      <category term="Android开源项目" scheme="http://yoursite.com/categories/Android%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Android开源项目" scheme="http://yoursite.com/tags/Android%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="Retrofit" scheme="http://yoursite.com/tags/Retrofit/"/>
    
  </entry>
  
  <entry>
    <title>Retrofit 2 使用指南</title>
    <link href="http://yoursite.com/2017/10/22/open-source-retrofit-guide/"/>
    <id>http://yoursite.com/2017/10/22/open-source-retrofit-guide/</id>
    <published>2017-10-22T02:00:00.000Z</published>
    <updated>2018-04-28T15:12:51.266Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Retrofit 是 Squareup 公司开源的网络请求框架，它其实是对 OkHttp 的一层封装，使用面向接口的方式进行网络请求，利用动态生成的代理类封装了网络接口请求的底层，并且提供了对 RxJava 的支持。<br>写这篇文章的时候，Retrofit 已经发布 2.3.0 了，本文就以此版本来介绍。<br><a href="https://github.com/square/retrofit" target="_blank" rel="external">GitHub 地址</a></p>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>添加依赖：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">compile &apos;com.squareup.retrofit2:retrofit:2.3.0&apos;</div><div class="line">compile &apos;com.squareup.retrofit2:converter-gson:2.3.0&apos;</div><div class="line">compile &apos;com.squareup.retrofit2:adapter-rxjava2:2.3.0&apos;</div></pre></td></tr></table></figure>
<p>注意 <code>compile &#39;com.squareup.retrofit2:adapter-rxjava2:2.3.0&#39;</code> 是添加了对RxJava2的支持，一定要注意RxJava的版本对应问题，否则会报错：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">Caused by: java.lang.IllegalArgumentException: Unable to create call adapter for io.reactivex.Observable&lt;com.example.heqiang.testsomething.testretrofit.RequestManager$TestBean&gt;</div><div class="line">   for method RequestService.getDataRx</div><div class="line">   at retrofit2.ServiceMethod$Builder.methodError(ServiceMethod.java:752)</div><div class="line">   at retrofit2.ServiceMethod$Builder.createCallAdapter(ServiceMethod.java:237)</div><div class="line">   at retrofit2.ServiceMethod$Builder.build(ServiceMethod.java:162)</div><div class="line">   at retrofit2.Retrofit.loadServiceMethod(Retrofit.java:170)</div><div class="line">   at retrofit2.Retrofit$1.invoke(Retrofit.java:147)</div><div class="line">   at java.lang.reflect.Proxy.invoke(Proxy.java:393)</div><div class="line">   at $Proxy0.getDataRx(Unknown Source)</div><div class="line">   at com.example.heqiang.testsomething.testretrofit.RequestManager.getDataRx(RequestManager.java:68)</div><div class="line">   at com.example.heqiang.testsomething.rxjava.RxJavaActivity.testRetrofitRx(RxJavaActivity.java:105)</div><div class="line">   	... 11 more</div><div class="line">Caused by: java.lang.IllegalArgumentException: Could not locate call adapter for io.reactivex.Observable&lt;com.example.heqiang.testsomething.testretrofit.RequestManager$TestBean&gt;.</div><div class="line"> Tried:</div><div class="line">  * retrofit2.adapter.rxjava.RxJavaCallAdapterFactory</div><div class="line">  * retrofit2.ExecutorCallAdapterFactory</div><div class="line">   at retrofit2.Retrofit.nextCallAdapter(Retrofit.java:241)</div><div class="line">   at retrofit2.Retrofit.callAdapter(Retrofit.java:205)</div><div class="line">   at retrofit2.ServiceMethod$Builder.createCallAdapter(ServiceMethod.java:235)</div></pre></td></tr></table></figure>
<p>先上代码：</p>
<p>CallBack.java</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public interface CallBack&lt;T&gt; &#123;</div><div class="line">    void onSuccess(T t);</div><div class="line">    void onFail(Exception e);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>RequestService.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RequestService</span> </span>&#123;</div><div class="line">    <span class="meta">@GET</span>(<span class="string">"hq/urls"</span>)</div><div class="line">    Call&lt;RequestManager.TestBean&gt; getData();</div><div class="line">    <span class="comment">// 支持RxJava</span></div><div class="line">    <span class="meta">@GET</span>(<span class="string">"hq/urls"</span>)</div><div class="line">    Observable&lt;RequestManager.TestBean&gt; getDataRx();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>RequestManager.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestManager</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> RequestService mRequestService;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> RequestManager sInstance;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">RequestManager</span><span class="params">(Context context)</span></span>&#123;</div><div class="line"></div><div class="line">        Cache cache = <span class="keyword">new</span> Cache(<span class="keyword">new</span> File(context.getExternalCacheDir(),<span class="string">"test"</span>),<span class="number">100</span>*<span class="number">1024</span>*<span class="number">1024</span>);</div><div class="line">        Log.e(<span class="string">"Test"</span>, <span class="string">"cache dir = "</span> + context.getExternalCacheDir());</div><div class="line">        OkHttpClient client = <span class="keyword">new</span> OkHttpClient.Builder()</div><div class="line">                .retryOnConnectionFailure(<span class="keyword">true</span>)</div><div class="line">                .connectTimeout(<span class="number">20</span>, TimeUnit.SECONDS)</div><div class="line">                .cache(cache)</div><div class="line">                .build();</div><div class="line"></div><div class="line">        Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">                <span class="comment">//这里如果不指定client，那么会生成一个默认的OkHttpClient</span></div><div class="line">                .client(client)</div><div class="line">                .baseUrl(<span class="string">"http://*.*.*.*/"</span>)</div><div class="line">                .addConverterFactory(GsonConverterFactory.create())</div><div class="line">                <span class="comment">//加入对RxJava2的支持</span></div><div class="line">                <span class="comment">//.addCallAdapterFactory(RxJava2CallAdapterFactory.create())</span></div><div class="line">                .build();</div><div class="line">        mRequestService = retrofit.create(RequestService.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RequestManager <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(sInstance == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">synchronized</span> (RequestManager.class)&#123;</div><div class="line">                <span class="keyword">if</span>(sInstance == <span class="keyword">null</span>)&#123;</div><div class="line">                    sInstance = <span class="keyword">new</span> RequestManager();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sInstance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getData</span><span class="params">()</span></span>&#123;</div><div class="line">        Call&lt;TestBean&gt; call = mRequestService.getData();</div><div class="line">        call.enqueue(<span class="keyword">new</span> Callback&lt;TestBean&gt;() &#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call&lt;TestBean&gt; call, Response&lt;TestBean&gt; response)</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"Test"</span>,<span class="string">"onResponse = "</span>+response.body().toString());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call&lt;TestBean&gt; call, Throwable t)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBean</span></span>&#123;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">int</span>  code;</div><div class="line">        <span class="keyword">public</span> String message;</div><div class="line">        <span class="keyword">public</span> String redirect;</div><div class="line">        <span class="keyword">public</span> ArrayList&lt;String&gt; value;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"code = "</span>+code+<span class="string">", message = "</span>+message+<span class="string">",redirect = "</span>+ redirect+<span class="string">", value="</span>+value.toString();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="结合RxJava和RxAndroid"><a href="#结合RxJava和RxAndroid" class="headerlink" title="结合RxJava和RxAndroid"></a>结合RxJava和RxAndroid</h2><p>在上面的代码中去掉 <code>addCallAdapterFactory(RxJava2CallAdapterFactory.create())</code> 的注释，再加上定义的 <code>Observable&lt;RequestManager.TestBean&gt; getDataRx()</code> 方法，就添加了对 RxJava2 的支持。<br>如果需要使用 RxAndroid 还要在build.gradle中添加依赖：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile &apos;io.reactivex.rxjava2:rxandroid:2.0.1&apos;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getDataRx</span><span class="params">(<span class="keyword">final</span> CallBack&lt;TestBean&gt; callBack)</span></span>&#123;</div><div class="line">    mRequestService.getDataRx().subscribeOn(Schedulers.io())</div><div class="line">            <span class="comment">// 依赖RxAndroid</span></div><div class="line">            .observeOn(AndroidSchedulers.mainThread())</div><div class="line">            .subscribe(<span class="keyword">new</span> Observer&lt;TestBean&gt;() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">                    Log.e(<span class="string">"Test"</span>,<span class="string">"onError"</span>);</div><div class="line">                    callBack.onFail(<span class="keyword">new</span> Exception(e));</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(@NonNull Disposable d)</span> </span>&#123;</div><div class="line"></div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(TestBean testBean)</span> </span>&#123;</div><div class="line">                    Log.e(<span class="string">"Test"</span>,<span class="string">"onNext = "</span>+testBean.toString());</div><div class="line">                    callBack.onSuccess(testBean);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div></pre></td></tr></table></figure>
<h2 id="CallAdapter"><a href="#CallAdapter" class="headerlink" title="CallAdapter"></a>CallAdapter</h2><p><code>CallAdapter</code> 其实就是对 <code>Call</code> 的转换，上面的对 RxJava 支持时用到的 <code>RxJava2CallAdapterFactory</code> 其实就是 <code>CallAdapter.Factory</code> 的子类，当然我们也可以自定义实现一个 <code>CallAdapter</code>。</p>
<h2 id="Converter"><a href="#Converter" class="headerlink" title="Converter"></a>Converter</h2><p>在默认情况下 Retrofit 只支持将 HTTP 的响应体转换换为 <code>ResponseBody</code>，那么接口的返回值都是 <code>Call&lt;ResponseBody&gt;</code>，如果我们需要把 <code>ResponseBody</code> 转换成我们需要的类型就需要 <code>Converter</code>。<br><code>Converter</code> 就是对数据的转换，代码中 <code>addConverterFactory(GsonConverterFactory.create())</code> 就是指定了 Gson 将 <code>ResponseBody</code>转换我们想要的类型。<br>显然我们也可以自定义一个 <code>Converter</code>。</p>
<h2 id="注解的使用"><a href="#注解的使用" class="headerlink" title="注解的使用"></a>注解的使用</h2><h3 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h3><ul>
<li>GET</li>
<li>POST</li>
<li>PUT</li>
<li>DELETE</li>
<li>PATCH</li>
<li>HEAD</li>
<li>OPTIONS</li>
<li>HTTP</li>
</ul>
<p>前面 6 种都是HTTP协议请求方式，使用方法和前面例子中的类似，都接受一个字符串来和 BaseUrl 组成请求Url。<br>HTTP 方式是对上面 6 中的扩展，用法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@HTTP</span>(method = <span class="string">"GET"</span>, path = <span class="string">"blog"</span>, hasBody = <span class="keyword">false</span>)</div><div class="line"><span class="function">Call&lt;ResponseBody&gt; <span class="title">getBlog</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<h3 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h3><ul>
<li>Path</li>
<li>Query</li>
<li>QueryMap</li>
</ul>
<p>上面三种都是一个完整Url的组成部分，Path 用在 Url 的 path 部分，Query 和 QueryMap 用在参数部分，也就是Url中的 ? 后面的部分。QueryMap 相当于多个 Query。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"day/&#123;year&#125;/&#123;month&#125;/&#123;day&#125;"</span>)</div><div class="line"><span class="function">Observable&lt;DailyDataResponse&gt; <span class="title">getDailyData</span><span class="params">(</span></span></div><div class="line">        @Path(<span class="string">"year"</span>) <span class="keyword">int</span> year,@<span class="title">Path</span><span class="params">(<span class="string">"month"</span>)</span> <span class="keyword">int</span> month,@<span class="title">Path</span><span class="params">(<span class="string">"day"</span>)</span> <span class="keyword">int</span> day);</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"day"</span>)</div><div class="line"><span class="function">Call&lt;Response&gt; <span class="title">getDailyData</span><span class="params">(</span></span></div><div class="line">        @Query(<span class="string">"year"</span>) <span class="keyword">int</span> year,@<span class="title">Query</span><span class="params">(<span class="string">"month"</span>)</span> <span class="keyword">int</span> month,@<span class="title">Query</span><span class="params">(<span class="string">"day"</span>)</span> <span class="keyword">int</span> day);</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"day"</span>)</div><div class="line"><span class="function">Call&lt;Response&gt; <span class="title">getDailyData</span><span class="params">(</span></span></div><div class="line">        @QueryMap Map&lt;String, Integer&gt; map);</div></pre></td></tr></table></figure>
<ul>
<li>Field ：POST请求，提交单个数据</li>
<li>FieldMap：POST请求，和@Filed作用一致，用于不确定表单参数</li>
<li>Body：POST请求，以对象的形式提交，多用于post请求发送非表单数据,比如想要以post方式传递json格式数据</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FormUrlEncoded</span></div><div class="line"><span class="meta">@POST</span>(<span class="string">"add2gank"</span>)</div><div class="line"><span class="function">Observable&lt;AddToGankResponse&gt; <span class="title">add2Gank</span><span class="params">(@Field(<span class="string">"url"</span>)</span> String url, @<span class="title">Field</span><span class="params">(<span class="string">"desc"</span>)</span> String desc, @<span class="title">Field</span><span class="params">(<span class="string">"who"</span>)</span> String who,</span></div><div class="line">                            @<span class="title">Field</span><span class="params">(<span class="string">"type"</span>)</span> String type,@<span class="title">Field</span><span class="params">(<span class="string">"debug"</span>)</span> <span class="keyword">boolean</span> debug);</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@POST</span>(<span class="string">"add2gank"</span>)</div><div class="line"><span class="function">Call&lt;Response&gt; <span class="title">add2Gank</span><span class="params">(@Body ExtrasBean bean)</span></span>;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FormUrlEncoded</span></div><div class="line"><span class="meta">@POST</span>(<span class="string">"add2gank"</span>)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add2Gank</span><span class="params">(@FieldMap Map&lt;String, String&gt; map)</span></span></div></pre></td></tr></table></figure>
<p>可以看到这里多了一个 <code>@FormUrlEncoded</code> 注解，如果去掉 <code>@FromUrlEncoded</code> 在 post 请求中使用 <code>@Field</code> 和 <code>@FieldMap</code>，那么程序会抛出 <code>java.lang.IllegalArgumentException: @Field parameters can only be used with form encoding. (parameter #1)</code> 的错误异常。<br>如果将 <code>@FromUrlEncoded</code> 添加在 <code>@GET</code> 上面呢，同样的也会抛出 <code>java.lang.IllegalArgumentException:FormUrlEncoded can only be specified on HTTP methods with request body (e.g., @POST)</code> 的错误异常。<br>如果是使用 <code>@Body</code>，也是不用加 <code>@FormUrlEncoded</code> 注解的。</p>
<h3 id="动态Url"><a href="#动态Url" class="headerlink" title="动态Url"></a>动态Url</h3><p>前面的使用都是基于BaseUrl的，如果我们想请求不同Url时只能重新生成一个 Retrofit 实例，实际上我们还可以通过 <code>@Url</code> 来操作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span></div><div class="line"><span class="function"><span class="keyword">public</span> Call&lt;ResponseBody&gt; <span class="title">getImage</span><span class="params">(@Url String url)</span></span>;</div></pre></td></tr></table></figure>
<p>如果参数指定的 url 是一个以 <code>http</code> 开头的 url，那么就完全使用这个url，和前面指定的 BaseUrl 完全没有联系，如果 url 指定的只有类似 <code>/id/name</code> 的path，而没有指定 scheme 和 host，那么它就会用 BaseUrl 的 scheme 和 host。<br><strong> <font color="#ff0000">这里注意</font> </strong>：只是用 BaseUrl 的 scheme 和 host，如果 BaseUrl 是 <a href="http://www.test.com/v/" target="_blank" rel="external">http://www.test.com/v/</a> ，那么还是会把 path 中的 v  去掉，组成 <a href="http://www.test.com/id/name" target="_blank" rel="external">http://www.test.com/id/name</a> 。</p>
<!--  
http://www.jianshu.com/p/308f3c54abdd
-->
]]></content>
    
    <summary type="html">
    
      介绍 Retrofit 2 的一些基本用法
    
    </summary>
    
      <category term="Android开源项目" scheme="http://yoursite.com/categories/Android%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Android开源项目" scheme="http://yoursite.com/tags/Android%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="Retrofit" scheme="http://yoursite.com/tags/Retrofit/"/>
    
  </entry>
  
  <entry>
    <title>RxJava 使用指南 -- Single、Completable 和 Maybe 的用法</title>
    <link href="http://yoursite.com/2017/10/18/open-source-rxjava-single-completable-maybe/"/>
    <id>http://yoursite.com/2017/10/18/open-source-rxjava-single-completable-maybe/</id>
    <published>2017-10-18T02:00:00.000Z</published>
    <updated>2018-06-02T09:24:04.976Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>前面在 <a href="http://www.heqiangfly.com/2017/10/10/open-source-rxjava-guide-base/" target="_blank" rel="external">RxJava 使用指南（一）– 基本概念、数据流创建和线程调度 </a> 一文中简单介绍了几种观察者模式组合的组合。</p>
<ul>
<li>Observable/Observer</li>
<li>Flowable/Subscriber</li>
<li>Single/SingleObserver</li>
<li>Completable/CompletableObserver</li>
<li>Maybe/MaybeObserver</li>
</ul>
<p>其中 <code>Observable/Observer</code> 和 <code>Flowable/Subscriber</code> 比较常用，前面也用了大量篇幅来介绍，本文就来介绍一下 <code>Single/SingleObserver</code>、<code>Completable/CompletableObserver</code> 和 <code>Maybe/MaybeObserver</code> 这三个组合的用法。</p>
<h2 id="Single-SingleObserver-的用法"><a href="#Single-SingleObserver-的用法" class="headerlink" title="Single/SingleObserver 的用法"></a>Single/SingleObserver 的用法</h2><p>先来看一下代码中如何实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">Single.create(new SingleOnSubscribe&lt;String&gt;() &#123;</div><div class="line">    @Override</div><div class="line">    public void subscribe(@NonNull SingleEmitter&lt;String&gt; e) throws Exception &#123;</div><div class="line">        e.onSuccess(&quot;Success&quot;);</div><div class="line">        //e.onError(new Throwable(&quot;Error&quot;));</div><div class="line">    &#125;</div><div class="line">&#125;).subscribeOn(Schedulers.io())</div><div class="line">        .observeOn(AndroidSchedulers.mainThread())</div><div class="line">        .subscribe(new SingleObserver&lt;String&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            public void onSubscribe(@NonNull Disposable d) &#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void onSuccess(@NonNull String s) &#123;</div><div class="line">                Log.e(&quot;Test&quot;,&quot;onSuccess &quot;+s);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void onError(@NonNull Throwable e) &#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>我们先从代码上来分析 <code>Single/SingleObserver</code> 和 <code>Observable/Observer</code> 的区别。<br><code>SingleEmitter</code> 和 <code>ObservableEmitter</code> 的区别：<br><code>SingleEmitter</code> 发射数据的方法只有 <code>onSuccess()</code> 和 <code>onError()</code>，而 <code>ObservableEmitter</code> 多了个 <code>onNext()</code> 方法。<br>再来看一下 <code>SingleObserver</code> 和 <code>Observer</code> 的区别：<br><code>SingleObserver</code> 处理结果的方法有 <code>onSubscribe()</code>、<code>onSuccess()</code> 和 <code>onError()</code>。而 <code>Observer</code> 多了个 <code>onNext()</code> 和 <code>onComplete()</code> 方法，而没有 <code>onSuccess()</code> 方法。<br>结合 <code>Single</code> 本身的名字，我们可以联想到，这个组合是只能发射单个数据或者一条异常通知，不能发射完成通知，其中数据与通知只能发射一个。<br>那么 <code>Single/SingleObserver</code> 有什么使用场景呢？<br>我们在实际应用中，有时候需要发射的数据并不是数据流的形式，而只是一条单一的数据，比如发起一次网络请求。在这种情况下，如果我们使用 <code>Observable</code>，<code>onComplete</code> 会紧跟着 <code>onNext</code> 被调用，为什么不能将这连个方法合二为一呢。如果再这种情况下我们再使用 <code>Observable</code> 就显得有点大材小用，因为我们不需要处理 <code>onNext()</code> 的数据。于是，为了满足这种单一数据的使用场景，便出现了 <code>Single</code>。</p>
<h3 id="转化为其他观察者模式"><a href="#转化为其他观察者模式" class="headerlink" title="转化为其他观察者模式"></a>转化为其他观察者模式</h3><p><code>Single</code> 基本上实现了 <code>Observable</code> 所有的操作符，如果你发现需要用到一个 <code>Observable</code> 的操作符而 <code>Single</code> 并不支持，你可以用 <code>toObservable</code> 操作符把 <code>Single&lt;T&gt;</code> 转换为 <code>Observable&lt;T&gt;</code>。<br>另外 <code>Single</code> 还提供了其他转换方法：</p>
<ul>
<li>toCompletable()</li>
<li>toMaybe()</li>
<li>toFlowable()</li>
<li>toFuture()</li>
</ul>
<h2 id="Completable-CompletableObserver-的用法"><a href="#Completable-CompletableObserver-的用法" class="headerlink" title="Completable/CompletableObserver 的用法"></a>Completable/CompletableObserver 的用法</h2><p>先通过代码来看一下用法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">Completable.create(new CompletableOnSubscribe() &#123;</div><div class="line">    @Override</div><div class="line">    public void subscribe(@NonNull CompletableEmitter e) throws Exception &#123;</div><div class="line">        e.onComplete();</div><div class="line">        //e.onError(new Throwable(&quot;Error&quot;));</div><div class="line">    &#125;</div><div class="line">&#125;).subscribeOn(AndroidSchedulers.mainThread())</div><div class="line">        .observeOn(Schedulers.io())</div><div class="line">        .subscribe(new CompletableObserver() &#123;</div><div class="line">            @Override</div><div class="line">            public void onSubscribe(@NonNull Disposable d) &#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void onComplete() &#123;</div><div class="line">                Log.e(&quot;Test&quot;, &quot;onComplete&quot;);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void onError(@NonNull Throwable e) &#123;</div><div class="line">                Log.e(&quot;Test&quot;, &quot;onError&quot;+e.toString());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>照例先来看一下 <code>CompletableEmitter</code>：<br>它提供的数据和通知的方法如下：</p>
<ul>
<li>onComplete()</li>
<li>onError()</li>
</ul>
<p><code>CompletableObserver</code> 的相关的方法：</p>
<ul>
<li>onSubscribe()</li>
<li>onComplete()</li>
<li>onError()</li>
</ul>
<p>可以看到，这里面没有数据处理的方法，只有通知相关的方法。它只发射一条完成通知，或者一条异常通知，不能发射数据，其中完成通知与异常通知只能发射一个。<br>那么 <code>Completable/CompletableObserver</code> 有什么使用场景呢？<br>和前面 <code>Single/SingleObserver</code> 的用法比较类似，只是这里不对数据进行处理，只有个通知的结果。比如：我们向服务器发起一个更新数据的请求，服务器更新数据以后是返回的是更新的结果。这个时候我们或许只是关心的是服务器更新数据是否成功，而不需要对数据进行处理，那么这个时候用 <code>Completable/CompletableObserver</code>  就可以了。<br><code>Completable</code> 也提供了对 <code>Observable</code>、<code>Flowable</code>、<code>Single</code> 和 <code>Maybe</code> 的转换。</p>
<h2 id="Maybe-MaybeObserver-的用法"><a href="#Maybe-MaybeObserver-的用法" class="headerlink" title="Maybe/MaybeObserver 的用法"></a>Maybe/MaybeObserver 的用法</h2><p>再来看一下 <code>Maybe</code> 的用法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">Maybe.create(new MaybeOnSubscribe&lt;String&gt;()&#123;</div><div class="line">    @Override</div><div class="line">    public void subscribe(@NonNull MaybeEmitter&lt;String&gt; e) throws Exception &#123;</div><div class="line">        e.onSuccess(&quot;onSuccess&quot;);</div><div class="line">        //e.onError(new Throwable(&quot;Error&quot;));</div><div class="line">        //e.onComplete();</div><div class="line">    &#125;</div><div class="line">&#125;).subscribeOn(AndroidSchedulers.mainThread())</div><div class="line">        .observeOn(Schedulers.io())</div><div class="line">        .subscribe(new MaybeObserver&lt;String&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            public void onSubscribe(@NonNull Disposable d) &#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void onSuccess(@NonNull String s) &#123;</div><div class="line">                Log.e(&quot;Test&quot;,&quot;onSuccess&quot;);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void onError(@NonNull Throwable e) &#123;</div><div class="line">                Log.e(&quot;Test&quot;,&quot;onError&quot;);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void onComplete() &#123;</div><div class="line">                Log.e(&quot;Test&quot;,&quot;onComplete&quot;);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p><code>Maybe</code>可发射一条单一的数据，以及发射一条完成通知，或者一条异常通知，其中完成通知和异常通知只能发射一个，发射数据只能在发射完成通知或者异常通知之前，否则发射数据无效。</p>
]]></content>
    
    <summary type="html">
    
      本文介绍 RxJava 中 Single、Completable 和 Maybe 的用法
    
    </summary>
    
      <category term="Android开源项目" scheme="http://yoursite.com/categories/Android%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Android开源项目" scheme="http://yoursite.com/tags/Android%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="RxJava" scheme="http://yoursite.com/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>RxJava 使用指南 -- Flowable 和 Subscriber</title>
    <link href="http://yoursite.com/2017/10/14/open-source-rxjava-guide-flowable/"/>
    <id>http://yoursite.com/2017/10/14/open-source-rxjava-guide-flowable/</id>
    <published>2017-10-14T02:00:00.000Z</published>
    <updated>2018-06-02T09:24:04.976Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>前面文章已经介绍过，Flowable/Subscriber 也是一对观察者模式的组合，和 Observable/Observer 的区别是 Flowable/Subscriber 是支持背压的，背压是个什么呢？</p>
<h2 id="Backpressure（背压）"><a href="#Backpressure（背压）" class="headerlink" title="Backpressure（背压）"></a>Backpressure（背压）</h2><p>背压是指在异步场景中，被观察者发送事件速度远快于观察者的处理速度的情况下，一种告诉上游的被观察者降低发送速度的策略。<br>在 Observable/Observer 组合的使用中是不支持背压的，下面通过一个例子来看一下这种场景：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(@NonNull ObservableEmitter&lt;Integer&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(i &lt; Long.MAX_VALUE)&#123;</div><div class="line">            e.onNext(i);</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;).subscribeOn(Schedulers.newThread())</div><div class="line">        .observeOn(Schedulers.newThread())</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Thread.sleep(<span class="number">1000</span>);</div><div class="line">                Log.e(<span class="string">"Test"</span>,<span class="string">"i = "</span>+integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>这里上游数据发射和下游的数据处理在各自的独立线程中执行，如果在同一个线程中不存在背压的情形。下游对数据的处理会堵塞上游数据的发送，上游发送一条数据后会等下游处理完之后再发送下一条。<br>在例子中，上游发射数据时，并不知道下游数据有没有处理完，就会源源不断的发射数据，而下游数据会间隔两秒钟才处理一次，这样就会产生很多下游没来得及处理的数据，这些数据既不会丢失，也不会被垃圾回收机制回收，而是存放在一个异步缓存池中，如果缓存池中的数据一直得不到处理，越积越多，最后就会造成内存溢出，这便是 Rxjava 中的背压问题。<br>可以通过 Monitors 发现内存使用快速增长。</p>
<p><img src="/images/open-source-rxjava-guide-flowable/observer.png" alt="效果图"></p>
<h2 id="Flowable"><a href="#Flowable" class="headerlink" title="Flowable"></a>Flowable</h2><p><code>Flowable</code> 就是为了解决背压问题的产物，因此才会把它们和 Observable/Observer 区分开来使用。<br>由于基于Flowable发射的数据流，以及对数据加工处理的各操作符都添加了背压支持，附加了额外的逻辑，其运行效率要比 <code>Observable</code> 低得多。<br>因为只有上下游运行在各自的线程中，且上游发射数据速度大于下游接收处理数据的速度时，才会产生背压问题。<br>所以，如果能够确定上下游在同一个线程中工作，或者上下游工作在不同的线程中，而下游处理数据的速度高于上游发射数据的速度，则不会产生背压问题，就没有必要使用 <code>Flowable</code>，以免影响性能。<br><code>Flowable</code> </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">Flowable.create(<span class="keyword">new</span> FlowableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(@NonNull FlowableEmitter&lt;Integer&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(i &lt; Long.MAX_VALUE)&#123;</div><div class="line">            e.onNext(i);</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;, BackpressureStrategy.DROP)</div><div class="line">        .subscribeOn(Schedulers.io())</div><div class="line">        .observeOn(Schedulers.newThread())</div><div class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</div><div class="line">                s.request(Long.MAX_VALUE);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">100</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                Log.e(<span class="string">"Test"</span>,<span class="string">"i = "</span>+integer);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>这里注意三点：</p>
<ol>
<li><code>Flowable.create</code> 参数中多了个 <code>BackpressureStrategy</code>。</li>
<li><code>onSubscribe</code> 回调的参数不是 <code>Disposable</code> 而是 <code>Subscription</code>。而且需要调用 <code>Subscription.request</code> 发起数据请求，否则Subscriber不会接受数据。</li>
<li>数据发射器是 <code>FlowableEmitter</code> 而不是 <code>ObservableEmitter</code>。</li>
</ol>
<p><img src="/images/open-source-rxjava-guide-flowable/drop.png" alt="效果图"></p>
<p>打印结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">E/Test: i = 110</div><div class="line">E/Test: i = 111</div><div class="line">E/Test: i = 112</div><div class="line">E/Test: i = 113</div><div class="line">E/Test: i = 114</div><div class="line">E/Test: i = 115</div><div class="line">E/Test: i = 116</div><div class="line">E/Test: i = 117</div><div class="line">E/Test: i = 118</div><div class="line">E/Test: i = 119</div><div class="line">E/Test: i = 120</div><div class="line">E/Test: i = 121</div><div class="line">E/Test: i = 122</div><div class="line">E/Test: i = 123</div><div class="line">E/Test: i = 124</div><div class="line">E/Test: i = 125</div><div class="line">E/Test: i = 126</div><div class="line">E/Test: i = 127</div><div class="line">E/Test: i = 19044130</div><div class="line">E/Test: i = 19044131</div><div class="line">E/Test: i = 19044132</div><div class="line">E/Test: i = 19044133</div><div class="line">E/Test: i = 19044134</div><div class="line">E/Test: i = 19044135</div><div class="line">E/Test: i = 19044136</div><div class="line">E/Test: i = 19044137</div><div class="line">E/Test: i = 19044138</div></pre></td></tr></table></figure>
<p>可以看到 127 —— 19044130 中间的数据被丢掉了，这是因为前面128条数据是正常发射的，后面的数据由于异步缓存池处于存满的状态而无法接收，当清理缓存池时上游正在发射19044130，此时可以放入缓存池从而可以正常接收。</p>
<h2 id="BackpressureStrategy（背压策略）"><a href="#BackpressureStrategy（背压策略）" class="headerlink" title="BackpressureStrategy（背压策略）"></a>BackpressureStrategy（背压策略）</h2><p><code>Flowable</code> 的异步缓存池不同于 <code>Observable</code>，<code>Observable</code>的异步缓存池没有大小限制，可以无限制向里添加数据，直至OOM,而 <code>Flowable</code> 的异步缓存池有个固定容量，其大小为128。<br><code>BackpressureStrategy</code> 的作用便是用来设置 <code>Flowable</code> 异步缓存池中的存储数据超限时的策略。<br><code>BackpressureStrategy</code> 提供了一下几种背压策略：</p>
<ul>
<li>MISSING：这种策略模式下相当于没有指定任何的背压策略，不会对数据做缓存或丢弃处理，需要下游通过背压操作符（onBackpressureBuffer()/onBackpressureDrop()/onBackpressureLatest()）指定背压策略。</li>
<li>ERROR：这种策略模式下如果缓存池中的数据超限了，则会抛出 <code>MissingBackpressureException</code> 异常</li>
<li>BUFFER：这种策略模式下没有为异步缓存池限制大小，可以无限制向里添加数据，不会抛出 <code>MissingBackpressureException</code> 异常，但会导致OOM。</li>
<li>DROP：这种策略模式下如果异步缓存池满了，会丢掉将要放入缓存池中的数据。</li>
<li>LATEST：这种策略模式下与 Drop 策略一样，如果缓存池满了，会丢掉将要放入缓存池中的数据，不同的是，不管缓存池的状态如何，LATEST都会将最后一条数据强行放入缓存池中。</li>
</ul>
<h2 id="背压操作符"><a href="#背压操作符" class="headerlink" title="背压操作符"></a>背压操作符</h2><p>RxJava 提供了下面的操作符来指定背压策略。</p>
<ul>
<li>onBackpressureBuffer()：对应BUFFER策略</li>
<li>onBackpressureDrop()：对应DROP策略</li>
<li>onBackpressureLatest()：对应LATEST策略</li>
</ul>
<p>因此下面代码效果是等同的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">Flowable.create(<span class="keyword">new</span> FlowableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(@NonNull FlowableEmitter&lt;Integer&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(i &lt; <span class="number">800</span>)&#123;</div><div class="line">            e.onNext(i);</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;, BackpressureStrategy.DROP)</div><div class="line">        .subscribeOn(Schedulers.io())</div><div class="line">        .observeOn(Schedulers.newThread())</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Thread.sleep(<span class="number">100</span>);</div><div class="line">                Log.e(<span class="string">"Test"</span>,<span class="string">"i = "</span>+integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Flowable.range(<span class="number">0</span>, <span class="number">800</span>)</div><div class="line">        .onBackpressureDrop()</div><div class="line">        .subscribeOn(Schedulers.io())</div><div class="line">        .observeOn(Schedulers.newThread())</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Thread.sleep(<span class="number">100</span>);</div><div class="line">                Log.e(<span class="string">"Test"</span>,<span class="string">"i = "</span>+integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h2 id="Subscription"><a href="#Subscription" class="headerlink" title="Subscription"></a>Subscription</h2><p>前我们已经介绍过，<code>Flowable</code> 的 <code>subscribe</code> 方法需要的参数是 <code>Subscription</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subscription</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">(<span class="keyword">long</span> n)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="request"><a href="#request" class="headerlink" title="request"></a>request</h3><p><code>request(long n)</code> 用于发起接收数据的请求，如果不调用这个方法，虽然被观察者会正常发送数据，但是观察者是不会去接收数据的。参数 <code>n</code> 代表请求的数据量。<br>但是要注意一点，上游数据的发送是不受这个影响的，无论你设置多少，上游数据都正常发送。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">Flowable.create(<span class="keyword">new</span> FlowableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(@NonNull FlowableEmitter&lt;Integer&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(i &lt; <span class="number">100</span>)&#123;</div><div class="line">            e.onNext(i);</div><div class="line">            i++;</div><div class="line">            Thread.sleep(<span class="number">100</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;, BackpressureStrategy.DROP)</div><div class="line">        .subscribeOn(Schedulers.io())</div><div class="line">        .observeOn(Schedulers.newThread())</div><div class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</div><div class="line">                s.request(<span class="number">10</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">100</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                Log.e(<span class="string">"Test"</span>,<span class="string">"i = "</span>+integer);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>上面的代码只完成了 10 条数据的接收。<code>request(long n)</code>是可以累加的，比如下面代码可以完成 20 条数据的接收。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</div><div class="line">    s.request(<span class="number">10</span>);</div><div class="line">    s.request(<span class="number">10</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="cancel"><a href="#cancel" class="headerlink" title="cancel"></a>cancel</h3><p><code>cancel()</code> 方法用于取消订阅关系。</p>
<h2 id="FlowableEmitter"><a href="#FlowableEmitter" class="headerlink" title="FlowableEmitter"></a>FlowableEmitter</h2><p><code>FlowableEmitter</code> 有如下方法：</p>
<ul>
<li>setDisposable：设置Disposable</li>
<li>setCancellable：设置Cancellable</li>
<li>requested：当前未完成的请求数量</li>
<li>isCancelled：订阅关系是否取消</li>
<li>serialize：</li>
<li>tryOnError：</li>
</ul>
]]></content>
    
    <summary type="html">
    
      本文介绍 RxJava 中 Flowable 和 Subscriber的用法
    
    </summary>
    
      <category term="Android开源项目" scheme="http://yoursite.com/categories/Android%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Android开源项目" scheme="http://yoursite.com/tags/Android%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="RxJava" scheme="http://yoursite.com/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>RxJava 使用指南 -- 操作符介绍</title>
    <link href="http://yoursite.com/2017/10/12/open-source-rxjava-guide-operator/"/>
    <id>http://yoursite.com/2017/10/12/open-source-rxjava-guide-operator/</id>
    <published>2017-10-12T02:00:00.000Z</published>
    <updated>2018-06-02T09:24:04.976Z</updated>
    
    <content type="html"><![CDATA[<p>本文将会介绍一些常用 RxJava 的操作符的用法。</p>
<h2 id="创建Observable-操作符"><a href="#创建Observable-操作符" class="headerlink" title="创建Observable 操作符"></a>创建Observable 操作符</h2><p>前面的例子介绍了使用 <code>Observable.create()</code> 操作符来创建 <code>Observable</code>，下面再介绍一下 RxJava 提供的其他方法。</p>
<h3 id="just"><a href="#just" class="headerlink" title="just()"></a>just()</h3><p><code>just(T item1, ...)</code>创建 <code>Observable</code> 并自动调用 <code>onNext()</code>发射数据，可以接受一个或者多个参数， <code>just()</code> 中传递的参数将在 <code>Observer</code> 的 <code>onNext()</code> 方法中接收到。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="string">"Hello"</span>, <span class="string">"World"</span>)</div><div class="line">        .subscribe(<span class="keyword">new</span> Observer&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(@NonNull Disposable d)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(@NonNull String s)</span> </span>&#123;</div><div class="line">                Log.i(TAG,<span class="string">"onNext : "</span> + s);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(@NonNull Throwable e)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">                Log.i(TAG,<span class="string">"onComplete"</span>);</div><div class="line">            &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">I/RxJava: onNext : Hello</div><div class="line">I/RxJava: onNext : World</div><div class="line">I/RxJava: onComplete</div></pre></td></tr></table></figure>
<h3 id="defer"><a href="#defer" class="headerlink" title="defer()"></a>defer()</h3><p><code>defer(Callable&lt;? extends ObservableSource&lt;? extends T&gt;&gt; supplier)</code> 当观察者订阅时，才创建 Observable。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Observable.defer(<span class="keyword">new</span> Callable&lt;ObservableSource&lt;String&gt;&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ObservableSource&lt;String&gt; <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"defer call"</span>);</div><div class="line">        <span class="keyword">return</span> Observable.just(<span class="string">"Hello"</span>, <span class="string">"World"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;).subscribe(<span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"accept : "</span> + s);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这里新建了一个 <code>Consumer</code> 对象来作为观察者。</p>
<h3 id="fromArray"><a href="#fromArray" class="headerlink" title="fromArray()"></a>fromArray()</h3><p><code>fromArray(T... items)</code> 接受一个数组参数，创建 <code>Observable</code> 并自动调用 <code>onNext()</code> 将数组中的数据逐一发送。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Observable.fromArray(<span class="keyword">new</span> String[]&#123;<span class="string">"Hello"</span>,<span class="string">"World"</span>&#125;)</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Log.i(TAG,<span class="string">"accept : "</span> + s);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h3 id="fromIterable"><a href="#fromIterable" class="headerlink" title="fromIterable()"></a>fromIterable()</h3><p><code>fromIterable(Iterable&lt;? extends T&gt; source)</code> 接受一个集合参数，创建 <code>Observable</code> 并将集合中的数据逐一发送。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList();</div><div class="line">list.add(<span class="string">"Hello"</span>);</div><div class="line">list.add(<span class="string">"World"</span>);</div><div class="line">Observable.fromIterable(list)</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Log.i(TAG,<span class="string">"accept : "</span> + s);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h3 id="interval"><a href="#interval" class="headerlink" title="interval()"></a>interval()</h3><p><code>interval(long period, TimeUnit unit)</code> 按照一个固定的时间间隔 <code>period</code> 来发射数据，可以作为一个定时器来使用。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">Observable.interval(<span class="number">2</span>, TimeUnit.SECONDS)</div><div class="line">        .subscribe(<span class="keyword">new</span> Observer&lt;Long&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(@NonNull Disposable d)</span> </span>&#123;</div><div class="line">                mDisposable = d;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(@NonNull Long aLong)</span> </span>&#123;</div><div class="line">                Log.i(TAG,<span class="string">"onNext : "</span> + aLong);</div><div class="line">                <span class="keyword">if</span>(aLong == <span class="number">5</span>)</div><div class="line">                    mDisposable.dispose();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(@NonNull Throwable e)</span> </span>&#123;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>上面例子中当数据等于5解除订阅关系，停止发射数据。</p>
<h3 id="range"><a href="#range" class="headerlink" title="range()"></a>range()</h3><p><code>range(final int start, final int count)</code> 创建一个被观察者并发射从 <code>start</code> 到 <code>count</code> 的整数序列给观察者。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Observable.range(<span class="number">1</span>,<span class="number">5</span>)</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Log.i(TAG,<span class="string">"accept : "</span> + integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h3 id="timer"><a href="#timer" class="headerlink" title="timer()"></a>timer()</h3><p><code>timer(long delay, TimeUnit unit)</code>创建一个 Observable 并在它在一个给定的延迟 <code>delay</code> 后发射一个特殊的值（0）给观察者。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Observable.timer(<span class="number">5</span>, TimeUnit.SECONDS)</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Long&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Log.i(TAG,<span class="string">"accept : "</span> + aLong);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h3 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h3><p><code>concat()</code> 方法会将参数中的多个数据源合并，并按顺序发射。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">Observable source1 = Observable.create(new ObservableOnSubscribe&lt;String&gt;() &#123;</div><div class="line">    @Override</div><div class="line">    public void subscribe(@NonNull ObservableEmitter&lt;String&gt; e) throws Exception &#123;</div><div class="line">        e.onNext(&quot;Hello&quot;);</div><div class="line">        e.onComplete();</div><div class="line">        //e.onError(new Exception(&quot;Test Error&quot;));</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">Observable source2 = Observable.create(new ObservableOnSubscribe&lt;String&gt;() &#123;</div><div class="line">    @Override</div><div class="line">    public void subscribe(@NonNull ObservableEmitter&lt;String&gt; e) throws Exception &#123;</div><div class="line">        e.onNext(&quot;World&quot;);</div><div class="line">        e.onComplete();</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">Observable.concat(source1, source2).subscribeOn(Schedulers.io())</div><div class="line">.observeOn(Schedulers.io())</div><div class="line">.subscribe(new Consumer&lt;String&gt;() &#123;</div><div class="line">    @Override</div><div class="line">    public void accept(String s) throws Exception &#123;</div><div class="line">        Log.e(&quot;Test&quot;,s);</div><div class="line">    &#125;</div><div class="line">&#125;, new Consumer&lt;Throwable&gt;() &#123;</div><div class="line">    @Override</div><div class="line">    public void accept(Throwable throwable) throws Exception &#123;</div><div class="line">        Log.e(&quot;Test&quot;,throwable.getMessage());</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这里需要注意的是，如果前一个数据源发出 <code>onError</code>，那么将会中断后面数据的发射。</p>
<h3 id="first"><a href="#first" class="headerlink" title="first()"></a>first()</h3><p>再来介绍一下 <code>first()</code> 操作符，只发送符合条件的第一个事件，可以与前面的 <code>contact</code> 操作符结合使用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Observable.concat(source1, source2).subscribeOn(Schedulers.io())</div><div class="line">        .first(&quot;Default&quot;)</div><div class="line">        .subscribe(new Consumer&lt;String&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            public void accept(String s) throws Exception &#123;</div><div class="line">                Log.e(&quot;Test&quot;,s);</div><div class="line">            &#125;</div><div class="line">        &#125;, new Consumer&lt;Throwable&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            public void accept(Throwable throwable) throws Exception &#123;</div><div class="line">                Log.e(&quot;Test&quot;,throwable.getMessage());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>如果 source1 和 source2 都有条件发射数据，那么就只发射 source1 的数据。如果只有 source2 有条件发射数据，那么就发送 source2 的数据。如果都不发射，就发送 <code>first()</code> 默认数据。<br>就是说顺序发射数据时，只要有一个 <code>Observable</code> 发射了数据，那么就不会发射后面的数据了。如果都不发射数据，那么就发送 <code>first(default)</code> 参数里面的默认数据。</p>
<p>这个操作符做网络缓存的时候很有用。举个例子：依次检查 Disk 与 Network，如果 Disk 存在缓存，则不做网络请求，否则进行网络请求。</p>
<h3 id="concatMap"><a href="#concatMap" class="headerlink" title="concatMap()"></a>concatMap()</h3><h2 id="map-和-flatmap-（变换）"><a href="#map-和-flatmap-（变换）" class="headerlink" title="map 和 flatmap （变换）"></a>map 和 flatmap （变换）</h2><p>这一组操作符提供数据的变换工作，就是把数据对象变换成其他类型的数据对象，它们都接受一个 <code>Function</code> 类型的参数。但是它们的用法上还是有区别的。</p>
<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>先来说一下 <code>map()</code> 操作的使用场景，如果在数据流的传递过程中，我们需要根据当前数据流对象转换或提取生成一种其他类型的数据流对象，可以使用 <code>map()</code> 。<br>它需要一个 <code>Function</code> 参数，<code>Function</code> 对象的两个参数是转换的源数据和目标数据类型。<br>比如我们有一个请求网络图片的场景，被订阅者发出的数据是原始的 <code>byte</code> 类型数据，在设置给 <code>ImageView</code> 前我们要转换成 <code>Bitmap</code> 类型的数据，那么就可以用这个操作符。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;<span class="keyword">byte</span> []&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(@NonNull ObservableEmitter&lt;<span class="keyword">byte</span> []&gt; observableEmitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">byte</span> [] data = getBitmapDataSync(mUrl);</div><div class="line">        observableEmitter.onNext(data);</div><div class="line">        observableEmitter.onComplete();</div><div class="line">    &#125;</div><div class="line">&#125;).subscribeOn(Schedulers.io())</div><div class="line">        .map(<span class="keyword">new</span> Function&lt;<span class="keyword">byte</span>[], Bitmap&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Bitmap <span class="title">apply</span><span class="params">(@NonNull <span class="keyword">byte</span>[] bytes)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                <span class="keyword">return</span> generateBitmap(bytes);</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .observeOn(AndroidSchedulers.mainThread())</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Bitmap&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Bitmap bitmap)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                mImageView.setImageBitmap(bitmap);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h3 id="flatmap"><a href="#flatmap" class="headerlink" title="flatmap"></a>flatmap</h3><p><code>flatMap(Function&lt;? super T, ? extends ObservableSource&lt;? extends R&gt;&gt; mapper)</code> 中同样需要一个 <code>Function</code> 对象作为参数，但是 <code>Function</code> 的目标数据类型变成了 <code>Observable</code>。<br><code>flatMap</code> 一般用于输出一个 <code>Observable</code>，而其随后的 <code>subscribe</code> 中的参数也跟 <code>Observable</code> 中的参数一样。<br>下面再提供一个使用场景，这个场景属于嵌套的网络请求，比如我们想先进行一次网络请求得到图片的url，然后根据url再进行网络请求得到图片，最后设置给 <code>ImageView</code> ，这种情况下由url到 <code>Bitmap</code> 的转换用 <code>map</code> 是无法实现的，可以使用 <code>flatmap</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(@NonNull ObservableEmitter&lt;String&gt; observableEmitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        String url = getImageUrl(mUrl);</div><div class="line">        observableEmitter.onNext(url);</div><div class="line">        observableEmitter.onComplete();</div><div class="line">    &#125;</div><div class="line">&#125;).subscribeOn(Schedulers.io())</div><div class="line">        .observeOn(Schedulers.io())</div><div class="line">        .flatMap(<span class="keyword">new</span> Function&lt;String, ObservableSource&lt;Bitmap&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> ObservableSource&lt;Bitmap&gt; <span class="title">apply</span><span class="params">(@NonNull <span class="keyword">final</span> String url)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                <span class="keyword">return</span> Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Bitmap&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(@NonNull ObservableEmitter&lt;Bitmap&gt; observableEmitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                        Bitmap bitmap = getBitmap(url);</div><div class="line">                        observableEmitter.onNext(bitmap);</div><div class="line">                        observableEmitter.onComplete();</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .observeOn(AndroidSchedulers.mainThread())</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Bitmap&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Bitmap bitmap)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                mImageView.setImageBitmap(bitmap);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h2 id="filter-和-distinct-（过滤）"><a href="#filter-和-distinct-（过滤）" class="headerlink" title="filter 和 distinct （过滤）"></a>filter 和 distinct （过滤）</h2><p>这一组操作符提供数据的过滤工作，<code>filter</code> 对不符合条件的数据进行过滤，<code>distinct</code> 提供去重的功能。最常用的用法之一是过滤 null 对象,它帮我们免去了在 <code>onNext()</code> 函数调用中再去检测 null 值。</p>
<h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p><code>filter(Predicate&lt;? super T&gt; predicate)</code> 接受 <code>Predicate</code> 对象参数，它的 <code>test()</code> 方法给出一个过滤条件，如果满足条件，则继续向下传递，如果不满足，则过滤掉。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Observable.range(<span class="number">0</span>,<span class="number">10</span>)</div><div class="line">        .filter(<span class="keyword">new</span> Predicate&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(@NonNull Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                <span class="keyword">return</span> integer % <span class="number">2</span> == <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;).subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"accept : "</span> + integer);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面的示例会过滤掉奇数，把偶数打印出来。</p>
<h3 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h3><p><code>distinct()</code> 过滤掉重复的数据项，过滤规则为：只允许还没有发射过的数据项通过。它还有重载的两个方法 <code>distinct(Function&lt;? super T, K&gt; keySelector)</code> 和 <code>distinct(Function&lt;? super T, K&gt; keySelector, Callable&lt;? extends Collection&lt;? super K&gt;&gt; collectionSupplier)</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">6</span>)</div><div class="line">        .distinct()</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Log.i(TAG,<span class="string">"accept : "</span> + integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h2 id="mergeWith-和-concatWith-（组合）"><a href="#mergeWith-和-concatWith-（组合）" class="headerlink" title="mergeWith 和 concatWith （组合）"></a>mergeWith 和 concatWith （组合）</h2><p>这一组操作符提供数据的组合工作。</p>
<h3 id="mergeWith"><a href="#mergeWith" class="headerlink" title="mergeWith"></a>mergeWith</h3><p><code>mergeWith(ObservableSource&lt;? extends T&gt; other)</code> 合并两个 <code>Observable</code>，它们数据可能会交错发射。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</div><div class="line">        .mergeWith(Observable.just(<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>))</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Log.i(TAG,<span class="string">"accept : "</span> + integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h3 id="concatWith"><a href="#concatWith" class="headerlink" title="concatWith"></a>concatWith</h3><p><code>concatWith(ObservableSource&lt;? extends T&gt; other)</code>合并两个 <code>Observable</code>，它们数据会按顺序发射，一个 <code>Observable</code> 的数据发送完了另外一个才会发射。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</div><div class="line">        .concatWith(Observable.just(<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>))</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Log.i(TAG,<span class="string">"accept : "</span> + integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h2 id="zipWith（聚合）"><a href="#zipWith（聚合）" class="headerlink" title="zipWith（聚合）"></a>zipWith（聚合）</h2><p><code>zipWith(ObservableSource&lt;? extends U&gt; other, BiFunction&lt;? super T, ? super U, ? extends R&gt; zipper)</code> 将两个 <code>Obversable</code> 发射的数据，通过一个函数 <code>BiFunction</code> 的 <code>apply()</code> 方法对对应位置的数据处理后放到一个新的 <code>Observable</code> 中发射，所发射的数据个数与最少的 <code>Observabel</code> 中的一样。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</div><div class="line">        .zipWith(Observable.just(<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>, <span class="string">"four"</span>, <span class="string">"five"</span>), <span class="keyword">new</span> BiFunction&lt;Integer, String, String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(@NonNull Integer integer, @NonNull String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                <span class="keyword">return</span> integer + s;</div><div class="line">            &#125;</div><div class="line">        &#125;).subscribe(<span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"accept : "</span> + s);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>打印结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">I/RxJava: accept : 1one</div><div class="line">I/RxJava: accept : 2two</div><div class="line">I/RxJava: accept : 3three</div><div class="line">I/RxJava: accept : 4four</div><div class="line">I/RxJava: accept : 5five</div></pre></td></tr></table></figure>
<h2 id="take、-takeLast、takeUntil-和-takeWhile"><a href="#take、-takeLast、takeUntil-和-takeWhile" class="headerlink" title="take、 takeLast、takeUntil 和 takeWhile"></a>take、 takeLast、takeUntil 和 takeWhile</h2><h3 id="take"><a href="#take" class="headerlink" title="take"></a>take</h3><p><code>take(long count)</code> 观察者只接受被观察者发出的前 <code>count</code> 个数据。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</div><div class="line">        .take(<span class="number">3</span>)</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Log.i(TAG,<span class="string">"accept : "</span> + integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h3 id="takeLast"><a href="#takeLast" class="headerlink" title="takeLast"></a>takeLast</h3><p><code>takeLast(int count)</code> 观察者只接受被观察者发出的后面 <code>count</code> 个数据。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</div><div class="line">        .take(<span class="number">3</span>)</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Log.i(TAG,<span class="string">"accept : "</span> + integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h3 id="takeUntil"><a href="#takeUntil" class="headerlink" title="takeUntil"></a>takeUntil</h3><p><code>takeUntil(Predicate&lt;? super T&gt; stopPredicate)</code> 当条件满足是停止发射数据，<code>takeUntil(ObservableSource&lt;U&gt; other)</code> 当 other 发射第一个数据后即停止第一个 <code>Observable</code> 数据的发射。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</div><div class="line">        .takeUntil(<span class="keyword">new</span> Predicate&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(@NonNull Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                <span class="keyword">return</span> integer == <span class="number">3</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Log.i(TAG,<span class="string">"accept : "</span> + integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h3 id="takeWhile"><a href="#takeWhile" class="headerlink" title="takeWhile"></a>takeWhile</h3><p><code>takeWhile(Predicate&lt;? super T&gt; predicate)</code> 当满足条件是才会发射数据，遇到不满足条件的情况，就中断退出发射。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</div><div class="line">        .takeWhile(<span class="keyword">new</span> Predicate&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(@NonNull Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                <span class="keyword">return</span> integer &lt; <span class="number">3</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Log.i(TAG,<span class="string">"accept : "</span> + integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h2 id="sample"><a href="#sample" class="headerlink" title="sample"></a>sample</h2><p><code>sample(long period, TimeUnit unit)</code> 相当于采样操作，它会定时地扫描被观察者发送的数据，并接收被观察者最近发射的数据。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Observable.interval(<span class="number">2</span>, TimeUnit.SECONDS)</div><div class="line">        .subscribeOn(Schedulers.io())</div><div class="line">        .observeOn(Schedulers.io())</div><div class="line">        .sample(<span class="number">3</span>, TimeUnit.SECONDS)</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Long&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Log.i(TAG,<span class="string">"accept : "</span> + aLong);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">I/RxJava: accept : 0</div><div class="line">I/RxJava: accept : 1</div><div class="line">I/RxJava: accept : 3</div><div class="line">I/RxJava: accept : 4</div><div class="line">I/RxJava: accept : 6</div><div class="line">I/RxJava: accept : 7</div><div class="line">I/RxJava: accept : 9</div><div class="line">I/RxJava: accept : 10</div><div class="line">I/RxJava: accept : 12</div></pre></td></tr></table></figure>
<h2 id="skip-和-skipLast"><a href="#skip-和-skipLast" class="headerlink" title="skip 和 skipLast"></a>skip 和 skipLast</h2><h3 id="skip"><a href="#skip" class="headerlink" title="skip"></a>skip</h3><p><code>skip(long count)</code> 用于过滤被观察者发送的前 n 项数据。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Observable.interval(<span class="number">1</span>, TimeUnit.SECONDS)</div><div class="line">        .skip(<span class="number">6</span>)</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Long&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Log.i(TAG,<span class="string">"accept : "</span> + aLong);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">I/RxJava: accept : 6</div><div class="line">I/RxJava: accept : 7</div><div class="line">I/RxJava: accept : 8</div><div class="line">I/RxJava: accept : 9</div><div class="line">I/RxJava: accept : 10</div></pre></td></tr></table></figure>
<h3 id="skipLast"><a href="#skipLast" class="headerlink" title="skipLast"></a>skipLast</h3><p><code>skipLast(int count)</code> 用于过滤最后 n 项数据。</p>
<h2 id="repeat、repeatUntil-和-repeatWhen"><a href="#repeat、repeatUntil-和-repeatWhen" class="headerlink" title="repeat、repeatUntil 和 repeatWhen"></a>repeat、repeatUntil 和 repeatWhen</h2><p>这组操作符提供在调用 <code>onCompleted()</code> 事件后提供重复调用 <code>Observable</code> 事件的操作。</p>
<h3 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h3><p><code>repeat</code> 提供重复调用 <code>Observable</code> 事件的操作。</p>
<ul>
<li>repeat()：无限次重复（Long.MAX_VALUE）</li>
<li>repeat(long times)：重复 times 次</li>
</ul>
<h3 id="repeatUntil"><a href="#repeatUntil" class="headerlink" title="repeatUntil"></a>repeatUntil</h3><p><code>repeatUntil(BooleanSupplier stop)</code> 重复调用 <code>Observable</code> 事件的操作直到 stop 条件满足。</p>
<h3 id="repeatWhen"><a href="#repeatWhen" class="headerlink" title="repeatWhen"></a>repeatWhen</h3><p><code>repeatWhen(final Function&lt;? super Observable&lt;Object&gt;, ? extends ObservableSource&lt;?&gt;&gt; handler)</code> 当满足一定条件重复调用 <code>Observable</code> 事件的操作。</p>
<h2 id="retry、retryUntil-和-retryWhen"><a href="#retry、retryUntil-和-retryWhen" class="headerlink" title="retry、retryUntil 和 retryWhen"></a>retry、retryUntil 和 retryWhen</h2><p>这组操作符提供在调用 <code>onError()</code> 事件后提供重新调用 <code>Observable</code> 事件的操作。</p>
<h2 id="时间节点处理操作"><a href="#时间节点处理操作" class="headerlink" title="时间节点处理操作"></a>时间节点处理操作</h2><p>特定的时间节点处理方法：</p>
<ul>
<li>doOnEach：发射数据的时候执行</li>
<li>doAfterNext：数据发射成功后</li>
<li>doOnNext：调用onNext方法时</li>
<li>doOnComplete：调用onComplete方法时</li>
<li>doOnError：调用onError时</li>
<li>doFinally：onComplete，onError或者取消订阅关系后</li>
</ul>
]]></content>
    
    <summary type="html">
    
      本文介绍 RxJava 的操作符的用法
    
    </summary>
    
      <category term="Android开源项目" scheme="http://yoursite.com/categories/Android%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Android开源项目" scheme="http://yoursite.com/tags/Android%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="RxJava" scheme="http://yoursite.com/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>RxJava 使用指南 -- 基本概念、数据流创建和线程调度</title>
    <link href="http://yoursite.com/2017/10/10/open-source-rxjava-guide-base/"/>
    <id>http://yoursite.com/2017/10/10/open-source-rxjava-guide-base/</id>
    <published>2017-10-10T02:00:00.000Z</published>
    <updated>2018-06-02T09:24:04.975Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>RxJava 很早就开始接触和使用了，但只是仅仅会一些简单的使用而已，于是打算通过一系列的博客来加深对RxJava的理解。<br><a href="https://github.com/ReactiveX/RxJava/" target="_blank" rel="external">RxJava Github地址</a><br>写这篇文章的时候，RxJava最新版本已经是 <code>2.1.5</code> 了，那么我们就以最新版本为基础来介绍 RxJava 的使用。<br>使用之前要加入一下依赖：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile &apos;io.reactivex.rxjava2:rxjava:2.1.5&apos;</div><div class="line">    compile &apos;io.reactivex.rxjava2:rxandroid:2.0.1&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>RxAndroid 是一个 RxJava 扩展库，更好的兼容了 Android 特性，比如主线程，UI事件等。</p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>RxJava 官方的解释是一个在 Java VM 上使用可观测的序列来组成异步的、基于事件的程序的库。简要概括一下，它就是一个实现异步操作的库。它的本质体现在异步两个字上面。<br>RxJava 的异步的实现，是通过一种扩展的观察者模式来实现的，观察者模式相信我们都不陌生。<br>RxJava 提供众多的操作符以及它的链式操作可以替代深度回调逻辑，可以使代码简短优雅。<br>想要使用RxJava，我们先来了解一下几个基本概念。</p>
<ul>
<li><font color="#ff0000">Observable/Observer (可观察者，即被观察者/观察者)</font>：发射数据流/接收数据流</li>
<li>Consumer：它也是一个 Observer，只有一个 accept() 回调</li>
<li>subscribe (订阅)：建立 Observable 和 Observer 的联系</li>
<li>subscribeOn：为 Observable 对数据的处理指定一个调度器</li>
<li>observeOn：为下游对数据的操作指定一个调度器</li>
<li>Disposable：用于解除订阅以及查询订阅关系是否解除</li>
<li>Operators操作符：可以理解为对数据流的操作，包括创建、过滤、变换、组合、聚合等。</li>
<li><font color="#ff0000">Flowable/Subscriber：(被观察者/观察者)</font>：一种观察者模式组合，支持背压</li>
<li>Publisher：Flowable 的父类</li>
<li>Subscription：可以通过request发起请求数据，通过cancel取消订阅关系。</li>
<li><font color="#ff0000">Single/SingleObserver</font>：一种观察者模式组合</li>
<li><font color="#ff0000">Completable/CompletableObserver</font>：一种观察者模式组合</li>
<li><font color="#ff0000">Maybe/MaybeObserver</font>：一种观察者模式组合</li>
</ul>
<p>订阅关系：Observable/Observer是一对，Flowable/Subscriber是一对。</p>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>正如我们实现一个基本的观察者模式一样，你要创建被观察者和观察者，然后通过订阅事件使他们联系起来。<br>下面介绍一个RxJava的最基本的实现：</p>
<h3 id="创建Observable"><a href="#创建Observable" class="headerlink" title="创建Observable"></a>创建Observable</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Observable&lt;String&gt; observable = Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(@NonNull ObservableEmitter&lt;String&gt; observableEmitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        observableEmitter.onNext(<span class="string">"Hello "</span>);</div><div class="line">        observableEmitter.onNext(<span class="string">"World"</span>);</div><div class="line">        observableEmitter.onComplete();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><code>ObservableEmitter</code> 相当于一个事件发射器，每执行一次 <code>onNext()</code>，观察者就会收到一次数据，数据发送完毕后调用 <code>onComplete()</code> 方法。<br>在事件处理过程中出异常时，触发<code>onError()</code> ，同时队列自动终止，不允许再有事件发出。在一个正确运行的事件序列中， <code>onCompleted()</code> 和 <code>onError()</code> 有且只有一个，并且是事件序列中的最后一个。需要注意的是，<code>onCompleted()</code> 和 <code>onError()</code> 二者也是互斥的，即在队列中调用了其中一个，就不应该再调用另一个。</p>
<h3 id="创建Observer"><a href="#创建Observer" class="headerlink" title="创建Observer"></a>创建Observer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">Observer&lt;String&gt; observer = <span class="keyword">new</span> Observer&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(@NonNull Disposable d)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(@NonNull String s)</span> </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"onNext : "</span> + s);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(@NonNull Throwable e)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"onComplete"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>观察者的 <code>onNext()</code> 回调会收到被观察者发送的数据。</p>
<h3 id="subscribe（订阅）"><a href="#subscribe（订阅）" class="headerlink" title="subscribe（订阅）"></a>subscribe（订阅）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">observable.subscribe(observer);</div></pre></td></tr></table></figure>
<p>执行后输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">I/RxJava: onNext : Hello </div><div class="line">I/RxJava: onNext : World</div><div class="line">I/RxJava: onComplete</div></pre></td></tr></table></figure>
<p>通过上面三步实现了 RxJava 最简单的用法，其中并没有涉及到线程切换等操作，这些后面再介绍。</p>
<h2 id="创建Observable-1"><a href="#创建Observable-1" class="headerlink" title="创建Observable"></a>创建Observable</h2><p>关于这方面请看 <a href="http://www.heqiangfly.com/2017/10/12/open-source-rxjava-guide-operator/" target="_blank" rel="external">RxJava 使用指南（二）– 操作符介绍 </a>一文。</p>
<h2 id="创建Observer-1"><a href="#创建Observer-1" class="headerlink" title="创建Observer"></a>创建Observer</h2><p>RxJava 支持多种不同方式的 <code>Observer</code> 回调。</p>
<ul>
<li>subscribe()：忽略 <code>onNext</code> 以及 <code>onComplete</code> 等事件。</li>
<li>subscribe(Observer&lt;? super T&gt; observer)：以 <code>Observer</code> 为参数。</li>
<li>subscribe(Consumer&lt;? super T&gt; onNext)：只接受 <code>onNext</code></li>
<li>subscribe(Consumer&lt;? super T&gt; onNext, Consumer&lt;? super Throwable&gt; onError)：接受 <code>onNext</code> 和 <code>onError</code></li>
<li>subscribe(Consumer&lt;? super T&gt; onNext, Consumer&lt;? super Throwable&gt; onError, Action onComplete)：接受 <code>onNext</code> <code>onError</code> 和 <code>onComplete</code></li>
<li>subscribe(Consumer&lt;? super T&gt; onNext, Consumer&lt;? super Throwable&gt; onError, Action onComplete, Consumer&lt;? super Disposable&gt; onSubscribe)：接受 <code>onNext</code> <code>onError</code> 和 <code>onComplete</code>，接受参数为 <code>Disposable</code> 的一个回调，用于解除订阅，这中实现就和 <code>Observer</code> 类似了，四个回调。</li>
</ul>
<h2 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h2><h3 id="Scheduler（调度器）"><a href="#Scheduler（调度器）" class="headerlink" title="Scheduler（调度器）"></a>Scheduler（调度器）</h3><p>在上面的例子中，并没有涉及到线程切换的操作。如果只是这样在一个线程中同步使用还没有将RxJava的优势体现出来。我们在使用过程中会经常遇到这种情况，比如，我们会将网络请求等耗时操作放到后台线程中，将UI操作放到主线程中执行。<br>RxJava 提供了线程调度的功能，我们可以借助于 <code>Scheduler</code> 来完成。另外 RxAndroid 提供了 <code>AndroidSchedulers</code> 调度器来供开发者使用。<br><code>Scheduler</code> 和 <code>AndroidSchedulers</code> 提供了6种线程调度器：</p>
<table>
<thead>
<tr>
<th style="text-align:center">调度器</th>
<th style="text-align:center">使用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Schedulers.io()</td>
<td style="text-align:center">主要用于一些耗时IO操作，比如读写文件，数据库存取，网络交互等。这个调度器具有线程缓存机制，它会根据需要，增加或者减少线程池中的线程数量。需要注意的是Schedulers.io()中的线程池数量是无限制大的，大量的I/0操作将创建许多线程，我们需要在性能和线程数量中做出取舍。</td>
</tr>
<tr>
<td style="text-align:center">Schedulers.computation()</td>
<td style="text-align:center">计算所使用的 Scheduler。这个计算指的是 CPU 密集型计算，即不会被 I/O 等操作限制性能的操作，例如图形的计算。这个 Scheduler 使用的固定的线程池，大小为 CPU 核数。不要把 I/O 操作放在 computation() 中，否则 I/O 操作的等待时间会浪费 CPU。</td>
</tr>
<tr>
<td style="text-align:center">Schedulers.newThread()</td>
<td style="text-align:center">开启一个新的线程，不具有线程缓存机制，因为创建一个新的线程比复用一个线程更耗时耗力，因此，Schedulers.newThread( )的效率没有Schedulers.io( )高。</td>
</tr>
<tr>
<td style="text-align:center">Schedulers.from(Executor executor)</td>
<td style="text-align:center">使用指定的 Executor 来作为线程调度器</td>
</tr>
<tr>
<td style="text-align:center">Schedulers.single()</td>
<td style="text-align:center">拥有一个线程单例，所有的任务都在这一个线程中执行。</td>
</tr>
<tr>
<td style="text-align:center">Schedulers.trampoline()</td>
<td style="text-align:center">在当前线程执行一个任务，但不是立即执行，用trampoline()将它加入队列。这个调度器将会处理它的队列并且按程序运行队列中每一个任务。</td>
</tr>
<tr>
<td style="text-align:center">AndroidSchedulers.mainThread()</td>
<td style="text-align:center">Android中的主线程执行任务，为Android开发定制。</td>
</tr>
</tbody>
</table>
<h3 id="实现线程调度"><a href="#实现线程调度" class="headerlink" title="实现线程调度"></a>实现线程调度</h3><p>实现线程的调度可以通过 <code>subscribeOn()</code> 和 <code>observerOn()</code> 实现。</p>
<ul>
<li>subscribeOn()：指定被观察者在哪个调度器上执行，跟调用的位置没有关系。直到遇到observeOn改变线程调度器。</li>
<li>observerOn()：指定下游观察者对数据的操作运行在哪个调度器上。在调用位置切换线程。</li>
</ul>
<p>使用时需要注意：</p>
<ul>
<li><code>subscribeOn()</code> 可以多次调用，但只有第一次的调用会起作用。</li>
<li><code>observerOn()</code> 可以多次调用，每调用一次切换一次线程。</li>
</ul>
<h4 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h4><p>在这个例子中，我们通过 <code>subscribeOn(Schedulers.io())</code> 指定被观察者在IO线程中进行图片下载，然后通过 <code>observeOn(AndroidSchedulers.mainThread())</code> 在主线程中更新UI。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Bitmap&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(@NonNull ObservableEmitter&lt;Bitmap&gt; observableEmitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"current thread : "</span>+Thread.currentThread().getName());</div><div class="line">        Bitmap bitmap = mHttpModel.getBitmapSync(mUrl);</div><div class="line">        observableEmitter.onNext(bitmap);</div><div class="line">        observableEmitter.onComplete();</div><div class="line">    &#125;</div><div class="line">&#125;).subscribeOn(Schedulers.io())</div><div class="line">        .observeOn(AndroidSchedulers.mainThread())</div><div class="line">        .subscribe(<span class="keyword">new</span> Observer&lt;Bitmap&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(@NonNull Disposable d)</span> </span>&#123;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(@NonNull Bitmap bitmap)</span> </span>&#123;</div><div class="line">                Log.i(TAG,<span class="string">"current thread : "</span>+Thread.currentThread().getName());</div><div class="line">                mImageView.setImageBitmap(bitmap);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(@NonNull Throwable e)</span> </span>&#123;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">RxJava: current thread : RxCachedThreadScheduler-1</div><div class="line">RxJava: current thread : main</div></pre></td></tr></table></figure>
<h4 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h4><p>这个例子主要来介绍一下线程调度的时机问题，被观察者所在的线程肯定是由 <code>subscribeOn()</code> 来指定，然后就直到遇到 <code>observeOn()</code> 再切换线程，否则就在当前线程执行下去。<br>看下面一段伪代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Observable.create                           <span class="comment">//被观察者在io线程执行，因为后面通过subscribeOn指定io线程</span></div><div class="line">.map                                        <span class="comment">//没有遇到线程操作，依然在io线程</span></div><div class="line">.subscribeOn(Schedulers.io())</div><div class="line">.map                                        <span class="comment">//没有遇到线程操作，依然在io线程</span></div><div class="line">.observeOn(AndroidSchedulers.mainThread())  <span class="comment">//切换线程</span></div><div class="line">.map                                        <span class="comment">//遇到线程切换，在主线程</span></div><div class="line">.observeOn(Schedulers.io())                 <span class="comment">//切换线程</span></div><div class="line">.subscribe                                  <span class="comment">//遇到线程切换，在io线程</span></div></pre></td></tr></table></figure>
<blockquote>
<p>如果我们不指定线程调度器，被观察者和观察者会在什么线程执行呢？我们通过在前面的例子中添加一些打印信息会发现，它们会默认在当前线程中执行。</p>
</blockquote>
<h3 id="doOnSubscribe"><a href="#doOnSubscribe" class="headerlink" title="doOnSubscribe()"></a>doOnSubscribe()</h3><p>这里再提一个方法 <code>doOnSubscribe()</code>，它是在 <code>subscribe()</code> 调用后而且在事件发送前执行。前面我们说过，有多个 <code>subscribeOn()</code> 来对别观察者指定线程，只会有第一个起作用，但是多个 <code>subscribeOn()</code> 却可以影响 <code>doOnSubscribe()</code> 的执行线程。<br>先来测试一下我们的结论：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(@NonNull ObservableEmitter&lt;Integer&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"subscribe current thread : "</span>+Thread.currentThread().getName());</div><div class="line">        e.onNext(<span class="number">1</span>);</div><div class="line">        e.onComplete();</div><div class="line">    &#125;</div><div class="line">&#125;).subscribeOn(Schedulers.io())</div><div class="line">        .subscribeOn(AndroidSchedulers.mainThread())</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Log.i(TAG,<span class="string">"accept current thread : "</span>+Thread.currentThread().getName());</div><div class="line">                Log.i(TAG,<span class="string">"accept : "</span> + integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>这里通过 <code>subscribeOn</code> 两次指定被观察者执行线程，一个是IO线程，一个指定主线程。<br>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">I/RxJava: subscribe current thread : RxCachedThreadScheduler-1</div><div class="line">I/RxJava: accept current thread : RxCachedThreadScheduler-1</div><div class="line">I/RxJava: accept : 1</div></pre></td></tr></table></figure>
<p>执行在 IO 线程，是第一次指定生效。<br>上面例子稍加改动，再来看一下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(@NonNull ObservableEmitter&lt;Integer&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"subscribe current thread : "</span>+Thread.currentThread().getName());</div><div class="line">        e.onNext(<span class="number">1</span>);</div><div class="line">        e.onComplete();</div><div class="line">    &#125;</div><div class="line">&#125;).subscribeOn(Schedulers.io())</div><div class="line">        .doOnSubscribe(<span class="keyword">new</span> Consumer&lt;Disposable&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Disposable disposable)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Log.i(TAG,<span class="string">"doOnSubscribe current thread : "</span>+Thread.currentThread().getName());</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .subscribeOn(AndroidSchedulers.mainThread())</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Log.i(TAG,<span class="string">"accept current thread : "</span>+Thread.currentThread().getName());</div><div class="line">                Log.i(TAG,<span class="string">"accept : "</span> + integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">I/RxJava: doOnSubscribe current thread : main</div><div class="line">I/RxJava: subscribe current thread : RxCachedThreadScheduler-1</div><div class="line">I/RxJava: accept current thread : RxCachedThreadScheduler-1</div><div class="line">I/RxJava: accept : 1</div></pre></td></tr></table></figure>
<p>可以看到，<code>subscribeOn</code> 是可以重新指定 <code>doOnSubscribe</code> 的执行线程的。</p>
<h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><p><a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="external">http://gank.io/post/560e15be2dca930e00da1083</a></p>
]]></content>
    
    <summary type="html">
    
      本文介绍 RxJava 的基本概念以及简单使用，介绍 Observable 创建数据流的多种操作符的用法以及线程调度的方法和它们之间的区别。
    
    </summary>
    
      <category term="Android开源项目" scheme="http://yoursite.com/categories/Android%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Android开源项目" scheme="http://yoursite.com/tags/Android%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="RxJava" scheme="http://yoursite.com/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>Android -- 使用 TaskDescription 定制任务管理器 Title</title>
    <link href="http://yoursite.com/2017/10/08/android-knowledge-point-taskdescription/"/>
    <id>http://yoursite.com/2017/10/08/android-knowledge-point-taskdescription/</id>
    <published>2017-10-08T02:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>最近有个需求，就是要代码动态修改 APP 在任务管理器中名称显示，不要问我问什么有这样的需求，因为需求就这样。哈哈……<br>对于如何控制 APP 在任务管理器中的 Title，我们可能知道，可以通过在 AndroidManifest.xml 中设置 <code>application</code> 或者主 <code>activity</code> 的 <code>android:label</code> 来实现，而且 <code>activity</code> 的优先级高于 <code>application</code>，也就是说两者都设置这个标签的话，主 <code>activity</code> 的值覆盖 <code>application</code>,在桌面上的 APP 名称和 <code>activity</code> 的 <code>title</code> 的名称都是 <code>activity</code> 的 <code>label</code> 值。<br>但是 <code>label</code> 的值在代码中是无法进行动态设置的，而且 <code>ActivityInfo</code> 的生成是在 AMS 进程进行的，想要修改也不太容易，后面甚至想到了用 HOOK 技术 HOOK PMS 以及 AMS 相关 API 的方法。<br>由于一直想当然的认为任务管理器中也是读取的是 <code>ActivityInfo</code> 的 <code>labelRes</code> 或者 <code>nonLocalizedLabel</code> 来实现的，因此就一直在修改 <code>android:label</code> 上想办法。<br>这里再来个插曲介绍一下 <code>nonLocalizedLabel</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PackageItemInfo</span> </span>&#123;</div><div class="line">    ......</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> labelRes;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> CharSequence nonLocalizedLabel;</div><div class="line">    ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它是怎么赋值的呢？</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">TypedValue v = args.sa.peekValue(args.labelRes);</div><div class="line"><span class="keyword">if</span> (v != <span class="keyword">null</span> &amp;&amp; (outInfo.labelRes=v.resourceId) == <span class="number">0</span>) &#123;</div><div class="line">    outInfo.nonLocalizedLabel = v.coerceToString();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看明白了吗？<br>这里的 <code>labelRes</code> 就代表 <code>android:label</code> 的资源ID，如果资源ID为0,那么表示不是通过给资源ID的方式来赋值的，可能就直接给 <code>android:label</code> 了一个字符串。<br>类似这样的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:label=<span class="string">"Test"</span></div></pre></td></tr></table></figure>
<h2 id="使用TaskDescription"><a href="#使用TaskDescription" class="headerlink" title="使用TaskDescription"></a>使用TaskDescription</h2><p>后面通过查看任务管理器的源码发现，里面用到了一个 <code>TaskDescription</code>，通过获取 <code>TaskDescription</code> 来获得 Task 的 Title。<br><code>TaskDescription</code> 是 Android 5.0 加入的一个类，通过它可以设置或者获取任务列表里面的 <code>Activity</code> 信息。<br><code>Activity</code> 提供了 <code>setTaskDescription()</code> 方法，其需要 <code>TaskDescription</code> 实例，而 <code>TaskDescription</code> 提供了多个构造器，注意 <code>color</code> 传入必须是非透明。<br>在 <code>Activity</code> 里面使用下面代码解决了该需求问题：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String title = ...;</div><div class="line">Bitmap icon = ...;</div><div class="line">setTaskDescription(<span class="keyword">new</span> ActivityManager.TaskDescription(</div><div class="line">        title, icon, getResources().getColor(R.color.colorPrimary)));</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      介绍使用 TaskDescription 定制任务管理器 Title
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="TaskDescription" scheme="http://yoursite.com/tags/TaskDescription/"/>
    
  </entry>
  
  <entry>
    <title>Android 架构 android-architecture 之 todo-mvp 介绍</title>
    <link href="http://yoursite.com/2017/09/06/android-architecture-google-mvp-basic/"/>
    <id>http://yoursite.com/2017/09/06/android-architecture-google-mvp-basic/</id>
    <published>2017-09-06T02:00:00.000Z</published>
    <updated>2018-07-10T11:07:46.640Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>todo-mvp 是对 MVP 的一种基础的实现，里面没有用到其他的框架，下面来具体分析一下。<br><a href="https://github.com/googlesamples/android-architecture/tree/todo-mvp/" target="_blank" rel="external">Github地址</a></p>
<h2 id="源码简介"><a href="#源码简介" class="headerlink" title="源码简介"></a>源码简介</h2><p>按功能划分模块，包结构如图：</p>
<p><img src="/images/android-architecture-google-mvp-basic/image1.png" alt="效果图"></p>
<ol>
<li>tasks、addedittask、taskdetail和statistics：四个功能界面</li>
<li>data：数据层的代码，即 MVP 中的 Model 层</li>
<li>util：一些工具类</li>
<li>BasePresenter和BaseView：Presenter和View的基类</li>
</ol>
<p>各个包中的类：</p>
<p><img src="/images/android-architecture-google-mvp-basic/image2.png" alt="效果图"></p>
<h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><ol>
<li>定义一个协议类 <code>Contract</code>，它定义了两个接口 <code>View</code> 和 <code>Presenter</code>，分别继承自 V 和 P 的基类 <code>BaseView</code> 和 <code>BasePresenter</code>。</li>
<li>创建一个 <code>Presenter</code>，并实现协议类中的 <code>Presenter</code> 接口，实现<code>Presenter</code> 类的两个参数分别是 <code>TasksRepository</code> （M）和 <code>View</code> （V）实现类，建立 M 和 V 联系的桥梁。</li>
<li>在 <code>Activity</code> 中实例化 <code>Presenter</code>，建立 M 和 V 的联系，实例化 <code>Fragment</code>。</li>
<li>在 <code>Fragment</code> 中实现了 <code>View</code> 接口，作为 <code>View</code> （V）实现类。</li>
</ol>
<p>V 层监听用户的操作，并把用户的操作传递到P层，并把P层中的指令转化为UI操作，并呈现出来。<br>P 层建立 M 和 V 的联系，响应 V 层的操作并向 M 层获取数据，然后传递到 V 层。<br>M 层负责数据的存储与查询。</p>
<p>以 taskdetail 为例，用一个类图来展示它们的关系：</p>
<p><img src="http://www.plantuml.com/plantuml/svg/XLHBJiCm4Dtx55PNYL1xWYugg92Gg5JHgdjZ3wr5OaVsj1M2xhW5Kk_0XWqIjw5S0pjfVeQqMJbltlER6OyziiWChjE4p2KcG7kJnVIm_pZiNt_UFx_Vldg4I8LW7XW7EcVsqOuPifbU6mw4a4jcOI5XIuSl_NuU7mCocLnfXOPn7FWWwS2TQ31eYAuDMwQWa9IBSDUAaFjE3LZmkNMQLmnoAXYcKQj8K73Dj7UGQIjHcwSZgmRei9NDoIIADdJm6vsl-lnCBgW5h4ZHd6RbEYQxK5CNcGlzMKS1hIihBzXeARpThMP2gkMD4f8pLsDqhtK2J577bXk8A-fARoVIMiVrsqOnzLyPNKa1-PH5BK41pT0u5KN_4pSLOx3So0obLcrTCt1KYnewNsMxD_cs82GMYPU8W0GGsXZNQVONpLl1AjIvyuHP-y_uEh_JuqhJUWZE77VeqIog7uugJSFPxRop1RK8v7TuHqQWX7ieVW40" alt="效果图"></p>
<!--  
@startuml
Title "MVP架构类图"

interface TasksDataSource


BaseView <|-- TaskDetailContract.View
TaskDetailContract.View <|.. TaskDetailFragment
Fragment <|-- TaskDetailFragment

BasePresenter <|-- TaskDetailContract.Presenter
TaskDetailContract.Presenter <|.. TaskDetailPresenter

TasksDataSource <|.. TasksRepository

TasksRepository <-- TaskDetailPresenter
TaskDetailContract.View <-- TaskDetailPresenter

interface BaseView {
+ setPresenter(T presenter)
}

interface BasePresenter {
+ start()
}

interface TaskDetailContract.View {
+ void setLoadingIndicator(boolean active)
+ void showMissingTask()     
+ void hideTitle()
+ void showTitle(String title)
+ void hideDescription()
+ void showDescription(String description)
}

interface TaskDetailContract.Presenter {
+ void editTask()
+ void deleteTask()
+ void completeTask()
+ void activateTask()
}

class TaskDetailFragment {
- TaskDetailContract.Presenter mPresenter
+ setPresenter(T presenter)
}

class TaskDetailPresenter {
- TasksRepository mTasksRepository
- TaskDetailContract.View mTaskDetailView
}
@enduml
-->
<h3 id="V-和-P-的基类"><a href="#V-和-P-的基类" class="headerlink" title="V 和 P 的基类"></a>V 和 P 的基类</h3><p>先来看一下 V 的基类 <code>BaseView&lt;T&gt;</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseView</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setPresenter</span><span class="params">(T presenter)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>BaseView</code> 是一个泛型接口，里面只有一个抽象方法 <code>setPresenter(T presenter)</code> ，用来设置 Presenter 。<br>P 的基类 <code>BasePresenter</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BasePresenter</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它也只定义来一个方法 <code>start()</code>，用来在 <code>Activity</code> 或者 Fragm<code>ent</code> 的 <code>onResume()</code> 方法中调用，来进行数据的查询。</p>
<h3 id="功能模块"><a href="#功能模块" class="headerlink" title="功能模块"></a>功能模块</h3><ul>
<li>tasks：包括菜单抽屉界面，主界面显示任务列表</li>
<li>addedittask：点击添加任务界面</li>
<li>taskdetail：点击任务后的详情界面</li>
<li>statistics：任务统计界面，点击抽屉菜单可以弹出</li>
</ul>
<p>这四个包对应了四个功能界面，它们内部的结构大同小异，包括了：</p>
<ul>
<li>Activity</li>
<li>Fragment</li>
<li>Contract</li>
<li>Presenter</li>
</ul>
<p>那么我们就选取其中的 taskdetail 模块来进行介绍。</p>
<p>在 <code>TaskDetailActivity</code> 中实例化 <code>TaskDetailFragment</code>、<code>TasksRepository</code> 和 <code>TaskDetailPresenter</code>，其中 <code>TaskDetailFragment</code> 和 <code>TasksRepository</code> 作为 <code>TaskDetailPresenter</code> 的参数。<br>来看一下 <code>TaskDetailPresenter</code> 的构造函数：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">TaskDetailPresenter</span><span class="params">(@Nullable String taskId,</span></span></div><div class="line">                           @NonNull TasksRepository tasksRepository,</div><div class="line">                           @NonNull TaskDetailContract.View taskDetailView) &#123;</div><div class="line">    mTaskId = taskId;</div><div class="line">    mTasksRepository = checkNotNull(tasksRepository, <span class="string">"tasksRepository cannot be null!"</span>);</div><div class="line">    mTaskDetailView = checkNotNull(taskDetailView, <span class="string">"taskDetailView cannot be null!"</span>);</div><div class="line"></div><div class="line">    mTaskDetailView.setPresenter(<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这里调用了 <code>TaskDetailFragment</code> 的 <code>setPresenter</code> 方法来设置 P 模块。</p>
<p>分别调用 <code>TasksRepository</code>  和 <code>TaskDetailFragment</code> 的相应的方法来实现数据的操作以及视图的更新。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</div><div class="line">    openTask();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">openTask</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (Strings.isNullOrEmpty(mTaskId)) &#123;</div><div class="line">        mTaskDetailView.showMissingTask();</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mTaskDetailView.setLoadingIndicator(<span class="keyword">true</span>);</div><div class="line">    mTasksRepository.getTask(mTaskId, <span class="keyword">new</span> TasksDataSource.GetTaskCallback() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTaskLoaded</span><span class="params">(Task task)</span> </span>&#123;</div><div class="line">            <span class="comment">// The view may not be able to handle UI updates anymore</span></div><div class="line">            <span class="keyword">if</span> (!mTaskDetailView.isActive()) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            mTaskDetailView.setLoadingIndicator(<span class="keyword">false</span>);</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == task) &#123;</div><div class="line">                mTaskDetailView.showMissingTask();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                showTask(task);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDataNotAvailable</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="comment">// The view may not be able to handle UI updates anymore</span></div><div class="line">            <span class="keyword">if</span> (!mTaskDetailView.isActive()) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            mTaskDetailView.showMissingTask();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showTask</span><span class="params">(@NonNull Task task)</span> </span>&#123;</div><div class="line">    String title = task.getTitle();</div><div class="line">    String description = task.getDescription();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (Strings.isNullOrEmpty(title)) &#123;</div><div class="line">        mTaskDetailView.hideTitle();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        mTaskDetailView.showTitle(title);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (Strings.isNullOrEmpty(description)) &#123;</div><div class="line">        mTaskDetailView.hideDescription();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        mTaskDetailView.showDescription(description);</div><div class="line">    &#125;</div><div class="line">    mTaskDetailView.showCompletionStatus(task.isCompleted());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>TaskDetailFragment</code> 中调用 <code>TaskDetailPresenter</code> 的对应方法来实现数据的增删改查。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onResume();</div><div class="line">    mPresenter.start();</div><div class="line">&#125;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">    fab.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">            mPresenter.editTask();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">...</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (item.getItemId()) &#123;</div><div class="line">        <span class="keyword">case</span> R.id.menu_delete:</div><div class="line">            mPresenter.deleteTask();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showCompletionStatus</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> complete)</span> </span>&#123;</div><div class="line">    Preconditions.checkNotNull(mDetailCompleteStatus);</div><div class="line"></div><div class="line">    mDetailCompleteStatus.setChecked(complete);</div><div class="line">    mDetailCompleteStatus.setOnCheckedChangeListener(</div><div class="line">            <span class="keyword">new</span> CompoundButton.OnCheckedChangeListener() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCheckedChanged</span><span class="params">(CompoundButton buttonView, <span class="keyword">boolean</span> isChecked)</span> </span>&#123;</div><div class="line">                    <span class="keyword">if</span> (isChecked) &#123;</div><div class="line">                        mPresenter.completeTask();</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        mPresenter.activateTask();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Data-Model层"><a href="#Data-Model层" class="headerlink" title="Data Model层"></a>Data Model层</h3><p>App需要的数据都是通过Data模块来提供，由它去完成访问网络和数据库等。</p>
<p><img src="http://www.plantuml.com/plantuml/svg/dPB1IWCn48RlUOhGKqNR9-XXfO88RH5Rl8_9j0sTtPHaTa7KcsyXz1syU15y6-jh6BVhrYvn1M_9Fr--6S8adi5ndfAO6IQKdV7rvNRpijqyZgr6-dX-VNzwwmWn0x_oPy0mjRbJA0Vt_Ruimv5LGFjA2tc5Q-iDMtVR2gMMyOUlwjre8mUzNjpQ54H9OJ96DuTGRevo9uxb0hcCkyd4PfESI8uiw38Q0j4Dg9LKrU4ey8Kr-llH_isKdSaMaaDueKzadP_lmDzD7WeyL7tTIb7DA9kk2VcVtC5eDGkAJG5_E-DStAa8mGsh8NPVsAsB3kSE_RAHXhqBx2bHD6zj-Y0Ip7HOvqy0" alt="效果图"></p>
<ul>
<li>接口 <code>TasksDataSource</code> 定义了操作数据的各种方法。</li>
<li>类 <code>TasksLocalDataSource</code> 实现了<code>TasksDataSource</code> 接口，可以操作本地数据库来实现数据的存储和读取。 </li>
<li>类 <code>TasksRemoteDataSource</code> 实现了<code>TasksDataSource</code> 接口，用来模拟网络数据的读取上上传。</li>
<li>类 <code>TasksRepository</code> 实现了<code>TasksDataSource</code> 接口，提供来对数据访问的能力，它持有 <code>TasksLocalDataSource</code> 和 <code>TasksRemoteDataSource</code> 的对象，由它们真正实现对本地数据和网络数据的操作。</li>
</ul>
<h3 id="util工具类"><a href="#util工具类" class="headerlink" title="util工具类"></a>util工具类</h3><p>这部分不再介绍，想了解详情的看代码即可。</p>
]]></content>
    
    <summary type="html">
    
      介绍 Google 开源的 Android 架构中的 MVP 架构
    
    </summary>
    
      <category term="Android 架构" scheme="http://yoursite.com/categories/Android-%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Android 架构" scheme="http://yoursite.com/tags/Android-%E6%9E%B6%E6%9E%84/"/>
    
      <category term="android-architecture" scheme="http://yoursite.com/tags/android-architecture/"/>
    
  </entry>
  
  <entry>
    <title>Android 架构 android-architecture 简介</title>
    <link href="http://yoursite.com/2017/09/05/android-architecture-google-samples/"/>
    <id>http://yoursite.com/2017/09/05/android-architecture-google-samples/</id>
    <published>2017-09-05T02:00:00.000Z</published>
    <updated>2018-03-11T13:47:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>开发框架对于每个 Android 开发者来说也是必须要面对的话题，从 MVC 到 MVP，再到 MVVM。并不能说哪种框架说最好的，他们各有自己的特点，那么我们就需要从自己的项目实际出发来选择合适的架构。<br>Google 也给出了 Android 架构的示例，即 android-architecture。目前已经开源在 Github 上面供开发者学习使用。<br><a href="https://github.com/googlesamples/android-architecture/" target="_blank" rel="external">GitHub 地址</a><br>本文作为 android-architecture 开篇之作来简单介绍一下这个项目。</p>
<h2 id="源码简介"><a href="#源码简介" class="headerlink" title="源码简介"></a>源码简介</h2><p><code>git clone</code> 之后，用 <code>git branch -a</code> 来查看分支，每个分支代表一个简单的架构示例。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">* master</div><div class="line">  remotes/origin/HEAD -&gt; origin/master</div><div class="line">  remotes/origin/deprecated-todo-databinding</div><div class="line">  remotes/origin/deprecated-todo-mvp-contentproviders</div><div class="line">  remotes/origin/deprecated-todo-mvp-loaders</div><div class="line">  remotes/origin/dev-todo-mvp-clean-fix-memory-leak</div><div class="line">  remotes/origin/dev-todo-mvp-kotlin</div><div class="line">  remotes/origin/dev-todo-mvp-tablet</div><div class="line">  remotes/origin/dev-todo-mvvm-live</div><div class="line">  remotes/origin/dev-todo-mvvm-live-kotlin</div><div class="line">  remotes/origin/dev-todo-mvvm-rxjava</div><div class="line">  remotes/origin/master</div><div class="line">  remotes/origin/revert-375-feature/mikeBreaksThenHeFixes</div><div class="line">  remotes/origin/todo-mvp</div><div class="line">  remotes/origin/todo-mvp-clean</div><div class="line">  remotes/origin/todo-mvp-dagger</div><div class="line">  remotes/origin/todo-mvp-rxjava</div><div class="line">  remotes/origin/todo-mvvm-databinding</div><div class="line">  remotes/origin/todo-mvvm-live</div></pre></td></tr></table></figure>
<p><code>deprecated</code> 表示废弃的项目，<code>dev</code> 表示仍在完善中的项目。</p>
]]></content>
    
    <summary type="html">
    
      介绍 Google 开源的 Android 架构 android-architecture 中的各个项目
    
    </summary>
    
      <category term="Android 架构" scheme="http://yoursite.com/categories/Android-%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Android 架构" scheme="http://yoursite.com/tags/Android-%E6%9E%B6%E6%9E%84/"/>
    
      <category term="android-architecture" scheme="http://yoursite.com/tags/android-architecture/"/>
    
  </entry>
  
  <entry>
    <title>J2V8 -- 注册 Java 回调函数</title>
    <link href="http://yoursite.com/2017/08/10/open-source-j2v8-registerting-java-callback/"/>
    <id>http://yoursite.com/2017/08/10/open-source-j2v8-registerting-java-callback/</id>
    <published>2017-08-10T02:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文译自<a href="https://eclipsesource.com/blogs/2015/06/06/registering-java-callbacks-with-j2v8/" target="_blank" rel="external">Registering Java Callbacks with J2V8</a>，并加入了自己的一些理解。</p>
<p>使用 J2V8 时是可以使用 JavaScript 来调用 Java 的方法的，下面就介绍一些如何注册 Java 的回调函数来供 JavaScript 调用。</p>
<h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>在 JavaScript 中，函数也即是对象，可以被操作也可以被传递。在使用 J2V8 时，任何的 JavaScript 方法都可以映射到 Java 的方法之上，当这些方法被调用时，J2V8 就会调用 Java 的方法来代替，并把参数传递给 Java 的方法。</p>
<h2 id="注册-Java-方法"><a href="#注册-Java-方法" class="headerlink" title="注册 Java 方法"></a>注册 Java 方法</h2><p>Java 的方法可以通过两种方法注册为回调函数，可以通过实现 <code>JavaCallback</code> 接口来实现（如果没有返回值时，也可以通过 <code>JavaVoidCallback</code> 来实现），或者是反射地把已经实现的 Java 方法注册为回调函数。</p>
<h3 id="JavaCallback"><a href="#JavaCallback" class="headerlink" title="JavaCallback"></a>JavaCallback</h3><p>先来看下面一段代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">V8 v8 = V8.createV8Runtime();</div><div class="line">JavaVoidCallback callback = <span class="keyword">new</span> JavaVoidCallback() &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(<span class="keyword">final</span> V8Object receiver, <span class="keyword">final</span> V8Array parameters)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (parameters.length() &gt; <span class="number">0</span>) &#123;</div><div class="line">            Object arg1 = parameters.get(<span class="number">0</span>);</div><div class="line">            Log.e(<span class="string">"Test"</span>, <span class="string">"arg1 = "</span> + arg1);</div><div class="line">            <span class="keyword">if</span> (arg1 <span class="keyword">instanceof</span> Releasable) &#123;</div><div class="line">                ((Releasable) arg1).release();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">v8.registerJavaMethod(callback, <span class="string">"print"</span>);</div><div class="line">v8.executeScript(<span class="string">"print('hello, world');"</span>);</div><div class="line"></div><div class="line">v8.release();</div></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arg1 = hello, world</div></pre></td></tr></table></figure>
<p>上面的例子中创建了 <code>JavaVoidCallback</code> 的一个匿名内部类，把该类的一个实例注册为一个全局的作用域中的方法，并命名为 <code>print</code> 方法，那么我们在 JavaScript 中就可以向调用其他 JavaScript 的方法一样来调用 <code>print</code> 方法了。</p>
<h3 id="通过反射来注册"><a href="#通过反射来注册" class="headerlink" title="通过反射来注册"></a>通过反射来注册</h3><p>先来看下面一段代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Console</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(<span class="keyword">final</span> String message)</span> </span>&#123;</div><div class="line">        Log.i(<span class="string">"Test INFO"</span>,<span class="string">"[INFO] "</span> + message);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(<span class="keyword">final</span> String message)</span> </span>&#123;</div><div class="line">        Log.e(<span class="string">"Test ERROR"</span>,<span class="string">"[ERROR] "</span> + message);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</div><div class="line">    V8 v8 = V8.createV8Runtime();</div><div class="line">    Console console = <span class="keyword">new</span> Console();</div><div class="line">    V8Object v8Console = <span class="keyword">new</span> V8Object(v8);</div><div class="line">    v8.add(<span class="string">"console"</span>, v8Console);</div><div class="line">    v8Console.registerJavaMethod(console, <span class="string">"log"</span>, <span class="string">"log"</span>, <span class="keyword">new</span> Class&lt;?&gt;[] &#123; String.class &#125;);</div><div class="line">    v8Console.registerJavaMethod(console, <span class="string">"error"</span>, <span class="string">"error"</span>, <span class="keyword">new</span> Class&lt;?&gt;[] &#123; String.class &#125;);</div><div class="line">    v8Console.release();</div><div class="line">    v8.executeScript(<span class="string">"console.log('hello, world');"</span>);</div><div class="line">    v8.release();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[INFO] hello, world</div></pre></td></tr></table></figure>
<p>在上面的例子中，一个已经实现的类的方法被注册为回调函数。</p>
<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>参数可以从 JavaScript  传递到 Java，如果是通过实现 <code>JavaCallback</code> 来注册回调函数，那么参数会以 <code>V8Array</code> 的形式来传递。<code>V8Array</code> 包含了一些 <code>V8Object</code> 对象或者是一些原始数据。这些 <code>V8Array</code> 并不需要我们去释放，因为它不是由开发者创建的。但是任何从这个 <code>V8Array</code> 中获取的作为参数的 <code>V8Object</code> 都需要手动的进行释放，因为它们是作为方法调用的结果返回给你的。<br>如果方法是通过反射的方式进行注册的，那么这个方法的所有的参数类型都是已知的。在这种情形下，传递给 Javascript 函数的参数必须与作为它的回调函数的 Java 方法的一致。</p>
<h2 id="接收器"><a href="#接收器" class="headerlink" title="接收器"></a>接收器</h2><p>当 JavaScript 调用通过 Java 注册的回调函数时，这个被调用的 JavaScript 对象会作为第一个参数进行传递。<br>看下面一段 JavaScript 代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> array1 = [&#123;<span class="attr">first</span>:<span class="string">'Ian'</span>&#125;, &#123;<span class="attr">first</span>:<span class="string">'Jordi'</span>&#125;, &#123;<span class="attr">first</span>:<span class="string">'Holger'</span>&#125;];</div><div class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array1.length; i++ ) &#123;</div><div class="line">  print.call(array1[i], <span class="string">" says Hi."</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这中情况下 <code>print</code> 方法会被调用，并且 “says Hi.” 会被作为参数传递到 Java。但是当前的 JavaScript 会作为一个接收器被传递过来。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonPrinter</span> <span class="keyword">implements</span> <span class="title">JavaVoidCallback</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(<span class="keyword">final</span> V8Object receiver, <span class="keyword">final</span> V8Array parameters)</span> </span>&#123;</div><div class="line">        Log.e(<span class="string">"Test"</span>,receiver.getString(<span class="string">"first"</span>) + parameters.get(<span class="number">0</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReceiver</span><span class="params">()</span> </span>&#123;</div><div class="line">    V8 v8 = V8.createV8Runtime();</div><div class="line">    v8.registerJavaMethod(<span class="keyword">new</span> PersonPrinter(), <span class="string">"print"</span>);</div><div class="line">    v8.executeVoidScript(<span class="string">""</span></div><div class="line">            + <span class="string">"var array1 = [&#123;first:'Ian'&#125;, &#123;first:'Jordi'&#125;, &#123;first:'Holger'&#125;];\n"</span></div><div class="line">            + <span class="string">"for ( var i = 0; i &lt; array1.length; i++ ) &#123;\n"</span></div><div class="line">            + <span class="string">"  print.call(array1[i], \" says Hi.\");\n"</span></div><div class="line">            + <span class="string">"&#125;\n"</span>);</div><div class="line">    v8.release();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Ian says Hi.</div><div class="line">Jordi says Hi.</div><div class="line">Holger says Hi.</div></pre></td></tr></table></figure>
<p>把调用者也打印出来了。</p>
<h2 id="V8Function-类"><a href="#V8Function-类" class="headerlink" title="V8Function 类"></a>V8Function 类</h2><p>在 J2V8 3.0 版本中，引入了一种 <code>V8Function</code> 类。<code>V8Function</code> 类是 <code>V8Object</code> 的子类，只要一个函数通过是 <code>getObject()</code> 调用被返回的话，那么返回的就是一个 <code>V8Function</code> 对象。<code>V8Function</code> 类有一个 <code>call()</code> 方法，可以使用它来在 Java 中调用 JavaScript 方法。</p>
]]></content>
    
    <summary type="html">
    
      介绍 J2V8 如何注册 Java 回调函数
    
    </summary>
    
      <category term="V8" scheme="http://yoursite.com/categories/V8/"/>
    
    
      <category term="V8" scheme="http://yoursite.com/tags/V8/"/>
    
      <category term="J2V8" scheme="http://yoursite.com/tags/J2V8/"/>
    
  </entry>
  
  <entry>
    <title>J2V8 -- 开始使用J2V8</title>
    <link href="http://yoursite.com/2017/08/07/open-source-j2v8-getting-started/"/>
    <id>http://yoursite.com/2017/08/07/open-source-j2v8-getting-started/</id>
    <published>2017-08-07T02:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文译自<a href="https://eclipsesource.com/blogs/tutorials/getting-started-with-j2v8/" target="_blank" rel="external">Getting Started With J2V8</a>，并加入了自己的一些理解。</p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>J2V8 是对 Google 的目前非常流行的 JavaScript 引擎 V8 的 Java 封装，J2V8 的开发使 Android 高效执行 JavaScript 带来了可能。<a href="https://tabrisjs.com/" target="_blank" rel="external">Tabris.js</a> 就是基于 J2V8 开发的一款移动端 App。J2V8 可以运行在 Windows，Linux 以及 Mac OS 上面。这篇入门教程主要来介绍如何使用J2V8来在Android上面运行JavaScript脚本。<br><a href="https://github.com/eclipsesource/J2V8" target="_blank" rel="external">Github源码地址</a><br>J2V8 非常注重性能和内存的消耗，为了达到这些目的在设计的时候做了很大的努力。<br>如果一段 Javascript 代码的执行结果是一个32位整数，那么它可以直接作为一个原始类型被访问，而不必转化为一个包装类的实例。这对于64位的浮点数（doubles）和布尔类型的数据来说同样是适用的。<br>J2V8 使用了一套“懒加载”技术，也就是说，一个 JavaScript 只有在它被需要使用的时候才会通过 JNI 复制到 Java 中，如果 Javascript 返回了一个大型的数组，这个数组的内容直到数组中的元素的被需要的时候才会被加载到 Java 中。<br>J2V8 仅仅是对 V8 的 Java 封装并暴露出来一系列的接口供 Java 调用，V8 引擎是用 C++ 写的，为了使用 V8，就需要使用JNI来进行调用。C++ 中需要开发者进行内存管理，有申请就需要有对应的释放。V8 的垃圾回收器会帮助我们做一些工作，但是一些 Native 的一些句柄对象如果不再使用的时候仍然需要我们调用 <code>release()</code> 去释放它们。<br>如果有内存泄漏，当程序运行结束时会有一些报告，比如会有一些打印和异常抛出。</p>
<h2 id="J2V8的使用"><a href="#J2V8的使用" class="headerlink" title="J2V8的使用"></a>J2V8的使用</h2><p>J2V8目前支持的平台</p>
<ul>
<li>j2v8</li>
<li>j2v8_android</li>
<li>j2v8_android_armv7l</li>
<li>j2v8_android_x86</li>
<li>j2v8_linux_x86_64</li>
<li>j2v8_macosx_x86_64</li>
<li>j2v8_win32_x86</li>
<li>j2v8_win32_x86_64</li>
</ul>
<p>仅介绍在 Android 环境下的使用。</p>
<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>在build.gradle中添加依赖：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile &apos;com.eclipsesource.j2v8:j2v8:4.5.0@aar&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><p>运行下面一段 Hello World 代码，这段脚本将两个字符串连接起来并且返回了结果字符串的长度：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">var</span> hello = <span class="string">'hello, '</span>;</div><div class="line"> <span class="keyword">var</span> world = <span class="string">'world!'</span>;</div><div class="line">hello.concat(world).length;</div></pre></td></tr></table></figure>
<p>要使用J2V8，首先你必须创建一个运行时环境，J2V8为此提供了一个静态工厂方法。在创建一个运行时环境时，同时也会加载J2V8的本地库。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">V8 runtime = V8.createV8Runtime();</div><div class="line"><span class="keyword">int</span> result = runtime.executeIntegerScript(<span class="string">""</span></div><div class="line">        + <span class="string">"var hello = 'hello, ';\n"</span></div><div class="line">        + <span class="string">"var world = 'world!';\n"</span></div><div class="line">        + <span class="string">"hello.concat(world).length;\n"</span>);</div><div class="line">Log.e(<span class="string">"Test"</span>,<span class="string">"JS result = "</span>+result);</div><div class="line">runtime.release();</div></pre></td></tr></table></figure>
<p>会打印：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">JS result = 13</div></pre></td></tr></table></figure>
<p>为了执行脚本，它提供了多个基于不同返回值的执行方法。在这个例子里，我们使用了 <code>executeIntegerScript()</code> 这个方法，因为脚本执行的结果是一个int类型的整数，并且不需要任何的类型转换和包装。当应用结束时，运行时环境必须被释放。<br>稍微改动一下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">V8 runtime = V8.createV8Runtime();</div><div class="line">String result = runtime.executeStringScript(<span class="string">""</span></div><div class="line">        + <span class="string">"var hello = 'hello, ';\n"</span></div><div class="line">        + <span class="string">"var world = 'world!';\n"</span></div><div class="line">        + <span class="string">"hello.concat(world);\n"</span>);</div><div class="line">Log.e(<span class="string">"Test"</span>,<span class="string">"JS result = "</span>+result);</div><div class="line">runtime.release();</div></pre></td></tr></table></figure>
<p>会打印：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">JS result = hello, world!</div></pre></td></tr></table></figure>
<p>这里我们使用 <code>executeStringScript()</code> 方法返回的是一个 <code>String</code> 的对象。</p>
<h2 id="获取Javascript对象"><a href="#获取Javascript对象" class="headerlink" title="获取Javascript对象"></a>获取Javascript对象</h2><p>使用J2V8你可以从Java中获取javascript对象的句柄，下面用一段代码来演示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">testJ2V8</span><span class="params">()</span></span>&#123;</div><div class="line">    V8 runtime = V8.createV8Runtime();</div><div class="line">    runtime.executeVoidScript(<span class="string">""</span></div><div class="line">            + <span class="string">"var person = &#123;&#125;;\n"</span></div><div class="line">            + <span class="string">"var hockeyTeam = &#123;name : 'WolfPack'&#125;;\n"</span></div><div class="line">            + <span class="string">"person.first = 'Ian';\n"</span></div><div class="line">            + <span class="string">"person['last'] = 'Bull';\n"</span></div><div class="line">            + <span class="string">"person.hockeyTeam = hockeyTeam;\n"</span>);</div><div class="line"></div><div class="line">    V8Object person = runtime.getObject(<span class="string">"person"</span>);</div><div class="line">    V8Object hockeyTeam = person.getObject(<span class="string">"hockeyTeam"</span>);</div><div class="line">    Log.e(<span class="string">"Test"</span>,<span class="string">" JS result name = "</span>+hockeyTeam.getString(<span class="string">"name"</span>));</div><div class="line">    person.release();</div><div class="line">    hockeyTeam.release();</div><div class="line"></div><div class="line">    runtime.release();</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">JS result name = WolfPack</div></pre></td></tr></table></figure>
<p>因为 <code>V8Object</code> 是底层 Javascript 对象的引用，那么我们也可以对这个对象进行操作，比如现在为Javascript增加新的属性，比如 <code>hockeyTeam.add(&quot;captain&quot;, person);</code> 在进行了这一步操作之后，新添加的属性 <code>captain</code> 可以在Javascript中立刻被访问到。以下代码可以验证这一点：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hockeyTeam.add(<span class="string">"captain"</span>, person);</div><div class="line">Log.e(<span class="string">"Test"</span>,<span class="string">" JS result  "</span>+runtime.executeBooleanScript(<span class="string">"person === hockeyTeam.captain"</span>));</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">JS result  true</div></pre></td></tr></table></figure>
<h2 id="V8Array"><a href="#V8Array" class="headerlink" title="V8Array"></a>V8Array</h2><p><code>V8Array</code> 继承自 <code>V8Object</code>，因此提供了相同的存取器方法（accessor / mutator methods，相当于setter / getter方法）。除此之外，<code>V8Array</code> 的元素也可以通过索引来进行访问。<code>V8Object</code> 和 <code>V8Array</code> 都遵循了流式编程模型 ，这使得创建新的JavaScript对象变得非常简单。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">V8Object player1 = <span class="keyword">new</span> V8Object(runtime).add(<span class="string">"name"</span>, <span class="string">"John"</span>);</div><div class="line">V8Object player2 = <span class="keyword">new</span> V8Object(runtime).add(<span class="string">"name"</span>, <span class="string">"Chris"</span>);</div><div class="line">V8Array players = <span class="keyword">new</span> V8Array(runtime).push(player1).push(player2);</div><div class="line">hockeyTeam.add(<span class="string">"players"</span>, players);</div><div class="line">player1.release();</div><div class="line">player2.release();</div><div class="line">players.release();</div></pre></td></tr></table></figure>
<h2 id="调用JavaScript函数"><a href="#调用JavaScript函数" class="headerlink" title="调用JavaScript函数"></a>调用JavaScript函数</h2><p>除了执行JavaScript脚本，也可以使用J2V8来调用JavaScript函数。既可以返回一个结果，也可以没有返回值。请看以下javascript函数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> hockeyTeam = &#123;</div><div class="line">     <span class="attr">name</span>      : <span class="string">'WolfPack'</span>,</div><div class="line">     <span class="attr">players</span>   : [],</div><div class="line">     <span class="attr">addPlayer</span> : <span class="function"><span class="keyword">function</span>(<span class="params">player</span>) </span>&#123;</div><div class="line">                   <span class="keyword">this</span>.players.push(player);</div><div class="line">                   <span class="keyword">return</span> <span class="keyword">this</span>.players.size;</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为了在Java中调用上述对象中的函数，我们仅仅只需要一个 <code>hockeyTeam</code> 的句柄。通过这个对象句柄，我们可以向执行脚本一样执行函数。不同与脚本的是，可以传递给函数一个 <code>V8Array</code> 作为它的参数。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">V8 runtime = V8.createV8Runtime();</div><div class="line">runtime.executeVoidScript(<span class="string">""</span></div><div class="line">        + <span class="string">"var hockeyTeam = &#123;\n"</span></div><div class="line">        + <span class="string">"name      : 'WolfPack',\n"</span></div><div class="line">        + <span class="string">"players   : [],\n"</span></div><div class="line">        + <span class="string">"addPlayer : function(player) &#123;\n"</span></div><div class="line">        + <span class="string">"              this.players.push(player);\n"</span></div><div class="line">        + <span class="string">"              return this.players.length;\n"</span></div><div class="line">        + <span class="string">"&#125;\n"</span></div><div class="line">        + <span class="string">"&#125;\n"</span>);</div><div class="line"></div><div class="line">V8Object hockeyTeam = runtime.getObject(<span class="string">"hockeyTeam"</span>);</div><div class="line">V8Object player1 = <span class="keyword">new</span> V8Object(runtime).add(<span class="string">"name"</span>, <span class="string">"John"</span>);</div><div class="line">V8Array parameters = <span class="keyword">new</span> V8Array(runtime).push(player1);</div><div class="line"><span class="keyword">int</span> size = hockeyTeam.executeIntegerFunction(<span class="string">"addPlayer"</span>, parameters);</div><div class="line">Log.e(<span class="string">"Test"</span>, <span class="string">"JS result size = "</span>+size);</div><div class="line">parameters.release();</div><div class="line">player1.release();</div><div class="line">hockeyTeam.release();</div><div class="line">runtime.release();</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">JS result size = 1</div></pre></td></tr></table></figure>
<p>参数数组的元素被映射为 JavaSscrip t函数的参数。参数数组元素的数量和在函数中声明的参数的数量不必相符，<code>undefined</code> 会被作为默认的值。</p>
]]></content>
    
    <summary type="html">
    
      介绍 J2V8 的基本用法，如何在 Android 中使用 J2V8，如何通过 Java 来调用 JavaScript 的对象和方法。
    
    </summary>
    
      <category term="V8" scheme="http://yoursite.com/categories/V8/"/>
    
    
      <category term="V8" scheme="http://yoursite.com/tags/V8/"/>
    
      <category term="J2V8" scheme="http://yoursite.com/tags/J2V8/"/>
    
  </entry>
  
  <entry>
    <title>WebApp 和 NativeApp 的世纪之战</title>
    <link href="http://yoursite.com/2017/08/05/mobile-internet-webapp-vs-nativeapp/"/>
    <id>http://yoursite.com/2017/08/05/mobile-internet-webapp-vs-nativeapp/</id>
    <published>2017-08-05T02:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>自从Android系统在手机上应用开始，在移动端 Native App 和 Web App之间的战争似乎就没有停止过，Web App 及其各种变体向Native App 发起了无数次的冲锋，但Native App的地位仍然是岿然不动，甚至我们一提起移动互联网，就专指 Native App。这和 PC 端的景象完全不一样。随着轻应用、Hybrid App 、React Native、Weex已经微信小程序的出现，我们不得不再一次审视这个问题。</p>
<h2 id="WebApp的特点"><a href="#WebApp的特点" class="headerlink" title="WebApp的特点"></a>WebApp的特点</h2><p>WebApp 之所以有资本向 Native App 发起挑战，那么它自身还是有实力的：</p>
<ul>
<li>跨平台：所有系统都能运行，Android、IOS和Web</li>
<li>免安装：打开浏览器，就能使用</li>
<li>快速部署：升级只需在服务器更新代码</li>
<li>超链接：可以与其他网站互连，可以被搜索引擎检索</li>
</ul>
<p>Web在PC端的这些优点，使得互联网和原生应用分庭抗礼，除了一些工具性的软件，一个浏览器基本可以满足我们的日常需要：购物，娱乐等等。<br>但是移动互联网毕竟不是PC互联网，它的一些缺点也限制了它的使用。</p>
<ul>
<li>体验差。手机App的操作流畅性，远超网站。</li>
<li>业界不支持。所有公司的移动端开发重点，几乎都是原生app。</li>
<li>用户不在乎。大多数用户都选择使用手机app，而不是网站。</li>
</ul>
<p>那么，之所以业界不支持和用户不在乎的原因无非就是性能差，从而造成用户体验差。</p>
<h2 id="WebApp的性能问题"><a href="#WebApp的性能问题" class="headerlink" title="WebApp的性能问题"></a>WebApp的性能问题</h2><p>Web app输给Native app的地方，不是界面（UI），而是操作性能。</p>
<ul>
<li>Web基于DOM，而DOM很慢。浏览器打开网页时，需要解析文档，在内存中生成DOM结构，如果遇到复杂的文档，这个过程是很慢的。可以想象一下，如果网页上有上万个、甚至几十万个形状（不管是图片或CSS），生成DOM需要多久？更不要提与其中某一个形状互动了。</li>
<li>DOM拖慢JavaScript。所有的DOM操作都是同步的，会堵塞浏览器。JavaScript 操作 DOM 时，必须等前一个操作结束，才能执行后一个操作。只要一个操作有卡顿，整个网页就会短暂失去响应。浏览器重绘网页的频率是60FPS（即16毫秒/帧），JavaScript 做不到在16毫秒内完成 DOM 操作，因此产生了跳帧。用户体验上的不流畅、不连贯就源于此。</li>
<li>虽然现在浏览器也支持多线程，比如JS解析在一个线程，渲染在一个线程，但一般是按照先解析再渲染再执行 JS 这样的顺序执行的。</li>
<li>在Android早期的版本中，webview的性能很差</li>
</ul>
<p>上面这些原因，对于PC还不至于造成严重的性能问题，但是手机的硬件资源相对有限，用户互动又相对频繁，结果跟 Native App 一比，就完全落在了下风。</p>
<h2 id="WebApp的优化方向"><a href="#WebApp的优化方向" class="headerlink" title="WebApp的优化方向"></a>WebApp的优化方向</h2><ul>
<li>多线程浏览器。每个网页应该由多个线程进行处理，主线程只负责布局和渲染，而且应该在16毫秒内完成。Mozilla 的 Servo 就是这样一个项目，JS解析，页面渲染和JS执行在三个能并发执行的任务中进行。Chrome也支持多线程。</li>
<li>多进程浏览器。</li>
<li>并发布局。把页面中那些不会影响其它元素属性的独立部分识别出来，让它们与剩余部分并行渲染。</li>
<li>DOM 的异步操作。JavaScript 对 DOM 的操作不再是同步的，而是触发后，交给Event Loop机制进行监听。</li>
<li>非 DOM 方案。浏览器不再将网页处理成 DOM 结构，而是变为其他结构。React 的 Virtual DOM 方案就是这一类的尝试，还有更激进的方案，比如用数据库取代 DOM。</li>
<li>采用原生的渲染方案。布局的解析在JS端完成，渲染在Native端完成。</li>
<li>优化WebView性能，目前chromium支持硬件渲染。</li>
</ul>
<p>目前，WebView以及JS引擎的优化日新月异，因此，我们相信可以带动WebApp的崛起。</p>
<h2 id="WebApp的进化史"><a href="#WebApp的进化史" class="headerlink" title="WebApp的进化史"></a>WebApp的进化史</h2><p><img src="/images/mobile-internet-webapp-vs-nativeapp/webapp-evolution.png" alt="效果图"></p>
<p><img src="/images/mobile-internet-webapp-vs-nativeapp/webapps.png" alt="效果图"></p>
<!--           
M站、轻应用 -> PWA -> HybridApp -> React Native、Weex
                                -> DCloud、APICloud、AppCan -> 微信小程序、支付宝小程序

 - M站、轻应用：
   - 代表的是在手机浏览器上浏览网页，这个和PC端是没有差别的。这个阶段还不能称为应用，称为Web，它还是采用传统的B/S结构，强烈依赖浏览器和网络，离线能力可以忽略不计。
 - PWA：
   - 本质其实为web，依赖与浏览器的支持，只是针对移动端进行了优化，加入了推送、缓存、添加至launcher，自定义启动画面等符合Native应用设计标准的接口，是对Web app的一种扩展，使得Web app在界面和功能上更像Native app。
 - HybridApp：
   - H5+WebView+原生的开发模式，部分功能用纯 Web 来实现。
 - React Native、Weex：
   - 扩展 JS 实现 UI，原生渲染。既有Native的体验，又有JS的开发效率
   - 具有调用和扩展原生组件以及系统API的能力
   - ReactNative 原生渲染，虚拟 Dom；weex 采用真实 Dom。
   - ReactNative UI用ReactJS实现；Weex UI用Vue.js实现 
 - DCloud、APICloud、AppCan： 
   - 这一类可以归结为HTML5+应用，C/S结构，Web渲染
   - 支持对原生API的调用及扩展。
   - 运行需要在官方提供的基座上运行
   - 比起纯Web应用，性能和体验会提升很多
 - 微信小程序、支付宝小程序：
   - 微信小程序是微信全新定义的规范，是基于 xml+js 的，不支持也不兼容 HTML，兼容受限的部分 CSS 写法。是基于 xml 和 js 定义的一套标记语言、全新的生态、一个轻OS。
   - 它是C/S架构的。
   - 具有调用原生系统API的能力。

把小程序放在后面是觉得背靠微信这座大山，它更有机会把这个生态做起来。
-->
<h2 id="WebApp的未来"><a href="#WebApp的未来" class="headerlink" title="WebApp的未来"></a>WebApp的未来</h2><p><a href="https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2650994254&amp;idx=1&amp;sn=b5a291309cb35e229bdc66052200a39f&amp;chksm=bdbf0e1d8ac8870bd7a6a1b80cd6dbc906251c8b31ea5959419846b312b3b84b8048aa05cc3f&amp;mpshare=1&amp;scene=2&amp;srcid=0928TYbsbovyAI1YJ7aXvfl9&amp;from=timeline&amp;isappinstalled=0&amp;key=9289b6ec21f92a5928c971e763199c62958da88ae7805f55d3594ba99548c4cba2da3c66d7d31038140a81ad4b95694b&amp;ascene=2&amp;uin=MjgyMTI0MDAzMg==&amp;devicetype=android-21&amp;version=26031933&amp;nettype=WIFI&amp;pass_ticket=9nkAV8PvXod8+giTIP0YLiH5aU7EbFOiU8wA5OZrfdzQWSgzai7BiNlh3Ko9rg9y&amp;wx_header=1" target="_blank" rel="external">微信小程序，大多数人误解的8个问题 </a>这篇文章写的很好，大家可以阅读一下。</p>
<p>小程序和直达服务等形态应该是移动端App的未来，在移动互联网下半场你想打开一个应用，可能就不需要去应用商店下载个App，等下载完安装后使用，只需要打开微信就行了，找到相关应用就可以了。<br>直达服务依据手机OS生态，可以做到与手机系统服务的紧密结合，小程序依据微信生态，但绝不是把微信作为一个入口或者是作为一个应用商店这么简单的事，它的野心是一个OS生态。</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.ruanyifeng.com/blog/2015/02/future-of-dom.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2015/02/future-of-dom.html</a><br><a href="https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2650994254&amp;idx=1&amp;sn=b5a291309cb35e229bdc66052200a39f&amp;chksm=bdbf0e1d8ac8870bd7a6a1b80cd6dbc906251c8b31ea5959419846b312b3b84b8048aa05cc3f&amp;mpshare=1&amp;scene=2&amp;srcid=0928TYbsbovyAI1YJ7aXvfl9&amp;from=timeline&amp;isappinstalled=0&amp;key=9289b6ec21f92a5928c971e763199c62958da88ae7805f55d3594ba99548c4cba2da3c66d7d31038140a81ad4b95694b&amp;ascene=2&amp;uin=MjgyMTI0MDAzMg==&amp;devicetype=android-21&amp;version=26031933&amp;nettype=WIFI&amp;pass_ticket=9nkAV8PvXod8+giTIP0YLiH5aU7EbFOiU8wA5OZrfdzQWSgzai7BiNlh3Ko9rg9y&amp;wx_header=1" target="_blank" rel="external">https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2650994254&amp;idx=1&amp;sn=b5a291309cb35e229bdc66052200a39f&amp;chksm=bdbf0e1d8ac8870bd7a6a1b80cd6dbc906251c8b31ea5959419846b312b3b84b8048aa05cc3f&amp;mpshare=1&amp;scene=2&amp;srcid=0928TYbsbovyAI1YJ7aXvfl9&amp;from=timeline&amp;isappinstalled=0&amp;key=9289b6ec21f92a5928c971e763199c62958da88ae7805f55d3594ba99548c4cba2da3c66d7d31038140a81ad4b95694b&amp;ascene=2&amp;uin=MjgyMTI0MDAzMg==&amp;devicetype=android-21&amp;version=26031933&amp;nettype=WIFI&amp;pass_ticket=9nkAV8PvXod8+giTIP0YLiH5aU7EbFOiU8wA5OZrfdzQWSgzai7BiNlh3Ko9rg9y&amp;wx_header=1</a><br><a href="http://36kr.com/p/209983.html" target="_blank" rel="external">http://36kr.com/p/209983.html</a><br><a href="http://naotu.baidu.com/file/1eb556f3380e8189be859348527ec518?token=a5a049eb4c618e70" target="_blank" rel="external">http://naotu.baidu.com/file/1eb556f3380e8189be859348527ec518?token=a5a049eb4c618e70</a></p>
<!--           
http://blog.csdn.net/u011643473/article/details/43192083
http://blog.csdn.net/talking12391239/article/details/21168489
http://www.imweb.io/topic/58e3bfa845e5c13468f567d5
https://www.baidu.com/s?word=weex+react+native+%E5%B0%8F%E7%A8%8B%E5%BA%8F&tn=50000021_hao_pg&ie=utf-8&sc=UWd1pgw-pA7EnHc1FMfqnHRsPWfsP1TdPH0drauW5y99U1Dznzu9m1YLrHD4PHbdP6&ssl_sample=s_4%2Cs_30&srcqid=1343649615270981180
http://www.bijishequ.com/detail/356228?p=
http://www.jianshu.com/p/20a3d10a4d57
https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&mid=2650994254&idx=1&sn=b5a291309cb35e229bdc66052200a39f&chksm=bdbf0e1d8ac8870bd7a6a1b80cd6dbc906251c8b31ea5959419846b312b3b84b8048aa05cc3f&mpshare=1&scene=2&srcid=0928TYbsbovyAI1YJ7aXvfl9&from=timeline&isappinstalled=0&key=9289b6ec21f92a5928c971e763199c62958da88ae7805f55d3594ba99548c4cba2da3c66d7d31038140a81ad4b95694b&ascene=2&uin=MjgyMTI0MDAzMg==&devicetype=android-21&version=26031933&nettype=WIFI&pass_ticket=9nkAV8PvXod8+giTIP0YLiH5aU7EbFOiU8wA5OZrfdzQWSgzai7BiNlh3Ko9rg9y&wx_header=1
http://naotu.baidu.com/file/1eb556f3380e8189be859348527ec518?token=a5a049eb4c618e70
http://blog.csdn.net/edu_enth/article/details/56007422
-->
]]></content>
    
    <summary type="html">
    
      分析一下WebApp的特点、性能问题、优化方向、进化史以及未来发展方向
    
    </summary>
    
      <category term="移动互联网" scheme="http://yoursite.com/categories/%E7%A7%BB%E5%8A%A8%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
    
      <category term="WebApp" scheme="http://yoursite.com/tags/WebApp/"/>
    
      <category term="NativeApp" scheme="http://yoursite.com/tags/NativeApp/"/>
    
  </entry>
  
  <entry>
    <title>Android：使用JitPack发布Github开源库</title>
    <link href="http://yoursite.com/2017/07/21/android-use-jitpack-to-publish-github-project/"/>
    <id>http://yoursite.com/2017/07/21/android-use-jitpack-to-publish-github-project/</id>
    <published>2017-07-21T02:00:00.000Z</published>
    <updated>2018-08-12T09:06:02.902Z</updated>
    
    <content type="html"><![CDATA[<p>JitPack 是一个发布流程非常简单的自定义的 Maven 仓库，可以用来发布自己的 JVM 或者 Android 开源库。<br>JitPack 的官方文档在这里 <a href="https://jitpack.io/docs/ANDROID/" target="_blank" rel="external">Publish an Android library</a>。<br>参考我的Github上面一个<a href="https://github.com/heqiangflytosky/FastScrollWebView" target="_blank" rel="external">开源项目</a>。<br>下面来介绍一下使用JitPack发布一个开源项目的步骤。</p>
<h2 id="GitHub准备"><a href="#GitHub准备" class="headerlink" title="GitHub准备"></a>GitHub准备</h2><h3 id="代码准备"><a href="#代码准备" class="headerlink" title="代码准备"></a>代码准备</h3><p>首先将需要发布的library工程准备好。<br>打开根目录的build.gradle，在 dependencies 节点添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    ...</div><div class="line">    dependencies &#123;</div><div class="line">        ...</div><div class="line">        classpath &apos;com.github.dcendents:android-maven-gradle-plugin:1.3&apos;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如图：</p>
<p><img src="/images/android-use-jitpack-to-publish-github-project/jitpack-root-gradle.png" alt="效果图"></p>
<p>然后打开 library/build.gradle，添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">apply plugin: &apos;com.github.dcendents.android-maven&apos;</div><div class="line">group=&apos;com.github.&lt;YourUsername&gt;&apos;</div><div class="line">...</div></pre></td></tr></table></figure>
<p>如图：<br><img src="/images/android-use-jitpack-to-publish-github-project/jiapack-lib-gradle.png" alt="效果图"></p>
<p>检查一下工程的 gradle/wrapper/ 目录下面是否有下面两个文件，并检查一下确保这两个文件没有添加到.gitignore文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gradle-wrapper.jar</div><div class="line">gradle-wrapper.properties</div></pre></td></tr></table></figure>
<p>如果没有的话用<code>gradle wrappe</code>和<code>./gradlew install</code>生成一下。<br>然后就可以把工程push到Github上面。</p>
<h3 id="Github配置"><a href="#Github配置" class="headerlink" title="Github配置"></a>Github配置</h3><p>push到Github上以后，要添加一个Release版本，如图点击项目中的 release 按钮：</p>
<p><img src="/images/android-use-jitpack-to-publish-github-project/jitpack-github-add-release.png" alt="效果图"></p>
<p>如果还没有发布过版本，点击Create a new release 按钮，如果以前发布过，点击 Draft a new release，然后填写版本信息：</p>
<p><img src="/images/android-use-jitpack-to-publish-github-project/jiapack-github-add-version.png" alt="效果图"></p>
<p>填写完成后点击Publish release。</p>
<h2 id="发布到jitpack"><a href="#发布到jitpack" class="headerlink" title="发布到jitpack"></a>发布到jitpack</h2><p>复制项目地址，打开 <a href="https://jitpack.io/" target="_blank" rel="external">https://jitpack.io/</a> ，把项目地址粘贴到输入框，然后点击 look up 然后就可以看到你创建的开源库了：</p>
<p><img src="/images/android-use-jitpack-to-publish-github-project/gitpack-look-up.png" alt="效果图"></p>
<p>点击 get it，在页面下方就可以看到使用方法了。</p>
<p><img src="/images/android-use-jitpack-to-publish-github-project/jitpack-get-it.png" alt="效果图"></p>
<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="Error-Unable-to-load-class-‘org-gradle-internal-logging-LoggingManagerInternal"><a href="#Error-Unable-to-load-class-‘org-gradle-internal-logging-LoggingManagerInternal" class="headerlink" title="Error:Unable to load class ‘org.gradle.internal.logging.LoggingManagerInternal"></a>Error:Unable to load class ‘org.gradle.internal.logging.LoggingManagerInternal</h3><p><img src="/images/android-use-jitpack-to-publish-github-project/jitpack-error-1.png" alt="效果图"></p>
<p>gradle 版本和 android-maven-gradle-plugin 版本不协调，我原来用的gradle版本是1.3.0，android-maven-gradle-plugin版本是1.5，把android-maven-gradle-plugin版本改为1.3就可以了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">classpath &apos;com.android.tools.build:gradle:1.3.0&apos;</div><div class="line">classpath &apos;com.github.dcendents:android-maven-gradle-plugin:1.3&apos;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      介绍使用JitPack发布Github开源库的流程
    
    </summary>
    
      <category term="开发工具" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="开发工具" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="JitPack" scheme="http://yoursite.com/tags/JitPack/"/>
    
  </entry>
  
  <entry>
    <title>Android 线程 -- ConditionVariable 用法</title>
    <link href="http://yoursite.com/2017/07/10/android-thread-conditionvariable/"/>
    <id>http://yoursite.com/2017/07/10/android-thread-conditionvariable/</id>
    <published>2017-07-10T02:00:00.000Z</published>
    <updated>2018-11-06T09:32:04.282Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在 Java 开发中，如果要进行线程同步操作，经常会用到 <code>wait</code> 和 <code>notify</code>，但用起来可能会有点繁琐，于是在 Android 中就把它包装了一下，以 <code>ConditionVariable</code> 类的形式带给开发者使用。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>ConditionVariable</code> 用一个 <code>boolean mCondition</code> 变量来作为状态控制 <code>wait</code> 和 <code>notify</code> 方法的执行。<br><code>ConditionVariable</code> 类提供了下面几个方法：</p>
<ul>
<li>ConditionVariable()：构造方法</li>
<li>ConditionVariable(boolean state)：根据给定的状态构造对象</li>
<li>open()：打开 <code>mCondition</code> 状态，并释放所有被阻塞的线程。任何线程在调用 <code>open()</code> 后调用 <code>block()</code> 都不会生效，除非先调用了 <code>close()</code> ，后调用 <code>block()</code>。 </li>
<li>close()：重置 <code>mCondition</code> 为关闭状态。后面任何调用 <code>block()</code> 方法的线程将会被阻塞，直到调用了  <code>open()</code> 方法。</li>
<li>block()：阻塞当前线程直到调用 <code>open()</code> 方法。如果当前的 <code>mCondition</code> 为打开状态，则会立即返回，不会阻塞线程。</li>
<li>boolean block(long timeout)：阻塞当前线程直到调用 <code>open()</code> 方法或者是设置的超时时间到。如果当前的 <code>mCondition</code> 为打开状态，则会立即返回，不会阻塞线程。<ul>
<li>如果返回 true，表示 <code>mCondition</code> 为打开状态。</li>
<li>如果返回 false，表示超时返回。</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      介绍 ConditionVariable 的用法
    
    </summary>
    
      <category term="Android 线程" scheme="http://yoursite.com/categories/Android-%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="ConditionVariable" scheme="http://yoursite.com/tags/ConditionVariable/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 绘制 UML 图 -- PlantUML + Gravizo</title>
    <link href="http://yoursite.com/2017/07/08/development-tool-markdown-plant-uml/"/>
    <id>http://yoursite.com/2017/07/08/development-tool-markdown-plant-uml/</id>
    <published>2017-07-08T02:00:00.000Z</published>
    <updated>2018-10-24T07:52:54.165Z</updated>
    
    <content type="html"><![CDATA[<p>我们在工作中会经常使用UML图，实现UML的工具有很多，首先是绘图软件，但是所有的绘图软件有这样一个问题：这些软件绘制成的图片无法进行版本控制。也就是说如果后面你想修改软件的话，如果在软件里面的原图没有保存的话，就要重新再画了。这对于我们习惯于版本控制的码农来说显然是无法忍受的。<br>那么下面介绍一种可以在Markdown中使用的绘制UML工具 —— PlantUML，以及渲染引擎 Gravizo。</p>
<h2 id="PlantUML简介"><a href="#PlantUML简介" class="headerlink" title="PlantUML简介"></a>PlantUML简介</h2><p>可以登陆 <a href="http://plantuml.com/" target="_blank" rel="external">PlantUML官网</a> 看一下，里面有支持的UML类型以及使用方法。<br>点击下载 <a href="http://s.plantuml.com/PlantUML_Language_Reference_Guide_ZH.pdf" target="_blank" rel="external">使用 PlantUML 绘制 UML 语言参考指南 中文版</a>。</p>
<p><img src="/images/development-tool-markdown-plant-uml/plantuml-uml-supported.png" alt="支持的类型"></p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>打开<a href="http://www.plantuml.com/plantuml" target="_blank" rel="external">在线作图网址</a>，在上面的代码框里面输入代码。<br>完成后点击 Submit 按钮提交查看预览图，同时在预览图下面的 URL 地址框里面会有生成的 UML 图的 png 地址图，当然你也可以选择生成 SVG 或者 ASCII Art。把这个图片地址复制到 Markdown 就可以使用了。<br>比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">@startuml</div><div class="line">Title &quot;BundleLauncher类图&quot;</div><div class="line">interface BundleExtractor</div><div class="line">abstract class BundleLauncher</div><div class="line">abstract class SoBundleLauncher</div><div class="line">abstract class AssetBundleLauncher</div><div class="line"></div><div class="line">BundleLauncher &lt;|-- ActivityLauncher</div><div class="line">BundleLauncher &lt;|-- SoBundleLauncher</div><div class="line">SoBundleLauncher &lt;|-- ApkBundleLauncher</div><div class="line">BundleExtractor &lt;|.. SoBundleLauncher</div><div class="line">SoBundleLauncher &lt;|-- AssetBundleLauncher</div><div class="line">AssetBundleLauncher &lt;|-- WebBundleLauncher</div><div class="line"></div><div class="line">class ActivityLauncher &#123;</div><div class="line">+ public preloadBundle(Bundle bundle)</div><div class="line">&#125;</div><div class="line"></div><div class="line">class SoBundleLauncher &#123;</div><div class="line">+ public preloadBundle(Bundle bundle)</div><div class="line">&#125;</div><div class="line"></div><div class="line">class ApkBundleLauncher &#123;</div><div class="line">+ public loadBundle(Bundle bundle)</div><div class="line">&#125;</div><div class="line"></div><div class="line">class AssetBundleLauncher &#123;</div><div class="line">+ public loadBundle(Bundle bundle)</div><div class="line">&#125;</div><div class="line">@enduml</div></pre></td></tr></table></figure>
<p><img src="http://www.plantuml.com/plantuml/png/2yaioKbLK78gpKl9IVL9BCrBpaWjUhvnzzFP-vIuClDAKelI4fDJ5I3ohXKbHOd99Vb5N8b9nM2cGd9EOd6n0gfsTDdWVFpoZiN5gILeIhXG-GesDRgw2ex99PbbcIMLS5NO567OXYu0DQiW6qqTcX-1olJqY3ODYnUmY44KXwSceViM6X1e_bEevj9MA2XDoibCLYWeIit9Jqo1QDI0K0f9O4gJgnPc0eRhI3O18roGZI16FnPV4sS20000" alt="UML类图"></p>
<p>如果想修改怎么办？<br>打开<a href="http://www.plantuml.com/plantuml/uml/SyfFKj2rKt3CoKnELR1Io4ZDoSa70000" target="_blank" rel="external">在线作图网址</a>，把图片的 url 复制到下面的 url 框里面，点击 Submit ，在上面代码框里面会出现该图片对应的代码，然后修改即可。修改完成后再次生成图片即可。<br>是不是相当的方便呢？</p>
<h2 id="基本通用语法教程"><a href="#基本通用语法教程" class="headerlink" title="基本通用语法教程"></a>基本通用语法教程</h2><p>这里只介绍一些通用的语法命令，其他具体的语法请参考<a href="http://translate.plantuml.com/zh/PlantUML_Language_Reference_Guide_ZH.pdf" target="_blank" rel="external">官方文档</a></p>
<ol>
<li>添加标题</li>
</ol>
<p>可以用 <code>Title</code> 后面加标题</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Title &quot;继承关系图&quot;</div><div class="line"></div><div class="line">Father &lt;|-- Son</div></pre></td></tr></table></figure>
<p><img src="http://www.plantuml.com/plantuml/png/2yaioKbLK7g-U_cpplrFMpS_txpxwUnzIbnSReab6Qb52ZOrkheAmVbv0000" alt="PlantUML"></p>
<ol>
<li>注释</li>
</ol>
<p>所有以单引号开头的行 ‘ 都是注释。你也可以使用多行注释,多行注释以 /‘ 开头 ‘/ 结尾。</p>
<h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><h4 id="方法和属性的访问权限"><a href="#方法和属性的访问权限" class="headerlink" title="方法和属性的访问权限"></a>方法和属性的访问权限</h4><table>
<thead>
<tr>
<th style="text-align:center">标识</th>
<th style="text-align:center">属性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center">private</td>
</tr>
<tr>
<td style="text-align:center">#</td>
<td style="text-align:center">protected</td>
</tr>
<tr>
<td style="text-align:center">+</td>
<td style="text-align:center">public</td>
</tr>
<tr>
<td style="text-align:center">~</td>
<td style="text-align:center">package private</td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">class Dummy &#123;</div><div class="line">- private field1</div><div class="line"># protected field2</div><div class="line">+ public field3</div><div class="line">~ package method1()</div><div class="line">- private method3()</div><div class="line"># protected method4()</div><div class="line">+ public method2()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://www.plantuml.com/plantuml/png/Iyv9B2vMS2dDpQrKgERILIWeoYnBB4bLICjCpKanv5862kINf2QNfAP0X8ouj1KAIfDoCfCXV6EkEeM2nEJinFHKXTpKaepy54CDJIHp86B6G35aeo2Y9a1Hk6aG8IEWK2q0" alt="UML类图"></p>
<h4 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h4><ul>
<li>继承</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Father &lt;|-- Son</div></pre></td></tr></table></figure>
<p><img src="http://www.plantuml.com/plantuml/png/SqiioKWjKh2fqTLL2CxF0m00" alt="UML类图"></p>
<ul>
<li>实现</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">abstract class AbstractList</div><div class="line">interface List</div><div class="line">List &lt;|.. AbstractList</div></pre></td></tr></table></figure>
<p><img src="http://www.plantuml.com/plantuml/png/IqmgBYbAJ2vHICv9B2vMS8HoVJABIxWoyqfIYz8IarCLm5mGeM1JewU7eWe0" alt="UML类图"></p>
<ul>
<li>组合</li>
</ul>
<p>关联关系的一种特例，他体现的是一种contains-a的关系，这种关系比聚合更强，也称为强聚合；他同样体现整体与部分间的关系，但此时整体与部分是不可分的，整体的生命周期结束也就意味着部分的生命周期结束。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Human *-- Brain</div></pre></td></tr></table></figure>
<p><img src="http://www.plantuml.com/plantuml/png/yoZDJSnJqDBLLN0gIipC0m00" alt="UML类图"></p>
<ul>
<li>聚合</li>
</ul>
<p>关联关系的一种特例，他体现的是整体与部分、拥有的关系，即has-a的关系，此时整体与部分之间是可分离的，他们可以具有各自的生命周期。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Company o-- Human</div></pre></td></tr></table></figure>
<p><img src="http://www.plantuml.com/plantuml/png/SyxFBKZCgrJ8rzLLy2ZDJSm30000" alt="UML类图"></p>
<ul>
<li>关联</li>
</ul>
<p>类与类之间的联接。强依赖关系，表现在代码层面，为被关联类B以类属性的形式出现在关联类A中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">class Water</div><div class="line">class Human</div><div class="line">Human --&gt; Water</div></pre></td></tr></table></figure>
<p><img src="http://www.plantuml.com/plantuml/png/Iyv9B2vM24yiIItYIWQpFKfp4_EumAI2hguTH0u0" alt="UML类图"></p>
<ul>
<li>依赖</li>
</ul>
<p>类与类之间的联接。一个类A使用到了另一个类B，而这种使用关系是具有偶然性的、临时性的、非常弱的，表现在代码层面，类B作为参数被类A在某个方法中使用，例如人和烟草的关系。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Human ..&gt; Cigarette</div></pre></td></tr></table></figure>
<p><img src="http://www.plantuml.com/plantuml/png/yoZDJSnJqDEpKt3EJ4yiIYqfIGK0" alt="UML类图"></p>
<h4 id="域"><a href="#域" class="headerlink" title="域"></a>域</h4><p>在作图时，如果遇到了名称相同包名不同的类这时就要用域来进行区分。可以用 <code>namespace</code>，也可以直接用包名：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class BaseClass</div><div class="line"></div><div class="line">namespace net.dummy #DDDDDD &#123;</div><div class="line">    .BaseClass &lt;|-- Person</div><div class="line">    Meeting o-- Person</div><div class="line">    </div><div class="line">    .BaseClass &lt;|- Meeting</div><div class="line">&#125;</div><div class="line"></div><div class="line">namespace net.foo &#123;</div><div class="line">  net.dummy.Person  &lt;|- Person</div><div class="line">  .BaseClass &lt;|-- Person</div><div class="line"></div><div class="line">  net.dummy.Meeting o-- Person</div><div class="line">&#125;</div><div class="line"></div><div class="line">BaseClass &lt;|-- net.unused.Person</div><div class="line"></div><div class="line">class net.unused.Person &#123;</div><div class="line">  + public void test();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://www.plantuml.com/plantuml/png/TKvB2i8m4Dtd50_SAD9SG5VgLl0ACHabq2J5IGgYlRjjf87M-bR3lA-k5JCEYkauN49uvOWRfGcUeZJ9kITMfmoy17h8eiR-NLMuq8E3pzIPA5f_HvY-5soZL7Jpobi8kQZKosyIigsa_banCIxCwUjcna6UV68oSipGcVqXygmjcdIjhKORh44aZklDJdGV" alt="UML类图"></p>
<h3 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h3><p>语法参考<a href="http://plantuml.com/sequence-diagram" target="_blank" rel="external">官方网站</a></p>
<h2 id="PlantUML-Gravizo"><a href="#PlantUML-Gravizo" class="headerlink" title="PlantUML + Gravizo"></a>PlantUML + Gravizo</h2><p>上面用 PlantUML 来绘制 UML 的方法，我们需要去在线编写代码生成 UML 图片，然后再把图片地址集成到 Markdown 里面，步骤还是稍微繁琐，现在介绍 Gravizo 的使用可以解决这个问题。<br><a href="http://www.gravizo.com/" target="_blank" rel="external">Gravizo</a> 是一个绘图引擎，只需要用 Url 包含 PlantUML 代码放到一个 <code>img</code> 标签中，就可以在线实时的绘制出我们需要的 UML 图。<br>比如下面的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;img src=&apos;https://g.gravizo.com/svg?</div><div class="line">abstract class AbstractList;</div><div class="line">interface List;</div><div class="line">List &lt;|.. AbstractList;</div><div class="line">&apos;/&gt;</div></pre></td></tr></table></figure>
<p>把上面的代码放到 Markdown 里面，就可以实时的把 UML 图绘制出来了。</p>
<p><img src="https://g.gravizo.com/svg?
abstract class AbstractList;
interface List;
List <|.. AbstractList;
"></p>
<p>当然这个也需要集成的 Markdown 里面支持 Gravizo 才能显示出来，Hexo 博客是可以显示出来的，CSDN 博客就显示不出来。</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://www.jianshu.com/p/1256e2643923" target="_blank" rel="external">http://www.jianshu.com/p/1256e2643923</a><br><a href="http://www.jianshu.com/p/e92a52770832" target="_blank" rel="external">http://www.jianshu.com/p/e92a52770832</a><br><a href="https://yq.aliyun.com/articles/25405" target="_blank" rel="external">https://yq.aliyun.com/articles/25405</a></p>
]]></content>
    
    <summary type="html">
    
      介绍使用 PlantUML 绘制 UML 图，以及渲染引擎组合 PlantUML + Gravizo 的使用
    
    </summary>
    
      <category term="开发工具" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="开发工具" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Markdown" scheme="http://yoursite.com/tags/Markdown/"/>
    
      <category term="PlantUML" scheme="http://yoursite.com/tags/PlantUML/"/>
    
      <category term="Gravizo" scheme="http://yoursite.com/tags/Gravizo/"/>
    
  </entry>
  
  <entry>
    <title>Android：关于Drawable的缓存机制应该了解的知识</title>
    <link href="http://yoursite.com/2017/06/15/android-knowledge-point-drawable-cache/"/>
    <id>http://yoursite.com/2017/06/15/android-knowledge-point-drawable-cache/</id>
    <published>2017-06-15T02:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题演示"><a href="#问题演示" class="headerlink" title="问题演示"></a>问题演示</h2><p>下面我们通过一个实例来演示一个我们在使用Drawable过程中经常会遇到的一个问题。</p>
<p>首先贴出UI布局文件，这里放了两个 <code>ImageView</code>，它们的寬高不一样，而且对他们加以蓝色的背景。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">              <span class="attr">xmlns:mz</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">              <span class="attr">android:id</span>=<span class="string">"@+id/root"</span></div><div class="line">              <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">              <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">              <span class="attr">android:padding</span>=<span class="string">"40dp"</span></div><div class="line">              <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/first"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"100dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"200dp"</span></div><div class="line">        <span class="attr">android:scaleType</span>=<span class="string">"fitXY"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"#1E90FF"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/second"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"200dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></div><div class="line">        <span class="attr">android:layout_marginTop</span>=<span class="string">"50dp"</span></div><div class="line">        <span class="attr">android:scaleType</span>=<span class="string">"fitXY"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"#1E90FF"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h3><p>首先我们给第一个<code>ImageView</code>设置一个显示图片。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> BitmapDrawable firstDrawable = (BitmapDrawable) getResources()</div><div class="line">        .getDrawable(R.drawable.test_mutate);</div><div class="line">mFirstImage = (ImageView) findViewById(R.id.first);</div><div class="line">mSecondImage = (ImageView) findViewById(R.id.second);</div><div class="line"></div><div class="line">mFirstImage.setImageDrawable(firstDrawable);</div></pre></td></tr></table></figure></p>
<p>看下面的效果，因为第二个我们没有设置前景图片，因此会现实背景图片。这个很正常，我们不会有什么疑问。</p>
<p><img src="/images/android-knowledge-point-drawable-cache/drawable-1.png" alt="效果图"></p>
<h3 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h3><p>接下来我们在原来代码的基础上添加下面代码，为第二个<code>ImageView</code>设置图片。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">......</div><div class="line">mSecondImage.setImageDrawable(firstDrawable);</div></pre></td></tr></table></figure>
<p>看一下效果图，第一个图片的现实效果和<strong>实例1</strong>变的不一样了，你也许会感觉这个很正常，因为同一个<code>Drawable</code>对象设置给两个大小不同的<code>ImageView</code>，第二个尺寸改变以后第一个也跟着改变了。</p>
<p><img src="/images/android-knowledge-point-drawable-cache/drawable-2.png" alt="效果图"></p>
<h3 id="实例3"><a href="#实例3" class="headerlink" title="实例3"></a>实例3</h3><p>那么我们再实例化一个<code>Drawable</code>对象设置给第二个<code>ImageView</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> BitmapDrawable firstDrawable = (BitmapDrawable) getResources()</div><div class="line">        .getDrawable(R.drawable.test_mutate);</div><div class="line"><span class="keyword">final</span> BitmapDrawable secondDrawable = (BitmapDrawable) getResources()</div><div class="line">        .getDrawable(R.drawable.test_mutate);</div><div class="line">mFirstImage = (ImageView) findViewById(R.id.first);</div><div class="line">mSecondImage = (ImageView) findViewById(R.id.second);</div><div class="line"></div><div class="line">mFirstImage.setImageDrawable(firstDrawable);</div><div class="line">mSecondImage.setImageDrawable(secondDrawable);</div></pre></td></tr></table></figure>
<p>看一下效果图，这下显示正常了，这个也可以理解，两个不同的<code>Drawable</code>对象设置给不同的<code>ImageView</code>，他们互不干涉。那么真的是这样的吗？再接着往下面看。</p>
<p><img src="/images/android-knowledge-point-drawable-cache/drawable-3.png" alt="效果图"></p>
<h3 id="实例4"><a href="#实例4" class="headerlink" title="实例4"></a>实例4</h3><p>我们在上面的代码的基础上把第二个<code>Drawable</code>的 alpha 设置为15 0 。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">......</div><div class="line">secondDrawable.setAlpha(<span class="number">150</span>);</div></pre></td></tr></table></figure>
<p>看下面效果图，奇怪的现象发生了，第一个图片也变成半透明的了，为什么呢？</p>
<p><img src="/images/android-knowledge-point-drawable-cache/drawable-4.png" alt="效果图"></p>
<p><strong>问题1:</strong>为什么设置第二个图片的 alpha 会对第一个图片有影响？</p>
<h3 id="实例5"><a href="#实例5" class="headerlink" title="实例5"></a>实例5</h3><p>你也许听说过 <code>mutate()</code> 的作用，那么现在我们改一下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">......</div><div class="line">secondDrawable.mutate().setAlpha(<span class="number">150</span>);</div></pre></td></tr></table></figure>
<p>看下面效果图，现在正常了。</p>
<p><img src="/images/android-knowledge-point-drawable-cache/drawable-5.png" alt="效果图"></p>
<p><strong>问题2:</strong> <code>mutate()</code> 方法是做什么的？</p>
<h3 id="实例6"><a href="#实例6" class="headerlink" title="实例6"></a>实例6</h3><p>下面我们再对代码稍作修改：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> BitmapDrawable firstDrawable = (BitmapDrawable) getResources()</div><div class="line">        .getDrawable(R.drawable.test_mutate);</div><div class="line"></div><div class="line">mFirstImage = (ImageView) findViewById(R.id.first);</div><div class="line">mSecondImage = (ImageView) findViewById(R.id.second);</div><div class="line"></div><div class="line">mFirstImage.setImageDrawable(firstDrawable);</div><div class="line">mSecondImage.setImageDrawable(firstDrawable.getConstantState().newDrawable());</div></pre></td></tr></table></figure>
<p>这样两个图片也能正常显示出来了。</p>
<p><img src="/images/android-knowledge-point-drawable-cache/drawable-3.png" alt="效果图"></p>
<p>修改一下最后一行代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Drawable drawable = firstDrawable.getConstantState().newDrawable();</div><div class="line">mSecondImage.setImageDrawable(drawable);</div><div class="line">drawable.setAlpha(<span class="number">150</span>);</div></pre></td></tr></table></figure>
<p>这样的效果仍然是两个图片都是半透明的。</p>
<p>也需要调用<code>drawable.mutate().setAlpha(150);</code>才能使第二个半透明，第一个没有半透明。</p>
<p><strong>问题3:</strong> <code>Drawable.getConstantState().newDrawable()</code>又是怎么回事？</p>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>首先通过<strong>实例3</strong>我们可以得到这样的结论：分别两次调用<code>getResources().getDrawable(R.drawable.test_mutate)</code>肯定不是指向同一个对象的。为了验证真实性，我们添加Log。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Log.e(&quot;Test&quot;,&quot;firstDrawable = &quot;+firstDrawable+&quot;, secondDrawable = &quot;+secondDrawable);</div></pre></td></tr></table></figure>
<p>有下面打印：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">3110  3110 E Test    : firstDrawable = android.graphics.drawable.BitmapDrawable@3109294, secondDrawable = android.graphics.drawable.BitmapDrawable@d2fb13d</div></pre></td></tr></table></figure>
<p>那么，<code>firstDrawable</code>和<code>secondDrawable</code>肯定不是指向同一个对象了。</p>
<h3 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h3><p>我们来分析<strong>问题1</strong>为什么设置第二个图片的 alpha 会对第一个图片有影响？<br>两个完全不同的<code>ImageView</code>因为设置了资源id相同的图片就产生了关联，现在我们可以猜想，<code>firstDrawable</code>和<code>secondDrawable</code>肯定存在某种联系的。此时我们可能立刻想到为了优化性能，Android内部是不是针对相同的资源使用了同一份位图信息呢？是不是有什么缓存机制呢？带着这个疑问我们先来分析<code>Resources</code>的源码。<br>在<code>Resources</code>类中，我们找到了<code>loadDrawable()</code>方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="keyword">final</span> DrawableCache caches;</div><div class="line">...</div><div class="line">    <span class="keyword">final</span> Drawable cachedDrawable = caches.getInstance(key, theme);</div><div class="line">    <span class="keyword">if</span> (cachedDrawable != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> cachedDrawable;</div><div class="line">    &#125;</div><div class="line">...</div></pre></td></tr></table></figure>
<p>这里会从<code>caches</code>里面获取曾经加载过的资源，如果找到就直接返回缓存。具体这个缓存是怎么放进去的我们就不再详细分析了。前面我们也说了，<code>firstDrawable</code>和<code>secondDrawable</code>是不同的对象，那他们在这个缓存里肯定也不是同一个<code>Drawable</code>了。<br>再直接往下看，<code>DrawableCache</code>是什么呢？<br><code>DrawableCache</code>继承自<code>ThemedResourceCache</code>。<br>下来看一下<code>DrawableCache</code>的<code>getInstance()</code>方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Drawable <span class="title">getInstance</span><span class="params">(<span class="keyword">long</span> key, Resources.Theme theme)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Drawable.ConstantState entry = get(key, theme);</div><div class="line">    <span class="keyword">if</span> (entry != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> entry.newDrawable(mResources, theme);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在我们知道了，<code>caches</code>里面缓存的不是<code>Drawable</code>对象，而是<code>Drawable.ConstantState</code>对象。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstantState</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Drawable <span class="title">newDrawable</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Drawable <span class="title">newDrawable</span><span class="params">(Resources res)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> newDrawable();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Drawable <span class="title">newDrawable</span><span class="params">(Resources res, Theme theme)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> newDrawable(<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getChangingConfigurations</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addAtlasableBitmaps</span><span class="params">(Collection&lt;Bitmap&gt; atlasList)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isAtlasable</span><span class="params">(Bitmap bitmap)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> bitmap != <span class="keyword">null</span> &amp;&amp; bitmap.getConfig() == Bitmap.Config.ARGB_8888;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canApplyTheme</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>ConstantState</code>类是一个抽象类，<code>BitmapDrawable.BitmapState</code>便是它的实现类之一。由于<code>getResources().getDrawable(R.drawable.test_mutate)</code>得到的是<code>BitmapDrawable</code>，那么我们就重点分析这个类。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BitmapState</span> <span class="keyword">extends</span> <span class="title">ConstantState</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Paint mPaint;</div><div class="line"></div><div class="line">    <span class="keyword">int</span>[] mThemeAttrs = <span class="keyword">null</span>;</div><div class="line">    Bitmap mBitmap = <span class="keyword">null</span>;</div><div class="line">    ColorStateList mTint = <span class="keyword">null</span>;</div><div class="line">    Mode mTintMode = DEFAULT_TINT_MODE;</div><div class="line">    <span class="keyword">int</span> mGravity = Gravity.FILL;</div><div class="line">    <span class="keyword">float</span> mBaseAlpha = <span class="number">1.0f</span>;</div><div class="line">    Shader.TileMode mTileModeX = <span class="keyword">null</span>;</div><div class="line">    Shader.TileMode mTileModeY = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">int</span> mTargetDensity = DisplayMetrics.DENSITY_DEFAULT;</div><div class="line">    <span class="keyword">boolean</span> mAutoMirrored = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> mChangingConfigurations;</div><div class="line">    <span class="keyword">boolean</span> mRebuildShader;</div><div class="line"></div><div class="line">    BitmapState(Bitmap bitmap) &#123;</div><div class="line">        mBitmap = bitmap;</div><div class="line">        mPaint = <span class="keyword">new</span> Paint(DEFAULT_PAINT_FLAGS);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    BitmapState(BitmapState bitmapState) &#123;</div><div class="line">        mBitmap = bitmapState.mBitmap;</div><div class="line">        mTint = bitmapState.mTint;</div><div class="line">        mTintMode = bitmapState.mTintMode;</div><div class="line">        mThemeAttrs = bitmapState.mThemeAttrs;</div><div class="line">        mChangingConfigurations = bitmapState.mChangingConfigurations;</div><div class="line">        mGravity = bitmapState.mGravity;</div><div class="line">        mTileModeX = bitmapState.mTileModeX;</div><div class="line">        mTileModeY = bitmapState.mTileModeY;</div><div class="line">        mTargetDensity = bitmapState.mTargetDensity;</div><div class="line">        mBaseAlpha = bitmapState.mBaseAlpha;</div><div class="line">        mPaint = <span class="keyword">new</span> Paint(bitmapState.mPaint);</div><div class="line">        mRebuildShader = bitmapState.mRebuildShader;</div><div class="line">        mAutoMirrored = bitmapState.mAutoMirrored;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canApplyTheme</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mThemeAttrs != <span class="keyword">null</span> || mTint != <span class="keyword">null</span> &amp;&amp; mTint.canApplyTheme();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addAtlasableBitmaps</span><span class="params">(Collection&lt;Bitmap&gt; atlasList)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (isAtlasable(mBitmap) &amp;&amp; atlasList.add(mBitmap)) &#123;</div><div class="line">            <span class="keyword">return</span> mBitmap.getWidth() * mBitmap.getHeight();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Drawable <span class="title">newDrawable</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BitmapDrawable(<span class="keyword">this</span>, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Drawable <span class="title">newDrawable</span><span class="params">(Resources res)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BitmapDrawable(<span class="keyword">this</span>, res);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getChangingConfigurations</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mChangingConfigurations</div><div class="line">                | (mTint != <span class="keyword">null</span> ? mTint.getChangingConfigurations() : <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>newDrawable()</code>方法里面返回的是一个新的<code>BitmapDrawable</code>对象，但是所有相同资源的<code>BitmapDrawable</code>对象共用同一个<code>BitmapState</code>对象。我们注意到<code>BitmapState</code>的<code>mBitmap</code>属性，这也验证了前面的猜想，它们共用同一个<code>Bitmap</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">private BitmapDrawable(BitmapState state, Resources res) &#123;</div><div class="line">    mBitmapState = state;</div><div class="line"></div><div class="line">    updateLocalState(res);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line">public void setAlpha(int alpha) &#123;</div><div class="line">    final int oldAlpha = mBitmapState.mPaint.getAlpha();</div><div class="line">    if (alpha != oldAlpha) &#123;</div><div class="line">        mBitmapState.mPaint.setAlpha(alpha);</div><div class="line">        invalidateSelf();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么我们<code>setAlpha()</code>操作实际改变的是<code>mBitmapState</code>的属性值，这也就不难理解<strong>问题1</strong>了，因为它们用的是同一个<code>BitmapState</code>对象。<br>为了验证这个结论，我们添加打印：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Log.e(<span class="string">"Test"</span>,<span class="string">"firstDrawable = "</span>+firstDrawable.getConstantState()+<span class="string">", secondDrawable = "</span>+secondDrawable.getConstantState());</div></pre></td></tr></table></figure>
<p>打印如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">4433  4433 E Test    : firstDrawable = android.graphics.drawable.BitmapDrawable$BitmapState@3109294, secondDrawable = android.graphics.drawable.BitmapDrawable$BitmapState@3109294</div></pre></td></tr></table></figure>
<p>它们确实是指向同一个对象的。</p>
<p>它们的关系可以用下图表示：</p>
<p><img src="/images/android-knowledge-point-drawable-cache/drawable-6.jpg" alt="效果图"></p>
<h3 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h3><p>接下来再来分析<strong>问题2:</strong> <code>mutate()</code> 方法是做什么的？</p>
<p>我们先来看一下<code>Drawable</code>中对这个方法的解释：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Make this drawable mutable. This operation cannot be reversed. A mutable</div><div class="line"> * drawable is guaranteed to not share its state with any other drawable.</div><div class="line"> * This is especially useful when you need to modify properties of drawables</div><div class="line"> * loaded from resources. By default, all drawables instances loaded from</div><div class="line"> * the same resource share a common state; if you modify the state of one</div><div class="line"> * instance, all the other instances will receive the same modification.</div><div class="line"> *</div><div class="line"> * Calling this method on a mutable Drawable will have no effect.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@return</span> This drawable.</div><div class="line"> * <span class="doctag">@see</span> ConstantState</div><div class="line"> * <span class="doctag">@see</span> #getConstantState()</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> Drawable <span class="title">mutate</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>mutate()</code>返回的<code>Drawable</code>对象不再与同资源的其他<code>Drawable</code>共用 state，那么它的属性改变后就不再影响其他的<code>Drawable</code>了。</p>
<p>在<code>BitmapDrawable</code>的<code>mutate()</code>方法里面确实又新建了一个<code>BitmapState</code>对象。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * A mutable BitmapDrawable still shares its Bitmap with any other Drawable</div><div class="line"> * that comes from the same resource.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@return</span> This drawable.</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Drawable <span class="title">mutate</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!mMutated &amp;&amp; <span class="keyword">super</span>.mutate() == <span class="keyword">this</span>) &#123;</div><div class="line">        mBitmapState = <span class="keyword">new</span> BitmapState(mBitmapState);</div><div class="line">        mMutated = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它们的关系可以用下图表示：</p>
<p><img src="/images/android-knowledge-point-drawable-cache/drawable-7.jpg" alt="效果图"></p>
<p><strong>注意：</strong> mutate操作是不可逆转的，已经调用过<code>mutate()</code>方法的<code>BitmapDrawable</code>对象再调用<code>mutate()</code>是不起作用的。这点在代码中可以清楚的看到。</p>
<h3 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h3><p>记下来分析<strong>问题3:</strong> <code>Drawable.getConstantState().newDrawable()</code>又是怎么回事？<br>经过上面的源码分析，这个很容易就理解了，它就是获得<code>Drawable</code>的<code>ConstantState</code>来重新实例化一个<code>Drawable</code>，两个<code>Drawable</code>还是共用一个<code>ConstantState</code>。<br>这个和重新调用<code>getResources().getDrawable(R.drawable.test_mutate)</code>原理是一样的。</p>
<h3 id="附加问题"><a href="#附加问题" class="headerlink" title="附加问题"></a>附加问题</h3><p>那为什么设置 alpha 两个图片互有影响，而在<strong>实例3</strong>中第二个<code>Drawable</code>大小尺寸改变却没有影响呢？<br>这就要附带分析一下<code>ImageView</code>的<code>ScaleType</code>原理。<br>我们从<code>ImageView.setImageDrawable</code>开始分析，这个方法的调用流程如图：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">├── ImageView.setImageDrawable</div><div class="line">     └── ImageView.updateDrawable</div><div class="line">          └── configureBounds()</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">configureBounds</span><span class="params">()</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="keyword">if</span> (dwidth &lt;= <span class="number">0</span> || dheight &lt;= <span class="number">0</span> || ScaleType.FIT_XY == mScaleType) &#123;</div><div class="line">        mDrawable.setBounds(<span class="number">0</span>, <span class="number">0</span>, vwidth, vheight);</div><div class="line">        mDrawMatrix = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDraw(canvas);</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (mDrawMatrix == <span class="keyword">null</span> &amp;&amp; mPaddingTop == <span class="number">0</span> &amp;&amp; mPaddingLeft == <span class="number">0</span>) &#123;</div><div class="line">        mDrawable.draw(canvas);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">int</span> saveCount = canvas.getSaveCount();</div><div class="line">        canvas.save();</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (mCropToPadding) &#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> scrollX = mScrollX;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> scrollY = mScrollY;</div><div class="line">            canvas.clipRect(scrollX + mPaddingLeft, scrollY + mPaddingTop,</div><div class="line">                    scrollX + mRight - mLeft - mPaddingRight,</div><div class="line">                    scrollY + mBottom - mTop - mPaddingBottom);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        canvas.translate(mPaddingLeft, mPaddingTop);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mDrawMatrix != <span class="keyword">null</span>) &#123;</div><div class="line">            canvas.concat(mDrawMatrix);</div><div class="line">        &#125;</div><div class="line">        mDrawable.draw(canvas);</div><div class="line">        canvas.restoreToCount(saveCount);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>configureBounds()</code>里面根据不同的<code>ScaleType</code>会进行不同的变换，包括设置绘制边界、缩放、位移、绘制是的矩阵变换等等。<br>在<code>onDraw()</code>方法中再把这个<code>Drawable</code>绘制到<code>Canvas</code>上，这些改变变化的只是<code>Drawable</code>本身，而对<code>ConstantState</code>不会有改变。<br>为了验证这个结论，我们在<strong>实例3</strong>代码基础上，添加一些Log。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">(View v)</span></span>&#123;</div><div class="line">    Log.e(<span class="string">"Test"</span>,<span class="string">"1 rect1 = "</span>+mFirstImage.getDrawable().getBounds());</div><div class="line">    Log.e(<span class="string">"Test"</span>,<span class="string">"2 rect2 = "</span>+mSecondImage.getDrawable().getBounds());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>打印如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">21313 21313 E Test    : 1 rect1 = Rect(0, 0 - 200, 400)</div><div class="line">21313 21313 E Test    : 2 rect2 = Rect(0, 0 - 400, 200)</div></pre></td></tr></table></figure>
<p>它们的<code>Drawable.mBounds</code>是不同的。</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://android-developers.googleblog.com/2009/05/drawable-mutations.html" target="_blank" rel="external">https://android-developers.googleblog.com/2009/05/drawable-mutations.html</a></p>
]]></content>
    
    <summary type="html">
    
      在Android中，出于对内存优化的考虑，对于图片的存储使用了缓存机制，资源id相同的图片使用了同一个位图信息，如果对这些机制不了解的话开发过程中就会造成一些困扰。本文通过实例和分析Drawable的缓存机制源码的方式来介绍一下Drawable的缓存机制，并且了解一下Drawable.mutate()的用法。
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android 深入理解 dumpsys</title>
    <link href="http://yoursite.com/2017/06/13/android-source-code-analysis-dumpsys/"/>
    <id>http://yoursite.com/2017/06/13/android-source-code-analysis-dumpsys/</id>
    <published>2017-06-13T02:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>在我的博客 <a href="http://www.heqiangfly.com/2014/10/15/android-development-skills-dumpsys/" target="_blank" rel="external">Android实用技巧之adb命令：dumpsys命令的使用</a> 一文中详细介绍了 dumpsys 的基本用法，那么本文将介绍一下它是如何实现的以及它的工作原理。<br>dumpsys 相关源码位置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">frameworks/native/cmds/dumpsys/dumpsys.cpp</div></pre></td></tr></table></figure>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>看到 dumpsys 源码我们发现，它的实现较为简单，全部的代码都在 dumpsys.cpp 中，编译得到 dumpsys 二进制文件。实现基本的思路就是向 servicemanager 获取相关的系统服务，然后调用相应系统服务的 <code>dump()</code> 方法打印相关数据。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* <span class="keyword">const</span> argv[])</span></span></div><div class="line">&#123;</div><div class="line">    signal(SIGPIPE, SIG_IGN);</div><div class="line">    <span class="comment">// 获取service_manager对象</span></div><div class="line">    sp&lt;IServiceManager&gt; sm = defaultServiceManager();</div><div class="line">    <span class="comment">// 清除输出缓冲区的内容</span></div><div class="line">    fflush(<span class="built_in">stdout</span>);</div><div class="line">    <span class="keyword">if</span> (sm == <span class="literal">NULL</span>) &#123;</div><div class="line">	......</div><div class="line">        <span class="keyword">return</span> <span class="number">20</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Vector&lt;String16&gt; services;</div><div class="line">    Vector&lt;String16&gt; args;</div><div class="line">    <span class="keyword">bool</span> showListOnly = <span class="literal">false</span>;</div><div class="line">    <span class="comment">// 解析dumpsys命令的参数，参数 l 表示只输出服务列表</span></div><div class="line">    <span class="keyword">if</span> ((argc == <span class="number">2</span>) &amp;&amp; (<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">"-l"</span>) == <span class="number">0</span>)) &#123;</div><div class="line">        showListOnly = <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 获取需要输出的服务列表</span></div><div class="line">    <span class="keyword">if</span> ((argc == <span class="number">1</span>) || showListOnly) &#123;</div><div class="line">        <span class="comment">// 不带参数表示要输出所有的服务</span></div><div class="line">        services = sm-&gt;listServices();</div><div class="line">        services.sort(sort_func);</div><div class="line">        args.add(String16(<span class="string">"-a"</span>));</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 根据参数添加指定服务到services列表</span></div><div class="line">        services.add(String16(argv[<span class="number">1</span>]));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;argc; i++) &#123;</div><div class="line">            args.add(String16(argv[i]));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">const</span> <span class="keyword">size_t</span> N = services.size();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (N &gt; <span class="number">1</span>) &#123;</div><div class="line">        ......</div><div class="line">        <span class="comment">// 打印出当前的服务列表</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</div><div class="line">            <span class="comment">// 根据服务名称获取服务对象</span></div><div class="line">            sp&lt;IBinder&gt; service = sm-&gt;checkService(services[i]);</div><div class="line">            <span class="keyword">if</span> (service != <span class="literal">NULL</span>) &#123;</div><div class="line">                aout &lt;&lt; <span class="string">"  "</span> &lt;&lt; services[i] &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 如果带有 l 参数，不再往下执行打印详细信息</span></div><div class="line">    <span class="keyword">if</span> (showListOnly) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 调用各个service的dump方法来完成服务信息的输出</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</div><div class="line">        <span class="comment">// 根据服务名称获取服务对象</span></div><div class="line">        sp&lt;IBinder&gt; service = sm-&gt;checkService(services[i]);</div><div class="line">        <span class="keyword">if</span> (service != <span class="literal">NULL</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (N &gt; <span class="number">1</span>) &#123;</div><div class="line">                aout &lt;&lt; <span class="string">"------------------------------------------------------------"</span></div><div class="line">                        <span class="string">"-------------------"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">                aout &lt;&lt; <span class="string">"DUMP OF SERVICE "</span> &lt;&lt; services[i] &lt;&lt; <span class="string">":"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span> err = service-&gt;dump(STDOUT_FILENO, args);</div><div class="line">            ......</div><div class="line">        &#125;</div><div class="line">        ......</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>我们都知道，Android的系统服务都是 <code>Binder</code> 的子类，他们都是由 servicemanager 来管理的，他们分别运行在不同的进程中。Android系统服务运行在 system_server 进程，servicemanager 运行在 servicemanager 进程中。他们之间的协作通过进程间的通信来完成。<br><code>Binder.dump()</code>方法就是打印系统服务信息的方法，Android 系统服务重新实现了父类的 <code>dump()</code> 方法来实现系统服务信息的输出，输出的信息完全有系统服务自己来控制。</p>
]]></content>
    
    <summary type="html">
    
      在Android开发过程中 dumpsys 命令是一个我们会经常使用的非常实用的命令，我们非常有必要来探究一下它是如何来带给我们一个如此便捷的查看Android各个服务信息的方式的。本文基于 Android6.0 来分析 dumpsys 源码以及其工作原理。
    
    </summary>
    
      <category term="Android源码分析" scheme="http://yoursite.com/categories/Android%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="dumpsys" scheme="http://yoursite.com/tags/dumpsys/"/>
    
      <category term="Android源码分析" scheme="http://yoursite.com/tags/Android%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Android 插件化 -- 资源的动态加载实践</title>
    <link href="http://yoursite.com/2017/05/22/android-plugins-dynamic-load-res-demo/"/>
    <id>http://yoursite.com/2017/05/22/android-plugins-dynamic-load-res-demo/</id>
    <published>2017-05-22T02:00:00.000Z</published>
    <updated>2018-09-14T14:27:47.780Z</updated>
    
    <content type="html"><![CDATA[<h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><p>本文通过代码实践来实现两种动态加载资源的方法：</p>
<ul>
<li>通过 createPackageContext： 可以实现获取系统中已经安装的应用的资源</li>
<li>自定义 AssetManager：这种方法是插件化动态加载资源的原理</li>
</ul>
<h3 id="资源类"><a href="#资源类" class="headerlink" title="资源类"></a>资源类</h3><p><a href="https://developer.android.com/guide/topics/resources/accessing-resources" target="_blank" rel="external">访问资源官方文档</a><br>我们知道，Android 程序中的每个资源在编译的时候，aapt 会生成 R 类，其中包含 res/ 目录中所有资源的资源 ID。 每个资源类型都有对应的 R 子类（例如，R.drawable 对应于所有可绘制对象资源），而该类型的每个资源都有对应的静态整型数（例如，R.drawable.icon）。这个整型数就是可用来检索资源的资源 ID。<br>资源ID 是一个32bit的数字，格式是PPTTNNNN ， PP代表资源所属的包(package) ,TT代表资源的类型(type)，NNNN代表这个类型下面的资源的名称。 对于系统资源来说取值是0x00-0x02，对于应用程序的资源来说，PP的取值是0×7f。<br>TT 和NNNN 的取值是由AAPT工具随意指定的–基本上每一种新的资源类型的数字都是从上一个数字累加的（从1开始）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line">public final class R &#123;</div><div class="line">  public static final class anim &#123;</div><div class="line">    public static final int abc_fade_in=0x7f010000;</div><div class="line">    ......</div><div class="line">  &#125;</div><div class="line">  public static final class animator &#123;</div><div class="line">    public static final int design_appbar_state_list_animator=0x7f020000;</div><div class="line">  &#125;</div><div class="line">  public static final class attr &#123;</div><div class="line">    public static final int actionBarDivider=0x7f030000;</div><div class="line">    ......</div><div class="line">  &#125;</div><div class="line">  public static final class bool &#123;</div><div class="line">    public static final int abc_action_bar_embed_tabs=0x7f040000;</div><div class="line">    ......</div><div class="line">  &#125;</div><div class="line">  public static final class color &#123;</div><div class="line">    public static final int abc_background_cache_hint_selector_material_dark=0x7f050000;</div><div class="line">    ......</div><div class="line">  &#125;</div><div class="line">  public static final class dimen &#123;</div><div class="line">    public static final int abc_action_bar_content_inset_material=0x7f060000;</div><div class="line">    ……</div><div class="line">    public static final int tooltip_y_offset_touch=0x7f06009b;</div><div class="line">  &#125;</div><div class="line">  public static final class drawable &#123;</div><div class="line">    public static final int abc_ab_share_pack_mtrl_alpha=0x7f070007;</div><div class="line">    ......</div><div class="line">  &#125;</div><div class="line">  public static final class id &#123;</div><div class="line">    public static final int ALT=0x7f080000;</div><div class="line">    ......</div><div class="line">  &#125;</div><div class="line">  public static final class integer &#123;</div><div class="line">    public static final int abc_config_activityDefaultDur=0x7f090000;</div><div class="line">    ......</div><div class="line">  &#125;</div><div class="line">  public static final class layout &#123;</div><div class="line">    public static final int abc_action_bar_title_item=0x7f0a0000;</div><div class="line">    ......</div><div class="line">  &#125;</div><div class="line">  public static final class mipmap &#123;</div><div class="line">    public static final int ic_launcher=0x7f0b0000;</div><div class="line">    ......</div><div class="line">  &#125;</div><div class="line">  public static final class string &#123;</div><div class="line">    public static final int abc_action_bar_home_description=0x7f0c0000;</div><div class="line">    .....</div><div class="line">  &#125;</div><div class="line">  public static final class style &#123;</div><div class="line">    public static final int AlertDialog_AppCompat=0x7f0d0000;</div><div class="line">    .....</div><div class="line">  &#125;</div><div class="line">  public static final class styleable &#123;</div><div class="line">    public static final int[] ActionBar=&#123;</div><div class="line">        0x7f030031, 0x7f030032, 0x7f030033, 0x7f030061, </div><div class="line">        0x7f030062, 0x7f030063, 0x7f030064, 0x7f030065, </div><div class="line">        0x7f030066, 0x7f03006d, 0x7f030071, 0x7f030072, </div><div class="line">        0x7f03007d, 0x7f03009d, 0x7f03009e, 0x7f0300a2, </div><div class="line">        0x7f0300a3, 0x7f0300a4, 0x7f0300a9, 0x7f0300af, </div><div class="line">        0x7f0300f5, 0x7f0300fe, 0x7f03010e, 0x7f030112, </div><div class="line">        0x7f030113, 0x7f030137, 0x7f03013a, 0x7f030166, </div><div class="line">        0x7f030170</div><div class="line">      &#125;;</div><div class="line"></div><div class="line">    public static final int[] ActionBarLayout=&#123;</div><div class="line">        0x010100b3</div><div class="line">      &#125;;</div><div class="line">    ……</div><div class="line">    public static final int View_theme=4;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="createPackageContext-方法"><a href="#createPackageContext-方法" class="headerlink" title="createPackageContext 方法"></a>createPackageContext 方法</h3><p>再来了解一下 <code>Context</code> 中的 <code>createPackageContext</code> 方法，通过这个方法可以创建另外一个包的 <code>Context</code> 上下文，这样就可以访问该软件包的资源，甚至可以执行其它软件包的代码。</p>
<h3 id="动态获取资源的两种方法"><a href="#动态获取资源的两种方法" class="headerlink" title="动态获取资源的两种方法"></a>动态获取资源的两种方法</h3><ul>
<li>通过 <code>getResources().getIdentifier(String name,String defType,String defPackage)</code> 获取。</li>
<li>通过反射调用 R.java 类来获取。</li>
</ul>
<h2 id="动态加载已经安装的APK"><a href="#动态加载已经安装的APK" class="headerlink" title="动态加载已经安装的APK"></a>动态加载已经安装的APK</h2><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>在测试的apk中添加字符串资源：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;resources&gt;</div><div class="line">    ......</div><div class="line">    &lt;string name=&quot;str_test_dynamic_load_res&quot;&gt;测试动态加载资源&lt;/string&gt;</div><div class="line">&lt;/resources&gt;</div></pre></td></tr></table></figure>
<p>并将该apk安装到手机上面。<br>在另外一个apk中实现下面的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">public void clickTestDynamicLoadRes(View v) &#123;</div><div class="line">    try &#123;</div><div class="line">        // 待加载apk的包名</div><div class="line">        String packageName = &quot;com.example.heqiang.myapplication&quot;;</div><div class="line">        // 需要加载资源的类型</div><div class="line">        String type = &quot;string&quot;;</div><div class="line">        // 需要加载字符串资源的名称</div><div class="line">        String strName = &quot;str_test_dynamic_load_res&quot;;</div><div class="line"></div><div class="line">        Context context = this.createPackageContext(packageName,</div><div class="line">                Context.CONTEXT_INCLUDE_CODE | Context.CONTEXT_IGNORE_SECURITY);</div><div class="line">        Resources  res = context.getResources();</div><div class="line">        ClassLoader classLoader = context.getClassLoader();</div><div class="line"></div><div class="line">        // 获取资源ID</div><div class="line">        String rClassName = packageName+&quot;.R$&quot;+type;</div><div class="line">        Class rClass = classLoader.loadClass(rClassName);</div><div class="line">        int resID = (int) rClass.getField(strName).get(null);</div><div class="line"></div><div class="line">        String str = res.getString(resID);</div><div class="line">        Log.e(&quot;Test&quot;,&quot;str = &quot;+str);</div><div class="line">    &#125; catch (PackageManager.NameNotFoundException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; catch (ClassNotFoundException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;  catch (NoSuchFieldException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; catch (IllegalAccessException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Test: str = 测试动态加载资源</div></pre></td></tr></table></figure>
<p>成功实现字符串资源的动态加载，其它类型的资源实现方法一样。<br>上面例子中获取资源ID是通过反射R类来实现的，其实还有另外方法可以实现，通过 <code>Resources</code> 的 <code>getIdentifier</code> 方法类实现。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public void clickTestDynamicLoadRes(View v) &#123;</div><div class="line">    try &#123;</div><div class="line">        // 待加载apk的包名</div><div class="line">        String packageName = &quot;com.example.heqiang.myapplication&quot;;</div><div class="line">        // 需要加载资源的类型</div><div class="line">        String type = &quot;string&quot;;</div><div class="line">        // 需要加载字符串资源的名称</div><div class="line">        String strName = &quot;str_test_dynamic_load_res&quot;;</div><div class="line"></div><div class="line">        Context context = this.createPackageContext(packageName,</div><div class="line">                Context.CONTEXT_INCLUDE_CODE | Context.CONTEXT_IGNORE_SECURITY);</div><div class="line">        Resources  res = context.getResources();</div><div class="line"></div><div class="line">        int resID = res.getIdentifier(strName, type, packageName);</div><div class="line"></div><div class="line">        String str = res.getString(resID);</div><div class="line">        Log.e(&quot;Test&quot;,&quot;str = &quot;+str);</div><div class="line">    &#125; catch (PackageManager.NameNotFoundException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="动态加载未安装的APK"><a href="#动态加载未安装的APK" class="headerlink" title="动态加载未安装的APK"></a>动态加载未安装的APK</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">public void clickTestDynamicLoadRes(View v) &#123;</div><div class="line">    try &#123;</div><div class="line">        // 待加载apk的路径</div><div class="line">        String resPath = Environment.getExternalStorageDirectory()+&quot;/app-debug.apk&quot;;</div><div class="line">        // 需要加载资源的类型</div><div class="line">        String type = &quot;string&quot;;</div><div class="line">        // 需要加载字符串资源的名称</div><div class="line">        String strName = &quot;str_test_dynamic_load_res&quot;;</div><div class="line">        // 获取包信息。</div><div class="line">        PackageInfo mInfo = getPackageManager().getPackageArchiveInfo(resPath, PackageManager.GET_ACTIVITIES);</div><div class="line">        // 待加载apk的包名</div><div class="line">        String packageName = mInfo.packageName;</div><div class="line"></div><div class="line">        AssetManager assetManager = AssetManager.class.newInstance();</div><div class="line">        Method addAssetPath = AssetManager.class.getDeclaredMethod(&quot;addAssetPath&quot;, String.class);</div><div class="line">        addAssetPath.invoke(assetManager, resPath);</div><div class="line">        Resources res = new Resources(assetManager, super.getResources().getDisplayMetrics(), super.getResources().getConfiguration());</div><div class="line"></div><div class="line">        // 获取到资源的ID。</div><div class="line">        int resID = res.getIdentifier(strName, type, packageName);</div><div class="line"></div><div class="line">        String str = res.getString(resID);</div><div class="line">        Log.e(&quot;Test&quot;,&quot;str = &quot;+str);</div><div class="line"></div><div class="line">    &#125; catch (InstantiationException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; catch (IllegalAccessException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; catch (NoSuchMethodException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; catch (InvocationTargetException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      介绍使用 createPackageContext 方法和自定义 AssetManager 两种方法实现加载不同应用的资源
    
    </summary>
    
      <category term="Android 插件化" scheme="http://yoursite.com/categories/Android-%E6%8F%92%E4%BB%B6%E5%8C%96/"/>
    
    
      <category term="Android 插件化" scheme="http://yoursite.com/tags/Android-%E6%8F%92%E4%BB%B6%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Android 插件化框架Small解析 -- 类的动态加载源码分析</title>
    <link href="http://yoursite.com/2017/05/20/open-source-android-plugins-small-dynamic-load-class/"/>
    <id>http://yoursite.com/2017/05/20/open-source-android-plugins-small-dynamic-load-class/</id>
    <published>2017-05-20T02:00:00.000Z</published>
    <updated>2018-07-10T11:07:37.909Z</updated>
    
    <content type="html"><![CDATA[<p>在博客 <a href="http://www.heqiangfly.com/2017/05/18/android-plugins-dynamic-load-source-code-analysis/" target="_blank" rel="external">Android 插件化 – 类的动态加载源码分析 </a> 中我们从源码角度了解了类的动态加载，那么现在我们再来看一下 Small 框架中是怎么来实现类的动态加载的。</p>
<h2 id="ClassLoader-Dex-扩展"><a href="#ClassLoader-Dex-扩展" class="headerlink" title="ClassLoader Dex 扩展"></a>ClassLoader Dex 扩展</h2><p>在 <code>ApkBundleLauncher.loadBundle</code> 中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public void loadBundle(Bundle bundle) &#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">        // Load dex</div><div class="line">        final LoadedApk fApk = apk;</div><div class="line">        Bundle.postIO(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                try &#123;</div><div class="line">                    fApk.dexFile = DexFile.loadDex(fApk.path, fApk.optDexFile.getPath(), 0);</div><div class="line">                &#125; catch (IOException e) &#123;</div><div class="line">                    throw new RuntimeException(e);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        // Extract native libraries with specify ABI</div><div class="line">        String libDir = parser.getLibraryDirectory();</div><div class="line">        if (libDir != null) &#123;</div><div class="line">            apk.libraryPath = new File(apk.packagePath, libDir);</div><div class="line">        &#125;</div><div class="line">        sLoadedApks.put(packageName, apk);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div></pre></td></tr></table></figure>
<p>这里直接调用了 <code>DexFile.loadDex</code> 来加载 dex 文件并保存到 <code>LoadedApk</code> 对象的 <code>dexFile</code> 变量中。<br>把 native libraries 路径保存到 <code>LoadedApk.libraryPath</code> 中<br>然后在 <code>ApkBundleLauncher.postSetUp()</code> 方法中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">public void postSetUp() &#123;</div><div class="line">    ...</div><div class="line">    String[] dexPaths = new String[N];</div><div class="line">    DexFile[] dexFiles = new DexFile[N];</div><div class="line">    // 这里把所有的dex文件保存到一个数组中</div><div class="line">    for (LoadedApk apk : apks) &#123;</div><div class="line">        dexPaths[i] = apk.path;</div><div class="line">        dexFiles[i] = apk.dexFile;</div><div class="line">        if (Small.getBundleUpgraded(apk.packageName)) &#123;</div><div class="line">            if (apk.optDexFile.exists()) apk.optDexFile.delete();</div><div class="line">            Small.setBundleUpgraded(apk.packageName, false);</div><div class="line">        &#125;</div><div class="line">        i++;</div><div class="line">    &#125;</div><div class="line">    // 扩展当前ClassLoader的DexPathList，把前面解析到的dex添加到 DexPathList.dexElements 中去</div><div class="line">    ReflectAccelerator.expandDexPathList(cl, dexPaths, dexFiles);</div><div class="line"></div><div class="line">    // 把 native library 也保存到数组中</div><div class="line">    List&lt;File&gt; libPathList = new ArrayList&lt;File&gt;();</div><div class="line">    for (LoadedApk apk : apks) &#123;</div><div class="line">        if (apk.libraryPath != null) &#123;</div><div class="line">            libPathList.add(apk.libraryPath);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    // 扩展当前ClassLoader的DexPathList，把前面解析到的 native library 添加到 DexPathList.nativeLibraryDirectories 中</div><div class="line">    if (libPathList.size() &gt; 0) &#123;</div><div class="line">        ReflectAccelerator.expandNativeLibraryDirectories(cl, libPathList);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="扩展-DexPathList"><a href="#扩展-DexPathList" class="headerlink" title="扩展 DexPathList"></a>扩展 DexPathList</h3><p>这里主要是调用反射扩展当前 ClassLoader 的 DexPathList 的 dexElements 变量。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line">public static boolean expandDexPathList(ClassLoader cl, String[] dexPaths, DexFile[] dexFiles) &#123;</div><div class="line">    if (Build.VERSION.SDK_INT &lt; 14) &#123;</div><div class="line">        return V9_13.expandDexPathList(cl, dexPaths, dexFiles);</div><div class="line">    &#125; else &#123;</div><div class="line">        return V14_.expandDexPathList(cl, dexPaths, dexFiles);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">    public static boolean expandDexPathList(ClassLoader cl,</div><div class="line">                                            String[] dexPaths, DexFile[] dexFiles) &#123;</div><div class="line">        try &#123;</div><div class="line">            int N = dexPaths.length;</div><div class="line">            Object[] elements = new Object[N];</div><div class="line">            // 这里相当于做了DexPathList.makeElements的工作，生成 Element 数组</div><div class="line">            for (int i = 0; i &lt; N; i++) &#123;</div><div class="line">                String dexPath = dexPaths[i];</div><div class="line">                File pkg = new File(dexPath);</div><div class="line">                DexFile dexFile = dexFiles[i];</div><div class="line">                elements[i] = makeDexElement(pkg, dexFile);</div><div class="line">            &#125;</div><div class="line">            // 把生成的  Element 数组添加到DexPathList.dexElements中</div><div class="line">            fillDexPathList(cl, elements);</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    private static Object makeDexElement(File pkg, boolean isDirectory, DexFile dexFile) throws Exception &#123;</div><div class="line">        if (sDexElementClass == null) &#123;</div><div class="line">            sDexElementClass = Class.forName(&quot;dalvik.system.DexPathList$Element&quot;);</div><div class="line">        &#125;</div><div class="line">        if (sDexElementConstructor == null) &#123;</div><div class="line">            sDexElementConstructor = sDexElementClass.getConstructors()[0];</div><div class="line">        &#125;</div><div class="line">        Class&lt;?&gt;[] types = sDexElementConstructor.getParameterTypes();</div><div class="line">        switch (types.length) &#123;</div><div class="line">            case 3:</div><div class="line">                if (types[1].equals(ZipFile.class)) &#123;</div><div class="line">                    // Element(File apk, ZipFile zip, DexFile dex)</div><div class="line">                    ZipFile zip;</div><div class="line">                    try &#123;</div><div class="line">                        zip = new ZipFile(pkg);</div><div class="line">                    &#125; catch (IOException e) &#123;</div><div class="line">                        throw e;</div><div class="line">                    &#125;</div><div class="line">                    try &#123;</div><div class="line">                        return sDexElementConstructor.newInstance(pkg, zip, dexFile);</div><div class="line">                    &#125; catch (Exception e) &#123;</div><div class="line">                        zip.close();</div><div class="line">                        throw e;</div><div class="line">                    &#125;</div><div class="line">                &#125; else &#123;</div><div class="line">                    // Element(File apk, File zip, DexFile dex)</div><div class="line">                    return sDexElementConstructor.newInstance(pkg, pkg, dexFile);</div><div class="line">                &#125;</div><div class="line">            case 4:</div><div class="line">            default:</div><div class="line">                // Element(File apk, boolean isDir, File zip, DexFile dex)</div><div class="line">                if (isDirectory) &#123;</div><div class="line">                    return sDexElementConstructor.newInstance(pkg, true, null, null);</div><div class="line">                &#125; else &#123;</div><div class="line">                    return sDexElementConstructor.newInstance(pkg, false, pkg, dexFile);</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    private static void fillDexPathList(ClassLoader cl, Object[] elements)</div><div class="line">            throws NoSuchFieldException, IllegalAccessException &#123;</div><div class="line">        if (sPathListField == null) &#123;</div><div class="line">            sPathListField = getDeclaredField(DexClassLoader.class.getSuperclass(), &quot;pathList&quot;);</div><div class="line">        &#125;</div><div class="line">        Object pathList = sPathListField.get(cl);</div><div class="line">        if (sDexElementsField == null) &#123;</div><div class="line">            sDexElementsField = getDeclaredField(pathList.getClass(), &quot;dexElements&quot;);</div><div class="line">        &#125;</div><div class="line">        expandArray(pathList, sDexElementsField, elements, true);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="扩展-NativeLibraryDirectories"><a href="#扩展-NativeLibraryDirectories" class="headerlink" title="扩展 NativeLibraryDirectories"></a>扩展 NativeLibraryDirectories</h3><p>这里主要是调用反射扩展当前 ClassLoader 的 DexPathList 的 nativeLibraryDirectories 变量。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">public static void expandNativeLibraryDirectories(ClassLoader classLoader, List&lt;File&gt; libPath) &#123;</div><div class="line">    int v = Build.VERSION.SDK_INT;</div><div class="line">    if (v &lt; 14) &#123;</div><div class="line">        V9_13.expandNativeLibraryDirectories(classLoader, libPath);</div><div class="line">    &#125; else if (v &lt; 23) &#123;</div><div class="line">        V14_22.expandNativeLibraryDirectories(classLoader, libPath);</div><div class="line">    &#125; else &#123;</div><div class="line">        V23_.expandNativeLibraryDirectories(classLoader, libPath);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">    public static void expandNativeLibraryDirectories(ClassLoader classLoader,</div><div class="line">                                                      List&lt;File&gt; libPaths) &#123;</div><div class="line">        if (sPathListField == null) return;</div><div class="line"></div><div class="line">        Object pathList = getValue(sPathListField, classLoader);</div><div class="line">        if (pathList == null) return;</div><div class="line"></div><div class="line">        if (sDexPathList_nativeLibraryDirectories_field == null) &#123;</div><div class="line">            sDexPathList_nativeLibraryDirectories_field = getDeclaredField(</div><div class="line">                    pathList.getClass(), &quot;nativeLibraryDirectories&quot;);</div><div class="line">            if (sDexPathList_nativeLibraryDirectories_field == null) return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        try &#123;</div><div class="line">            // List&lt;File&gt; nativeLibraryDirectories</div><div class="line">            List&lt;File&gt; paths = getValue(sDexPathList_nativeLibraryDirectories_field, pathList);</div><div class="line">            if (paths == null) return;</div><div class="line">            paths.addAll(libPaths);</div><div class="line"></div><div class="line">            // Element[] nativeLibraryPathElements</div><div class="line">            if (sDexPathList_nativeLibraryPathElements_field == null) &#123;</div><div class="line">                sDexPathList_nativeLibraryPathElements_field = getDeclaredField(</div><div class="line">                        pathList.getClass(), &quot;nativeLibraryPathElements&quot;);</div><div class="line">            &#125;</div><div class="line">            if (sDexPathList_nativeLibraryPathElements_field == null) return;</div><div class="line"></div><div class="line">            int N = libPaths.size();</div><div class="line">            Object[] elements = new Object[N];</div><div class="line">            for (int i = 0; i &lt; N; i++) &#123;</div><div class="line">                Object dexElement = makeDexElement(libPaths.get(i));</div><div class="line">                elements[i] = dexElement;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            expandArray(pathList, sDexPathList_nativeLibraryPathElements_field, elements, false);</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="类的动态加载"><a href="#类的动态加载" class="headerlink" title="类的动态加载"></a>类的动态加载</h2><p>把 ClassLoader 扩展以后，就可以在宿主apk里面正常调用插件中的类了。插件类的入口 Activity 我们还是要通过反射来调用的，<a href="http://www.heqiangfly.com/2017/05/12/open-source-android-plugins-small-principle/" target="_blank" rel="external">启动插件Activity流程</a>在另外一篇博客中有介绍。</p>
]]></content>
    
    <summary type="html">
    
      类的动态加载源码分析
    
    </summary>
    
      <category term="Android 插件化" scheme="http://yoursite.com/categories/Android-%E6%8F%92%E4%BB%B6%E5%8C%96/"/>
    
    
      <category term="Android 插件化" scheme="http://yoursite.com/tags/Android-%E6%8F%92%E4%BB%B6%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Android 插件化 -- ClassLoader 源码分析</title>
    <link href="http://yoursite.com/2017/05/18/android-plugins-dynamic-load-source-code-analysis/"/>
    <id>http://yoursite.com/2017/05/18/android-plugins-dynamic-load-source-code-analysis/</id>
    <published>2017-05-18T02:00:00.000Z</published>
    <updated>2018-09-20T01:08:29.047Z</updated>
    
    <content type="html"><![CDATA[<p>在博客 <a href="http://www.heqiangfly.com/2017/05/15/android-plugins-dynamic-load-demo/" target="_blank" rel="external">Android 插件化 – 类的动态加载实践 </a> 中我们通过一个实例来实践了类的动态加载以及使用。接下来从源码角度来分析一下类的动态加载是如何实现的。</p>
<h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">├── BaseDexClassLoader</div><div class="line">    └── DexPathList</div><div class="line">        ├── DexPathList.makeDexElements</div><div class="line">            └── DexPathList.makeElements</div><div class="line">                └── DexPathList.loadDexFile</div><div class="line">                    ├── DexPathList.optimizedPathFor</div><div class="line">                    └── DexFile.loadDex</div><div class="line">                        ├── new DexFile</div><div class="line">                            └── DexFile.openDexFile</div><div class="line">                                └── DexFile.openDexFileNative</div><div class="line">        └── DexPathList.makePathElements</div><div class="line">└── ClassLoader.loadClass</div><div class="line">    └── ClassLoader.loadClass</div><div class="line">        ├── ClassLoader.findLoadedClass</div><div class="line">        └── BaseDexClassLoader.findClass</div><div class="line">            └── DexPathList.findClass</div><div class="line">                └── DexFile.loadClassBinaryName</div><div class="line">                    └── DexFile.defineClass</div></pre></td></tr></table></figure>
<h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>先来看一下 <code>BaseDexClassLoader</code> 的构造方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public BaseDexClassLoader(String dexPath, File optimizedDirectory,</div><div class="line">        String librarySearchPath, ClassLoader parent) &#123;</div><div class="line">    super(parent);</div><div class="line">    this.pathList = new DexPathList(this, dexPath, librarySearchPath, optimizedDirectory);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里除了调用父类 <code>ClassLoader</code> 的构造方法之外，就是创建了 <code>DexPathList</code> 对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">private ClassLoader(Void unused, ClassLoader parent) &#123;</div><div class="line">    this.parent = parent;</div><div class="line">&#125;</div><div class="line"></div><div class="line">protected ClassLoader(ClassLoader parent) &#123;</div><div class="line">    this(checkCreateClassLoader(), parent);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>ClassLoader</code> 的构造方法很简单，就是把参数中的父 <code>ClassLoader</code> 赋值给成员变量。</p>
<h3 id="DexPathList"><a href="#DexPathList" class="headerlink" title="DexPathList"></a>DexPathList</h3><p>下面来看一下 <code>DexPathList</code> 构造方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">public DexPathList(ClassLoader definingContext, String dexPath,</div><div class="line">        String librarySearchPath, File optimizedDirectory) &#123;</div><div class="line">    // 这里省略一些参数校验的代码</div><div class="line">    ......</div><div class="line"></div><div class="line">    this.definingContext = definingContext;</div><div class="line"></div><div class="line">    ArrayList&lt;IOException&gt; suppressedExceptions = new ArrayList&lt;IOException&gt;();</div><div class="line">    // 获取dex文件</div><div class="line">    this.dexElements = makeDexElements(splitDexPath(dexPath), optimizedDirectory,</div><div class="line">                                       suppressedExceptions, definingContext);</div><div class="line">    // Native libraries 可能在系统目录，也可能存在应用中，采用下面的搜索顺序：</div><div class="line">    //   1. This class loader&apos;s library path for application libraries (librarySearchPath):</div><div class="line">    //   1.1. Native library directories</div><div class="line">    //   1.2. Path to libraries in apk-files</div><div class="line">    //   2. The VM&apos;s library path from the system property for system libraries</div><div class="line">    //      also known as java.library.path</div><div class="line">    this.nativeLibraryDirectories = splitPaths(librarySearchPath, false);</div><div class="line">    this.systemNativeLibraryDirectories =</div><div class="line">            splitPaths(System.getProperty(&quot;java.library.path&quot;), true);</div><div class="line">    List&lt;File&gt; allNativeLibraryDirectories = new ArrayList&lt;&gt;(nativeLibraryDirectories);</div><div class="line">    allNativeLibraryDirectories.addAll(systemNativeLibraryDirectories);</div><div class="line">    // 获取Native libraries</div><div class="line">    this.nativeLibraryPathElements = makePathElements(allNativeLibraryDirectories,</div><div class="line">                                                      suppressedExceptions,</div><div class="line">                                                      definingContext);</div><div class="line"></div><div class="line">    if (suppressedExceptions.size() &gt; 0) &#123;</div><div class="line">        this.dexElementsSuppressedExceptions =</div><div class="line">            suppressedExceptions.toArray(new IOException[suppressedExceptions.size()]);</div><div class="line">    &#125; else &#123;</div><div class="line">        dexElementsSuppressedExceptions = null;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面来看一下 <code>DexPathList.makeElements</code> 代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">private static Element[] makeElements(List&lt;File&gt; files, File optimizedDirectory,</div><div class="line">                                      List&lt;IOException&gt; suppressedExceptions,</div><div class="line">                                      boolean ignoreDexFiles,</div><div class="line">                                      ClassLoader loader) &#123;</div><div class="line">    Element[] elements = new Element[files.size()];</div><div class="line">    int elementsPos = 0;</div><div class="line">    // 打开所有的文件并加载里面所有的dex文件</div><div class="line">    for (File file : files) &#123;</div><div class="line">        File zip = null;</div><div class="line">        File dir = new File(&quot;&quot;);</div><div class="line">        DexFile dex = null;</div><div class="line">        String path = file.getPath();</div><div class="line">        String name = file.getName();</div><div class="line">        // zipSeparator = &quot;!/&quot;</div><div class="line">        if (path.contains(zipSeparator)) &#123;</div><div class="line">            String split[] = path.split(zipSeparator, 2);</div><div class="line">            zip = new File(split[0]);</div><div class="line">            dir = new File(split[1]);</div><div class="line">        &#125; else if (file.isDirectory()) &#123;</div><div class="line">            // 支持从指定文件路径中加载dex和动态库</div><div class="line">            // 如果是一个文件路径，那么创建一个 Element 对象</div><div class="line">            elements[elementsPos++] = new Element(file, true, null, null);</div><div class="line">        &#125; else if (file.isFile()) &#123;</div><div class="line">            // DEX_SUFFIX = &quot;.dex&quot;</div><div class="line">            // 这里调用 loadDexFile 加载dex文件或者zip/jar/apk文件</div><div class="line">            if (!ignoreDexFiles &amp;&amp; name.endsWith(DEX_SUFFIX)) &#123;</div><div class="line">                // 原始的dex文件 (不是包含在 zip/jar 里).</div><div class="line">                try &#123;</div><div class="line">                    dex = loadDexFile(file, optimizedDirectory, loader, elements);</div><div class="line">                &#125; catch (IOException suppressed) &#123;</div><div class="line">                    System.logE(&quot;Unable to load dex file: &quot; + file, suppressed);</div><div class="line">                    suppressedExceptions.add(suppressed);</div><div class="line">                &#125;</div><div class="line">            &#125; else &#123;</div><div class="line">                zip = file;</div><div class="line"></div><div class="line">                if (!ignoreDexFiles) &#123;</div><div class="line">                    try &#123;</div><div class="line">                        dex = loadDexFile(file, optimizedDirectory, loader, elements);</div><div class="line">                    &#125; catch (IOException suppressed) &#123;</div><div class="line">                        suppressedExceptions.add(suppressed);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">            System.logW(&quot;ClassLoader referenced unknown path: &quot; + file);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if ((zip != null) || (dex != null)) &#123;</div><div class="line">            // 将文件加入到数组中</div><div class="line">            elements[elementsPos++] = new Element(dir, false, zip, dex);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    if (elementsPos != elements.length) &#123;</div><div class="line">        elements = Arrays.copyOf(elements, elementsPos);</div><div class="line">    &#125;</div><div class="line">    return elements;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>ClassLoader</code> 构造方法部分我们分析完了，其实整个过程就是调用了 <code>DexPathList</code> 的构造函数，把 dex 文件或者 Native libraries 加载到 <code>Element</code> 数组的过程。<br>体现在 <code>DexPathList</code> 中的 <code>dexElements</code> 和 <code>nativeLibraryPathElements</code> 成员变量，供 <code>DexPathList.findClass</code> 和 <code>DexPathList.findLibrary</code> 方法查询。</p>
<p>上面的方法中调用了 <code>DexPathList.loadDexFile</code> 方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">private static DexFile loadDexFile(File file, File optimizedDirectory, ClassLoader loader,</div><div class="line">                                   Element[] elements)</div><div class="line">        throws IOException &#123;</div><div class="line">    if (optimizedDirectory == null) &#123;</div><div class="line">        return new DexFile(file, loader, elements);</div><div class="line">    &#125; else &#123;</div><div class="line">        String optimizedPath = optimizedPathFor(file, optimizedDirectory);</div><div class="line">        return DexFile.loadDex(file.getPath(), optimizedPath, 0, loader, elements);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里可以看到，针对是否指定 <code>optimizedDirectory</code> 做了不同的处理。这里其实是分别调用了不同的 <code>DexFile</code> 构造方法。</p>
<h3 id="DexFile"><a href="#DexFile" class="headerlink" title="DexFile"></a>DexFile</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">private static Object openDexFile(String sourceName, String outputName, int flags,</div><div class="line">        ClassLoader loader, DexPathList.Element[] elements) throws IOException &#123;</div><div class="line">    // Use absolute paths to enable the use of relative paths when testing on host.</div><div class="line">    return openDexFileNative(new File(sourceName).getAbsolutePath(),</div><div class="line">                             (outputName == null)</div><div class="line">                                 ? null</div><div class="line">                                 : new File(outputName).getAbsolutePath(),</div><div class="line">                             flags,</div><div class="line">                             loader,</div><div class="line">                             elements);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>DexFile</code> 主要就是调用了 native 方法 <code>openDexFileNative</code> 来打开 dex 文件。</p>
<h2 id="加载类"><a href="#加载类" class="headerlink" title="加载类"></a>加载类</h2><p>下面来看一下类的加载过程，这里我们要关注一下 ClassLoader 的双亲委托机制：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">protected Class&lt;?&gt; loadClass(String name, boolean resolve)</div><div class="line">    throws ClassNotFoundException</div><div class="line">&#123;</div><div class="line">        // 首先，看需要获取的类是否已经加载进来</div><div class="line">        Class c = findLoadedClass(name);</div><div class="line">        if (c == null) &#123;</div><div class="line">            long t0 = System.nanoTime();</div><div class="line">            try &#123;</div><div class="line">                // 如果没有找到，如果指定了父加载器，</div><div class="line">                // 就调用父加载器的loadClass方法去加载</div><div class="line">                if (parent != null) &#123;</div><div class="line">                    c = parent.loadClass(name, false);</div><div class="line">                &#125; else &#123;</div><div class="line">                // 如果没有父类加载器，则委托bootstrap加载器加载</div><div class="line">                    c = findBootstrapClassOrNull(name);</div><div class="line">                &#125;</div><div class="line">            &#125; catch (ClassNotFoundException e) &#123;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            if (c == null) &#123;</div><div class="line">                // 如果还是没有加载，就调用自己的 findClass 方法加载</div><div class="line">                // 在ClassLoader中findClass是个空实现，需要子类来实现</div><div class="line">                long t1 = System.nanoTime();</div><div class="line">                c = findClass(name);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return c;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>findClass</code> 方法其实调用的是 <code>BaseDexClassLoader</code> 的 <code>findClass</code> 方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected Class&lt;?&gt; findClass(String name) throws ClassNotFoundException &#123;</div><div class="line">    List&lt;Throwable&gt; suppressedExceptions = new ArrayList&lt;Throwable&gt;();</div><div class="line">    Class c = pathList.findClass(name, suppressedExceptions);</div><div class="line">    if (c == null) &#123;</div><div class="line">        ClassNotFoundException cnfe = new ClassNotFoundException(&quot;Didn&apos;t find class \&quot;&quot; + name + &quot;\&quot; on path: &quot; + pathList);</div><div class="line">        for (Throwable t : suppressedExceptions) &#123;</div><div class="line">            cnfe.addSuppressed(t);</div><div class="line">        &#125;</div><div class="line">        throw cnfe;</div><div class="line">    &#125;</div><div class="line">    return c;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实调用的是 <code>DexPathList.findClass</code> 方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public Class findClass(String name, List&lt;Throwable&gt; suppressed) &#123;</div><div class="line">    // 其实就是看前面加载的 dexElements 数组中是否存在这个类</div><div class="line">    for (Element element : dexElements) &#123;</div><div class="line">        DexFile dex = element.dexFile;</div><div class="line">        // 如果找到了，就调用 DexFile.loadClassBinaryName 来加载类</div><div class="line">        if (dex != null) &#123;</div><div class="line">            Class clazz = dex.loadClassBinaryName(name, definingContext, suppressed);</div><div class="line">            if (clazz != null) &#123;</div><div class="line">                return clazz;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    if (dexElementsSuppressedExceptions != null) &#123;</div><div class="line">        suppressed.addAll(Arrays.asList(dexElementsSuppressedExceptions));</div><div class="line">    &#125;</div><div class="line">    return null;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>类的加载重点在 <code>DexFile.defineClass</code> 方法，这里面会调用 native 方法 <code>defineClassNative</code>。这里面的代码暂时不做分析。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从上面分析我们可以看出，在构造 <code>DexClassLoader</code> 和 <code>PathClassLoader</code> 时，会加载 jar/apk/zip/dex 中的 dex 文件以及 Native libraries 并保存到 <code>Element</code> 数组中。后面动态加载类时都是从保存到数组中的 dex 文件中搜索，并调用 <code>DexFile</code> 的 Native 方法进行加载的过程。Native 方法这里暂不分析，有兴趣的大家可以自行研究。</p>
]]></content>
    
    <summary type="html">
    
      ClassLoader 源码分析
    
    </summary>
    
      <category term="Android 插件化" scheme="http://yoursite.com/categories/Android-%E6%8F%92%E4%BB%B6%E5%8C%96/"/>
    
    
      <category term="Android 插件化" scheme="http://yoursite.com/tags/Android-%E6%8F%92%E4%BB%B6%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Android 插件化 -- 类的动态加载实践</title>
    <link href="http://yoursite.com/2017/05/15/android-plugins-dynamic-load-demo/"/>
    <id>http://yoursite.com/2017/05/15/android-plugins-dynamic-load-demo/</id>
    <published>2017-05-15T02:00:00.000Z</published>
    <updated>2018-09-14T14:27:47.779Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>实现 Android 类的动态加载，我们一般通过两个类实现 <code>DexClassLoader</code> 和 <code>PathClassLoader</code>。<br>这两个类的区别在很多类似的文章里面也有介绍：</p>
<ul>
<li>DexClassLoader：可以加载jar、apk、dex，并且支持从 SD 卡中加载文件。</li>
<li>PathClassLoader：只能加载已经安装到系统中的Apk文件，也就是/data/app目录下的apk文件。</li>
</ul>
<p>下面我们来看一下这两个类的源码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class DexClassLoader extends BaseDexClassLoader &#123;</div><div class="line">    public DexClassLoader(String dexPath, String optimizedDirectory,</div><div class="line">            String librarySearchPath, ClassLoader parent) &#123;</div><div class="line">        super(dexPath, new File(optimizedDirectory), librarySearchPath, parent);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class PathClassLoader extends BaseDexClassLoader &#123;</div><div class="line">    public PathClassLoader(String dexPath, ClassLoader parent) &#123;</div><div class="line">        super(dexPath, null, null, parent);</div><div class="line">    &#125;</div><div class="line">    public PathClassLoader(String dexPath, String librarySearchPath, ClassLoader parent) &#123;</div><div class="line">        super(dexPath, null, librarySearchPath, parent);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，这两个类都是继承自 <code>BaseDexClassLoader</code>，不同的是构造函数接受的参数不同：<br>先来看一下 <code>DexClassLoader</code> 的参数：</p>
<ul>
<li>dexPath：包含 class.dex 的 apk、jar 文件路径 ，多个用文件分隔符 <code>File.pathSeparator</code> 分隔。</li>
<li>optimizedDirectory：用来缓存优化的 dex 文件的路径，即从 apk 或 jar 文件中提取出来的 dex 文件。该路径不可以为空。</li>
<li>librarySearchPath：存储 C/C++ 库文件的路径。</li>
<li>parent：父类加载器，可以通过 <code>ClassLoader.getSystemClassLoader()</code> 或者 <code>Context.getClassLoader()</code> 获取。</li>
</ul>
<p>再来看一下 <code>PathClassLoader</code> 的参数，少了 <code>optimizedDirectory</code> 参数，也证实了前面说的 <code>PathClassLoader</code> 只能加载安装过即已经进行过 odex 优化过的文件。<br>这里指出一下，dex 和 apk 是可以直接加载的，因为它们都是或者内部有 dex 文件，而原始的 jar 是不行的，必须转换成 dalvik 所能识别的字节码文件，转换工具可以使用android sdk中platform-tools目录下的 dx 工具：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dx --dex --output=dest.jar src.jar</div></pre></td></tr></table></figure>
<p>一般实现类的动态加载，有两种方法：</p>
<ul>
<li>扩展ClassLoader</li>
<li>扩展当前ClassLoader的Dex Path</li>
</ul>
<p>下面来分别介绍：</p>
<h2 id="动态加载的类"><a href="#动态加载的类" class="headerlink" title="动态加载的类"></a>动态加载的类</h2><p>我们在另外一个apk中实现下的类：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class TestDynamicLoad &#123;</div><div class="line">    public String getString() &#123;</div><div class="line">        Log.e(&quot;Test&quot;,&quot;pid = &quot;+android.os.Process.myPid() );</div><div class="line">        return &quot;This is a test case&quot;;</div><div class="line">    &#125;</div><div class="line">    public int add(int a, int b) &#123;</div><div class="line">        Log.e(&quot;Test&quot;,&quot;pid = &quot;+android.os.Process.myPid() );</div><div class="line">        return a + b;</div><div class="line">    &#125;</div><div class="line">    // 主要为了测试一个类中实例话另外一个类的情况</div><div class="line">    public void testAnotherClass() &#123;</div><div class="line">        TestDynamicLoad2 dynamicLoad2 = new TestDynamicLoad2();</div><div class="line">        dynamicLoad2.printStr();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public class TestDynamicLoad2 &#123;</div><div class="line">    public void printStr()&#123;</div><div class="line">        Log.e(&quot;Test&quot;,&quot;This is TestDynamicLoad2&quot; );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后编译生成apk后安装并push到手机的SD卡上。<br>然后在另外一个apk中分别通过 <code>DexClassLoader</code> 和 <code>PathClassLoader</code> 来实现类的动态加载。</p>
<h2 id="扩展ClassLoader"><a href="#扩展ClassLoader" class="headerlink" title="扩展ClassLoader"></a>扩展ClassLoader</h2><h3 id="DexClassLoader-加载"><a href="#DexClassLoader-加载" class="headerlink" title="DexClassLoader 加载"></a>DexClassLoader 加载</h3><p>由于需要从SD卡中读取apk文件，需要加上SD卡读取权限：<code>&lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot;/&gt;</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">String className = &quot;com.example.hq.myapplication.TestDynamicLoad&quot;;</div><div class="line">String dexPath = Environment.getExternalStorageDirectory()+&quot;/app-debug.apk&quot;;</div><div class="line">File dexOutputDir = this.getDir(&quot;dex&quot;, 0);</div><div class="line">final String dexOutputPath = dexOutputDir.getAbsolutePath();</div><div class="line">Log.e(&quot;Test&quot;, &quot;dexOutputPath = &quot; + dexOutputPath);</div><div class="line">ClassLoader localClassLoader = getClassLoader();</div><div class="line">DexClassLoader dexClassLoader = new DexClassLoader(dexPath,</div><div class="line">        dexOutputPath, null, localClassLoader);</div><div class="line"></div><div class="line">try &#123;</div><div class="line">    Class&lt;?&gt; localClass = dexClassLoader.loadClass(className);</div><div class="line">    Constructor&lt;?&gt; localConstructor = localClass.getConstructor(new Class[]&#123;&#125;);</div><div class="line">    Object instance = localConstructor.newInstance(new Object[] &#123;&#125;);</div><div class="line">    Log.e(&quot;Test&quot;, &quot;instance = &quot; + instance);</div><div class="line"></div><div class="line">    Method getString = localClass.getMethod(&quot;getString&quot;);</div><div class="line">    getString.setAccessible(true);</div><div class="line">    String str = (String) getString.invoke(instance);</div><div class="line">    Log.e(&quot;Test&quot;,&quot;Dynamic load class getString = &quot;+str);</div><div class="line"></div><div class="line">    Method add = localClass.getMethod(&quot;add&quot;, int.class, int.class);</div><div class="line">    add.setAccessible(true);</div><div class="line">    int addResult = (int) add.invoke(instance, 6,8);</div><div class="line">    Log.e(&quot;Test&quot;,&quot;Dynamic load class add = &quot;+addResult);</div><div class="line"></div><div class="line">    Method print = localClass.getMethod(&quot;testAnotherClass&quot;);</div><div class="line">    print.setAccessible(true);</div><div class="line">    print.invoke(instance);</div><div class="line"></div><div class="line">&#125; catch (ClassNotFoundException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125; catch (NoSuchMethodException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125; catch (IllegalAccessException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125; catch (InstantiationException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125; catch (InvocationTargetException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码执行后在手机的<code>/data/user/0/com.example.hq.testsomething/app_dex</code>目录生成 app-debug.dex 文件。</p>
<p>下面是执行的打印结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">process id 30702</div><div class="line">dexOutputPath = /data/user/0/com.example.hq.testsomething/app_dex</div><div class="line">instance = com.example.hq.myapplication.TestDynamicLoad@5ff77f5</div><div class="line">pid = 30702</div><div class="line">Dynamic load class getString = This is a test case</div><div class="line">pid = 30702</div><div class="line">Dynamic load class add = 14</div><div class="line">This is TestDynamicLoad2</div></pre></td></tr></table></figure>
<h3 id="PathClassLoader-加载"><a href="#PathClassLoader-加载" class="headerlink" title="PathClassLoader 加载"></a>PathClassLoader 加载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">    String className = &quot;com.example.hq.myapplication.TestDynamicLoad&quot;;</div><div class="line"></div><div class="line">    ApplicationInfo ai;</div><div class="line">    try &#123;</div><div class="line">        ai = getPackageManager().getApplicationInfo(&quot;com.example.hq.myapplication&quot;, 0);</div><div class="line">    &#125; catch (PackageManager.NameNotFoundException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    String dexPath = ai.sourceDir;</div><div class="line">    String nativePath = ai.nativeLibraryDir;</div><div class="line">    Log.e(&quot;Test&quot;, &quot;dexPath = &quot; + dexPath);</div><div class="line">    Log.e(&quot;Test&quot;, &quot;nativePath = &quot; + nativePath);</div><div class="line"></div><div class="line">    ClassLoader localClassLoader = getClassLoader();</div><div class="line">    PathClassLoader pathClassLoader = new PathClassLoader(dexPath, null, localClassLoader);</div><div class="line">    Log.e(&quot;Test&quot;, &quot;pathClassLoader = &quot; + pathClassLoader);</div><div class="line">    try &#123;</div><div class="line">        Class&lt;?&gt; localClass = pathClassLoader.loadClass(className);</div><div class="line">        Constructor&lt;?&gt; localConstructor = localClass.getConstructor(new Class[]&#123;&#125;);</div><div class="line">        Object instance = localConstructor.newInstance(new Object[] &#123;&#125;);</div><div class="line">        Log.e(&quot;Test&quot;, &quot;instance = &quot; + instance);</div><div class="line">        Method getString = localClass.getMethod(&quot;getString&quot;);</div><div class="line">        getString.setAccessible(true);</div><div class="line">        String str = (String) getString.invoke(instance);</div><div class="line">        Log.e(&quot;Test&quot;,&quot;Dynamic load class getString = &quot;+str);</div><div class="line">        Method add = localClass.getMethod(&quot;add&quot;, int.class, int.class);</div><div class="line">        add.setAccessible(true);</div><div class="line">        int addResult = (int) add.invoke(instance, 6,8);</div><div class="line">        Log.e(&quot;Test&quot;,&quot;Dynamic load class add = &quot;+addResult);</div><div class="line">        Method print = localClass.getMethod(&quot;testAnotherClass&quot;);</div><div class="line">        print.setAccessible(true);</div><div class="line">        print.invoke(instance);</div><div class="line">    &#125; catch (ClassNotFoundException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; catch (NoSuchMethodException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; catch (IllegalAccessException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; catch (InstantiationException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; catch (InvocationTargetException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">dexPath = /data/app/com.example.hq.myapplication-1/base.apk</div><div class="line">nativePath = /data/app/com.example.hq.myapplication-1/lib/arm64</div><div class="line">process id 32385</div><div class="line">pathClassLoader = dalvik.system.PathClassLoader[DexPathList[[zip file &quot;/data/app/com.example.hq.myapplication-1/base.apk&quot;],nativeLibraryDirectories=[/system/lib, /vendor/lib]]]</div><div class="line">instance = com.example.hq.myapplication.TestDynamicLoad@5ff77f5</div><div class="line">pid = 32385</div><div class="line">Dynamic load class getString = This is a test case</div><div class="line">pid = 32385</div><div class="line">Dynamic load class add = 14</div><div class="line">This is TestDynamicLoad2</div></pre></td></tr></table></figure>
<p>可见，只要把类动态加载进来，<code>TestDynamicLoad</code> 中实例化 <code>TestDynamicLoad2</code> 以及调用它的方法和正常的调用没什么区别。</p>
<h2 id="扩展当前CloassLoader-的-Dex-Path"><a href="#扩展当前CloassLoader-的-Dex-Path" class="headerlink" title="扩展当前CloassLoader 的 Dex Path"></a>扩展当前CloassLoader 的 Dex Path</h2><p>在 <code>BaseDexClassLoader</code> 里面有下面的方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @hide</div><div class="line"> */</div><div class="line">public void addDexPath(String dexPath) &#123;</div><div class="line">    pathList.addDexPath(dexPath, null /*optimizedDirectory*/);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以实现对 <code>DexPathList</code> 的 <code>dexElements</code> 扩展。<br>测试代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">private void  testDynamicLoad() &#123;</div><div class="line">    // 获取插件apk信息</div><div class="line">    String className = &quot;com.example.hq.myapplication.TestDynamicLoad&quot;;</div><div class="line">    ApplicationInfo ai;</div><div class="line">    try &#123;</div><div class="line">        ai = getPackageManager().getApplicationInfo(&quot;com.example.hq.myapplication&quot;, 0);</div><div class="line">    &#125; catch (PackageManager.NameNotFoundException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    String dexPath = ai.sourceDir;</div><div class="line">    String nativePath = ai.nativeLibraryDir;</div><div class="line">    Log.e(&quot;Test&quot;, &quot;dexPath = &quot; + dexPath);</div><div class="line">    Log.e(&quot;Test&quot;, &quot;nativePath = &quot; + nativePath);</div><div class="line"></div><div class="line">    //扩展Dex Path</div><div class="line">    try &#123;</div><div class="line">        PathClassLoader pathClassLoader = (PathClassLoader) getClassLoader();</div><div class="line">        Class&lt;?&gt; herosClass = pathClassLoader.getClass().getSuperclass();</div><div class="line">        Method m1 = herosClass.getMethod(&quot;addDexPath&quot;, String.class);</div><div class="line">        m1.setAccessible(true);</div><div class="line">        m1.invoke(pathClassLoader, dexPath);</div><div class="line">    &#125; catch (IllegalAccessException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; catch (InvocationTargetException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; catch (NoSuchMethodException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 反射调用测试案例</div><div class="line">    try &#123;</div><div class="line">        Class&lt;?&gt; localClass = getClassLoader().loadClass(className);</div><div class="line">        Constructor&lt;?&gt; localConstructor = localClass.getConstructor(new Class[]&#123;&#125;);</div><div class="line">        Object instance = localConstructor.newInstance(new Object[] &#123;&#125;);</div><div class="line">        Log.e(&quot;Test&quot;, &quot;instance = &quot; + instance);</div><div class="line">        Method getString = localClass.getMethod(&quot;getString&quot;);</div><div class="line">        getString.setAccessible(true);</div><div class="line">        String str = (String) getString.invoke(instance);</div><div class="line">        Log.e(&quot;Test&quot;,&quot;Dynamic load class getString = &quot;+str);</div><div class="line">        Method add = localClass.getMethod(&quot;add&quot;, int.class, int.class);</div><div class="line">        add.setAccessible(true);</div><div class="line">        int addResult = (int) add.invoke(instance, 6,8);</div><div class="line">        Log.e(&quot;Test&quot;,&quot;Dynamic load class add = &quot;+addResult);</div><div class="line">        Method print = localClass.getMethod(&quot;testAnotherClass&quot;);</div><div class="line">        print.setAccessible(true);</div><div class="line">        print.invoke(instance);</div><div class="line">    &#125; catch (ClassNotFoundException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; catch (NoSuchMethodException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; catch (IllegalAccessException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; catch (InstantiationException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; catch (InvocationTargetException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">dexPath = /data/app/com.example.hq.myapplication-1/base.apk</div><div class="line">nativePath = /data/app/com.example.hq.myapplication-1/lib/arm64</div><div class="line">E/Test: instance = com.example.hq.myapplication.TestDynamicLoad@3ccb3e5</div><div class="line">E/Test: pid = 21818</div><div class="line">E/Test: Dynamic load class getString = This is a test case</div><div class="line">E/Test: pid = 21818</div><div class="line">E/Test: Dynamic load class add = 14</div><div class="line">E/Test: This is TestDynamicLoad2</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      通过 Demo 来实现类的动态加载
    
    </summary>
    
      <category term="Android 插件化" scheme="http://yoursite.com/categories/Android-%E6%8F%92%E4%BB%B6%E5%8C%96/"/>
    
    
      <category term="Android 插件化" scheme="http://yoursite.com/tags/Android-%E6%8F%92%E4%BB%B6%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Android 插件化框架Small解析--动态注册组件原理及启动插件Activity流程</title>
    <link href="http://yoursite.com/2017/05/12/open-source-android-plugins-small-principle/"/>
    <id>http://yoursite.com/2017/05/12/open-source-android-plugins-small-principle/</id>
    <published>2017-05-12T02:00:00.000Z</published>
    <updated>2018-09-20T01:08:29.048Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道，如果我们实现了一个 <code>Activity</code>，那么就必须在 your AndroidManifest.xml 中申明，否则会报 <code>android.content.ActivityNotFoundException: Unable to find explicit activity class {XXXXXX}; have you declared this activity in your AndroidManifest.xml?</code> 的错误。<br>下面介绍的的动态注册组件就是为了绕开这个机制。当然，如果你在宿主的 AndroidManifest.xml 里面把插件需要的 <code>Activity</code> 都申明一下，那么下面的工作就完全不用做了。</p>
<h2 id="动态注册组件原理"><a href="#动态注册组件原理" class="headerlink" title="动态注册组件原理"></a>动态注册组件原理</h2><p>动态的注册组件就是我们常说的Hook技术。<br>想要了解插件化的Hook技术我们需要先了解一下 <code>Activity</code> 的启动流程，<code>Activity</code> 的启动流程要涉及到App进程以及system_server进程，system_server进程的AMS负责 <code>Activity</code> 的真实性校验以及生命周期管理，App进程负责创建 <code>Activity</code> 对象以及回调生命周期的方法。<br>由于<code>Activity</code> 的检验过程是在AMS进程完成的，我们对system_server进程里面的操作无能为力，只有在我们APP进程里面执行的过程才是有可能被Hook掉的，因此，所有的Hook我们只能在App进程完成，那么在AMS进程里面进行校验的 <code>Activity</code> 也必须是真实存在的。<br>因此，Hook的基本思路就是当调用AMS时，就用我们真实注册的存在的 <code>Activity</code> 信息（对应上一篇文章的AndroidManifest.xml中的A、A1、A2….A33等 <code>Activity</code>），AMS回调到App进程时替换为插件中需要启动的 <code>Activity</code> 信息，从而达到欺骗系统的目的。<br>可以先看一下我的博客<a href="http://www.heqiangfly.com/2016/04/10/android-source-code-analysis-activity-start-process/" target="_blank" rel="external">startActivity 流程</a>，通过看启动流程图我们可以清晰的看到，涉及到 <code>Acitivity</code> 的AMS进程和App进程的边界操作有两个：startActivity和对LAUNCH_ACTIVITY消息的处理，这也就是我们需要Hook的两个重要点。<br>下面通过实际代码来进程介绍。<br>前面我们说过，替换 <code>Instrumentation</code> 对象和 <code>ActivityThreadHandlerCallback</code> 是插件化工作中的重头戏。这里用到了我们说的“Hook”技术。<br><code>Instrumentation</code>类看一下<a href="https://developer.android.com/reference/android/app/Instrumentation.html?hl=zh-cn" target="_blank" rel="external">官方文档对这个类的解释</a>，该类跟踪 <code>Application</code> 及 <code>Activity</code> 的整个生命周期，它的一些方法在 <code>Application</code> 及 <code>Activity</code> 所有生命周期函数的调用中，都会先调用这些方法。<br>熟悉 <code>Activity</code> 启动流程的同学都知道，启动 <code>Activity</code> 是由 <code>Activity</code> 的 <code>startActivityForResult()</code> 方法启动，通过 <code>Instrumentation</code> 的 <code>execStartActivity</code> 方法激活生命周期。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivityForResult</span><span class="params">(Intent intent, <span class="keyword">int</span> requestCode, @Nullable Bundle options)</span> </span>&#123;</div><div class="line">    ……</div><div class="line">    <span class="keyword">if</span> (mParent == <span class="keyword">null</span>) &#123;</div><div class="line">        Instrumentation.ActivityResult ar =</div><div class="line">            mInstrumentation.execStartActivity(</div><div class="line">                <span class="keyword">this</span>, mMainThread.getApplicationThread(), mToken, <span class="keyword">this</span>,</div><div class="line">                intent, requestCode, options);</div><div class="line">        <span class="keyword">if</span> (ar != <span class="keyword">null</span>) &#123;</div><div class="line">            mMainThread.sendActivityResult(</div><div class="line">                mToken, mEmbeddedID, requestCode, ar.getResultCode(),</div><div class="line">                ar.getResultData());</div><div class="line">        &#125;</div><div class="line">    ……</div></pre></td></tr></table></figure>
<p><code>Activity</code> 的实例化在 <code>ActivityThread</code> 的 <code>performLaunchActivity()</code> 方法中通过 <code>Instrumentation</code> 的 <code>newActivity()</code> 方法实例化。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Activity <span class="title">performLaunchActivity</span><span class="params">(ActivityClientRecord r, Intent customIntent)</span> </span>&#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    Activity activity = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        java.lang.ClassLoader cl = r.packageInfo.getClassLoader();</div><div class="line">        activity = mInstrumentation.newActivity( <span class="comment">// Override entry 2</span></div><div class="line">                cl, component.getClassName(), r.intent);</div><div class="line">        StrictMode.incrementExpectedActivityCount(activity.getClass());</div><div class="line">        r.intent.setExtrasClassLoader(cl);</div><div class="line">        r.intent.prepareToEnterProcess();</div><div class="line">        <span class="keyword">if</span> (r.state != <span class="keyword">null</span>) &#123;</div><div class="line">            r.state.setClassLoader(cl);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>‘onCreate()’ 生命周期函数的调用也是在 <code>ActivityThread.performLaunchActivity()</code> 中调用 <code>Instrumentation</code> 的 <code>callActivityOnCreate()</code> 方法来实现的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Activity <span class="title">performLaunchActivity</span><span class="params">(ActivityClientRecord r, Intent customIntent)</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    activity.mCalled = <span class="keyword">false</span>;</div><div class="line">    <span class="comment">// 调用Activity.onCreate方法</span></div><div class="line">    <span class="keyword">if</span> (r.isPersistable()) &#123;</div><div class="line">        mInstrumentation.callActivityOnCreate(activity, r.state, r.persistentState);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        mInstrumentation.callActivityOnCreate(activity, r.state);</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因此，得到了这个对象，我们就可以进入并跟踪 <code>Application</code> 和 <code>Activity</code> 的生命周期流程。<br>Small 想要做到动态注册 <code>Activity</code>，首先在宿主 Manifest 中注册一个命名特殊的占坑 <code>Activity</code> 来欺骗 <code>startActivityForResult</code> 以获得生命周期，再欺骗 <code>performLaunchActivity</code> 来获得插件 <code>Activity</code> 实例，又为了处理之间的信息传递，因此有了后面的 <code>ActivityThreadHandlerCallback</code>。</p>
<p>接下来我们就在 <code>ApkBundleLauncher.InstrumentationWrapper</code> 来看一下这些是如何实现的。<br>先来看一下 <code>execStartActivity</code> 方法：<br><code>execStartActivity</code>方法有两个实现，一个是API Level 20以前的，一个是API Level 20以后的，仅仅是参数不同而已。<br>由于前面我们用 <code>ApkBundleLauncher.InstrumentationWrapper</code> 替换了 <code>mInstrumentation</code>，因此会调用到 <code>ApkBundleLauncher.InstrumentationWrapper</code> 中的 <code>execStartActivity()</code> 方法。该方法做的工作后面再详细介绍。主要是把需要启动的真实 <code>Activity</code> 替换为占坑 <code>Activity</code>。<br>熟悉 <code>Activity</code> 流程的同学都知道，真正启动 <code>Activity</code> 时，<code>ActivityManagerService</code> 调用 <code>ApplicationThread.scheduleLaunchActivity</code> 接口，通知相应的进程执行启动 <code>Activity</code> 的操作，<code>ApplicationThread</code> 把这个启动 <code>Activity</code> 的操作转发给 <code>ActivityThread</code>，<code>ActivityThread</code> 通过 <code>ClassLoader</code> 导入相应的 <code>Activity</code> 类，然后把它启动。<br>具体的在 <code>ActivityThread.ApplicationThread.scheduleLaunchActivity</code> 方法中会调用 <code>sendMessage(H.LAUNCH_ACTIVITY, r)</code>，该消息由 <code>ActivityThread</code> 中的消息处理对象 <code>mH</code> 来处理，由于我们把 <code>mH</code> 的 <code>mCallback</code> 替换为了<code>ActivityThreadHandlerCallback</code>，因此也会对 <code>LAUNCH_ACTIVITY</code> 消息进行拦截处理，处理完后再由<code>mH</code> 来处理正常的流程。<br>这里解释一下为什么要调用 <code>ensureInjectMessageHandler</code> 来反射替换 <code>ActivityThread</code> 的 <code>Handler</code> 对象 <code>mH</code> 的 <code>mCallback</code> 呢？<br>先看一下 <code>Handler</code> 源码中的 <code>dispatchMessage()</code> 方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Handle system messages here.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (msg.callback != <span class="keyword">null</span>) &#123;</div><div class="line">        handleCallback(msg);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        handleMessage(msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里会先执行 <code>mCallback</code> 的 <code>handleMessage()</code>，在返回false的情况下再执行自身的 <code>handleMessage()</code>。<br>这样就可以在 <code>ActivityThreadHandlerCallback</code> 中处理一些事情，然后在调用 <code>mH</code> 的方法。</p>
<h2 id="启动插件Activity流程"><a href="#启动插件Activity流程" class="headerlink" title="启动插件Activity流程"></a>启动插件Activity流程</h2><p>这里以 <code>ApkBundleLauncher</code> 来作为 <code>Bundle</code> 的 <code>BundleLauncher</code> 为例进行说明。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">├── Small.openUri()</div><div class="line">     ├── Bundle.getLaunchableBundle(uri)</div><div class="line">     │    └── Bundle.matchesRule()</div><div class="line">     └── Bundle.launchFrom(context)</div><div class="line">          └──ApkBundleLauncher.launchBundle()</div><div class="line">               ├── ApkBundleLauncher.prelaunchBundle()</div><div class="line">               │    └── Bundle.getActivityName()</div><div class="line">               └── BundleLauncher.launchBundle()</div><div class="line">                    └── Activity.startActivityForResult()</div><div class="line">                         └── InstrumentationWrapper.execStartActivity()</div><div class="line">                              ├── InstrumentationWrapper.wrapIntent()</div><div class="line">                              └── InstrumentationWrapper.dequeueStubActivity</div><div class="line">----------------------------------消息处理----------------------------------</div><div class="line">├── ActivityThreadHandlerCallback.LAUNCH_ACTIVITY</div><div class="line">     └── redirectActivity()</div><div class="line">----------------------------------消息处理----------------------------------</div><div class="line">├── InstrumentationWrapper.callActivityOnCreate()</div></pre></td></tr></table></figure>
<h3 id="根据URI匹配Bundle"><a href="#根据URI匹配Bundle" class="headerlink" title="根据URI匹配Bundle"></a>根据URI匹配Bundle</h3><p>匹配插件中注册的 <code>Activity</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> Bundle <span class="title">getLaunchableBundle</span><span class="params">(Uri uri)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (sPreloadBundles != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (Bundle bundle : sPreloadBundles) &#123;</div><div class="line">            <span class="keyword">if</span> (bundle.matchesRule(uri)) &#123;</div><div class="line">                <span class="keyword">if</span> (bundle.mApplicableLauncher == <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (!bundle.enabled) <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// Illegal bundle (invalid signature, etc.)</span></div><div class="line">                <span class="keyword">return</span> bundle;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 如果没有找到就用webview来显示这个uri</span></div><div class="line">    <span class="keyword">if</span> (uri.getScheme() != <span class="keyword">null</span>) &#123;</div><div class="line">        Bundle bundle = <span class="keyword">new</span> Bundle();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            bundle.url = <span class="keyword">new</span> URL(uri.toString());</div><div class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        bundle.prepareForLaunch();</div><div class="line">        bundle.setQuery(uri.getEncodedQuery()); <span class="comment">// Fix issue #6 from Spring-Xu.</span></div><div class="line">        bundle.mApplicableLauncher = <span class="keyword">new</span> WebBundleLauncher();</div><div class="line">        bundle.mApplicableLauncher.prelaunchBundle(bundle);</div><div class="line">        <span class="keyword">return</span> bundle;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> Boolean <span class="title">matchesRule</span><span class="params">(Uri uri)</span> </span>&#123;</div><div class="line">    <span class="comment">/* e.g.</span></div><div class="line">     *  input</div><div class="line">     *      - uri: http://base/abc.html</div><div class="line">     *      - self.uri: http://base</div><div class="line">     *      - self.rules: abc.html -&gt; AbcController</div><div class="line">     *  output</div><div class="line">     *      - target =&gt; AbcController</div><div class="line">     */</div><div class="line">    <span class="comment">// 将uri和Bundle.uriString进行匹配，如果不匹配直接返回false</span></div><div class="line">    String uriString = uri.toString();</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.uriString == <span class="keyword">null</span> || !uriString.startsWith(<span class="keyword">this</span>.uriString)) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 截取类似 http://code.wequick.net/small-sample/detail?from=app.home 后面的字段?from=app.home进行解析</span></div><div class="line">    String srcPath = uriString.substring(<span class="keyword">this</span>.uriString.length());</div><div class="line">    <span class="comment">// 获取 ? 后面的字符</span></div><div class="line">    String srcQuery = uri.getEncodedQuery();</div><div class="line">    <span class="keyword">if</span> (srcQuery != <span class="keyword">null</span>) &#123;</div><div class="line">        srcPath = srcPath.substring(<span class="number">0</span>, srcPath.length() - srcQuery.length() - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ......</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.path = dstPath;</div><div class="line">    <span class="keyword">this</span>.query = dstQuery;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>BundleLauncher.launchBundle()</code> 启动 <code>Activity</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">launchBundle</span><span class="params">(Bundle bundle, Context context)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(bundle.isLaunchable()) &#123;</div><div class="line">        <span class="keyword">if</span>(context <span class="keyword">instanceof</span> Activity) &#123;</div><div class="line">            Activity activity = (Activity)context;</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.shouldFinishPreviousActivity(activity)) &#123;</div><div class="line">                activity.finish();</div><div class="line">            &#125;</div><div class="line">            activity.startActivityForResult(bundle.getIntent(), <span class="number">10000</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            context.startActivity(bundle.getIntent());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="启动真实的Activity"><a href="#启动真实的Activity" class="headerlink" title="启动真实的Activity"></a>启动真实的Activity</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prelaunchBundle</span><span class="params">(Bundle bundle)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.prelaunchBundle(bundle);</div><div class="line">    Intent intent = <span class="keyword">new</span> Intent();</div><div class="line">    bundle.setIntent(intent);</div><div class="line"></div><div class="line">    <span class="comment">// 获取该插件的入口Activity</span></div><div class="line">    String activityName = bundle.getActivityName();</div><div class="line">    <span class="comment">// 判断一下ActivityLauncher中的sActivityClasses是否包含该Activity，这里面只包含宿主app和Small框架里面的Activity</span></div><div class="line">    <span class="keyword">if</span> (!ActivityLauncher.containsActivity(activityName)) &#123;</div><div class="line">        <span class="comment">// 一般启动插件Activity的情况下面是会走到这里的</span></div><div class="line">        <span class="comment">// sLoadedActivities 包含的是插件里面定义的Activity，在启动初始化时解析的</span></div><div class="line">        <span class="keyword">if</span> (sLoadedActivities == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ActivityNotFoundException(<span class="string">"Unable to find explicit activity class "</span> +</div><div class="line">                    <span class="string">"&#123; "</span> + activityName + <span class="string">" &#125;"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!sLoadedActivities.containsKey(activityName)) &#123;</div><div class="line">            <span class="keyword">if</span> (activityName.endsWith(<span class="string">"Activity"</span>)) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ActivityNotFoundException(<span class="string">"Unable to find explicit activity class "</span> +</div><div class="line">                        <span class="string">"&#123; "</span> + activityName + <span class="string">" &#125;"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 再次进行一些模糊匹配</span></div><div class="line">            String tempActivityName = activityName + <span class="string">"Activity"</span>;</div><div class="line">            <span class="keyword">if</span> (!sLoadedActivities.containsKey(tempActivityName)) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ActivityNotFoundException(<span class="string">"Unable to find explicit activity class "</span> +</div><div class="line">                        <span class="string">"&#123; "</span> + activityName + <span class="string">"(Activity) &#125;"</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            activityName = tempActivityName;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 设置ComponentName</span></div><div class="line">    intent.setComponent(<span class="keyword">new</span> ComponentName(Small.getContext(), activityName));</div><div class="line"></div><div class="line">    <span class="comment">// Intent extras - params</span></div><div class="line">    String query = bundle.getQuery();</div><div class="line">    <span class="keyword">if</span> (query != <span class="keyword">null</span>) &#123;</div><div class="line">        intent.putExtra(Small.KEY_QUERY, <span class="string">'?'</span>+query);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="启动流程拦截，启动占坑位Activity"><a href="#启动流程拦截，启动占坑位Activity" class="headerlink" title="启动流程拦截，启动占坑位Activity"></a>启动流程拦截，启动占坑位Activity</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InstrumentationWrapper</span> <span class="keyword">extends</span> <span class="title">Instrumentation</span></span></div><div class="line">            <span class="keyword">implements</span> <span class="title">InstrumentationInternal</span> &#123;</div><div class="line"></div><div class="line">        ......</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> ActivityResult <span class="title">execStartActivity</span><span class="params">(</span></span></div><div class="line">                Context who, IBinder contextThread, IBinder token, Activity target,</div><div class="line">                Intent intent, <span class="keyword">int</span> requestCode, android.os.Bundle options) &#123;</div><div class="line">            <span class="comment">// 将intent 中真正的Activity替换为占坑位的Activity</span></div><div class="line">            wrapIntent(intent);</div><div class="line">            <span class="comment">// 通过反射替换ActivityThread 的 Message Handler mH变量的 mCallback 为ActivityThreadHandlerCallback</span></div><div class="line">            <span class="comment">// 用于恢复Activity Info 到真实的Activity</span></div><div class="line">            ensureInjectMessageHandler(sActivityThread);</div><div class="line">            <span class="comment">// 反射调用启动Activity</span></div><div class="line">            <span class="keyword">return</span> ReflectAccelerator.execStartActivity(mBase,</div><div class="line">                    who, contextThread, token, target, intent, requestCode, options);</div><div class="line">        &#125;</div><div class="line">        ......</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">wrapIntent</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">            <span class="comment">// 此处为插件中注册的真正的Activity</span></div><div class="line">            ComponentName component = intent.getComponent();</div><div class="line">            String realClazz;</div><div class="line">            <span class="keyword">if</span> (component == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">// 如果component为空，交给宿主来处理这个intent</span></div><div class="line">                component = intent.resolveActivity(Small.getContext().getPackageManager());</div><div class="line">                <span class="keyword">if</span> (component != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="comment">// 系统或者宿主处理掉了，直接返回</span></div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">// 如果Action没有处理掉，看一下插件注册的Activity能否处理</span></div><div class="line">                realClazz = resolveActivity(intent);</div><div class="line">                <span class="keyword">if</span> (realClazz == <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="comment">// 如果插件也不能处理，就直接返回，无能为力了……</span></div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                realClazz = component.getClassName();</div><div class="line">                <span class="keyword">if</span> (realClazz.startsWith(STUB_ACTIVITY_PREFIX)) &#123;</div><div class="line">                    <span class="comment">// 如果这个Activity已经是占坑位的Activity，进行解开回原来的Activity</span></div><div class="line">                    realClazz = unwrapIntent(intent);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (sLoadedActivities == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">            <span class="comment">// 从sLoadedActivities中获得真正Activity的信息</span></div><div class="line">            ActivityInfo ai = sLoadedActivities.get(realClazz);</div><div class="line">            <span class="keyword">if</span> (ai == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">            <span class="comment">// 把真实的Activity放到Category中并用'&gt;'进行标识</span></div><div class="line">            intent.addCategory(REDIRECT_FLAG + realClazz);</div><div class="line">            <span class="comment">// 获取一个占坑位的Activity</span></div><div class="line">            String stubClazz = dequeueStubActivity(ai, realClazz);</div><div class="line">            <span class="comment">// 将真正需要启动的Activity替换为占坑位的Activity</span></div><div class="line">            intent.setComponent(<span class="keyword">new</span> ComponentName(Small.getContext(), stubClazz));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> String <span class="title">dequeueStubActivity</span><span class="params">(ActivityInfo ai, String realActivityClazz)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (ai.launchMode == ActivityInfo.LAUNCH_MULTIPLE) &#123;</div><div class="line">                <span class="comment">// 如果是普通的启动模式，用 A和A1 Activity，这两个Activity是可以重复使用的</span></div><div class="line">                <span class="comment">// 看是否有windowIsTranslucent属性</span></div><div class="line">                Resources.Theme theme = Small.getContext().getResources().newTheme();</div><div class="line">                theme.applyStyle(ai.getThemeResource(), <span class="keyword">true</span>);</div><div class="line">                TypedArray sa = theme.obtainStyledAttributes(</div><div class="line">                        <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; android.R.attr.windowIsTranslucent &#125;);</div><div class="line">                <span class="keyword">boolean</span> translucent = sa.getBoolean(<span class="number">0</span>, <span class="keyword">false</span>);</div><div class="line">                sa.recycle();</div><div class="line">                <span class="comment">// 如果有就用A1,没有就用A</span></div><div class="line">                <span class="keyword">return</span> translucent ? STUB_ACTIVITY_TRANSLUCENT : STUB_ACTIVITY_PREFIX;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 根据启动模式匹配合适的占坑位Activity</span></div><div class="line">            <span class="keyword">int</span> availableId = -<span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> stubId = -<span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> countForMode = STUB_ACTIVITIES_COUNT;</div><div class="line">            <span class="keyword">int</span> countForAll = countForMode * <span class="number">3</span>; <span class="comment">// 3=[singleTop, singleTask, singleInstance]</span></div><div class="line">            <span class="keyword">if</span> (mStubQueue == <span class="keyword">null</span>) &#123;</div><div class="line">                mStubQueue = <span class="keyword">new</span> String[countForAll];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span> offset = (ai.launchMode - <span class="number">1</span>) * countForMode;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; countForMode; i++) &#123;</div><div class="line">                String usedActivityClazz = mStubQueue[i + offset];</div><div class="line">                <span class="keyword">if</span> (usedActivityClazz == <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (availableId == -<span class="number">1</span>) availableId = i;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (usedActivityClazz.equals(realActivityClazz)) &#123;</div><div class="line">                    stubId = i;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (stubId != -<span class="number">1</span>) &#123;</div><div class="line">                availableId = stubId;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (availableId != -<span class="number">1</span>) &#123;</div><div class="line">                mStubQueue[availableId + offset] = realActivityClazz;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                Log.e(TAG, <span class="string">"Launch mode "</span> + ai.launchMode + <span class="string">" is full"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> STUB_ACTIVITY_PREFIX + ai.launchMode + availableId;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">`</div></pre></td></tr></table></figure>
<h3 id="消息拦截"><a href="#消息拦截" class="headerlink" title="消息拦截"></a>消息拦截</h3><p>由于前面介绍的反射替换 <code>ActivityThread</code> 的 <code>mH</code> 对象的 <code>mCallback</code>，这里拦截了四种消息：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityThreadHandlerCallback</span> <span class="keyword">implements</span> <span class="title">Handler</span>.<span class="title">Callback</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LAUNCH_ACTIVITY = <span class="number">100</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CREATE_SERVICE = <span class="number">114</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONFIGURATION_CHANGED = <span class="number">118</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ACTIVITY_CONFIGURATION_CHANGED = <span class="number">125</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Configuration mApplicationConfig;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">            <span class="keyword">case</span> LAUNCH_ACTIVITY:</div><div class="line">                redirectActivity(msg);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> CREATE_SERVICE:</div><div class="line">                ensureServiceClassesLoadable(msg);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> CONFIGURATION_CHANGED:</div><div class="line">                recordConfigChanges(msg);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> ACTIVITY_CONFIGURATION_CHANGED:</div><div class="line">                <span class="keyword">return</span> relaunchActivityIfNeeded(msg);</div><div class="line"></div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 这里返回false，不影响 mH 对消息的处理</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="LAUNCH-ACTIVITY"><a href="#LAUNCH-ACTIVITY" class="headerlink" title="LAUNCH_ACTIVITY"></a>LAUNCH_ACTIVITY</h4><p>对 <code>LAUNCH_ACTIVITY</code> 的处理主要是将启动的占坑位的 <code>Activity</code> 重新替换为真实的 <code>Activity</code> </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">redirectActivity</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">        Object<span class="comment">/*ActivityClientRecord*/</span> r = msg.obj;</div><div class="line">        <span class="comment">// 通过反射获取intent</span></div><div class="line">        Intent intent = ReflectAccelerator.getIntent(r);</div><div class="line">        <span class="comment">// 解开intent，获取真实的Activity名称</span></div><div class="line">        String targetClass = unwrapIntent(intent);</div><div class="line">        <span class="keyword">boolean</span> hasSetUp = Small.hasSetUp();</div><div class="line">        <span class="keyword">if</span> (targetClass == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// 在宿主中注册的Activity</span></div><div class="line">            <span class="keyword">if</span> (hasSetUp) <span class="keyword">return</span>; <span class="comment">// nothing to do</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span> (intent.hasCategory(Intent.CATEGORY_LAUNCHER)) &#123;</div><div class="line">                <span class="comment">// 带CATEGORY_LAUNCHER属性的Activity</span></div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Launching an activity in remote process. Set up Small for it.</span></div><div class="line">            Small.setUpOnDemand();</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!hasSetUp) &#123;</div><div class="line">            <span class="comment">// Restarting an activity after application recreated,</span></div><div class="line">            <span class="comment">// maybe upgrading or somehow the application was killed in background.</span></div><div class="line">            Small.setUp();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 替换为真正的 activityInfo</span></div><div class="line">        ActivityInfo targetInfo = sLoadedActivities.get(targetClass);</div><div class="line">        ReflectAccelerator.setActivityInfo(r, targetInfo);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="拦截OnCreate方法"><a href="#拦截OnCreate方法" class="headerlink" title="拦截OnCreate方法"></a>拦截OnCreate方法</h3><p>对 <code>Activity</code> 的 <code>OnCreate</code> 调用的拦截由 <code>InstrumentationWrapper.callActivityOnCreate()</code> 来进行处理。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callActivityOnCreate</span><span class="params">(Activity activity, android.os.Bundle icicle)</span> </span>&#123;</div><div class="line">    <span class="keyword">do</span> &#123;</div><div class="line">        <span class="keyword">if</span> (sLoadedActivities == <span class="keyword">null</span>) <span class="keyword">break</span>;</div><div class="line">        ActivityInfo ai = sLoadedActivities.get(activity.getClass().getName());</div><div class="line">        <span class="keyword">if</span> (ai == <span class="keyword">null</span>) <span class="keyword">break</span>;</div><div class="line">        <span class="comment">//用来设置Activity的一些转屏和键盘状态</span></div><div class="line">        applyActivityInfo(activity, ai);</div><div class="line">        ReflectAccelerator.ensureCacheResources();</div><div class="line">    &#125; <span class="keyword">while</span> (<span class="keyword">false</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 重新设置 mInstrumentation ，防止被改变</span></div><div class="line">    <span class="keyword">if</span> (sBundleInstrumentation != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Field f = Activity.class.getDeclaredField(<span class="string">"mInstrumentation"</span>);</div><div class="line">            f.setAccessible(<span class="keyword">true</span>);</div><div class="line">            Object instrumentation = f.get(activity);</div><div class="line">            <span class="keyword">if</span> (instrumentation != sBundleInstrumentation) &#123;</div><div class="line">                f.set(activity, sBundleInstrumentation);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 再调用 mInstrumentation 的callActivityOnCreate方法</span></div><div class="line">    sHostInstrumentation.callActivityOnCreate(activity, icicle);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另外还有对 <code>OnStop</code>，<code>OnDestroy</code>等其他生命周期方法的拦截，这里就不一一介绍了。</p>
<!--     
http://blog.csdn.net/u013210620/article/details/54692417?utm_source=itdadao&utm_medium=referral
http://weishu.me/2016/03/21/understand-plugin-framework-activity-management/
-->
]]></content>
    
    <summary type="html">
    
      结合 Activity 的启动流程来分析如何启动插件 Activity，以此来介绍Small插件化一个核心技术--动态注册组件
    
    </summary>
    
      <category term="Android 插件化" scheme="http://yoursite.com/categories/Android-%E6%8F%92%E4%BB%B6%E5%8C%96/"/>
    
    
      <category term="Android 插件化" scheme="http://yoursite.com/tags/Android-%E6%8F%92%E4%BB%B6%E5%8C%96/"/>
    
      <category term="Android开源项目" scheme="http://yoursite.com/tags/Android%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="Small" scheme="http://yoursite.com/tags/Small/"/>
    
  </entry>
  
  <entry>
    <title>Android 插件化框架Small解析--初始化</title>
    <link href="http://yoursite.com/2017/05/10/open-source-android-plugins-small-init/"/>
    <id>http://yoursite.com/2017/05/10/open-source-android-plugins-small-init/</id>
    <published>2017-05-10T02:00:00.000Z</published>
    <updated>2018-09-20T01:08:29.048Z</updated>
    
    <content type="html"><![CDATA[<p>接下来的一系列文件将会从源码角度来分析Small的架构以及插件化原理及其实现。</p>
<h2 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h2><p>Small里面比较核心的类有下面三个：</p>
<ul>
<li>Small：接口类，提供用户能使用的各类接口</li>
<li>Bundle：代表插件类，保存了插件的全部信息</li>
<li>BundleLauncher：插件加载类，根据加载的不同插件类型，有多个子类，如下图：</li>
</ul>
<p><img src="/images/open-source-android-plugins-small-init/small-bundle-launcher-class-uml.png" alt="UML类图"><br> <!-- plantuml url:http://www.plantuml.com/plantuml/png/bP0z3W8X48LxJZ6bnkoUm6PDxEmih84T8v40uSTerBjh5ZGAn60rCE_D1s-4ycZtb2EiWXebhi_UKkwr9PIvwGXSKkUIlA51yGCMwbR_rWVdq6SMyds7vQthOE1Ud8I_l5qrK_5QtaWiSynyMSQdhU-RQPK8bLuqxv3bQTCYidnm9GimWKd1mLYKcevnS1OBiAdCoVr5A7xtDw7OooUYPRwIketm0000 --></p>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>先来看一下宿主 App 中的初始化部分，主要在 <code>Application</code> 和 <code>LaunchActivity</code> 中进行。我们把在 <code>Application</code> 处理的称为第一阶段，在 <code>LaunchActivity</code> 中进行的称为第二阶段和第三阶段。</p>
<h3 id="第一阶段：预处理"><a href="#第一阶段：预处理" class="headerlink" title="第一阶段：预处理"></a>第一阶段：预处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> <span class="keyword">extends</span> <span class="title">android</span>.<span class="title">app</span>.<span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Application</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// This should be the very first of the application lifecycle.</span></div><div class="line">        <span class="comment">// It's also ahead of the installing of content providers by what we can avoid</span></div><div class="line">        <span class="comment">// the ClassNotFound exception on if the provider is unimplemented in the host.</span></div><div class="line">        Small.preSetUp(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line"></div><div class="line">        <span class="comment">// Optional</span></div><div class="line">        Small.setBaseUri(<span class="string">"http://code.wequick.net/small-sample/"</span>);</div><div class="line">        Small.setWebViewClient(<span class="keyword">new</span> MyWebViewClient());</div><div class="line">        <span class="comment">//指定是否从 assets 读取插件</span></div><div class="line">        Small.setLoadFromAssets(BuildConfig.LOAD_FROM_ASSETS);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 <code>Application</code> 构造函数中调用了 <code>Small.preSetUp(this)</code> 来进行一些设置的工作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preSetUp</span><span class="params">(Application context)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (sContext != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    sContext = context;</div><div class="line"></div><div class="line">    <span class="comment">// 注册BundleLauncher</span></div><div class="line">    registerLauncher(<span class="keyword">new</span> ActivityLauncher());</div><div class="line">    registerLauncher(<span class="keyword">new</span> ApkBundleLauncher());</div><div class="line">    registerLauncher(<span class="keyword">new</span> WebBundleLauncher());</div><div class="line">    Bundle.onCreateLaunchers(context);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先注册了一些默认的 <code>BundleLauncher</code>，保存在 <code>sBundleLaunchers</code> 静态变量中。然后调用 <code>Bundle.onCreateLaunchers(context)</code> 来调用 <code>BundleLauncher.onCreate()</code>方法。<br>在几个 <code>BundleLauncher</code> 的子类中，<code>ApkBundleLauncher</code> 重新实现了 <code>onCreate()</code>方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Application app)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(app);</div><div class="line"></div><div class="line">    Object<span class="comment">/*ActivityThread*/</span> thread;</div><div class="line">    List&lt;ProviderInfo&gt; providers;</div><div class="line">    Instrumentation base;</div><div class="line">    ApkBundleLauncher.InstrumentationWrapper wrapper;</div><div class="line">    Field f;</div><div class="line"></div><div class="line">    <span class="comment">// 通过反射获取当前 ActivityThread 对象</span></div><div class="line">    thread = ReflectAccelerator.getActivityThread(app);</div><div class="line"></div><div class="line">    <span class="comment">// 替换 mInstrumentation 变量，关键点在这里，下面会详述</span></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        f = thread.getClass().getDeclaredField(<span class="string">"mInstrumentation"</span>);</div><div class="line">        f.setAccessible(<span class="keyword">true</span>);</div><div class="line">        base = (Instrumentation) f.get(thread);</div><div class="line">        wrapper = <span class="keyword">new</span> ApkBundleLauncher.InstrumentationWrapper(base);</div><div class="line">        f.set(thread, wrapper);</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Failed to replace instrumentation for thread: "</span> + thread);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 通过反射替换ActivityThread 的 Message Handler mH变量的 mCallback 为ActivityThreadHandlerCallback</span></div><div class="line">    <span class="comment">// 用于恢复Activity Info 到真实的Activity</span></div><div class="line">    ensureInjectMessageHandler(thread);</div><div class="line"></div><div class="line">    <span class="comment">// 获取该APP的 ProviderInfo 列表</span></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        f = thread.getClass().getDeclaredField(<span class="string">"mBoundApplication"</span>);</div><div class="line">        f.setAccessible(<span class="keyword">true</span>);</div><div class="line">        Object<span class="comment">/*AppBindData*/</span> data = f.get(thread);</div><div class="line">        f = data.getClass().getDeclaredField(<span class="string">"providers"</span>);</div><div class="line">        f.setAccessible(<span class="keyword">true</span>);</div><div class="line">        providers = (List&lt;ProviderInfo&gt;) f.get(data);</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Failed to get providers from thread: "</span> + thread);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 将这些变量保存起来</span></div><div class="line">    sActivityThread = thread;</div><div class="line">    sProviders = providers;</div><div class="line">    sHostInstrumentation = base;</div><div class="line">    sBundleInstrumentation = wrapper;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>InstrumentationWrapper</code> 继承自 <code>Instrumentation</code> 并覆盖了下面几个方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">execStartActivity()</div><div class="line">callActivityOnCreate()</div><div class="line">callActivityOnStop()</div><div class="line">callActivityOnDestroy()</div><div class="line">onException()</div></pre></td></tr></table></figure>
<p>为什么说替换 <code>Instrumentation</code> 对象是重头戏呢？这里我们先了解一些这个类。<br>先看一下<a href="https://developer.android.com/reference/android/app/Instrumentation.html?hl=zh-cn" target="_blank" rel="external">官方文档对这个类的解释</a>，该类跟踪 Application 及 Activity 的整个生命周期，它的一些方法在 Application 及 Activity 所有生命周期函数的调用中，都会先调用这些方法，因此，得到了这个对象，我们就可以进入并跟踪 Application 和 Activity 的生命周期流程。<br>Small 想要做到动态注册 <code>Activity</code>，首先在宿主 Manifest 中注册一个命名特殊的占坑 <code>Activity</code> 来欺骗 <code>startActivityForResult</code> 以获得生命周期，再欺骗 <code>performLaunchActivity</code> 来获得插件 <code>Activity</code> 实例，又为了处理之间的信息传递，因此有了后面的 <code>ActivityThreadHandlerCallback</code>。<br>我们可以在 small/src/main/AndroidManifest.xml 中找到这些占坑位的 <code>Activity</code>： A、A1、A2….A33等。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">package</span>=<span class="string">"net.wequick.small"</span>&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- permission for web view --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">application</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- Stub Activities --&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 1 standard mode --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".A"</span></span></div><div class="line">            <span class="attr">android:configChanges</span>=<span class="string">"locale|fontScale|keyboard|keyboardHidden|layoutDirection|mcc|mnc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|touchscreen|uiMode"</span>/&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".A1"</span> <span class="attr">android:theme</span>=<span class="string">"@android:style/Theme.Translucent"</span></span></div><div class="line">            <span class="attr">android:configChanges</span>=<span class="string">"locale|fontScale|keyboard|keyboardHidden|layoutDirection|mcc|mnc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|touchscreen|uiMode"</span>/&gt;</div><div class="line">        <span class="comment">&lt;!-- 4 singleTop mode --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".A10"</span> <span class="attr">android:launchMode</span>=<span class="string">"singleTop"</span></span></div><div class="line">            <span class="attr">android:configChanges</span>=<span class="string">"locale|fontScale|keyboard|keyboardHidden|layoutDirection|mcc|mnc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|touchscreen|uiMode"</span>/&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".A11"</span> <span class="attr">android:launchMode</span>=<span class="string">"singleTop"</span></span></div><div class="line">            <span class="attr">android:configChanges</span>=<span class="string">"locale|fontScale|keyboard|keyboardHidden|layoutDirection|mcc|mnc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|touchscreen|uiMode"</span>/&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".A12"</span> <span class="attr">android:launchMode</span>=<span class="string">"singleTop"</span></span></div><div class="line">            <span class="attr">android:configChanges</span>=<span class="string">"locale|fontScale|keyboard|keyboardHidden|layoutDirection|mcc|mnc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|touchscreen|uiMode"</span>/&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".A13"</span> <span class="attr">android:launchMode</span>=<span class="string">"singleTop"</span></span></div><div class="line">            <span class="attr">android:configChanges</span>=<span class="string">"locale|fontScale|keyboard|keyboardHidden|layoutDirection|mcc|mnc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|touchscreen|uiMode"</span>/&gt;</div><div class="line">        <span class="comment">&lt;!-- 4 singleTask mode --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".A20"</span> <span class="attr">android:launchMode</span>=<span class="string">"singleTask"</span></span></div><div class="line">            <span class="attr">android:configChanges</span>=<span class="string">"locale|fontScale|keyboard|keyboardHidden|layoutDirection|mcc|mnc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|touchscreen|uiMode"</span>/&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".A21"</span> <span class="attr">android:launchMode</span>=<span class="string">"singleTask"</span></span></div><div class="line">            <span class="attr">android:configChanges</span>=<span class="string">"locale|fontScale|keyboard|keyboardHidden|layoutDirection|mcc|mnc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|touchscreen|uiMode"</span>/&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".A22"</span> <span class="attr">android:launchMode</span>=<span class="string">"singleTask"</span></span></div><div class="line">            <span class="attr">android:configChanges</span>=<span class="string">"locale|fontScale|keyboard|keyboardHidden|layoutDirection|mcc|mnc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|touchscreen|uiMode"</span>/&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".A23"</span> <span class="attr">android:launchMode</span>=<span class="string">"singleTask"</span></span></div><div class="line">            <span class="attr">android:configChanges</span>=<span class="string">"locale|fontScale|keyboard|keyboardHidden|layoutDirection|mcc|mnc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|touchscreen|uiMode"</span>/&gt;</div><div class="line">        <span class="comment">&lt;!-- 4 singleInstance mode --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".A30"</span> <span class="attr">android:launchMode</span>=<span class="string">"singleInstance"</span></span></div><div class="line">            <span class="attr">android:configChanges</span>=<span class="string">"locale|fontScale|keyboard|keyboardHidden|layoutDirection|mcc|mnc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|touchscreen|uiMode"</span>/&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".A31"</span> <span class="attr">android:launchMode</span>=<span class="string">"singleInstance"</span></span></div><div class="line">            <span class="attr">android:configChanges</span>=<span class="string">"locale|fontScale|keyboard|keyboardHidden|layoutDirection|mcc|mnc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|touchscreen|uiMode"</span>/&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".A32"</span> <span class="attr">android:launchMode</span>=<span class="string">"singleInstance"</span></span></div><div class="line">            <span class="attr">android:configChanges</span>=<span class="string">"locale|fontScale|keyboard|keyboardHidden|layoutDirection|mcc|mnc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|touchscreen|uiMode"</span>/&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".A33"</span> <span class="attr">android:launchMode</span>=<span class="string">"singleInstance"</span></span></div><div class="line">            <span class="attr">android:configChanges</span>=<span class="string">"locale|fontScale|keyboard|keyboardHidden|layoutDirection|mcc|mnc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|touchscreen|uiMode"</span>/&gt;</div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- Web Activity --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".webkit.WebActivity"</span></span></div><div class="line">            <span class="attr">android:screenOrientation</span>=<span class="string">"portrait"</span></div><div class="line">            <span class="attr">android:windowSoftInputMode</span>=<span class="string">"stateHidden|adjustPan"</span></div><div class="line">            <span class="attr">android:hardwareAccelerated</span>=<span class="string">"true"</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
<p>所作的这一切都是为了实现动态注册 <code>Activity</code>，如果你把插件里面的 <code>Activity</code> 都在宿主的 AndroidManifest.xml 文件里面都申明一下，那么上面的这些 Hook 的工作就可以省去了。<br>这也就是 Small 插件化的基本原理，该原理部分后面会有博客详细介绍。</p>
<h3 id="第二阶段：加载插件"><a href="#第二阶段：加载插件" class="headerlink" title="第二阶段：加载插件"></a>第二阶段：加载插件</h3><h4 id="一些配置工作"><a href="#一些配置工作" class="headerlink" title="一些配置工作"></a>一些配置工作</h4><p>在 <code>LaunchActivity</code> 的 <code>onStart()</code> 方法中调用了 <code>Small.setUp()</code>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LaunchActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</div><div class="line">        ...</div><div class="line">        Small.setUp(LaunchActivity.<span class="keyword">this</span>, <span class="keyword">new</span> net.wequick.small.Small.OnCompleteListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">long</span> tEnd = System.nanoTime();</div><div class="line">                se.putLong(<span class="string">"setUpFinish"</span>, tEnd).apply();</div><div class="line">                <span class="keyword">long</span> offset = tEnd - tStart;</div><div class="line">                <span class="keyword">if</span> (offset &lt; MIN_INTRO_DISPLAY_TIME) &#123;</div><div class="line">                    <span class="comment">// 这个延迟仅为了让 "Small Logo" 显示足够的时间, 实际应用中不需要</span></div><div class="line">                    getWindow().getDecorView().postDelayed(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                            <span class="comment">// 启动main插件</span></div><div class="line">                            Small.openUri(<span class="string">"main"</span>, LaunchActivity.<span class="keyword">this</span>);</div><div class="line">                            finish();</div><div class="line">                        &#125;</div><div class="line">                    &#125;, (MIN_INTRO_DISPLAY_TIME - offset) / <span class="number">1000000</span>);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    Small.openUri(<span class="string">"main"</span>, LaunchActivity.<span class="keyword">this</span>);</div><div class="line">                    finish();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>在 <code>Small.setUp()</code> 方法内部主要调用了 <code>Bundle.loadLaunchableBundles(listener)</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadLaunchableBundles</span><span class="params">(Small.OnCompleteListener listener)</span> </span>&#123;</div><div class="line">    Context context = Small.getContext();</div><div class="line"></div><div class="line">    <span class="keyword">boolean</span> synchronous = (listener == <span class="keyword">null</span>);</div><div class="line">    <span class="keyword">if</span> (synchronous) &#123;</div><div class="line">        loadBundles(context);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Asynchronous</span></div><div class="line">    <span class="keyword">if</span> (sThread == <span class="keyword">null</span>) &#123;</div><div class="line">        sThread = <span class="keyword">new</span> LoadBundleThread(context);</div><div class="line">        sHandler = <span class="keyword">new</span> LoadBundleHandler(listener);</div><div class="line">        sThread.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于我们注册了了 <code>Small.OnCompleteListener</code>，这里会开启一个线程来调用 <code>loadBundles()</code> 方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadBundles</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    JSONObject manifestData;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">//获取 /data/data/&lt;application package&gt;/files 目录下的 bundle.json</span></div><div class="line">        File patchManifestFile = getPatchManifestFile();</div><div class="line">        <span class="comment">//获取 SharedPreferences 存储的bundle.json文件</span></div><div class="line">        String manifestJson = getCacheManifest();</div><div class="line">        <span class="keyword">if</span> (manifestJson != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// 加载SharedPreferences中的缓存的文件并保存到patchManifestFile文件中</span></div><div class="line">            <span class="keyword">if</span> (!patchManifestFile.exists()) patchManifestFile.createNewFile();</div><div class="line">            PrintWriter pw = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> FileOutputStream(patchManifestFile));</div><div class="line">            pw.print(manifestJson);</div><div class="line">            pw.flush();</div><div class="line">            pw.close();</div><div class="line">            <span class="comment">// 清除SharedPreferences中的缓存</span></div><div class="line">            setCacheManifest(<span class="keyword">null</span>);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (patchManifestFile.exists()) &#123;</div><div class="line">            <span class="comment">// 从patchManifestFile中读取数据</span></div><div class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(patchManifestFile));</div><div class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">            String line;</div><div class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</div><div class="line">                sb.append(line);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            br.close();</div><div class="line">            manifestJson = sb.toString();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 从 `assets/bundle.json' 加载</span></div><div class="line">            InputStream builtinManifestStream = context.getAssets().open(BUNDLE_MANIFEST_NAME);</div><div class="line">            <span class="keyword">int</span> builtinSize = builtinManifestStream.available();</div><div class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[builtinSize];</div><div class="line">            builtinManifestStream.read(buffer);</div><div class="line">            builtinManifestStream.close();</div><div class="line">            manifestJson = <span class="keyword">new</span> String(buffer, <span class="number">0</span>, builtinSize);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        manifestData = <span class="keyword">new</span> JSONObject(manifestJson);</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 解析数据</span></div><div class="line">    Manifest manifest = parseManifest(manifestData);</div><div class="line">    <span class="keyword">if</span> (manifest == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">    setupLaunchers(context);</div><div class="line"></div><div class="line">    loadBundles(manifest.bundles);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 <code>loadBundles()</code> 方法中首先会解析 bundle.json 数据，这个数据可能会保存在三个地方，它们的读取是有优先级的，SharedPreferences缓存&gt;App DATA File&gt;Assets。<br>然后调用 <code>setupLaunchers()</code> 设置前面在 <code>preSetup()</code> 方法中注册的几个 <code>BundleLauncher</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setupLaunchers</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (sBundleLaunchers == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (BundleLauncher launcher : sBundleLaunchers) &#123;</div><div class="line">        launcher.setUp(context);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们分别看一下这几个 <code>BundleLauncher</code> 的 <code>setUp()</code> 方法都做了什么工作：</p>
<ol>
<li>ActivityLauncher.setUp()</li>
</ol>
<p>这里是将在宿主App里面注册的 <code>Activity</code> 添加到 <code>sActivityClasses</code> 中去，这里包括了 app、app+stub、small下面 AndroidMenifest.xml里面注册的 <code>Activity</code>，当然就包括了前面说的占坑位的几个 <code>Activity</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.setUp(context);</div><div class="line"></div><div class="line">    <span class="comment">// Read the registered classes in host's manifest file</span></div><div class="line">    File sourceFile = <span class="keyword">new</span> File(context.getApplicationInfo().sourceDir);</div><div class="line">    BundleParser parser = BundleParser.parsePackage(sourceFile, context.getPackageName());</div><div class="line">    parser.collectActivities();</div><div class="line">    ActivityInfo[] as = parser.getPackageInfo().activities;</div><div class="line">    <span class="keyword">if</span> (as != <span class="keyword">null</span>) &#123;</div><div class="line">        sActivityClasses = <span class="keyword">new</span> HashSet&lt;String&gt;();</div><div class="line">        <span class="keyword">for</span> (ActivityInfo ai : as) &#123;</div><div class="line">            sActivityClasses.add(ai.name);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>ApkBundleLauncher.setUp()</li>
</ol>
<p>这里是对通过动态代理对所有经过 <code>TaskStackBuilder</code> 创建的 PendingIntent 进行 Hook，调用 <code>wrapIntent</code> 用占坑 <code>Activity</code> 来代替真正的 <code>Activity</code>。<br>另外还有个方法 <code>Small.wrapIntent(Intent)</code>，不是通过<code>TaskStackBuilder</code> 创建的 <code>PendingIntent</code> 需要调用这个方法来进行处理。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.setUp(context);</div><div class="line"></div><div class="line">    Field f;</div><div class="line"></div><div class="line">    <span class="comment">// AOP for pending intent</span></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        f = TaskStackBuilder.class.getDeclaredField(<span class="string">"IMPL"</span>);</div><div class="line">        f.setAccessible(<span class="keyword">true</span>);</div><div class="line">        <span class="keyword">final</span> Object impl = f.get(TaskStackBuilder.class);</div><div class="line">        InvocationHandler aop = <span class="keyword">new</span> InvocationHandler() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">                Intent[] intents = (Intent[]) args[<span class="number">1</span>];</div><div class="line">                <span class="keyword">for</span> (Intent intent : intents) &#123;</div><div class="line">                    sBundleInstrumentation.wrapIntent(intent);</div><div class="line">                    intent.setAction(Intent.ACTION_MAIN);</div><div class="line">                    intent.addCategory(Intent.CATEGORY_LAUNCHER);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> method.invoke(impl, args);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        Object newImpl = Proxy.newProxyInstance(context.getClassLoader(), impl.getClass().getInterfaces(), aop);</div><div class="line">        f.set(TaskStackBuilder.class, newImpl);</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception ignored) &#123;</div><div class="line">        ignored.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>WebBundleLauncher.setUp()</li>
</ol>
<p>看到注释这样解释：在android 7.0以后的版本中，当第一次创建WebView的时候，它会用WebView的Assets路径替换掉原Application Assets路径，这里就提前在这里先创建一个WebView来避免这个事件的发生。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.setUp(context);</div><div class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &lt; <span class="number">24</span>) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">    Bundle.postUI(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="comment">// In android 7.0+, on firstly create WebView, it will replace the application</span></div><div class="line">            <span class="comment">// assets with the one who has join the WebView asset path.</span></div><div class="line">            <span class="comment">// If this happens after our assets replacement,</span></div><div class="line">            <span class="comment">// what we have done would be come to naught!</span></div><div class="line">            <span class="comment">// So, we need to push it enOOOgh ahead! (#347)</span></div><div class="line">            <span class="keyword">new</span> android.webkit.WebView(Small.getContext());</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 <code>setupLaunchers(context)</code> 方法执行完以后，就会调用 <code>loadBundles(manifest.bundles)</code> 方法来加载插件。</p>
<h4 id="加载插件"><a href="#加载插件" class="headerlink" title="加载插件"></a>加载插件</h4><p>先来看一下 <code>Bundle.loadBundles(List&lt;Bundle&gt; bundles)</code>方法，这个方法的主要工作就是在注册的所有 <code>BundleLauncher</code> 中为 <code>bundles</code> 列表中的所有 <code>Bundle</code> 找到适合它们的 <code>BundleLauncher</code>，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadBundles</span><span class="params">(List&lt;Bundle&gt; bundles)</span> </span>&#123;</div><div class="line">    sPreloadBundles = bundles;</div><div class="line"></div><div class="line">    <span class="comment">// 1. 为每个Bundle寻找合适的BundleLauncher</span></div><div class="line">    <span class="keyword">for</span> (Bundle bundle : bundles) &#123;</div><div class="line">        bundle.prepareForLaunch();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Handle I/O</span></div><div class="line">    <span class="keyword">if</span> (sIOActions != <span class="keyword">null</span>) &#123;</div><div class="line">        ExecutorService executor = Executors.newFixedThreadPool(sIOActions.size());</div><div class="line">        <span class="keyword">for</span> (Runnable action : sIOActions) &#123;</div><div class="line">            executor.execute(action);</div><div class="line">        &#125;</div><div class="line">        executor.shutdown();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (!executor.awaitTermination(LOADING_TIMEOUT_MINUTES, TimeUnit.MINUTES)) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Failed to load bundles! (TIMEOUT &gt; "</span></div><div class="line">                        + LOADING_TIMEOUT_MINUTES + <span class="string">"minutes)"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        sIOActions = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Wait for the things to be done on UI thread before `postSetUp`,</span></div><div class="line">    <span class="comment">// as on 7.0+ we should wait a WebView been initialized. (#347)</span></div><div class="line">    <span class="keyword">while</span> (sRunningUIActionCount != <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">100</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Notify `postSetUp' to all launchers</span></div><div class="line">    <span class="keyword">for</span> (BundleLauncher launcher : sBundleLaunchers) &#123;</div><div class="line">        launcher.postSetUp();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Wait for the things to be done on UI thread after `postSetUp`,</span></div><div class="line">    <span class="comment">// like creating a bundle application.</span></div><div class="line">    <span class="keyword">while</span> (sRunningUIActionCount != <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">100</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Free all unused temporary variables</span></div><div class="line">    <span class="keyword">for</span> (Bundle bundle : bundles) &#123;</div><div class="line">        <span class="keyword">if</span> (bundle.parser != <span class="keyword">null</span>) &#123;</div><div class="line">            bundle.parser.close();</div><div class="line">            bundle.parser = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        bundle.mBuiltinFile = <span class="keyword">null</span>;</div><div class="line">        bundle.mExtractPath = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="prepareForLaunch"><a href="#prepareForLaunch" class="headerlink" title="prepareForLaunch()"></a>prepareForLaunch()</h5><p>我们先来看一下 <code>Bundle.prepareForLaunch()</code> 方法，这里是要在 <code>sBundleLaunchers</code> 中为当前的 <code>Bundle</code> 找到一个合适的 <code>BundleLauncher</code> 并赋值给 <code>mApplicableLauncher</code>，并开始解析插件。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">prepareForLaunch</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mIntent != <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (mApplicableLauncher == <span class="keyword">null</span> &amp;&amp; sBundleLaunchers != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (BundleLauncher launcher : sBundleLaunchers) &#123;</div><div class="line">            <span class="keyword">if</span> (launcher.resolveBundle(<span class="keyword">this</span>)) &#123;</div><div class="line">                mApplicableLauncher = launcher;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里又分别调用了 <code>sBundleLaunchers</code> 中各个 <code>BundleLauncher</code> 的 <code>resolveBundle()</code> 方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">resolveBundle</span><span class="params">(Bundle bundle)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!preloadBundle(bundle)) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    loadBundle(bundle);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>各个  <code>BundleLauncher</code> 都分别重新实现了 <code>preloadBundle(bundle)</code> 和 <code>loadBundle(bundle)</code> 方法，我们分别来看一下。<br><em>ActivityLauncher</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preloadBundle</span><span class="params">(Bundle bundle)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (sActivityClasses == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    String pkg = bundle.getPackageName();</div><div class="line">    <span class="keyword">return</span> (pkg == <span class="keyword">null</span> || pkg.equals(<span class="string">"main"</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里在 <code>mPackageName</code> 为 main 时才会返回true，<code>ActivityLauncher</code> 是用来启动宿主 <code>Activity</code> 的，它并没有实现 <code>loadBundle</code> 方法，因此就算 <code>preloadBundle()</code>方法返回true，它也不会有任何处理的。</p>
<p><em>SoBundleLauncher.preloadBundle()</em></p>
<p>因为 <code>ApkBundleLauncher</code> 没有覆盖 <code>preloadBundle()</code> 方法，那么就到了它的父类 <code>SoBundleLauncher.preloadBundle()</code>方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preloadBundle</span><span class="params">(Bundle bundle)</span> </span>&#123;</div><div class="line">    String packageName = bundle.getPackageName();</div><div class="line">    <span class="keyword">if</span> (packageName == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 获取支持的插件类型，ApkBundleLauncher 支持 `app` 和 `lib`，WebBundleLauncher 支持`web`</span></div><div class="line">    String[] types = getSupportingTypes();</div><div class="line">    <span class="keyword">if</span> (types == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="keyword">boolean</span> supporting = <span class="keyword">false</span>;</div><div class="line">    String bundleType = bundle.getType();</div><div class="line">    <span class="keyword">if</span> (bundleType != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 如果在 `bundle.json' 中设置了type，就去根据type来找到合适的BundleLauncher</span></div><div class="line">        <span class="keyword">for</span> (String type : types) &#123;</div><div class="line">            <span class="keyword">if</span> (type.equals(bundleType)) &#123;</div><div class="line">                supporting = <span class="keyword">true</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 如果没有指定type，就尝试根据包名来判断，看里面是否包含app、lib或者web等</span></div><div class="line">        <span class="comment">//  - com.example.[type].any</span></div><div class="line">        <span class="comment">//  - com.example.[type]any</span></div><div class="line">        String[] pkgs = packageName.split(<span class="string">"\\."</span>);</div><div class="line">        <span class="keyword">int</span> N = pkgs.length;</div><div class="line">        String aloneType = N &gt; <span class="number">1</span> ? pkgs[N - <span class="number">2</span>] : <span class="keyword">null</span>;</div><div class="line">        String lastComponent = pkgs[N - <span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span> (String type : types) &#123;</div><div class="line">            <span class="keyword">if</span> ((aloneType != <span class="keyword">null</span> &amp;&amp; aloneType.equals(type))</div><div class="line">                    || lastComponent.startsWith(type)) &#123;</div><div class="line">                supporting = <span class="keyword">true</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//如果该BundleLauncher不支持该Bundle类型，直接返回</span></div><div class="line">    <span class="keyword">if</span> (!supporting) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 获取提取路径，ApkBundleLauncher和AssetBundleLauncher分别有不同的定义。</span></div><div class="line">    File extractPath = getExtractPath(bundle);</div><div class="line">    <span class="keyword">if</span> (extractPath != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (!extractPath.exists()) &#123;</div><div class="line">            extractPath.mkdirs();</div><div class="line">        &#125;</div><div class="line">        bundle.setExtractPath(extractPath);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 获取基础插件文件/data/data/&lt;包名&gt;/app_small_base/&lt;包名&gt;.apk文件</span></div><div class="line">    File plugin = bundle.getBuiltinFile();</div><div class="line">    <span class="comment">// 解析AndroidManifest.xml文件，得到插件的版本，主题风格，Activity，收集intent-filter等</span></div><div class="line">    BundleParser parser = BundleParser.parsePackage(plugin, packageName);</div><div class="line">    <span class="comment">// 获取patch插件文件/data/data/&lt;包名&gt;/app_small_patch/&lt;包名&gt;.apk文件</span></div><div class="line">    File patch = bundle.getPatchFile();</div><div class="line">    <span class="comment">// 解析文件</span></div><div class="line">    BundleParser patchParser = BundleParser.parsePackage(patch, packageName);</div><div class="line">    <span class="keyword">if</span> (parser == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (patchParser == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            parser = patchParser; <span class="comment">// use patch</span></div><div class="line">            plugin = patch;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (patchParser != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 防止patch版本过低</span></div><div class="line">        <span class="keyword">if</span> (patchParser.getPackageInfo().versionCode &lt;= parser.getPackageInfo().versionCode) &#123;</div><div class="line">            Log.d(TAG, <span class="string">"Patch file should be later than built-in!"</span>);</div><div class="line">            patch.delete();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            parser = patchParser; <span class="comment">// use patch</span></div><div class="line">            plugin = patch;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    bundle.setParser(parser);</div><div class="line"></div><div class="line">    <span class="comment">// 检查插件是否被修改过</span></div><div class="line">    <span class="keyword">long</span> lastModified = plugin.lastModified();</div><div class="line">    <span class="keyword">long</span> savedLastModified = Small.getBundleLastModified(packageName);</div><div class="line">    <span class="keyword">if</span> (savedLastModified != lastModified) &#123;</div><div class="line">        <span class="comment">// 如果被修改过，进行一些检验工作</span></div><div class="line">        <span class="keyword">if</span> (!parser.verifyAndExtract(bundle, <span class="keyword">this</span>)) &#123;</div><div class="line">            bundle.setEnabled(<span class="keyword">false</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">// Got it, but disabled</span></div><div class="line">        &#125;</div><div class="line">        Small.setBundleLastModified(packageName, lastModified);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 保存插件的版本</span></div><div class="line">    PackageInfo pluginInfo = parser.getPackageInfo();</div><div class="line">    bundle.setVersionCode(pluginInfo.versionCode);</div><div class="line">    bundle.setVersionName(pluginInfo.versionName);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>插件的解析由 <code>BundleParser</code> 类来完成，不再详述，可以自己分析源码。</p>
<p><em>ApkBundleLauncher.loadBundle()</em></p>
<p>为插件创建 <code>LoadedApk</code> 对象，加载dex文件以及lib库，提取Activity并放入sLoadedActivities列表，收集intentFilter并存入sLoadedIntentFilters列表。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadBundle</span><span class="params">(Bundle bundle)</span> </span>&#123;</div><div class="line">    String packageName = bundle.getPackageName();</div><div class="line"></div><div class="line">    BundleParser parser = bundle.getParser();</div><div class="line">    <span class="comment">// 收集activity</span></div><div class="line">    parser.collectActivities();</div><div class="line">    PackageInfo pluginInfo = parser.getPackageInfo();</div><div class="line"></div><div class="line">    <span class="comment">// 获取插件文件的路径</span></div><div class="line">    String apkPath = parser.getSourcePath();</div><div class="line">    <span class="keyword">if</span> (sLoadedApks == <span class="keyword">null</span>) sLoadedApks = <span class="keyword">new</span> ConcurrentHashMap&lt;String, LoadedApk&gt;();</div><div class="line">    LoadedApk apk = sLoadedApks.get(packageName);</div><div class="line">    <span class="keyword">if</span> (apk == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 为该Bundle创建LoadedApk对象</span></div><div class="line">        apk = <span class="keyword">new</span> LoadedApk();</div><div class="line">        apk.packageName = packageName;</div><div class="line">        apk.path = apkPath;</div><div class="line">        apk.nonResources = parser.isNonResources();</div><div class="line">        <span class="keyword">if</span> (pluginInfo.applicationInfo != <span class="keyword">null</span>) &#123;</div><div class="line">            apk.applicationName = pluginInfo.applicationInfo.className;</div><div class="line">        &#125;</div><div class="line">        apk.packagePath = bundle.getExtractPath();</div><div class="line">        apk.optDexFile = <span class="keyword">new</span> File(apk.packagePath, FILE_DEX);</div><div class="line"></div><div class="line">        <span class="comment">// 加载dex文件</span></div><div class="line">        <span class="keyword">final</span> LoadedApk fApk = apk;</div><div class="line">        Bundle.postIO(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    fApk.dexFile = DexFile.loadDex(fApk.path, fApk.optDexFile.getPath(), <span class="number">0</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="comment">// 提取特定ABI的 native libraries 路径</span></div><div class="line">        String libDir = parser.getLibraryDirectory();</div><div class="line">        <span class="keyword">if</span> (libDir != <span class="keyword">null</span>) &#123;</div><div class="line">            apk.libraryPath = <span class="keyword">new</span> File(apk.packagePath, libDir);</div><div class="line">        &#125;</div><div class="line">        sLoadedApks.put(packageName, apk);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (pluginInfo.activities == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Record activities for intent redirection</span></div><div class="line">    <span class="keyword">if</span> (sLoadedActivities == <span class="keyword">null</span>) sLoadedActivities = <span class="keyword">new</span> ConcurrentHashMap&lt;String, ActivityInfo&gt;();</div><div class="line">    <span class="keyword">for</span> (ActivityInfo ai : pluginInfo.activities) &#123;</div><div class="line">        sLoadedActivities.put(ai.name, ai);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 收集 intent-filters for implicit action</span></div><div class="line">    ConcurrentHashMap&lt;String, List&lt;IntentFilter&gt;&gt; filters = parser.getIntentFilters();</div><div class="line">    <span class="keyword">if</span> (filters != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (sLoadedIntentFilters == <span class="keyword">null</span>) &#123;</div><div class="line">            sLoadedIntentFilters = <span class="keyword">new</span> ConcurrentHashMap&lt;String, List&lt;IntentFilter&gt;&gt;();</div><div class="line">        &#125;</div><div class="line">        sLoadedIntentFilters.putAll(filters);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 设置该插件的manifest中定义的入口Activity	</span></div><div class="line">    bundle.setEntrance(parser.getDefaultActivityName());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>AssetBundleLauncher.loadBundle()</em></p>
<p><code>WebBundleLauncher</code> 的 <code>loadBundle()</code> 方法也由它的父类 <code>AssetBundleLauncher</code> 来处理，由于 <code>AssetBundleLauncher</code> 是继承自 <code>SoBundleLauncher</code>，因此 <code>preloadBundle()</code> 也由 <code>SoBundleLauncher</code> 处理。<br>这个方法主要是将插件文件路径转化为index文件路径<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadBundle</span><span class="params">(Bundle bundle)</span> </span>&#123;</div><div class="line">    String packageName = bundle.getPackageName();</div><div class="line">    <span class="comment">// 获取插件路径</span></div><div class="line">    File unzipDir = <span class="keyword">new</span> File(getBasePath(), packageName);</div><div class="line">    <span class="comment">// 获取indexfile文件，WebBundleLauncher就是在unzipDir后面加上/index.html</span></div><div class="line">    File indexFile = <span class="keyword">new</span> File(unzipDir, getIndexFileName());</div><div class="line"></div><div class="line">    <span class="comment">// Prepare index url</span></div><div class="line">    String uri = indexFile.toURI().toString();</div><div class="line">    <span class="keyword">if</span> (bundle.getQuery() != <span class="keyword">null</span>) &#123;</div><div class="line">        uri += <span class="string">"?"</span> + bundle.getQuery();</div><div class="line">    &#125;</div><div class="line">    URL url;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        url = <span class="keyword">new</span> URL(uri);</div><div class="line">    &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</div><div class="line">        Log.e(TAG, <span class="string">"Failed to parse url "</span> + uri + <span class="string">" for bundle "</span> + packageName);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    String scheme = url.getProtocol();</div><div class="line">    <span class="keyword">if</span> (!scheme.equals(<span class="string">"http"</span>) &amp;&amp;</div><div class="line">            !scheme.equals(<span class="string">"https"</span>) &amp;&amp;</div><div class="line">            !scheme.equals(<span class="string">"file"</span>)) &#123;</div><div class="line">        Log.e(TAG, <span class="string">"Unsupported scheme "</span> + scheme + <span class="string">" for bundle "</span> + packageName);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    bundle.setURL(url);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="BundleLauncher-postSetUp"><a href="#BundleLauncher-postSetUp" class="headerlink" title="BundleLauncher.postSetUp()"></a>BundleLauncher.postSetUp()</h5><p>这里也会调用 <code>BundleLauncher</code> 各个子类的 <code>BundleLauncher</code>方法。</p>
<p>但是仅有 <code>ApkBundleLauncher</code> 覆盖了基类的空实现。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postSetUp</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.postSetUp();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (sLoadedApks == <span class="keyword">null</span>) &#123;</div><div class="line">        Log.e(TAG, <span class="string">"Could not find any APK bundles!"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Collection&lt;LoadedApk&gt; apks = sLoadedApks.values();</div><div class="line"></div><div class="line">    <span class="comment">// Merge all the resources in bundles and replace the host one</span></div><div class="line">    <span class="keyword">final</span> Application app = Small.getContext();</div><div class="line">    String[] paths = <span class="keyword">new</span> String[apks.size() + <span class="number">1</span>];</div><div class="line">    <span class="comment">// 添加宿主app的资源路径</span></div><div class="line">    paths[<span class="number">0</span>] = app.getPackageResourcePath(); </div><div class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</div><div class="line">    <span class="comment">// 添加各个插件的资源路径</span></div><div class="line">    <span class="keyword">for</span> (LoadedApk apk : apks) &#123;</div><div class="line">        <span class="keyword">if</span> (apk.nonResources) <span class="keyword">continue</span>; <span class="comment">// ignores the empty entry to fix #62</span></div><div class="line">        paths[i++] = apk.path; <span class="comment">// add plugin asset path</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (i != paths.length) &#123;</div><div class="line">        paths = Arrays.copyOf(paths, i);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 进行资源的合并，后面有文章详细介绍</span></div><div class="line">    ReflectAccelerator.mergeResources(app, sActivityThread, paths);</div><div class="line"></div><div class="line">    <span class="comment">// 合并插件的dex文件到宿主的class loader</span></div><div class="line">    ClassLoader cl = app.getClassLoader();</div><div class="line">    i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> N = apks.size();</div><div class="line">    String[] dexPaths = <span class="keyword">new</span> String[N];</div><div class="line">    DexFile[] dexFiles = <span class="keyword">new</span> DexFile[N];</div><div class="line">    <span class="keyword">for</span> (LoadedApk apk : apks) &#123;</div><div class="line">        dexPaths[i] = apk.path;</div><div class="line">        dexFiles[i] = apk.dexFile;</div><div class="line">        <span class="keyword">if</span> (Small.getBundleUpgraded(apk.packageName)) &#123;</div><div class="line">            <span class="comment">// If upgraded, delete the opt dex file for recreating</span></div><div class="line">            <span class="keyword">if</span> (apk.optDexFile.exists()) apk.optDexFile.delete();</div><div class="line">            Small.setBundleUpgraded(apk.packageName, <span class="keyword">false</span>);</div><div class="line">        &#125;</div><div class="line">        i++;</div><div class="line">    &#125;</div><div class="line">    ReflectAccelerator.expandDexPathList(cl, dexPaths, dexFiles);</div><div class="line"></div><div class="line">    <span class="comment">// 为宿主class loader扩展它的native library路径，这个路径包含了插件的native library路径</span></div><div class="line">    List&lt;File&gt; libPathList = <span class="keyword">new</span> ArrayList&lt;File&gt;();</div><div class="line">    <span class="keyword">for</span> (LoadedApk apk : apks) &#123;</div><div class="line">        <span class="keyword">if</span> (apk.libraryPath != <span class="keyword">null</span>) &#123;</div><div class="line">            libPathList.add(apk.libraryPath);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (libPathList.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">        ReflectAccelerator.expandNativeLibraryDirectories(cl, libPathList);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 调用所有插件Application的`onCreate' 方法</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">final</span> LoadedApk apk : apks) &#123;</div><div class="line">        String bundleApplicationName = apk.applicationName;</div><div class="line">        <span class="keyword">if</span> (bundleApplicationName == <span class="keyword">null</span>) <span class="keyword">continue</span>;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">final</span> Class applicationClass = Class.forName(bundleApplicationName);</div><div class="line">            Bundle.postUI(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        BundleApplicationContext appContext = <span class="keyword">new</span> BundleApplicationContext(app, apk);</div><div class="line">                        Application bundleApplication = Instrumentation.newApplication(</div><div class="line">                                applicationClass, appContext);</div><div class="line">                        sHostInstrumentation.callApplicationOnCreate(bundleApplication);</div><div class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Lazy init content providers</span></div><div class="line">    <span class="keyword">if</span> (mLazyInitProviders != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Method m = sActivityThread.getClass().getDeclaredMethod(</div><div class="line">                    <span class="string">"installContentProviders"</span>, Context.class, List.class);</div><div class="line">            m.setAccessible(<span class="keyword">true</span>);</div><div class="line">            m.invoke(sActivityThread, app, mLazyInitProviders);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Failed to lazy init content providers: "</span> + mLazyInitProviders);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Free temporary variables</span></div><div class="line">    sLoadedApks = <span class="keyword">null</span>;</div><div class="line">    sProviders = <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此，插件的初始化部分介绍完毕。</p>
]]></content>
    
    <summary type="html">
    
      分析Small框架的初始化流程，包括预处理，加载插件等
    
    </summary>
    
      <category term="Android 插件化" scheme="http://yoursite.com/categories/Android-%E6%8F%92%E4%BB%B6%E5%8C%96/"/>
    
    
      <category term="Android 插件化" scheme="http://yoursite.com/tags/Android-%E6%8F%92%E4%BB%B6%E5%8C%96/"/>
    
      <category term="Android开源项目" scheme="http://yoursite.com/tags/Android%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="Small" scheme="http://yoursite.com/tags/Small/"/>
    
  </entry>
  
  <entry>
    <title>Android 插件化框架Small解析--开始了解Small</title>
    <link href="http://yoursite.com/2017/05/08/open-source-android-plugins-small-sample/"/>
    <id>http://yoursite.com/2017/05/08/open-source-android-plugins-small-sample/</id>
    <published>2017-05-08T02:00:00.000Z</published>
    <updated>2018-06-28T11:44:25.413Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Small是一个非常简洁的插件化框架，它的口号是做最轻巧的跨平台插件化框架。<br><a href="http://code.wequick.net/Small/cn/home" target="_blank" rel="external">Small 官方使用文档</a><br><a href="https://github.com/wequick/Small" target="_blank" rel="external">Small Github源码地址</a><br>那么首先我们从官方给出的 Sample 中初步了解一下Small框架。</p>
<h2 id="运行DevSample"><a href="#运行DevSample" class="headerlink" title="运行DevSample"></a>运行DevSample</h2><p>从上面给出的Small Github源码地址中现在Small源码。<br>在 Small/Android/ 下面有两个目录：</p>
<ul>
<li>Sample/：使用者模式</li>
<li>DevSample/：开发者模式</li>
</ul>
<p>他们有什么区别呢？可以看他们编译后的结果：<br>Sample：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">| type |      name      |  PP  | sdk |  aapt  | support | file(armeabi)  |   size   |</div><div class="line">|------|----------------|------|-----|--------|---------|----------------|----------|</div><div class="line">| host | app            |      | 25  | 25.0.2 | 25.1.0  |                |          |</div><div class="line">| stub | app+stub       |      | 25  | 25.0.2 | 25.1.0  |                |          |</div><div class="line">| app  | app.main       | 0x77 | 25  | 25.0.2 | 25.1.0  | *_main.so      | 11.7 KB  |</div><div class="line">| app  | app.mine       | 0x16 | 25  | 25.0.2 |         | *_mine.so      | 47.6 KB  |</div><div class="line">| app  | app.ok-if-stub | 0x6a | 25  | 25.0.2 |         | *_stub.so      | 19.7 KB  |</div><div class="line">| app  | app.detail     | 0x67 | 25  | 25.0.2 | 25.1.0  | *_detail.so    | 7.4 KB   |</div><div class="line">| app  | app.home       | 0x70 | 25  | 25.0.2 |         | *_home.so      | 11.3 KB  |</div><div class="line">| lib  | lib.analytics  | 0x76 | 25  | 25.0.2 |         | *_analytics.so | 126.6 KB |</div><div class="line">| lib  | lib.utils      | 0x73 | 25  | 25.0.2 | 25.1.0  | *_utils.so     | 6.8 KB   |</div><div class="line">| lib  | lib.style      | 0x79 | 25  | 25.0.2 | 25.1.0  | *_style.so     | 5.5 KB   |</div><div class="line">| web  | web.about      |      | 25  | 25.0.2 | 25.1.0  | *_about.so     | 24.3 KB  |</div></pre></td></tr></table></figure>
<p>DevSample：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">| type |      name      |  PP  | sdk |  aapt  | support |        file         |   size   |</div><div class="line">|------|----------------|------|-----|--------|---------|---------------------|----------|</div><div class="line">| host | app            |      | 25  | 25.0.2 | 25.1.0  |                     |          |</div><div class="line">| stub | app+stub       |      | 25  | 25.0.2 | 25.1.0  |                     |          |</div><div class="line">| app  | app.main       | 0x77 | 25  | 25.0.2 | 25.1.0  | *.main.apk          | 11.7 KB  |</div><div class="line">| app  | app.mine       | 0x16 | 25  | 25.0.2 |         | *.mine.apk          | 47.6 KB  |</div><div class="line">| app  | app.ok-if-stub | 0x6a | 25  | 25.0.2 |         | *.appok_if_stub.apk | 19.7 KB  |</div><div class="line">| app  | app.detail     | 0x67 | 25  | 25.0.2 | 25.1.0  | *.detail.apk        | 7.4 KB   |</div><div class="line">| app  | app.home       | 0x70 | 25  | 25.0.2 |         | *.home.apk          | 11.3 KB  |</div><div class="line">| lib  | lib.afterutils | 0x45 | 25  | 25.0.2 | 25.1.0  | *.afterutils.apk    | 3.7 KB   |</div><div class="line">| lib  | lib.analytics  | 0x76 | 25  | 25.0.2 |         | *.analytics.apk     | 126.6 KB |</div><div class="line">| lib  | lib.utils      | 0x73 | 25  | 25.0.2 | 25.1.0  | *.utils.apk         | 6.8 KB   |</div><div class="line">| lib  | lib.style      | 0x79 | 25  | 25.0.2 | 25.1.0  | *.style.apk         | 5.5 KB   |</div><div class="line">| web  | web.about      |      | 25  | 25.0.2 | 25.1.0  | *.about.apk         | 24.3 KB  |</div></pre></td></tr></table></figure>
<p>编译后的结果 Sample 是 <em>.so，DevSample 是 </em>.apk。<br>造成这样的区别原因是在开发者模式的 build.gradle 里面有下面的设置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">small &#123;</div><div class="line">    buildToAssets = true</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>buildToAssets</code> 决定是否将插件作为 apk 文件打包到宿主 apk 的 assets 目录下。默认为 false，即作为 so 文件打包到宿主 apk 的 lib 目录下。<br>配套的，还需要在宿主的 <code>Application</code> 里指定读取插件的位置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate();</div><div class="line">    ...</div><div class="line">    Small.setLoadFromAssets(BuildConfig.LOAD_FROM_ASSETS);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (Small.isLoadFromAssets()) &#123;</div><div class="line">    mBuiltinAssetName = pkg + <span class="string">".apk"</span>;</div><div class="line">    mBuiltinFile = <span class="keyword">new</span> File(FileUtils.getInternalBundlePath(), mBuiltinAssetName);</div><div class="line">    mPatchFile = <span class="keyword">new</span> File(FileUtils.getDownloadBundlePath(), mBuiltinAssetName);</div><div class="line">    <span class="comment">// Extract from assets to files</span></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        extractBundle(mBuiltinAssetName, mBuiltinFile);</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    String soName = <span class="string">"lib"</span> + pkg.replaceAll(<span class="string">"\\."</span>, <span class="string">"_"</span>) + <span class="string">".so"</span>;</div><div class="line">    mBuiltinFile = <span class="keyword">new</span> File(sUserBundlesPath, soName);</div><div class="line">    mPatchFile = <span class="keyword">new</span> File(FileUtils.getDownloadBundlePath(), soName);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，<code>BuildConfig.LOAD_FROM_ASSETS</code> 为 true 时，从 /data/data/<packagename>/small_base 下面读取 apk 格式插件，为 false 时从 <code>nativeLibraryDir</code> 中读取 so 格式插件。</packagename></p>
<p>那么现在我们就导入 DevSample 工程。</p>
<h3 id="导入DevSample工程"><a href="#导入DevSample工程" class="headerlink" title="导入DevSample工程"></a>导入DevSample工程</h3><p>打开Android Studio，File-&gt;Open-&gt;Open File or Project… 选择DevSample文件夹然后打开。<br>如图：</p>
<p><img src="/images/open-source-android-plugins-small-sample/small-dev-sample-import-project.png" alt="效果图"></p>
<p>DevSample 示例工程中有下面的模块：</p>
<ul>
<li>app 宿主工程</li>
<li>app.* 应用插件，包含Activity/Fragment的插件</li>
<li>lib.* 公共库插件</li>
<li>web.* 本地网页插件</li>
<li>app+* <a href="http://code.wequick.net/Small/cn/stub-module" target="_blank" rel="external">宿主分身模块</a></li>
<li>gradle-small Small中的一个gradle自定义插件，用于打包组件</li>
</ul>
<p>出于业务需求考虑，Small定义了两类插件：公共库插件与应用插件。<br><em>应用插件</em>相对简单，就是用来把大应用拆分成一个个小的业务单元。而<em>公共库插件</em>则是为这些业务单元提供公共的代码与资源，比如可以将在多个应用插件间可以复用的一些主题、界面边距资源提取出来作为一个公共库插件。</p>
<h3 id="编译插件"><a href="#编译插件" class="headerlink" title="编译插件"></a>编译插件</h3><p>在运行前必须要编译生成插件。</p>
<ol>
<li>编译公共库插件：</li>
</ol>
<p>指的是编译lib.*的插件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gradlew buildLib -q (-q是安静模式，可以让输出更好看，也可以不加)</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">Small building library 1 of 5 - app (0x7f)</div><div class="line">Small building library 2 of 5 - lib.utils (0x73)</div><div class="line">      [lib.utils] split library res files...                          [  OK  ]</div><div class="line">      [lib.utils] slice asset package and reset package id...         [  OK  ]</div><div class="line">      [lib.utils] split library R.java files...                       [  OK  ]</div><div class="line">      [lib.utils] add flags: 10000...                                 [  OK  ]</div><div class="line">      [lib.utils] split R.class...                                    [  OK  ]</div><div class="line">      -&gt; smallLibs/net.wequick.example.small.lib.utils.apk (7004 bytes = 6.8 KB)</div><div class="line">Small building library 3 of 5 - lib.afterutils (0x45)</div><div class="line">      [lib.afterutils] remove resources dir...                        [  OK  ]</div><div class="line">      [lib.afterutils] remove resources.arsc...                       [  OK  ]</div><div class="line">      [lib.afterutils] remove R.java...                               [  OK  ]</div><div class="line">      [lib.afterutils] add flags: 1...                                [  OK  ]</div><div class="line">      -&gt; smallLibs/net.wequick.example.small.lib.afterutils.apk (3744 bytes = 3.7 KB)</div><div class="line">Small building library 4 of 5 - lib.analytics (0x76)</div><div class="line">      [lib.analytics] remove resources dir...                         [  OK  ]</div><div class="line">      [lib.analytics] remove resources.arsc...                        [  OK  ]</div><div class="line">      [lib.analytics] remove R.java...                                [  OK  ]</div><div class="line">      [lib.analytics] add flags: 1...                                 [  OK  ]</div><div class="line">      -&gt; smallLibs/net.wequick.example.lib.analytics.apk (129638 bytes = 126.6 KB)</div><div class="line">Small building library 5 of 5 - lib.style (0x79)</div><div class="line">      [lib.style] split library res files...                          [  OK  ]</div><div class="line">      [lib.style] slice asset package and reset package id...         [  OK  ]</div><div class="line">      [lib.style] split library R.java files...                       [  OK  ]</div><div class="line">      [lib.style] split R.class...                                    [  OK  ]</div><div class="line">      -&gt; smallLibs/com.example.mysmall.lib.style.apk (5603 bytes = 5.5 KB)</div></pre></td></tr></table></figure>
<ol>
<li>编译应用插件</li>
</ol>
<p>指的是编译app.*的插件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gradlew buildBundle -q (-q是安静模式，可以让输出更好看，也可以不加)</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">Small building bundle 1 of 6 - app.detail (0x67)</div><div class="line">      [app.detail] split library res files...                         [  OK  ]</div><div class="line">      [app.detail] slice asset package and reset package id...        [  OK  ]</div><div class="line">      [app.detail] split library R.java files...                      [  OK  ]</div><div class="line">      [app.detail] split R.class...                                   [  OK  ]</div><div class="line">      -&gt; smallLibs/net.wequick.example.small.app.detail.apk (7616 bytes = 7.4 KB)</div><div class="line">Small building bundle 2 of 6 - app.home (0x70)</div><div class="line">      [app.home] split library res files...                           [  OK  ]</div><div class="line">      [app.home] slice asset package and reset package id...          [  OK  ]</div><div class="line">      [app.home] split library R.java files...                        [  OK  ]</div><div class="line">      [app.home] split R.class...                                     [  OK  ]</div><div class="line">      -&gt; smallLibs/net.wequick.example.small.app.home.apk (11582 bytes = 11.3 KB)</div><div class="line">Small building bundle 3 of 6 - app.main (0x77)</div><div class="line">      [app.main] split library res files...                           [  OK  ]</div><div class="line">      [app.main] slice asset package and reset package id...          [  OK  ]</div><div class="line">      [app.main] split library R.java files...                        [  OK  ]</div><div class="line">      [app.main] add flags: 10000...                                  [  OK  ]</div><div class="line">      [app.main] split R.class...                                     [  OK  ]</div><div class="line">      -&gt; smallLibs/net.wequick.example.small.app.main.apk (12017 bytes = 11.7 KB)</div><div class="line">Small building bundle 4 of 6 - app.mine (0x16)</div><div class="line">      [app.mine] split library res files...                           [  OK  ]</div><div class="line">      [app.mine] slice asset package and reset package id...          [  OK  ]</div><div class="line">      [app.mine] split library R.java files...                        [  OK  ]</div><div class="line">      [app.mine] add flags: 11111110...                               [  OK  ]</div><div class="line">      [app.mine] split R.class...                                     [  OK  ]</div><div class="line">      -&gt; smallLibs/net.wequick.example.small.app.mine.apk (48747 bytes = 47.6 KB)</div><div class="line">Small building bundle 5 of 6 - app.ok-if-stub (0x6a)</div><div class="line">      [app.ok-if-stub] split library res files...                     [  OK  ]</div><div class="line">      [app.ok-if-stub] slice asset package and reset package id...    [  OK  ]</div><div class="line">      [app.ok-if-stub] split library R.java files...                  [  OK  ]</div><div class="line">      [app.ok-if-stub] split R.class...                               [  OK  ]</div><div class="line">      -&gt; smallLibs/net.wequick.example.small.appok_if_stub.apk (20197 bytes = 19.7 KB)</div></pre></td></tr></table></figure>
<p>单独编译一个组件可以使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gradlew -p app.main assembleRelease</div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gradlew :app.main:assembleRelease</div></pre></td></tr></table></figure>
<p>编译后生成的文件在 Android/Sample/app/smallLibs 目录中。</p>
<ol>
<li>检查编译情况</li>
</ol>
<p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gradlew small</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">:small</div><div class="line"></div><div class="line">### Compile-time</div><div class="line"></div><div class="line"></div><div class="line">  gradle-small plugin : 1.2.0-alpha6 (project)</div><div class="line">            small aar : 1.2.0-alpha6 (project)</div><div class="line">          gradle core : 3.3</div><div class="line">       android plugin : 2.3.0</div><div class="line">                   OS : Linux 3.8.0-35-generic (amd64)</div><div class="line"></div><div class="line"></div><div class="line">### Bundles</div><div class="line"></div><div class="line">| type |      name      |  PP  | sdk |  aapt  | support |        file         |   size   |</div><div class="line">|------|----------------|------|-----|--------|---------|---------------------|----------|</div><div class="line">| host | app            |      | 25  | 25.0.2 | 25.1.0  |                     |          |</div><div class="line">| stub | app+stub       |      | 25  | 25.0.2 | 25.1.0  |                     |          |</div><div class="line">| app  | app.main       | 0x77 | 25  | 25.0.2 | 25.1.0  | *.main.apk          | 11.7 KB  |</div><div class="line">| app  | app.mine       | 0x16 | 25  | 25.0.2 |         | *.mine.apk          | 47.6 KB  |</div><div class="line">| app  | app.ok-if-stub | 0x6a | 25  | 25.0.2 |         | *.appok_if_stub.apk | 19.7 KB  |</div><div class="line">| app  | app.detail     | 0x67 | 25  | 25.0.2 | 25.1.0  | *.detail.apk        | 7.4 KB   |</div><div class="line">| app  | app.home       | 0x70 | 25  | 25.0.2 |         | *.home.apk          | 11.3 KB  |</div><div class="line">| lib  | lib.afterutils | 0x45 | 25  | 25.0.2 | 25.1.0  | *.afterutils.apk    | 3.7 KB   |</div><div class="line">| lib  | lib.analytics  | 0x76 | 25  | 25.0.2 |         | *.analytics.apk     | 126.6 KB |</div><div class="line">| lib  | lib.utils      | 0x73 | 25  | 25.0.2 | 25.1.0  | *.utils.apk         | 6.8 KB   |</div><div class="line">| lib  | lib.style      | 0x79 | 25  | 25.0.2 | 25.1.0  | *.style.apk         | 5.5 KB   |</div><div class="line">| web  | web.about      |      | 25  | 25.0.2 | 25.1.0  | *.about.apk         | 24.3 KB  |</div><div class="line"></div><div class="line"></div><div class="line">BUILD SUCCESSFUL</div><div class="line"></div><div class="line">Total time: 4.21 secs</div></pre></td></tr></table></figure>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>点击<br><img src="/images/open-source-android-plugins-small-sample/small-dev-sample-run-module.png" alt="效果图"><br>运行需要的组件。<br>app.home 无法单独运行是因为它只包含一个 <code>Fragment</code>，没有 Launcher Activity。<br>如果需要修改某个插件，修改完后重新编译该插件，在重新编译宿主工程就可以了。</p>
<h3 id="清除插件"><a href="#清除插件" class="headerlink" title="清除插件"></a>清除插件</h3><p>清除基础库：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gradlew cleanLib -q</div></pre></td></tr></table></figure>
<p>清除所有插件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gradlew cleanBundle -q</div></pre></td></tr></table></figure>
<h2 id="Small工程解析"><a href="#Small工程解析" class="headerlink" title="Small工程解析"></a>Small工程解析</h2><h3 id="插件路由"><a href="#插件路由" class="headerlink" title="插件路由"></a>插件路由</h3><p>在宿主工程 app 的 assets 目录下面有个文件 bundle.json，它就想一个插件路由表一样，Small 中用它来对插件进行管理：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</div><div class="line">  &quot;bundles&quot;: [</div><div class="line">    &#123;</div><div class="line">      &quot;uri&quot;: &quot;lib.utils&quot;,</div><div class="line">      &quot;pkg&quot;: &quot;net.wequick.example.small.lib.utils&quot;</div><div class="line">    &#125;,</div><div class="line">    ...</div><div class="line">    &#123;</div><div class="line">      &quot;uri&quot;: &quot;mine&quot;,</div><div class="line">      &quot;pkg&quot;: &quot;net.wequick.example.small.app.mine&quot;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;uri&quot;: &quot;detail&quot;,</div><div class="line">      &quot;pkg&quot;: &quot;net.wequick.example.small.app.detail&quot;,</div><div class="line">      &quot;rules&quot;: &#123;</div><div class="line">        &quot;sub&quot;: &quot;Sub&quot;</div><div class="line">        &quot;page&quot;: MyPage&quot;</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;uri&quot;: &quot;stub&quot;,</div><div class="line">      &quot;type&quot;: &quot;app&quot;,</div><div class="line">      &quot;pkg&quot;: &quot;net.wequick.example.small.appok_if_stub&quot;</div><div class="line">    &#125;,</div><div class="line">    ...</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>bundle.json 中的每一个元素都是对一个插件的声明。</p>
<ul>
<li>uri：跳转插件的界面都是通过uri来指定的，也就是一个uri唯一对应一个插件</li>
<li>pkg：插件的包名</li>
<li>type：插件类型：app应用插件；lib公共库插件</li>
<li>rules：插件的子路由表</li>
</ul>
<p>在加载插件时会根据type类型来寻找合适的 <code>BundleLauncher</code>，如果这里没有指定type，那么就要根据包名来判断插件类型，比如包名里面要包含 app 、lib 或者 web 等。</p>
<h4 id="主路由"><a href="#主路由" class="headerlink" title="主路由"></a>主路由</h4><p>在代码中通过：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Small.openUri(<span class="string">"detail"</span>, context);</div></pre></td></tr></table></figure>
<p>来通过包名来查找对应插件，调用该插件下面的 Launcher Activity。即 <code>net.wequick.example.small.app.detail</code>下面的<code>MainActivity</code>。</p>
<h4 id="子路由"><a href="#子路由" class="headerlink" title="子路由"></a>子路由</h4><p>如果是：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Small.openUri(<span class="string">"detail/Sub"</span>, context);</div></pre></td></tr></table></figure>
<p>就会调用 <code>net.wequick.example.small.app.detail</code> 下面的 <code>SubActivity</code>。</p>
<h4 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h4><p>在调用插件的时候还可以传递参数：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Small.openUri(<span class="string">"detail?from=app.home"</span>, context);</div></pre></td></tr></table></figure>
<p>在调起的插件<code>app.detail/MainActivity</code>中通过下面方法来查询参数：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Uri uri = Small.getUri(<span class="keyword">this</span>);</div><div class="line"><span class="keyword">if</span> (uri != <span class="keyword">null</span>) &#123;</div><div class="line">    String from = uri.getQueryParameter(<span class="string">"from"</span>);</div><div class="line">    <span class="comment">// Do stuff by `from'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      根据官方提供的例子初步了解Small的用法
    
    </summary>
    
      <category term="Android 插件化" scheme="http://yoursite.com/categories/Android-%E6%8F%92%E4%BB%B6%E5%8C%96/"/>
    
    
      <category term="Android 插件化" scheme="http://yoursite.com/tags/Android-%E6%8F%92%E4%BB%B6%E5%8C%96/"/>
    
      <category term="Android开源项目" scheme="http://yoursite.com/tags/Android%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="Small" scheme="http://yoursite.com/tags/Small/"/>
    
  </entry>
  
  <entry>
    <title>Android 性能优化之旋转屏幕优化</title>
    <link href="http://yoursite.com/2017/04/26/android-performance-optimization-rotate-screen/"/>
    <id>http://yoursite.com/2017/04/26/android-performance-optimization-rotate-screen/</id>
    <published>2017-04-26T02:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在桌面转屏发现响应不够迅速，对比其他产品有很大的提升空间，针对此问题进行了一些分析和优化。</p>
<h2 id="问题分析和解决方法"><a href="#问题分析和解决方法" class="headerlink" title="问题分析和解决方法"></a>问题分析和解决方法</h2><p>首先简单介绍一下旋转屏幕的流程，首先各个界面要进行重绘，在重绘过程中要进行冻屏，只有所有<code>Window</code>都进行绘制完成了才进行转屏，因此这里面就有个木桶效应，转屏的时间取决于重绘最慢的那个。<br>首先分析Log，找出可以优化的点：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">adb shell dumpsys window <span class="_">-d</span> <span class="built_in">enable</span> 10</div><div class="line">adb logcat -v threadtime <span class="_">-s</span> WindowManager | grep -E <span class="string">"Screen frozen for|Dismissing screen|Orientation start waiting for draw|Orientation not waiting for draw"</span></div></pre></td></tr></table></figure>
<p><code>adb shell dumpsys window -d enable 10</code>是使能<code>DEBUG_ORIENTATION</code>，开启打印转屏相关的Log。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">WindowManager: Orientation start waiting <span class="keyword">for</span> draw mDrawState=DRAW_PENDING in Window&#123;<span class="number">249e41f</span> u0 StatusBar&#125;, <span class="function">surface <span class="title">Surface</span><span class="params">(name=StatusBar)</span></span></div><div class="line">WindowManager: Orientation start waiting <span class="keyword">for</span> draw mDrawState=DRAW_PENDING in Window&#123;<span class="number">731</span>dc6a u0 com.android.launcher/com.android.launcher.Launcher&#125;, <span class="function">surface <span class="title">Surface</span><span class="params">(name=com.android.launcher/com.android.launcher.Launcher)</span></span></div><div class="line">WindowManager: Orientation start waiting <span class="keyword">for</span> draw mDrawState=DRAW_PENDING in Window&#123;b22eda5 u0 com.android.systemui.ImageWallpaper&#125;, <span class="function">surface <span class="title">Surface</span><span class="params">(name=com.android.systemui.ImageWallpaper)</span></span></div><div class="line">WindowManager: Orientation start waiting <span class="keyword">for</span> draw mDrawState=DRAW_PENDING in Window&#123;<span class="number">731</span>dc6a u0 com.android.launcher/com.android.launcher.Launcher&#125;, <span class="function">surface <span class="title">Surface</span><span class="params">(name=com.android.launcher/com.android.launcher.Launcher)</span></span></div><div class="line">WindowManager: Orientation start waiting <span class="keyword">for</span> draw mDrawState=DRAW_PENDING in Window&#123;<span class="number">731</span>dc6a u0 com.android.launcher/com.android.launcher.Launcher&#125;, <span class="function">surface <span class="title">Surface</span><span class="params">(name=com.android.launcher/com.android.launcher.Launcher)</span></span></div><div class="line">WindowManager: Orientation start waiting <span class="keyword">for</span> draw mDrawState=DRAW_PENDING in Window&#123;<span class="number">94517</span>ed u0 com.android.launcher/com.android.launcher.Launcher&#125;, <span class="function">surface <span class="title">Surface</span><span class="params">(name=com.android.launcher/com.android.launcher.Launcher)</span></span></div><div class="line">WindowManager: Orientation not waiting <span class="keyword">for</span> draw in Window&#123;<span class="number">94517</span>ed u0 com.android.launcher/com.android.launcher.Launcher&#125;, <span class="function">surface <span class="title">Surface</span><span class="params">(name=com.android.launcher/com.android.launcher.Launcher)</span></span></div><div class="line">WindowManager: Orientation not waiting <span class="keyword">for</span> draw in Window&#123;b22eda5 u0 com.android.systemui.ImageWallpaper&#125;, <span class="function">surface <span class="title">Surface</span><span class="params">(name=com.android.systemui.ImageWallpaper)</span></span></div><div class="line">WindowManager: Orientation not waiting <span class="keyword">for</span> draw in Window&#123;<span class="number">249e41f</span> u0 StatusBar&#125;, <span class="function">surface <span class="title">Surface</span><span class="params">(name=StatusBar)</span></span></div><div class="line">WindowManager: Screen frozen <span class="keyword">for</span> +968ms due to Window&#123;<span class="number">249e41f</span> u0 StatusBar&#125;</div><div class="line">WindowManager: **** Dismissing screen rotation animation</div></pre></td></tr></table></figure>
<p>通过Log发现，转屏是要等<code>StatusBar</code>，<code>Launcher</code>和<code>ImageWallpaper</code>绘制完才会开始的。<br>根据<code>Screen frozen for +968ms due to Window{249e41f u0 StatusBar}</code>发现目前的瓶颈在状态栏这里，首先分析一下状态栏的代码，可以借助于 TraceView 工具迅速定位到耗时较多方法的位置，发现在<code>NotificationPanelView</code>的<code>onConfigurationChanged</code>函数中有一项耗时的操作，先进行这部分优化。<br>然后看效果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">WindowManager: Screen frozen <span class="keyword">for</span> +<span class="number">747</span>ms due to Window&#123;<span class="number">3</span>aaa434 u0 com.android.launcher/com.android.launcher.Launcher&#125;</div></pre></td></tr></table></figure>
<p>发现这个时候瓶颈已经不再<code>StatusBar</code>这里了，接下面再优化<code>Launcher</code>就可以。<br>接下来看看<code>ImageWallpaper</code>是不是有优化的余地呢？<br>通过 TraceView 工具发现在<code>ImageWallpaper.drawFrame()</code>方法中，每次旋转屏幕都会在<code>updateWallpaperLocked()</code>中调用<code>mWallpaperManager.getBitmap()</code>进行解码图片，这个也是没有必要的，只初始化一次就可以了，可以进行如下的修改：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Load bitmap if it is not yet loaded or if it was loaded at a different size</span></div><div class="line"><span class="keyword">if</span> (mBackground == <span class="keyword">null</span><span class="comment">/* || surfaceDimensionsChanged*/</span>) &#123;</div></pre></td></tr></table></figure>
<p>只在<code>mBackground</code>为<code>null</code>是加在壁纸图片。<br>第三步的任务就是优化<code>Launcher</code>了，此处的优化点各不相同，而且较多，就不一一介绍了。</p>
]]></content>
    
    <summary type="html">
    
      介绍开发过程中遇到的旋转屏幕卡顿问题的解决过程
    
    </summary>
    
      <category term="Android性能优化" scheme="http://yoursite.com/categories/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Android性能优化" scheme="http://yoursite.com/tags/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Android 动态壁纸</title>
    <link href="http://yoursite.com/2017/03/10/android-demo-live-wallpaper-snow/"/>
    <id>http://yoursite.com/2017/03/10/android-demo-live-wallpaper-snow/</id>
    <published>2017-03-10T02:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/heqiangflytosky/LiveWallPaper" target="_blank" rel="external">Github源码地址</a></p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>动态壁纸，顾名思义就是有动画效果的壁纸，它是针对静态壁纸的一种表述方式，它不但可以实现动态效果，而且还可以与用户的触摸事件进行交互。<br>其实在Android的源码里面已经有一些动态壁纸的Demo，Android 内置的动态壁纸都在 packages/wallpapers/ 这个目录里，其中LivePicker目录里包含的是动态墙纸的选择列表的代码，也就是你在桌面选择添加动态墙纸时出现的系统里所有动态墙纸的那个列表的实现代码。<br>如果你想自己来实现一个动态壁纸也是一件简单的事情，本文中实现了一个雪花飞舞的动态壁纸效果，而且具有与用户交互的功能，当触摸屏幕时会在触摸点的位置生成一个雪花。</p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://github.com/heqiangflytosky/LiveWallPaper/raw/master/img/livewallpaper_snow.gif"></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>下面先来看一下AndroidManifest.xml文件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">package</span>=<span class="string">"com.android.hq.livewallpaper"</span></span></div><div class="line">          <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span></span></div><div class="line">                  <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">                  <span class="attr">android:hardwareAccelerated</span>=<span class="string">"true"</span></div><div class="line"></div><div class="line">                  <span class="attr">android:uiOptions</span>=<span class="string">"splitActionBarWhenNarrow"</span></div><div class="line">                  <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span> &gt;</div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">".SnowWallPaper"</span></span></div><div class="line">                 <span class="attr">android:label</span>=<span class="string">"雪花飞舞"</span></div><div class="line">                 <span class="attr">android:permission</span>=<span class="string">"android.permission.BIND_WALLPAPER"</span>&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.service.wallpaper.WallpaperService"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">"android.service.wallpaper"</span> <span class="attr">android:resource</span>=<span class="string">"@xml/snow"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;/<span class="name">service</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure></p>
<ul>
<li><code>android:label=&quot;雪花飞舞&quot;</code>可以为壁纸设置一个名称</li>
<li><code>android:permission=&quot;android.permission.BIND_WALLPAPER&quot;</code> 允许绑定壁纸权限，必须添加</li>
<li><code>action android:name=&quot;android.service.wallpaper.WallpaperService&quot;</code> 这个action把其当做一个动态壁纸加载进动态壁纸选择器的列表，必须添加</li>
</ul>
<p>xml/snow.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">wallpaper</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">           <span class="attr">android:thumbnail</span>=<span class="string">"@drawable/snow_thumbnail"</span></div><div class="line">           <span class="attr">android:author</span>=<span class="string">"@string/author"</span>/&gt;</div></pre></td></tr></table></figure></p>
<p><code>android:thumbnail</code>可以为壁纸设置一个缩略图，可以在选择动态壁纸的时候显示</p>
<p>WallpaperService.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SnowWallPaper</span> <span class="keyword">extends</span> <span class="title">WallpaperService</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String TAG = <span class="string">"WallpaperService"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 必须实现这个方法来返回我们自定义引擎的实例</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Engine <span class="title">onCreateEngine</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SnowEngine();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//自定义引擎类</span></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SnowEngine</span> <span class="keyword">extends</span> <span class="title">Engine</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> SnowUtils mSnowUtils;</div><div class="line">        <span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> MyHandler();</div><div class="line">        Bitmap mBackground;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_DRAW_FRAME = <span class="number">1</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_PRODUCE_SNOW = <span class="number">2</span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SnowEngine</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SurfaceHolder surfaceHolder)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.onCreate(surfaceHolder);</div><div class="line">            setTouchEventsEnabled(<span class="keyword">true</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 手指触摸屏幕时会调用此方法</span></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.onTouchEvent(event);</div><div class="line">            <span class="keyword">if</span>(event.getAction() == MotionEvent.ACTION_DOWN)&#123;</div><div class="line">                mSnowUtils.produceInstantFlake((<span class="keyword">int</span>)event.getX(), (<span class="keyword">int</span>)event.getY());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//壁纸由隐藏转换为显示状态时会调用这个方法</span></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onVisibilityChanged</span><span class="params">(<span class="keyword">boolean</span> visible)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.onVisibilityChanged(visible);</div><div class="line">            <span class="keyword">if</span> (visible) &#123;</div><div class="line">                mHandler.obtainMessage(MSG_DRAW_FRAME).sendToTarget();</div><div class="line">                mHandler.obtainMessage(MSG_PRODUCE_SNOW).sendToTarget();</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//当壁纸隐藏时不再进行绘制</span></div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                mHandler.removeCallbacksAndMessages(<span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSurfaceChanged</span><span class="params">(SurfaceHolder holder, <span class="keyword">int</span> format, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.onSurfaceChanged(holder, format, width, height);</div><div class="line">            drawFrame();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOffsetsChanged</span><span class="params">(<span class="keyword">float</span> xOffset, <span class="keyword">float</span> yOffset, <span class="keyword">float</span> xOffsetStep, <span class="keyword">float</span> yOffsetStep, <span class="keyword">int</span> xPixelOffset, <span class="keyword">int</span> yPixelOffset)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.onOffsetsChanged(xOffset, yOffset, xOffsetStep, yOffsetStep, xPixelOffset, yPixelOffset);</div><div class="line">            drawFrame();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSurfaceDestroyed</span><span class="params">(SurfaceHolder holder)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.onSurfaceDestroyed(holder);</div><div class="line">            mHandler.removeCallbacksAndMessages(<span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 具体的绘制都在这个方法里面实现</span></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawFrame</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">            SurfaceHolder sh = getSurfaceHolder();</div><div class="line">            <span class="keyword">final</span> Rect frame = sh.getSurfaceFrame();</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> dw = frame.width();</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> dh = frame.height();</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(mSnowUtils == <span class="keyword">null</span>)&#123;</div><div class="line">                mSnowUtils = <span class="keyword">new</span> SnowUtils(getApplicationContext());</div><div class="line">                mSnowUtils.init(dw, dh);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (mBackground == <span class="keyword">null</span>) &#123;</div><div class="line">                mBackground = BitmapFactory.decodeResource(getResources(),R.drawable.snow_bg);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            Canvas c = sh.lockCanvas();</div><div class="line">            <span class="keyword">if</span>(c != <span class="keyword">null</span>)&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="comment">// 先绘制一个静态的背景图片</span></div><div class="line">                    drawBackground(c,dw,dh);</div><div class="line">                    <span class="comment">// 绘制动态的雪花</span></div><div class="line">                    mSnowUtils.draw(c);</div><div class="line">                &#125;<span class="keyword">finally</span> &#123;</div><div class="line">                    sh.unlockCanvasAndPost(c);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawBackground</span><span class="params">(Canvas c,<span class="keyword">int</span> w, <span class="keyword">int</span> h)</span></span>&#123;</div><div class="line">            <span class="keyword">if</span> (mBackground != <span class="keyword">null</span>) &#123;</div><div class="line">                RectF dest = <span class="keyword">new</span> RectF(<span class="number">0</span>, <span class="number">0</span>, w, h);</div><div class="line">                c.drawBitmap(mBackground, <span class="keyword">null</span>, dest, <span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span></span>&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">                <span class="keyword">switch</span> (msg.what)&#123;</div><div class="line">                    <span class="keyword">case</span> MSG_DRAW_FRAME:</div><div class="line">                        drawFrame();</div><div class="line">                        removeMessages(MSG_DRAW_FRAME);</div><div class="line">                        sendMessageDelayed(obtainMessage(MSG_DRAW_FRAME), <span class="number">50</span>);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> MSG_PRODUCE_SNOW:</div><div class="line">                        mSnowUtils.produceSnowFlake();</div><div class="line">                        removeMessages(MSG_PRODUCE_SNOW);</div><div class="line">                        sendMessageDelayed(obtainMessage(MSG_PRODUCE_SNOW), <span class="number">1000</span>);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">default</span>:</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>从代码中我们可以看到，<code>drawFrame()</code>方法承担了具体的绘制工作，绘制工作分为两部分，一部分是绘制静态的背景，第二部分是绘制动态的雪花，如果去掉第二部分，就是一个静态壁纸了。<br>其实静态壁纸和动态壁纸是一样的，静态壁纸只是绘制一张图片，动态背景就要不断的绘制动画。<br>具体介绍参考我的博客<a href=""></a>。</p>
]]></content>
    
    <summary type="html">
    
      通过具体例子来介绍Android动态壁纸的实现
    
    </summary>
    
      <category term="Android Demo" scheme="http://yoursite.com/categories/Android-Demo/"/>
    
    
      <category term="Android Demo" scheme="http://yoursite.com/tags/Android-Demo/"/>
    
  </entry>
  
  <entry>
    <title>Android UserManager相关源码分析</title>
    <link href="http://yoursite.com/2017/03/06/android-source-code-analysis-usermanager/"/>
    <id>http://yoursite.com/2017/03/06/android-source-code-analysis-usermanager/</id>
    <published>2017-03-06T02:00:00.000Z</published>
    <updated>2018-10-24T07:52:39.956Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Android从4.2开始支持多用户模式，不同的用户运行在独立的用户空间，它们的的锁屏设置，PIN码和壁纸等系统设置是各不相同的，而且不同用户安装的应用和应用数据都是不一样的，但是系统中和硬件相关的设置则是共用的，比如网络设置等。通常第一个在系统中注册的用户将成为系统管理员，可以管理手机上的其他用户。但由于专利的原因，目前手机上并没有开启多用户模式，这种模式只能用在平板上面。<br>手机上经常见到的一个功能就是访客模式，它是多用户模式的一种应用。访客模式下用户的所有数据（通讯录，短信，应用等）会被隐藏，访客只能查看和使用手机的基本功能，另外你还可以设置访客是否有接听电话、发送短信等权限。<br>与其它系统服务的实现类似，用户管理也采用了经由<code>Binder</code>调用的远程服务机制。<code>UserManagerService</code>（以下简称 UMS ）继承自<code>IUserManager.Stub</code>为接口的底层实现，作为Binder的服务端。<code>UserManager</code>为暴露给用户的接口，它的成员变量<code>mService</code>是<code>IUserManager.Stub.Proxy</code>的实例，作为Binder的客户端，<code>UserManager</code>的大部分工作都是通过<code>mService</code>与服务端进行通信调用UMS的对应方法来完成的。<br>本文的代码是基于Android6.0来进行介绍。<br><code>UserManager</code>相关代码位置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">frameworks/base/core/java/android/os/UserManager.java</div><div class="line">frameworks/base/services/core/java/com/android/server/pm/UserManagerService.java</div><div class="line">frameworks/base/core/java/android/content/pm/UserInfo.java</div><div class="line">frameworks/base/core/java/android/os/UserHandle.java</div><div class="line">frameworks/base/core/java/com/android/server/pm/PackageManagerService.java</div><div class="line">frameworks/base/core/java/com/android/server/wm/WindowManagerService.java</div><div class="line">frameworks/base/core/java/com/android/server/am/ActivityManagerService.java</div><div class="line">frameworks/base/core/java/android/os/Process.java</div></pre></td></tr></table></figure>
<ul>
<li>PackageManagerService：在多用户环境中，所有安装的应用还是位于 /data/app/ 目录中，应用的数据还是保存在 /data/data 下面，这些数据只对 Id 为 0 的用户即管理员用户有效，但是这些应用的数据在 /data/user/&lt;用户id&gt;/ 目录下面都会有单独的一份。</li>
</ul>
<h2 id="UserManager"><a href="#UserManager" class="headerlink" title="UserManager"></a>UserManager</h2><p><code>UserManager</code>可以称为 UMS 的代理对象，它通过<code>IUserManager mService</code>来与 UMS 进行进程间的通信。<br><code>UserManager</code>是暴露出来的应用程序接口。对于普通应用程序，提供用户数查询，用户状态判断和用户序列号查询等基本功能。普通应用没有用户操作权限。<br>对于系统应用，<code>UserManager</code>提供了创建/删除/擦除用户、用户信息获取、用户句柄获取等用户操作的接口。<br>这些操作均由远程调用 UMS 服务的对应方法实现。</p>
<h3 id="几个常用方法介绍"><a href="#几个常用方法介绍" class="headerlink" title="几个常用方法介绍"></a>几个常用方法介绍</h3><h4 id="判断是否支持多用户模式："><a href="#判断是否支持多用户模式：" class="headerlink" title="判断是否支持多用户模式："></a>判断是否支持多用户模式：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">supportsMultipleUsers</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> getMaxSupportedUsers() &gt; <span class="number">1</span></div><div class="line">            &amp;&amp; SystemProperties.getBoolean(<span class="string">"fw.show_multiuserui"</span>,</div><div class="line">            Resources.getSystem().getBoolean(R.bool.config_enableMultiUserUI));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMaxSupportedUsers</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// Don't allow multiple users on certain builds</span></div><div class="line">    <span class="comment">// 不允许用户在特定的版本上使用，因为多用户手机专利早已被Symbian注册，设计专利原因</span></div><div class="line">    <span class="keyword">if</span> (android.os.Build.ID.startsWith(<span class="string">"JVP"</span>)) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="comment">// Svelte devices don't get multi-user.</span></div><div class="line">    <span class="comment">// 是否是低内存设备</span></div><div class="line">    <span class="keyword">if</span> (ActivityManager.isLowRamDeviceStatic()) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="comment">// 读取设备的配置文件</span></div><div class="line">    <span class="keyword">return</span> SystemProperties.getInt(<span class="string">"fw.max_users"</span>,</div><div class="line">            Resources.getSystem().getInteger(R.integer.config_multiuserMaximumUsers));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先会读取系统配置<code>fw.show_multiuserui</code>和<code>fw.max_users</code>，如果系统没有这个配置项则从配置文件中读取默认值，配置文件在<code>frameworks/base/core/res/res/values/config.xml</code>中：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--  Maximum number of supported users --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">integer</span> <span class="attr">name</span>=<span class="string">"config_multiuserMaximumUsers"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- Whether UI for multi user should be shown --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bool</span> <span class="attr">name</span>=<span class="string">"config_enableMultiUserUI"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">bool</span>&gt;</span></div></pre></td></tr></table></figure>
<p>也可以看到，手机上默认是不支持多用户模式的。</p>
<h4 id="查询是否是访客模式"><a href="#查询是否是访客模式" class="headerlink" title="查询是否是访客模式"></a>查询是否是访客模式</h4><p>查询当前进程的用户是否是访客。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">UserManager userManager = (UserManager) context.getSystemService(Context.USER_SERVICE);</div><div class="line"><span class="keyword">return</span> userManager.isGuestUser();</div></pre></td></tr></table></figure>
<h4 id="查询用户权限"><a href="#查询用户权限" class="headerlink" title="查询用户权限"></a>查询用户权限</h4><p>查询当前进程的用户是否拥有某个权限，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">UserManager userManager = (UserManager) context.getSystemService(Context.USER_SERVICE);</div><div class="line"><span class="keyword">boolean</span> canSendSms = userManager.hasUserRestriction(UserManager.DISALLOW_SMS);</div></pre></td></tr></table></figure>
<p>还有个方法是查询指定用户的权限：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasUserRestriction</span><span class="params">(String restrictionKey, UserHandle userHandle)</span></span></div></pre></td></tr></table></figure>
<h3 id="如何创建Guest用户"><a href="#如何创建Guest用户" class="headerlink" title="如何创建Guest用户"></a>如何创建Guest用户</h3><p>比如要创建一个访客用户，就可以调用<code>UserManager.createGuest(Context context, String name)</code>方法来完成：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> UserInfo <span class="title">createGuest</span><span class="params">(Context context, String name)</span> </span>&#123;</div><div class="line">    UserInfo guest = createUser(name, UserInfo.FLAG_GUEST);</div><div class="line">    <span class="keyword">if</span> (guest != <span class="keyword">null</span>) &#123;</div><div class="line">        Settings.Secure.putStringForUser(context.getContentResolver(),</div><div class="line">                Settings.Secure.SKIP_FIRST_USE_HINTS, <span class="string">"1"</span>, guest.id);</div><div class="line">        <span class="comment">// 对Guset用户的权限进行约束</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Bundle guestRestrictions = mService.getDefaultGuestRestrictions();</div><div class="line">            <span class="comment">// 禁止发送信息</span></div><div class="line">            guestRestrictions.putBoolean(DISALLOW_SMS, <span class="keyword">true</span>);</div><div class="line">            <span class="comment">// 禁止安装来源不明的应用</span></div><div class="line">            guestRestrictions.putBoolean(DISALLOW_INSTALL_UNKNOWN_SOURCES, <span class="keyword">true</span>);</div><div class="line">            mService.setUserRestrictions(guestRestrictions, guest.id);</div><div class="line">        &#125; <span class="keyword">catch</span> (RemoteException re) &#123;</div><div class="line">            Log.w(TAG, <span class="string">"Could not update guest restrictions"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> guest;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从代码我们可以看到<code>createGuest</code>最终也会调用到<code>UserManagerService.createUser</code>方法，然后通过<code>setUserRestrictions</code>方法进一步对Guest用户的权限进行限制。因此，Guset用户和普通用户的区别也就在于权限的不同。<br>可以通过下面的方式创建一个访客用户：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initGuestUser</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> needCreate = <span class="keyword">true</span>;</div><div class="line">    List&lt;UserInfo&gt; users = mUserManager.getUsers(<span class="keyword">true</span>);</div><div class="line">    <span class="keyword">for</span> (UserInfo user : users) &#123;</div><div class="line">        <span class="keyword">if</span> (user.isGuest()) &#123;</div><div class="line">            mGuestUserHandle = <span class="keyword">new</span> UserHandle(user.id);</div><div class="line">            mDefaultGuestRestrictions = mUserManager.getUserRestrictions(mGuestUserHandle);</div><div class="line">            <span class="keyword">if</span> (!mDefaultGuestRestrictions.getBoolean(UserManager.DISALLOW_CONFIG_CREDENTIALS)) &#123;</div><div class="line">                mDefaultGuestRestrictions.putBoolean(UserManager.DISALLOW_CONFIG_CREDENTIALS, <span class="keyword">true</span>);</div><div class="line">                mUserManager.setUserRestrictions(mDefaultGuestRestrictions, mGuestUserHandle);</div><div class="line">            &#125;</div><div class="line">            needCreate = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (needCreate) &#123;</div><div class="line">        createGuest(<span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">createGuest</span><span class="params">(<span class="keyword">boolean</span> fromRecreate)</span> </span>&#123;</div><div class="line">    UserInfo newGuest = mUserManager.createGuest(getActivity(), <span class="string">"Guest"</span>);</div><div class="line">    <span class="keyword">if</span> (newGuest != <span class="keyword">null</span>) &#123;</div><div class="line">        Log.d(TAG, <span class="string">"new Guest:"</span> + newGuest.id);</div><div class="line">        mGuestUserHandle = <span class="keyword">new</span> UserHandle(newGuest.id);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        Log.d(TAG, <span class="string">"create guest failed!"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (fromRecreate) &#123;</div><div class="line">        mUserManager.setUserRestrictions(mDefaultGuestRestrictions, mGuestUserHandle);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Bundle guestRestrictions = ……</div><div class="line"></div><div class="line">    mUserManager.setUserRestrictions(guestRestrictions, mGuestUserHandle);</div><div class="line">    mDefaultGuestRestrictions = guestRestrictions;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="如何切换用户"><a href="#如何切换用户" class="headerlink" title="如何切换用户"></a>如何切换用户</h3><p>一般通过 <code>ActivityManagerNative.getDefault().switchUser(int userId)</code>进行调用，这个在后面会有详细介绍。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">enterGuestMode</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (lossMode())</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> id = -<span class="number">1</span>;</div><div class="line">    List&lt;UserInfo&gt; users = mUserManager.getUsers(<span class="keyword">true</span>);</div><div class="line">    <span class="keyword">for</span> (UserInfo user : users) &#123;</div><div class="line">        <span class="keyword">if</span> (user.isGuest()) &#123;</div><div class="line">            id = user.id;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        ActivityManagerNative.getDefault().switchUser(id);</div><div class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="用户权限"><a href="#用户权限" class="headerlink" title="用户权限"></a>用户权限</h3><p>不同的用户<code>UserManager</code>通过一些限制赋予了不同的权限，下面列举一些限制权限：</p>
<ul>
<li>DISALLOW_MODIFY_ACCOUNTS</li>
<li>DISALLOW_CONFIG_WIFI</li>
<li>DISALLOW_INSTALL_APPS</li>
<li>DISALLOW_UNINSTALL_APPS</li>
<li>DISALLOW_SHARE_LOCATION</li>
<li>DISALLOW_INSTALL_UNKNOWN_SOURCES</li>
<li>DISALLOW_CONFIG_BLUETOOTH</li>
<li>DISALLOW_USB_FILE_TRANSFER</li>
<li>DISALLOW_CONFIG_CREDENTIALS</li>
<li>DISALLOW_REMOVE_USER</li>
<li>DISALLOW_DEBUGGING_FEATURES</li>
<li>DISALLOW_CONFIG_VPN</li>
<li>DISALLOW_CONFIG_TETHERING</li>
<li>DISALLOW_NETWORK_RESET</li>
<li>DISALLOW_FACTORY_RESET</li>
<li>DISALLOW_ADD_USER</li>
<li>DISALLOW_CONFIG_CELL_BROADCASTS</li>
<li>DISALLOW_CONFIG_MOBILE_NETWORKS</li>
<li>DISALLOW_APPS_CONTROL</li>
<li>DISALLOW_MOUNT_PHYSICAL_MEDIA</li>
<li>DISALLOW_UNMUTE_MICROPHONE</li>
<li>DISALLOW_ADJUST_VOLUME</li>
<li>DISALLOW_OUTGOING_CALLS</li>
<li>DISALLOW_SMS</li>
<li>DISALLOW_FUN</li>
<li>DISALLOW_CREATE_WINDOWS</li>
<li>DISALLOW_CROSS_PROFILE_COPY_PASTE</li>
<li>DISALLOW_OUTGOING_BEAM</li>
<li>DISALLOW_WALLPAPER</li>
<li>DISALLOW_SAFE_BOOT</li>
<li>DISALLOW_RECORD_AUDIO</li>
</ul>
<h2 id="相关adb命令"><a href="#相关adb命令" class="headerlink" title="相关adb命令"></a>相关adb命令</h2><h3 id="获取用户信息"><a href="#获取用户信息" class="headerlink" title="获取用户信息"></a>获取用户信息</h3><p>用<code>adb shell dumpsys user</code>可以查看当前的用户情况：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Users:</div><div class="line">  UserInfo&#123;0:机主:13&#125; serialNo=0</div><div class="line">    Created: &lt;unknown&gt;</div><div class="line">    Last logged in: +1h26m30s184ms ago</div><div class="line">  UserInfo&#123;15:Guest:14&#125; serialNo=15</div><div class="line">    Created: +2d3h37m2s326ms ago</div><div class="line">    Last logged in: +1h27m49s171ms ago</div></pre></td></tr></table></figure>
<p>上面的打印是在<code>UserManagerService.dump()</code>中打印的。<br>UserInfo{0:机主:13} 所代表的含义可以参考代码<code>UserInfo.toString()</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"UserInfo&#123;"</span> + id + <span class="string">":"</span> + name + <span class="string">":"</span> + Integer.toHexString(flags) + <span class="string">"&#125;"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>0:id</li>
<li>机主:name</li>
<li>13:flags</li>
</ul>
<h2 id="UserManagerService"><a href="#UserManagerService" class="headerlink" title="UserManagerService"></a>UserManagerService</h2><p>UMS 是用来管理用户的系统服务，是创建、删除以及查询用户的执行者。<br>下面先看一下 UMS 的初始化过程。</p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>UMS 的创建是在<code>PackageManagerService</code>的构造函数中进行的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sUserManager = <span class="keyword">new</span> UserManagerService(context, <span class="keyword">this</span>,</div><div class="line">        mInstallLock, mPackages);</div></pre></td></tr></table></figure>
<p>接下来再看一下 UMS 的构造函数：<br>UMS 构造函数有两个参数：分别是<code>/data</code>目录和<code>/data/user/</code>目录。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">UserManagerService</span><span class="params">(Context context, PackageManagerService pm,</span></span></div><div class="line">        Object installLock, Object packagesLock,</div><div class="line">        File dataDir, File baseUserPath) &#123;</div><div class="line">    mContext = context;</div><div class="line">    mPm = pm;</div><div class="line">    mInstallLock = installLock;</div><div class="line">    mPackagesLock = packagesLock;</div><div class="line">    mHandler = <span class="keyword">new</span> MainHandler();</div><div class="line">    <span class="keyword">synchronized</span> (mInstallLock) &#123;</div><div class="line">        <span class="keyword">synchronized</span> (mPackagesLock) &#123;</div><div class="line">            <span class="comment">// mUsersDir是/data/system/users目录</span></div><div class="line">            mUsersDir = <span class="keyword">new</span> File(dataDir, USER_INFO_DIR);</div><div class="line">            mUsersDir.mkdirs();</div><div class="line">            <span class="comment">// 创建第一个用户的目录/data/system/users/0</span></div><div class="line">            File userZeroDir = <span class="keyword">new</span> File(mUsersDir, <span class="string">"0"</span>);</div><div class="line">            userZeroDir.mkdirs();</div><div class="line">            <span class="comment">// 设置目录的权限</span></div><div class="line">            FileUtils.setPermissions(mUsersDir.toString(),</div><div class="line">                    FileUtils.S_IRWXU|FileUtils.S_IRWXG</div><div class="line">                    |FileUtils.S_IROTH|FileUtils.S_IXOTH,</div><div class="line">                    -<span class="number">1</span>, -<span class="number">1</span>);</div><div class="line">            <span class="comment">// 创建代表/data/system/users/userlist.xml文件的对象</span></div><div class="line">            mUserListFile = <span class="keyword">new</span> File(mUsersDir, USER_LIST_FILENAME);</div><div class="line">            <span class="comment">// 添加一些对访客用户的默认限制，DISALLOW_OUTGOING_CALLS和DISALLOW_SMS，不允许打电话和发信息</span></div><div class="line">            initDefaultGuestRestrictions();</div><div class="line">            <span class="comment">// 读取userlist.xml文件，将用户的信息保存在mUsers列表中</span></div><div class="line">            <span class="comment">// 如果该文件不存在则创建该文件</span></div><div class="line">            readUserListLocked();</div><div class="line">            sInstance = <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后再看一下<code>systemReady()</code>函数，这里面也有一些初始化的工作，它的调用是在<code>PackageManagerService.systemReady()</code>中进行的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">systemReady</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">synchronized</span> (mInstallLock) &#123;</div><div class="line">        <span class="keyword">synchronized</span> (mPackagesLock) &#123;</div><div class="line">            <span class="comment">// 寻找那些在userlist.xml文件中partially或者partial为true的用户</span></div><div class="line">            ArrayList&lt;UserInfo&gt; partials = <span class="keyword">new</span> ArrayList&lt;UserInfo&gt;();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mUsers.size(); i++) &#123;</div><div class="line">                UserInfo ui = mUsers.valueAt(i);</div><div class="line">                <span class="keyword">if</span> ((ui.partial || ui.guestToRemove) &amp;&amp; i != <span class="number">0</span>) &#123;</div><div class="line">                    partials.add(ui);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 将这些未创建完成的用户从系统中移除掉</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; partials.size(); i++) &#123;</div><div class="line">                UserInfo ui = partials.get(i);</div><div class="line">                removeUserStateLocked(ui.id);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 更新一下OWNER用户的登陆时间</span></div><div class="line">    onUserForeground(UserHandle.USER_OWNER);</div><div class="line">    <span class="comment">// 调用AppOpsManager（权限管理器）设置每个用户的权限</span></div><div class="line">    mAppOpsService = IAppOpsService.Stub.asInterface(</div><div class="line">            ServiceManager.getService(Context.APP_OPS_SERVICE));</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mUserIds.length; ++i) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            mAppOpsService.setUserRestrictions(mUserRestrictions.get(mUserIds[i]), mUserIds[i]);</div><div class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">            Log.w(LOG_TAG, <span class="string">"Unable to notify AppOpsService of UserRestrictions"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>初始化过程中，会创建<code>/data/system/users/</code>目录，以及在<code>/data/system/users/</code>下面创建<code>0/</code>目录，然后调用<code>readUserListLocked()</code>分析<code>/data/system/users/userlist.xml</code>文件，这个文件保存了系统中所有用户的Id信息。<br><code>/data/system/users</code>目录下面的文件有：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">0</div><div class="line">0.xml</div><div class="line">10</div><div class="line">10.xml</div><div class="line">userlist.xml</div></pre></td></tr></table></figure>
<p>0/目录下面的文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">accounts.db</div><div class="line">accounts.db-journal</div><div class="line">appwidgets.xml</div><div class="line">package-restrictions.xml</div><div class="line">registered_services</div><div class="line">runtime-permissions.xml</div><div class="line">settings_global.xml</div><div class="line">settings_secure.xml</div><div class="line">settings_system.xml</div><div class="line">wallpaper_info.xml</div></pre></td></tr></table></figure>
<p>里面存放了针对该用户的各种设置数据。</p>
<p>userlist.xml示例：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version='1.0' encoding='utf-8' standalone='yes' ?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">users</span> <span class="attr">nextSerialNumber</span>=<span class="string">"11"</span> <span class="attr">version</span>=<span class="string">"5"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">guestRestrictions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">restrictions</span> <span class="attr">no_outgoing_calls</span>=<span class="string">"true"</span> <span class="attr">no_sms</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">guestRestrictions</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span>=<span class="string">"0"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span>=<span class="string">"10"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">users</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>nextSerialNumber</code>指的是创建下一个用户时它的<code>serialNumber</code>，<code>version</code>指的是当前多用户的版本，使 userlist.xml 文件像数据库一样是可以升级的。<br><code>guestRestrictions</code>标签指的是为访客用户设置的权限，可以通过<code>UserManager.setDefaultGuestRestrictions()</code>来设置。<br>这里面有两个用户的信息，分别为 id 为 0 和 10 的用户。<br>得到 Id 信息后还要读取保存了用户注册信息的 xml 文件，这个文件也位于<code>/data/system/users</code>目录下，文件名用用户 Id 数字表示。<br>0.xml 示例：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version='1.0' encoding='utf-8' standalone='yes' ?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span>=<span class="string">"0"</span> <span class="attr">serialNumber</span>=<span class="string">"0"</span> <span class="attr">flags</span>=<span class="string">"19"</span> <span class="attr">created</span>=<span class="string">"0"</span> <span class="attr">lastLoggedIn</span>=<span class="string">"1493886997408"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>机主<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">restrictions</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></div></pre></td></tr></table></figure>
<p>10.xml：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version='1.0' encoding='utf-8' standalone='yes' ?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span>=<span class="string">"10"</span> <span class="attr">serialNumber</span>=<span class="string">"10"</span> <span class="attr">flags</span>=<span class="string">"4"</span> <span class="attr">created</span>=<span class="string">"1493886837832"</span> <span class="attr">lastLoggedIn</span>=<span class="string">"0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Guest<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">restrictions</span> <span class="attr">no_install_apps</span>=<span class="string">"false"</span> <span class="attr">no_install_unknown_sources</span>=<span class="string">"true"</span> <span class="attr">no_config_credentials</span>=<span class="string">"true"</span> <span class="attr">no_outgoing_calls</span>=<span class="string">"false"</span> <span class="attr">no_sms</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></div></pre></td></tr></table></figure>
<p>标签的属性值对应了<code>UserInfo</code>里面的成员变量，读取用户的xml文件后，会根据文件的内容来创建和初始化一个<code>UserInfo</code>来保存，并把该对象加入到<code>mUsers</code>列表中去。<br><code>restrictions</code>表示针对该用户做的权限限制，可以通过<code>UserManager.setUserRestriction()</code>或<code>UserManager.setUserRestrictions()</code>进行设置。<br>如果有未创建完成的用户，即<code>partial=true</code>的用户，则把它们从用户列表中移除出去。<br>因此，UMS 的初始化工作主要就是分析<code>userlist.xml</code>文件、创建用户列表<code>mUsers</code>以及设置用户权限。</p>
<h2 id="UserInfo"><a href="#UserInfo" class="headerlink" title="UserInfo"></a>UserInfo</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 用户类型</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_MASK_USER_TYPE = <span class="number">0x000000FF</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 机主用户的标志，通常是第一个ID为0的用户</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_PRIMARY = <span class="number">0x00000001</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 管理员标志，有此标志的才能创建和删除其他用户，通常是机主用户</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_ADMIN   = <span class="number">0x00000002</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 访客用户标志</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_GUEST   = <span class="number">0x00000004</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 标记权限受限的用户</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_RESTRICTED = <span class="number">0x00000008</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 标记改用户是否进行了初始化</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_INITIALIZED = <span class="number">0x00000010</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Indicates that this user is a profile of another user, for example holding a users</div><div class="line">     * corporate data.</div><div class="line">     */</div><div class="line">    <span class="comment">// 标志该UserInfo是否是另外一个用户的一份profile，Android中允许一个用户拥有另一份profile</span></div><div class="line">    <span class="comment">// 比如现在好多定制系统开发的应用分身，就是基于这个开发的，比如可以在同一个手机上启动两个微信帐号</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_MANAGED_PROFILE = <span class="number">0x00000020</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 标记该用户已经被禁止</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_DISABLED = <span class="number">0x00000040</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 无效值定义</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NO_PROFILE_GROUP_ID = -<span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;               <span class="comment">//用户id</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> serialNumber;     <span class="comment">//用户序列号，唯一的，不会重复</span></div><div class="line">    <span class="keyword">public</span> String name;          <span class="comment">//用户名称</span></div><div class="line">    <span class="keyword">public</span> String iconPath;      <span class="comment">//用户头像的路径</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> flags;            <span class="comment">//用户的标记信息</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">long</span> creationTime;    <span class="comment">//用户创建时间</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">long</span> lastLoggedInTime;<span class="comment">//用户上次登陆时间</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> profileGroupId;   <span class="comment">//用户的profile group id</span></div><div class="line"></div><div class="line">    <span class="comment">// 用来标记没有创建完成的用户</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> partial;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> guestToRemove;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>需要注意的是，用户的Id用来表示用户，如果用户被删除了它的Id会分配给下一个新建的用户，用来保持Id的连续性；<br>但是serialNumber是一个不会重复的数字，是不会被重复利用的，用来惟一标识一个用户。</p>
<h2 id="UserHandle"><a href="#UserHandle" class="headerlink" title="UserHandle"></a>UserHandle</h2><p><code>UserHandle</code>就代表了设备中的一个用户，提供了一系列针对用户操作的API。<br>现在先来分析几个用户相关的概念：</p>
<ul>
<li>userId：用户id</li>
<li>appId：是指跟用户无关的应用程序id，取值范围 <code>0 &lt;= appId &lt; 100000</code></li>
<li>uid：是指跟用户紧密相关的应用程序id</li>
</ul>
<p>他们之间有一下的换算关系：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">uid = userId * <span class="number">100000</span>  + appId</div></pre></td></tr></table></figure>
<p>在<code>UserHandle</code>中有常量<code>PER_USER_RANGE</code>，它的值为<code>100000</code>，也就是说每个 user 最大可以有 100000 个 appid 。</p>
<p>下面介绍几个<code>UserHandle</code>的API：</p>
<ul>
<li>isApp(int uid)：是否是应用进程</li>
<li>isIsolated(int uid)：是否是完全隔绝的沙箱进程，完全隔绝的沙箱进程每次启动都是独立的，不能复用已有的进程信息。这个进程与系统其他进程分开且没有自己的权限。</li>
<li>isSameUser(int uid1, int uid2)：比较两个uid的userId是否相同，即它们是否属于同一个用户</li>
<li>isSameApp(int uid1, int uid2)：比较两个uid的appId是否相同</li>
<li>getUserId(int uid)：根据uid获取userId</li>
<li>getAppId(int uid)：根据uid获取appId</li>
</ul>
<p>userId的几种类型：</p>
<table>
<thead>
<tr>
<th>userId</th>
<th style="text-align:center">值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>USER_OWNER</td>
<td style="text-align:center">0</td>
<td>机主用户</td>
</tr>
<tr>
<td>USER_ALL</td>
<td style="text-align:center">-1</td>
<td>所有用户</td>
</tr>
<tr>
<td>USER_CURRENT</td>
<td style="text-align:center">-2</td>
<td>当前用户</td>
</tr>
<tr>
<td>USER_CURRENT_OR_SELF</td>
<td style="text-align:center">-3</td>
<td>当前用户或者调用者所在用户</td>
</tr>
<tr>
<td>USER_NULL</td>
<td style="text-align:center">-1000</td>
<td>未定义用户</td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">public static final UserHandle OWNER = new UserHandle(USER_OWNER);</div><div class="line">public static final UserHandle CURRENT = new UserHandle(USER_CURRENT);</div></pre></td></tr></table></figure>
<p><code>CURRENT</code>就代表了当前用户的<code>UserHandle</code>。</p>
<h3 id="UID"><a href="#UID" class="headerlink" title="UID"></a>UID</h3><p>终端输入命令<code>adb shell ps</code>，可以得到设备的进程信息，下面仅列举部分具有代表性的进程信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">USER      PID   PPID  VSIZE  RSS   WCHAN              PC  NAME</div><div class="line">root      1     0     12844  1768  SyS_epoll_ 0000000000 S /init</div><div class="line">root      2     0     0      0       kthreadd 0000000000 S kthreadd</div><div class="line">root      3     2     0      0     smpboot_th 0000000000 S ksoftirqd/0</div><div class="line">root      5     2     0      0     worker_thr 0000000000 S kworker/0:0H</div><div class="line">root      7     2     0      0     rcu_gp_kth 0000000000 S rcu_preempt</div><div class="line">root      8     2     0      0     rcu_gp_kth 0000000000 S rcu_sched</div><div class="line">root      9     2     0      0     rcu_gp_kth 0000000000 S rcu_bh</div><div class="line">root      10    2     0      0     smpboot_th 0000000000 S migration/0</div><div class="line"></div><div class="line">root      202   1     14456  1324  SyS_epoll_ 0000000000 S /system/bin/lmkd</div><div class="line">system    203   1     14148  1492  binder_thr 0000000000 S /system/bin/servicemanager</div><div class="line">system    204   1     159072 10000 SyS_epoll_ 0000000000 S /system/bin/surfaceflinger</div><div class="line">system    207   1     13696  1248  poll_sched 0000000000 S /system/bin/6620_launcher</div><div class="line">root      209   1     28380  2532  hrtimer_na 0000000000 S /system/bin/netd</div><div class="line">root      210   1     12460  1764  poll_sched 0000000000 S /system/bin/debuggerd</div><div class="line">root      211   1     15752  1724  poll_sched 0000000000 S /system/bin/debuggerd64</div><div class="line">drm       212   1     53596  12036 binder_thr 0000000000 S /system/bin/drmserver</div><div class="line">media     213   1     299956 25568 binder_thr 0000000000 S /system/bin/mediaserver</div><div class="line">root      214   1     14004  1304  unix_strea 0000000000 S /system/bin/installd</div><div class="line">keystore  215   1     18784  2752  binder_thr 0000000000 S /system/bin/keystore</div><div class="line">shell     216   1     13164  1336  hrtimer_na 0000000000 S /system/bin/mobile_log_d</div><div class="line">shell     217   1     16148  1636  futex_wait 0000000000 S /system/bin/netdiag</div><div class="line">root      222   2     0      0     rescuer_th 0000000000 S pvr_workqueue</div><div class="line">root      223   2     0      0     rescuer_th 0000000000 S pvr_workqueue</div><div class="line">root      224   2     0      0     rescuer_th 0000000000 S pvr_workqueue</div><div class="line">gps       225   1     13564  1476  SyS_epoll_ 0000000000 S /system/xbin/mnld</div><div class="line"></div><div class="line">system    559   229   2306532 147320 SyS_epoll_ 0000000000 S system_server</div><div class="line">media_rw  686   185   16980  2064  inotify_re 0000000000 S /system/bin/sdcard</div><div class="line">u0_a24    716   229   2245132 180428 SyS_epoll_ 0000000000 S com.android.systemui</div><div class="line"></div><div class="line">wifi      1136  1     19712  4228  poll_sched 0000000000 S /system/bin/wpa_supplicant</div><div class="line">root      1223  2     0      0     worker_thr 0000000000 S kworker/2:2</div><div class="line"></div><div class="line">shell     9548  9482  13796  1260  __skb_recv 7fb24a54f4 S logcat</div><div class="line">u0_a6     9635  229   1605504 71224 SyS_epoll_ 0000000000 S android.process.acore</div><div class="line">root      10836 2     0      0     worker_thr 0000000000 S kworker/0:0</div><div class="line">root      11438 2     0      0     worker_thr 0000000000 S kworker/0:2</div><div class="line">root      11530 2     0      0     worker_thr 0000000000 S kworker/0:1</div></pre></td></tr></table></figure>
<p>可以看到 UID 有root，system，shell等都属于系统 uid，它们定义在在<code>Process.java</code>文件，如下：</p>
<table>
<thead>
<tr>
<th>UID</th>
<th style="text-align:center">值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>ROOT_UID</td>
<td style="text-align:center">0</td>
<td>root UID</td>
</tr>
<tr>
<td>SYSTEM_UID</td>
<td style="text-align:center">1000</td>
<td></td>
</tr>
<tr>
<td>PHONE_UID</td>
<td style="text-align:center">1001</td>
<td></td>
</tr>
<tr>
<td>SHELL_UID</td>
<td style="text-align:center">2000</td>
<td></td>
</tr>
<tr>
<td>LOG_UID</td>
<td style="text-align:center">1007</td>
<td></td>
</tr>
<tr>
<td>WIFI_UID</td>
<td style="text-align:center">1010</td>
<td></td>
</tr>
<tr>
<td>MEDIA_UID</td>
<td style="text-align:center">1013</td>
<td></td>
</tr>
<tr>
<td>DRM_UID</td>
<td style="text-align:center">1019</td>
<td></td>
</tr>
<tr>
<td>VPN_UID</td>
<td style="text-align:center">1016</td>
<td></td>
</tr>
<tr>
<td>NFC_UID</td>
<td style="text-align:center">1017</td>
<td></td>
</tr>
<tr>
<td>BLUETOOTH_UID</td>
<td style="text-align:center">1002</td>
<td></td>
</tr>
<tr>
<td>MEDIA_RW_GID</td>
<td style="text-align:center">1023</td>
<td></td>
</tr>
<tr>
<td>PACKAGE_INFO_GID</td>
<td style="text-align:center">1032</td>
<td></td>
</tr>
<tr>
<td>SHARED_RELRO_UID</td>
<td style="text-align:center">1037</td>
<td></td>
</tr>
<tr>
<td>SHARED_USER_GID</td>
<td style="text-align:center">9997</td>
</tr>
</tbody>
</table>
<p>在<code>Process.java</code>中还有下面常量：</p>
<ul>
<li>FIRST_APPLICATION_UID = 10000</li>
<li>LAST_APPLICATION_UID = 19999</li>
<li>FIRST_SHARED_APPLICATION_GID = 50000</li>
<li>LAST_SHARED_APPLICATION_GID = 59999</li>
<li>FIRST_ISOLATED_UID = 99000  //沙箱进程起始值</li>
<li>LAST_ISOLATED_UID = 99999</li>
</ul>
<p>还有像<code>u0_a24</code>这种uid代表的uid为10024，代表user 0 的一个应用程序uid，这个转换方法在<code>UserHandle.formatUid()</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">formatUid</span><span class="params">(StringBuilder sb, <span class="keyword">int</span> uid)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (uid &lt; Process.FIRST_APPLICATION_UID) &#123;</div><div class="line">        sb.append(uid);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        sb.append(<span class="string">'u'</span>);</div><div class="line">        sb.append(getUserId(uid));</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> appId = getAppId(uid);</div><div class="line">        <span class="keyword">if</span> (appId &gt;= Process.FIRST_ISOLATED_UID &amp;&amp; appId &lt;= Process.LAST_ISOLATED_UID) &#123;</div><div class="line">            sb.append(<span class="string">'i'</span>);</div><div class="line">            sb.append(appId - Process.FIRST_ISOLATED_UID);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (appId &gt;= Process.FIRST_APPLICATION_UID) &#123;</div><div class="line">            sb.append(<span class="string">'a'</span>);</div><div class="line">            sb.append(appId - Process.FIRST_APPLICATION_UID);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            sb.append(<span class="string">'s'</span>);</div><div class="line">            sb.append(appId);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果我们切换到访客模式，还会发现一个UID为<code>u10_a24</code>的<code>com.android.systemui</code>进程，因为该应用的appid为10024，不同的是它们是在不同的用户下面创建的进程。<br>但是在访客模式下面，root，system，shell等这些系统进程是和主用户是共用的，不会再创建新的进程。</p>
<h2 id="UserState"><a href="#UserState" class="headerlink" title="UserState"></a>UserState</h2><p>先了解一下用户的几个运行状态：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">UserState</span> </span>&#123;</div><div class="line">    <span class="comment">// 用户正在启动</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> STATE_BOOTING = <span class="number">0</span>;</div><div class="line">    <span class="comment">// 用户正在运行</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> STATE_RUNNING = <span class="number">1</span>;</div><div class="line">    <span class="comment">// 用户正在关闭</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> STATE_STOPPING = <span class="number">2</span>;</div><div class="line">    <span class="comment">// 用户已经被关闭</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> STATE_SHUTDOWN = <span class="number">3</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>UMS 有下列变量来存储用户的相关信息：</p>
<ul>
<li><code>mCurrentUserId</code>表示当前正在允许的用户的Id；</li>
<li><code>mTargetUserId</code>记录当前正在切换到该用户；</li>
<li><code>mStartedUsers</code>保存了当前已经运行过的用户的列表，这个列表中的用户会有上面的四种状态</li>
<li><code>mUserLru</code>用最近最少使用算法保存的用户列表，最近的前台用户保存在列表的最后位置</li>
<li><code>mStartedUserArray</code>表示mStartedUsers中当前正在运行的用户列表的index，即mStartedUsers中除去正在关闭和已经被关闭状态外的用户</li>
</ul>
<h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><h3 id="UserManagerService-1"><a href="#UserManagerService-1" class="headerlink" title="UserManagerService"></a>UserManagerService</h3><p>UMS 中创建用户是在<code>createUser()</code>方法中实现的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> UserInfo <span class="title">createUser</span><span class="params">(String name, <span class="keyword">int</span> flags)</span> </span>&#123;</div><div class="line">    checkManageUsersPermission(<span class="string">"Only the system can create users"</span>);</div><div class="line">    <span class="keyword">return</span> createUserInternal(name, flags, UserHandle.USER_NULL);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先检查调用者的权限，只有 UID 是 system 或者具有<code>android.Manifest.permission.MANAGE_USERS</code>的应用才有权限，否则抛出异常。然后就调用<code>createUserInternal</code>来执行真正的创建工作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> UserInfo <span class="title">createUserInternal</span><span class="params">(String name, <span class="keyword">int</span> flags, <span class="keyword">int</span> parentId)</span> </span>&#123;</div><div class="line">    <span class="comment">// 检查一下该用户是否被限制创建用户</span></div><div class="line">    <span class="keyword">if</span> (getUserRestrictions(UserHandle.getCallingUserId()).getBoolean(</div><div class="line">            UserManager.DISALLOW_ADD_USER, <span class="keyword">false</span>)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 检查是否是低内存设备</span></div><div class="line">    <span class="keyword">if</span> (ActivityManager.isLowRamDeviceStatic()) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> isGuest = (flags &amp; UserInfo.FLAG_GUEST) != <span class="number">0</span>;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> isManagedProfile = (flags &amp; UserInfo.FLAG_MANAGED_PROFILE) != <span class="number">0</span>;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">long</span> ident = Binder.clearCallingIdentity();</div><div class="line">    UserInfo userInfo = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> userId;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">synchronized</span> (mInstallLock) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (mPackagesLock) &#123;</div><div class="line">                UserInfo parent = <span class="keyword">null</span>;</div><div class="line">                <span class="keyword">if</span> (parentId != UserHandle.USER_NULL) &#123;</div><div class="line">                    parent = getUserInfoLocked(parentId);</div><div class="line">                    <span class="keyword">if</span> (parent == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (isManagedProfile &amp;&amp; !canAddMoreManagedProfiles()) &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// 如果添加的不是Guest用户，也不是用户的profile，而且已经到达用户的上限，则不允许再添加</span></div><div class="line">                <span class="keyword">if</span> (!isGuest &amp;&amp; !isManagedProfile &amp;&amp; isUserLimitReachedLocked()) &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// 如果添加的是Guest用户，但是系统中已经存在一个，则不允许再添加</span></div><div class="line">                <span class="keyword">if</span> (isGuest &amp;&amp; findCurrentGuestUserLocked() != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// 得到新用户的Id</span></div><div class="line">                userId = getNextAvailableIdLocked();</div><div class="line">                <span class="comment">// 为该新用户创建UserInfo</span></div><div class="line">                userInfo = <span class="keyword">new</span> UserInfo(userId, name, <span class="keyword">null</span>, flags);</div><div class="line">                <span class="comment">// 设置序列号</span></div><div class="line">                userInfo.serialNumber = mNextSerialNumber++;</div><div class="line">                <span class="comment">// 设置创建时间</span></div><div class="line">                <span class="keyword">long</span> now = System.currentTimeMillis();</div><div class="line">                userInfo.creationTime = (now &gt; EPOCH_PLUS_30_YEARS) ? now : <span class="number">0</span>;</div><div class="line">                <span class="comment">// 设置partial，表示正在创建</span></div><div class="line">                userInfo.partial = <span class="keyword">true</span>;</div><div class="line">                Environment.getUserSystemDirectory(userInfo.id).mkdirs();</div><div class="line">                <span class="comment">// 放入mUsers列表</span></div><div class="line">                mUsers.put(userId, userInfo);</div><div class="line">                <span class="comment">// 把用户信息写入userlist.xml</span></div><div class="line">                writeUserListLocked();</div><div class="line">                <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (parent.profileGroupId == UserInfo.NO_PROFILE_GROUP_ID) &#123;</div><div class="line">                        parent.profileGroupId = parent.id;</div><div class="line">                        scheduleWriteUserLocked(parent);</div><div class="line">                    &#125;</div><div class="line">                    userInfo.profileGroupId = parent.profileGroupId;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// 创建用户目录</span></div><div class="line">                <span class="keyword">final</span> StorageManager storage = mContext.getSystemService(StorageManager.class);</div><div class="line">                <span class="keyword">for</span> (VolumeInfo vol : storage.getWritablePrivateVolumes()) &#123;</div><div class="line">                    <span class="keyword">final</span> String volumeUuid = vol.getFsUuid();</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        <span class="keyword">final</span> File userDir = Environment.getDataUserDirectory(volumeUuid,</div><div class="line">                                userId);</div><div class="line">                        <span class="comment">// 创建userDir，如果volumeUuid为空，创建/data/user/&lt;userId&gt;/，不为空，创建/mnt/expand/&lt;volumeUuid&gt;/user/&lt;userId&gt;/</span></div><div class="line">                        prepareUserDirectory(userDir);</div><div class="line">                        enforceSerialNumber(userDir, userInfo.serialNumber);</div><div class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                        Log.wtf(LOG_TAG, <span class="string">"Failed to create user directory on "</span> + volumeUuid, e);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// 调用PackageManagerService的createNewUserLILPw方法，此方法很重要，后面会单独分析</span></div><div class="line">                <span class="comment">// 这个函数会在新建用户的userDir目录下面为所有应用创建数据</span></div><div class="line">                <span class="comment">// 此方法将新用户可以使用的App在/data/user/&lt;用户Id&gt;文件夹下创建数据目录，目录名称为包名</span></div><div class="line">                mPm.createNewUserLILPw(userId);</div><div class="line">                <span class="comment">// 创建成功，将partial改为false</span></div><div class="line">                userInfo.partial = <span class="keyword">false</span>;</div><div class="line">                <span class="comment">// 会调用writeUserLocked()创建xxx.xml，类似0.xml，xxx是用户Id</span></div><div class="line">                scheduleWriteUserLocked(userInfo);</div><div class="line">                <span class="comment">// 更新mUserIds数组</span></div><div class="line">                updateUserIdsLocked();</div><div class="line">                Bundle restrictions = <span class="keyword">new</span> Bundle();</div><div class="line">                <span class="comment">// 添加为该用户设置的限制条件</span></div><div class="line">                mUserRestrictions.append(userId, restrictions);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 发送用户创建完成的广播，广播附带用户的id</span></div><div class="line">        <span class="keyword">if</span> (userInfo != <span class="keyword">null</span>) &#123;</div><div class="line">            Intent addedIntent = <span class="keyword">new</span> Intent(Intent.ACTION_USER_ADDED);</div><div class="line">            addedIntent.putExtra(Intent.EXTRA_USER_HANDLE, userInfo.id);</div><div class="line">            mContext.sendBroadcastAsUser(addedIntent, UserHandle.ALL,</div><div class="line">                    android.Manifest.permission.MANAGE_USERS);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        Binder.restoreCallingIdentity(ident);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> userInfo;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由上面的代码可知，<code>createUser</code>主要做了一下工作：</p>
<ol>
<li>检查调用进程所属用户是否被限制添加用户、当前设备是否是低内存设备、当前用户数是否已达上限，如是则停止创建新用户</li>
<li>为新用户设置用户信息，比如Id，序列号创建时间等</li>
<li>将用户信息写入userlist.xml，注意，此时的userInfo.partial = true，表示正在创建</li>
<li>创建用户目录/data/user/<userid>/或者/mnt/expand/<volumeuuid>/user/<userid>/</userid></volumeuuid></userid></li>
<li>调用PackageManagerService的createNewUserLILPw方法，这个函数会在新建用户的目录下面为所有应用创建数据目录</li>
<li>创建用户完成，将userInfo.partial设置为false，创建用户的信息文件，比如0.xml</li>
<li>发送用户创建完成的广播</li>
</ol>
<h3 id="PackageManagerService"><a href="#PackageManagerService" class="headerlink" title="PackageManagerService"></a>PackageManagerService</h3><h4 id="创建用户数据createNewUserLILPw"><a href="#创建用户数据createNewUserLILPw" class="headerlink" title="创建用户数据createNewUserLILPw()"></a>创建用户数据createNewUserLILPw()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">createNewUserLILPw</span><span class="params">(<span class="keyword">int</span> userHandle)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mInstaller != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">//通过mInstaller调用守护进程installd执行mkuserconfig，创建用户配置文件。</span></div><div class="line">        mInstaller.createUserConfig(userHandle);</div><div class="line">        <span class="comment">// 调用mSettings.createNewUserLILP为新用户中的应用创建应用数据目录</span></div><div class="line">        mSettings.createNewUserLILPw(<span class="keyword">this</span>, mInstaller, userHandle);</div><div class="line">        <span class="comment">// 设置默认的Browser</span></div><div class="line">        applyFactoryDefaultBrowserLPw(userHandle);</div><div class="line">        primeDomainVerificationsLPw(userHandle);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面来看一下<code>Settings.createNewUserLILP()</code>方法的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">createNewUserLILPw</span><span class="params">(PackageManagerService service, Installer installer, <span class="keyword">int</span> userHandle)</span> </span>&#123;</div><div class="line">    <span class="comment">// 为每一个应用创建数据目录</span></div><div class="line">    <span class="keyword">for</span> (PackageSetting ps : mPackages.values()) &#123;</div><div class="line">        <span class="keyword">if</span> (ps.pkg == <span class="keyword">null</span> || ps.pkg.applicationInfo == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// Only system apps are initially installed.</span></div><div class="line">        <span class="comment">//为系统应用修改PackageUserState的installed标志</span></div><div class="line">        ps.setInstalled((ps.pkgFlags&amp;ApplicationInfo.FLAG_SYSTEM) != <span class="number">0</span>, userHandle);</div><div class="line">        <span class="comment">// 通过mInstaller调用守护进程installd执行mkuserdata，为用户创建用户目录。</span></div><div class="line">        installer.createUserData(ps.volumeUuid, ps.name,</div><div class="line">                UserHandle.getUid(userHandle, ps.appId), userHandle,</div><div class="line">                ps.pkg.applicationInfo.seinfo);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// TODO</span></div><div class="line">    applyDefaultPreferredAppsLPw(service, userHandle);</div><div class="line">    writePackageRestrictionsLPr(userHandle);</div><div class="line">    writePackageListLPr(userHandle);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对每一个用户，系统都会以 <code>PackageuserState</code> 类来保护其安装的每一个包状态。它以<code>SparseArray</code>的形式由 <code>PackageSetting</code> 类来保护，<code>PackageSetting</code> 存储了每一个安装包的数据。也就是说对于每个安装包，里面都有个每个用户对应的列表 <code>userState</code> 来存储该安装包对于不同用户的不同状态，比如针对该用户是否隐藏以及是否标识为已安装状态。具体详细介绍参考我的介绍 <code>PackageManagerService</code> 的博客。</p>
<h2 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h2><h3 id="ActivityManagerService"><a href="#ActivityManagerService" class="headerlink" title="ActivityManagerService"></a>ActivityManagerService</h3><h4 id="startUser"><a href="#startUser" class="headerlink" title="startUser()"></a>startUser()</h4><p>下面介绍一下切换用户的流程，比如我们从机主用户切换到访客用户是就是走的这个流程。<br>用户切换是通过调用<code>ActivityManager</code>的<code>public boolean switchUser(int userId)</code>方法进行。一般通过 <code>ActivityManagerNative.getDefault().switchUser(int userId)</code>进行调用。<br>最终会调用<code>ActivityManagerService.switchUser</code>方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">switchUser</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> userId)</span> </span>&#123;</div><div class="line">    enforceShellRestriction(UserManager.DISALLOW_DEBUGGING_FEATURES, userId);</div><div class="line">    String userName;</div><div class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">        UserInfo userInfo = getUserManagerLocked().getUserInfo(userId);</div><div class="line">        <span class="keyword">if</span> (userInfo == <span class="keyword">null</span>) &#123;</div><div class="line">            Slog.w(TAG, <span class="string">"No user info for user #"</span> + userId);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 该user只是一个user的profile，无法切换</span></div><div class="line">        <span class="keyword">if</span> (userInfo.isManagedProfile()) &#123;</div><div class="line">            Slog.w(TAG, <span class="string">"Cannot switch to User #"</span> + userId + <span class="string">": not a full user"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        userName = userInfo.name;</div><div class="line">        <span class="comment">// 把该用户Id记录到mTargetUserId变量</span></div><div class="line">        mTargetUserId = userId;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 发送切换用户的消息</span></div><div class="line">    mUiHandler.removeMessages(START_USER_SWITCH_MSG);</div><div class="line">    mUiHandler.sendMessage(mUiHandler.obtainMessage(START_USER_SWITCH_MSG, userId, <span class="number">0</span>, userName));</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Handler</code>收到<code>START_USER_SWITCH_MSG</code>消息后，会调用<code>showUserSwitchDialog()</code>来弹出一个确认的对话框。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showUserSwitchDialog</span><span class="params">(<span class="keyword">int</span> userId, String userName)</span> </span>&#123;</div><div class="line">    <span class="comment">// The dialog will show and then initiate the user switch by calling startUserInForeground</span></div><div class="line">    Dialog d = <span class="keyword">new</span> UserSwitchingDialog(<span class="keyword">this</span>, mContext, userId, userName,</div><div class="line">            <span class="keyword">true</span> <span class="comment">/* above system */</span>);</div><div class="line">    d.show();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>点击确定后最终会调用到<code>startUser()</code>来执行切换用户的动作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">startUser</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> userId, <span class="keyword">final</span> <span class="keyword">boolean</span> foreground)</span> </span>&#123;</div><div class="line">    <span class="comment">//切换用话需要INTERACT_ACROSS_USERS_FULL权限</span></div><div class="line">    <span class="keyword">if</span> (checkCallingPermission(INTERACT_ACROSS_USERS_FULL)</div><div class="line">            != PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(msg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> <span class="keyword">long</span> ident = Binder.clearCallingIdentity();</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">            <span class="comment">// 如果当前用户已经是需要切换的用户，退出当前流程</span></div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> oldUserId = mCurrentUserId;</div><div class="line">            <span class="keyword">if</span> (oldUserId == userId) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            mStackSupervisor.setLockTaskModeLocked(<span class="keyword">null</span>, ActivityManager.LOCK_TASK_MODE_NONE,</div><div class="line">                    <span class="string">"startUser"</span>, <span class="keyword">false</span>);</div><div class="line"></div><div class="line">            <span class="comment">// 如果没有需要启动的用户的信息，则直接退出</span></div><div class="line">            <span class="keyword">final</span> UserInfo userInfo = getUserManagerLocked().getUserInfo(userId);</div><div class="line">            <span class="keyword">if</span> (userInfo == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 如果是前台启动且是一份profile的话，则直接退出</span></div><div class="line">            <span class="keyword">if</span> (foreground &amp;&amp; userInfo.isManagedProfile()) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 如果是前台启动，则需要将屏幕冻结</span></div><div class="line">            <span class="keyword">if</span> (foreground) &#123;</div><div class="line">                mWindowManager.startFreezingScreen(R.anim.screen_user_exit,</div><div class="line">                        R.anim.screen_user_enter);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">boolean</span> needStart = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">            <span class="comment">// 如果当前已经启动过的用户列表中没有该用户，则需要先启动该用户</span></div><div class="line">            <span class="keyword">if</span> (mStartedUsers.get(userId) == <span class="keyword">null</span>) &#123;</div><div class="line">                mStartedUsers.put(userId, <span class="keyword">new</span> UserState(<span class="keyword">new</span> UserHandle(userId), <span class="keyword">false</span>));</div><div class="line">                updateStartedUserArrayLocked();</div><div class="line">                needStart = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 调整该用户在mUserLru列表中的位置，当前用户放到最后位置</span></div><div class="line">            <span class="keyword">final</span> Integer userIdInt = Integer.valueOf(userId);</div><div class="line">            mUserLru.remove(userIdInt);</div><div class="line">            mUserLru.add(userIdInt);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (foreground) &#123;</div><div class="line">                <span class="comment">// 如果是前台切换，直接切换到需要启动的用户</span></div><div class="line">                mCurrentUserId = userId;</div><div class="line">                <span class="comment">// 重置mTargetUserId，因为userId已经赋值给mCurrentUserId了</span></div><div class="line">                mTargetUserId = UserHandle.USER_NULL; <span class="comment">// reset, mCurrentUserId has caught up</span></div><div class="line">                <span class="comment">// 更新与该用户相关的profile列表</span></div><div class="line">                updateCurrentProfileIdsLocked();</div><div class="line">                <span class="comment">// 在WindowManagerService中设置要启动的用户为当前用户</span></div><div class="line">                mWindowManager.setCurrentUser(userId, mCurrentProfileIds);</div><div class="line">                <span class="comment">// Once the internal notion of the active user has switched, we lock the device</span></div><div class="line">                <span class="comment">// with the option to show the user switcher on the keyguard.</span></div><div class="line">                <span class="comment">// 执行锁屏操作</span></div><div class="line">                mWindowManager.lockNow(<span class="keyword">null</span>);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// 如果是后台启动</span></div><div class="line">                <span class="keyword">final</span> Integer currentUserIdInt = Integer.valueOf(mCurrentUserId);</div><div class="line">                <span class="comment">// 更新与该用户相关的profile列表</span></div><div class="line">                updateCurrentProfileIdsLocked();</div><div class="line">                mWindowManager.setCurrentProfileIds(mCurrentProfileIds);</div><div class="line">                <span class="comment">// 重新调整mUserLru</span></div><div class="line">                mUserLru.remove(currentUserIdInt);</div><div class="line">                mUserLru.add(currentUserIdInt);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">final</span> UserState uss = mStartedUsers.get(userId);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (uss.mState == UserState.STATE_STOPPING) &#123;</div><div class="line">                <span class="comment">// 如果该用户是正在停止，这个时候还没有发送ACTION_SHUTDOWN广播，则切换为正在运行</span></div><div class="line">                uss.mState = UserState.STATE_RUNNING;</div><div class="line">                <span class="comment">// 更新mStartedUserArray列表</span></div><div class="line">                updateStartedUserArrayLocked();</div><div class="line">                needStart = <span class="keyword">true</span>;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (uss.mState == UserState.STATE_SHUTDOWN) &#123;</div><div class="line">                <span class="comment">// 如果该用户是正在停止，这个时候已经发送ACTION_SHUTDOWN广播，则切换为正在启动状态</span></div><div class="line">                uss.mState = UserState.STATE_BOOTING;</div><div class="line">                updateStartedUserArrayLocked();</div><div class="line">                needStart = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (uss.mState == UserState.STATE_BOOTING) &#123;</div><div class="line">                <span class="comment">// 如果用户的状态是正在启动，则发送一个SYSTEM_USER_START_MSG消息，该消息的处理下面会介绍</span></div><div class="line">                mHandler.sendMessage(mHandler.obtainMessage(SYSTEM_USER_START_MSG, userId, <span class="number">0</span>));</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (foreground) &#123;</div><div class="line">                <span class="comment">// 发送SYSTEM_USER_CURRENT_MSG消息</span></div><div class="line">                mHandler.sendMessage(mHandler.obtainMessage(SYSTEM_USER_CURRENT_MSG, userId,</div><div class="line">                        oldUserId));</div><div class="line">                <span class="comment">// 分别发送REPORT_USER_SWITCH_MSG和USER_SWITCH_TIMEOUT_MSG，防止切换时间过长，后面会介绍</span></div><div class="line">                mHandler.removeMessages(REPORT_USER_SWITCH_MSG);</div><div class="line">                mHandler.removeMessages(USER_SWITCH_TIMEOUT_MSG);</div><div class="line">                mHandler.sendMessage(mHandler.obtainMessage(REPORT_USER_SWITCH_MSG,</div><div class="line">                        oldUserId, userId, uss));</div><div class="line">                mHandler.sendMessageDelayed(mHandler.obtainMessage(USER_SWITCH_TIMEOUT_MSG,</div><div class="line">                        oldUserId, userId, uss), USER_SWITCH_TIMEOUT);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (needStart) &#123;</div><div class="line">                <span class="comment">// 发送一个 USER_STARTED 广播</span></div><div class="line">                Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_USER_STARTED);</div><div class="line">                intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY</div><div class="line">                        | Intent.FLAG_RECEIVER_FOREGROUND);</div><div class="line">                intent.putExtra(Intent.EXTRA_USER_HANDLE, userId);</div><div class="line">                broadcastIntentLocked(<span class="keyword">null</span>, <span class="keyword">null</span>, intent,</div><div class="line">                        <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, AppOpsManager.OP_NONE,</div><div class="line">                        <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, MY_PID, Process.SYSTEM_UID, userId);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> ((userInfo.flags&amp;UserInfo.FLAG_INITIALIZED) == <span class="number">0</span>) &#123;</div><div class="line">                <span class="comment">// 当该用户还没有初始化，如果是普通用户则会发送ACTION_USER_INITIALIZE广播，如果是机主用户，则直接标记为已初始化</span></div><div class="line">                <span class="keyword">if</span> (userId != UserHandle.USER_OWNER) &#123;</div><div class="line">                    Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_USER_INITIALIZE);</div><div class="line">                    intent.addFlags(Intent.FLAG_RECEIVER_FOREGROUND);</div><div class="line">                    broadcastIntentLocked(<span class="keyword">null</span>, <span class="keyword">null</span>, intent, <span class="keyword">null</span>,</div><div class="line">                            <span class="keyword">new</span> IIntentReceiver.Stub() &#123;</div><div class="line">                                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performReceive</span><span class="params">(Intent intent, <span class="keyword">int</span> resultCode,</span></span></div><div class="line">                                        String data, Bundle extras, <span class="keyword">boolean</span> ordered,</div><div class="line">                                        <span class="keyword">boolean</span> sticky, <span class="keyword">int</span> sendingUser) &#123;</div><div class="line">                                    onUserInitialized(uss, foreground, oldUserId, userId);</div><div class="line">                                &#125;</div><div class="line">                            &#125;, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, AppOpsManager.OP_NONE,</div><div class="line">                            <span class="keyword">null</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, MY_PID, Process.SYSTEM_UID, userId);</div><div class="line">                    <span class="comment">// 标记为正在初始化，该变量会在completeSwitchAndInitialize()重置</span></div><div class="line">                    uss.initializing = <span class="keyword">true</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    getUserManagerLocked().makeInitialized(userInfo.id);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (foreground) &#123;</div><div class="line">                <span class="comment">// 如果用户已经初始化过了，则设置为前台用户，后面会介绍这一部分</span></div><div class="line">                <span class="keyword">if</span> (!uss.initializing) &#123;</div><div class="line">                    moveUserToForeground(uss, oldUserId, userId);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// 如果是后台启动用户，先加入到mStartingBackgroundUsers列表中去</span></div><div class="line">                mStackSupervisor.startBackgroundUserLocked(userId, uss);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (needStart) &#123;</div><div class="line">                Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_USER_STARTING);</div><div class="line">                intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);</div><div class="line">                intent.putExtra(Intent.EXTRA_USER_HANDLE, userId);</div><div class="line">                broadcastIntentLocked(<span class="keyword">null</span>, <span class="keyword">null</span>, intent,</div><div class="line">                        <span class="keyword">null</span>, <span class="keyword">new</span> IIntentReceiver.Stub() &#123;</div><div class="line">                            <span class="meta">@Override</span></div><div class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performReceive</span><span class="params">(Intent intent, <span class="keyword">int</span> resultCode,</span></span></div><div class="line">                                    String data, Bundle extras, <span class="keyword">boolean</span> ordered, <span class="keyword">boolean</span> sticky,</div><div class="line">                                    <span class="keyword">int</span> sendingUser) <span class="keyword">throws</span> RemoteException &#123;</div><div class="line">                            &#125;</div><div class="line">                        &#125;, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>,</div><div class="line">                        <span class="keyword">new</span> String[] &#123;INTERACT_ACROSS_USERS&#125;, AppOpsManager.OP_NONE,</div><div class="line">                        <span class="keyword">null</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, MY_PID, Process.SYSTEM_UID, UserHandle.USER_ALL);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        Binder.restoreCallingIdentity(ident);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面来分析一下<code>moveUserToForeground()</code>函数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">moveUserToForeground</span><span class="params">(UserState uss, <span class="keyword">int</span> oldUserId, <span class="keyword">int</span> newUserId)</span> </span>&#123;</div><div class="line">    <span class="comment">//从mStackSupervisor获取newUserId用户在切换之前的stack状态，以便将原来在前台的应用推到前台</span></div><div class="line">    <span class="keyword">boolean</span> homeInFront = mStackSupervisor.switchUserLocked(newUserId, uss);</div><div class="line">    <span class="keyword">if</span> (homeInFront) &#123;</div><div class="line">        <span class="comment">// 如果原来是从桌面切换的用户，则启动桌面</span></div><div class="line">        startHomeActivityLocked(newUserId, <span class="string">"moveUserToFroreground"</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 如果是其他应用，则将此应用推到前台</span></div><div class="line">        mStackSupervisor.resumeTopActivitiesLocked();</div><div class="line">    &#125;</div><div class="line">    EventLogTags.writeAmSwitchUser(newUserId);</div><div class="line">    getUserManagerLocked().onUserForeground(newUserId);</div><div class="line">    <span class="comment">// 发送ACTION_USER_BACKGROUND广播，通知和oldUserId相关的用户(包括profile)进入后台的消息</span></div><div class="line">    <span class="comment">// 发送ACTION_USER_FOREGROUND广播，通知和newUserId相关的用户(包括profile)进入前台的消息</span></div><div class="line">    <span class="comment">// 发送ACTION_USER_SWITCHED广播，通知用户切换</span></div><div class="line">    sendUserSwitchBroadcastsLocked(oldUserId, newUserId);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="消息处理"><a href="#消息处理" class="headerlink" title="消息处理"></a>消息处理</h4><p>下面介绍一下<code>startUser()</code>中发出的几条消息的处理。<br>SYSTEM_USER_CURRENT_MSG：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> SYSTEM_USER_CURRENT_MSG: &#123;</div><div class="line">    mBatteryStatsService.noteEvent(</div><div class="line">            BatteryStats.HistoryItem.EVENT_USER_FOREGROUND_FINISH,</div><div class="line">            Integer.toString(msg.arg2), msg.arg2);</div><div class="line">    mBatteryStatsService.noteEvent(</div><div class="line">            BatteryStats.HistoryItem.EVENT_USER_FOREGROUND_START,</div><div class="line">            Integer.toString(msg.arg1), msg.arg1);</div><div class="line">    mSystemServiceManager.switchUser(msg.arg1);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里主要是通知<code>BatteryStatsService</code>用户切换的消息以及让<code>SystemServiceManager</code>调用各个<code>SystemService</code>的<code>onSwitchUser(userHandle)</code>方法。</p>
<p>REPORT_USER_SWITCH_MSG、USER_SWITCH_TIMEOUT_MSG、CONTINUE_USER_SWITCH_MSG和REPORT_USER_SWITCH_COMPLETE_MSG</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> REPORT_USER_SWITCH_MSG: &#123;</div><div class="line">    dispatchUserSwitch((UserState) msg.obj, msg.arg1, msg.arg2);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">case</span> USER_SWITCH_TIMEOUT_MSG: &#123;</div><div class="line">    timeoutUserSwitch((UserState) msg.obj, msg.arg1, msg.arg2);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">case</span> CONTINUE_USER_SWITCH_MSG: &#123;</div><div class="line">    continueUserSwitch((UserState) msg.obj, msg.arg1, msg.arg2);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">case</span> REPORT_USER_SWITCH_COMPLETE_MSG: &#123;</div><div class="line">    dispatchUserSwitchComplete(msg.arg1);</div><div class="line">&#125; <span class="keyword">break</span>;</div></pre></td></tr></table></figure>
<p><code>REPORT_USER_SWITCH_MSG</code>消息的处理方法是<code>dispatchUserSwitch()</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispatchUserSwitch</span><span class="params">(<span class="keyword">final</span> UserState uss, <span class="keyword">final</span> <span class="keyword">int</span> oldUserId,</span></span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> newUserId) &#123;</div><div class="line">    <span class="comment">// 获取需要通知的观察者数量</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> N = mUserSwitchObservers.beginBroadcast();</div><div class="line">    <span class="keyword">if</span> (N &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="comment">// 创建一个回调函数供观察者对象调用</span></div><div class="line">        <span class="keyword">final</span> IRemoteCallback callback = <span class="keyword">new</span> IRemoteCallback.Stub() &#123;</div><div class="line">            <span class="keyword">int</span> mCount = <span class="number">0</span>;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendResult</span><span class="params">(Bundle data)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">                <span class="keyword">synchronized</span> (ActivityManagerService.<span class="keyword">this</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (mCurUserSwitchCallback == <span class="keyword">this</span>) &#123;</div><div class="line">                        <span class="comment">// 收到一条返回结果mCount加一</span></div><div class="line">                        mCount++;</div><div class="line">                        <span class="keyword">if</span> (mCount == N) &#123; <span class="comment">//待所有结果都返回了，发送继续处理的消息，后面介绍该方法</span></div><div class="line">                            sendContinueUserSwitchLocked(uss, oldUserId, newUserId);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">            <span class="comment">// 标记正在进行用户切换</span></div><div class="line">            uss.switching = <span class="keyword">true</span>;</div><div class="line">            mCurUserSwitchCallback = callback;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 调用观察者对象的onUserSwitching方法</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                mUserSwitchObservers.getBroadcastItem(i).onUserSwitching(</div><div class="line">                        newUserId, callback);</div><div class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">            sendContinueUserSwitchLocked(uss, oldUserId, newUserId);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 通知完成后清除状态</span></div><div class="line">    mUserSwitchObservers.finishBroadcast();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendContinueUserSwitchLocked</span><span class="params">(UserState uss, <span class="keyword">int</span> oldUserId, <span class="keyword">int</span> newUserId)</span> </span>&#123;</div><div class="line">    mCurUserSwitchCallback = <span class="keyword">null</span>;</div><div class="line">    mHandler.removeMessages(USER_SWITCH_TIMEOUT_MSG);</div><div class="line">    mHandler.sendMessage(mHandler.obtainMessage(CONTINUE_USER_SWITCH_MSG,</div><div class="line">            oldUserId, newUserId, uss));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果系统中有对切换用户感兴趣的模块，可以调用AMS的<code>registerUserSwitchObserver()</code>方法来注册观察对象，这个对象会保存在<code>mUserSwitchObservers</code>中，当有用户切换时AMS会通过调用<code>onUserSwitching</code>来通知这些模块，模块处理完成后会调用参数中传递的<code>callback</code>来通知AMS。最后都调用完成后会调用<code>sendContinueUserSwitchLocked</code>来继续进行切换用户的工作。<br><code>sendContinueUserSwitchLocked()</code>方法会先清除前面延迟发送的<code>USER_SWITCH_TIMEOUT_MSG</code>消息，然后再发送一条<code>CONTINUE_USER_SWITCH_MSG</code>消息。<br><code>CONTINUE_USER_SWITCH_MSG</code>消息的执行函数是<code>completeSwitchAndInitialize()</code>方法，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">timeoutUserSwitch</span><span class="params">(UserState uss, <span class="keyword">int</span> oldUserId, <span class="keyword">int</span> newUserId)</span> </span>&#123;</div><div class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">        sendContinueUserSwitchLocked(uss, oldUserId, newUserId);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">continueUserSwitch</span><span class="params">(UserState uss, <span class="keyword">int</span> oldUserId, <span class="keyword">int</span> newUserId)</span> </span>&#123;</div><div class="line">    completeSwitchAndInitialize(uss, newUserId, <span class="keyword">false</span>, <span class="keyword">true</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">completeSwitchAndInitialize</span><span class="params">(UserState uss, <span class="keyword">int</span> newUserId,</span></span></div><div class="line">        <span class="keyword">boolean</span> clearInitializing, <span class="keyword">boolean</span> clearSwitching) &#123;</div><div class="line">    <span class="keyword">boolean</span> unfrozen = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (clearInitializing) &#123;</div><div class="line">            <span class="comment">// 标记初始化完成</span></div><div class="line">            uss.initializing = <span class="keyword">false</span>;</div><div class="line">            getUserManagerLocked().makeInitialized(uss.mHandle.getIdentifier());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (clearSwitching) &#123;</div><div class="line">            <span class="comment">// 标记用户切换完成</span></div><div class="line">            uss.switching = <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!uss.switching &amp;&amp; !uss.initializing) &#123;</div><div class="line">            <span class="comment">// 结束冻屏</span></div><div class="line">            mWindowManager.stopFreezingScreen();</div><div class="line">            unfrozen = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (unfrozen) &#123;</div><div class="line">        <span class="comment">// 发送切换完成的消息</span></div><div class="line">        mHandler.removeMessages(REPORT_USER_SWITCH_COMPLETE_MSG);</div><div class="line">        mHandler.sendMessage(mHandler.obtainMessage(REPORT_USER_SWITCH_COMPLETE_MSG,</div><div class="line">                newUserId, <span class="number">0</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 停止在后台的访客用户</span></div><div class="line">    stopGuestUserIfBackground();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>REPORT_USER_SWITCH_COMPLETE_MSG</code>消息的处理函数是<code>dispatchUserSwitchComplete</code>，此方法的主要工作就是调用观察者的<code>onUserSwitchComplete()</code>方法，进行用户切换的收尾工作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispatchUserSwitchComplete</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> observerCount = mUserSwitchObservers.beginBroadcast();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; observerCount; i++) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            mUserSwitchObservers.getBroadcastItem(i).onUserSwitchComplete(userId);</div><div class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    mUserSwitchObservers.finishBroadcast();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再介绍一下<code>USER_SWITCH_TIMEOUT_MSG</code>消息，发送<code>REPORT_USER_SWITCH_MSG</code>消息的同时发送<code>USER_SWITCH_TIMEOUT_MSG</code>消息是为了防止用户切换时间过长，毕竟只有所有的观察者都处理完了才能继续进行切换用户的操作。发送完<code>USER_SWITCH_TIMEOUT_MSG</code>消息以后，如果后面没有进行清除该消息，那么时间一到就表示处理超时，就会调用<code>timeoutUserSwitch()</code>方法进行超时处理，<code>timeoutUserSwitch()</code>执行<code>sendContinueUserSwitchLocked()</code>来结束切换工作，不再等待各个观察者处理任务的结束。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">timeoutUserSwitch</span><span class="params">(UserState uss, <span class="keyword">int</span> oldUserId, <span class="keyword">int</span> newUserId)</span> </span>&#123;</div><div class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">        sendContinueUserSwitchLocked(uss, oldUserId, newUserId);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面<code>startUser()</code>方法介绍完了，但是现在用户的状态还是在<code>UserState.STATE_BOOTING</code>的状态，那么什么时候切换到<code>UserState.STATE_RUNNING</code>状态呢？</p>
<h4 id="更新用户状态，停止旧用户"><a href="#更新用户状态，停止旧用户" class="headerlink" title="更新用户状态，停止旧用户"></a>更新用户状态，停止旧用户</h4><p>在<code>Activity</code>进入Idle状态后会调用AMS的<code>activityIdle()</code>方法，此方法会调用<code>mStackSupervisor.activityIdleInternalLocked(token, false, config);</code>，在<code>activityIdleInternalLocked()</code>方法内有下面的处理：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!booting) &#123;</div><div class="line">    <span class="comment">// Complete user switch</span></div><div class="line">    <span class="keyword">if</span> (startingUsers != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; startingUsers.size(); i++) &#123;</div><div class="line">            mService.finishUserSwitch(startingUsers.get(i));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// Complete starting up of background users</span></div><div class="line">    <span class="keyword">if</span> (mStartingBackgroundUsers.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">        startingUsers = <span class="keyword">new</span> ArrayList&lt;UserState&gt;(mStartingBackgroundUsers);</div><div class="line">        mStartingBackgroundUsers.clear();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; startingUsers.size(); i++) &#123;</div><div class="line">            mService.finishUserBoot(startingUsers.get(i));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当前有正在切换的用户的话就会调用AMS的<code>finishUserSwitch()</code>和<code>finishUserBoot()</code>方法，来更新用户状态，发送广播以及处理需要停止的用户工作。<br>下面来看一下 AMS 的<code>finishUserSwitch()</code>和<code>finishUserBoot()</code>方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">finishUserSwitch</span><span class="params">(UserState uss)</span> </span>&#123;</div><div class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">        finishUserBoot(uss);</div><div class="line"></div><div class="line">        startProfilesLocked();</div><div class="line"></div><div class="line">        <span class="keyword">int</span> num = mUserLru.size();</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (num &gt; MAX_RUNNING_USERS &amp;&amp; i &lt; mUserLru.size()) &#123;</div><div class="line">            Integer oldUserId = mUserLru.get(i);</div><div class="line">            UserState oldUss = mStartedUsers.get(oldUserId);</div><div class="line">            <span class="keyword">if</span> (oldUss == <span class="keyword">null</span>) &#123;</div><div class="line">                mUserLru.remove(i);</div><div class="line">                num--;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (oldUss.mState == UserState.STATE_STOPPING</div><div class="line">                    || oldUss.mState == UserState.STATE_SHUTDOWN) &#123;</div><div class="line">                <span class="comment">// 已经停止的用户不做处理</span></div><div class="line">                num--;</div><div class="line">                i++;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (oldUserId == UserHandle.USER_OWNER || oldUserId == mCurrentUserId) &#123;</div><div class="line">                <span class="comment">// 机主用户和当前用户会继续运行，不做处理</span></div><div class="line">                i++;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 将老用户停止，后面会介绍</span></div><div class="line">            stopUserLocked(oldUserId, <span class="keyword">null</span>);</div><div class="line">            num--;</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">finishUserBoot</span><span class="params">(UserState uss)</span> </span>&#123;</div><div class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (uss.mState == UserState.STATE_BOOTING</div><div class="line">                &amp;&amp; mStartedUsers.get(uss.mHandle.getIdentifier()) == uss) &#123;</div><div class="line">            uss.mState = UserState.STATE_RUNNING;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> userId = uss.mHandle.getIdentifier();</div><div class="line">            Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_BOOT_COMPLETED, <span class="keyword">null</span>);</div><div class="line">            intent.putExtra(Intent.EXTRA_USER_HANDLE, userId);</div><div class="line">            intent.addFlags(Intent.FLAG_RECEIVER_NO_ABORT);</div><div class="line">            broadcastIntentLocked(<span class="keyword">null</span>, <span class="keyword">null</span>, intent,</div><div class="line">                    <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>,</div><div class="line">                    <span class="keyword">new</span> String[] &#123;android.Manifest.permission.RECEIVE_BOOT_COMPLETED&#125;,</div><div class="line">                    AppOpsManager.OP_NONE, <span class="keyword">null</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, MY_PID, Process.SYSTEM_UID,</div><div class="line">                    userId);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过<code>finishUserSwitch</code>-&gt;<code>finishUserBoot</code>来将用户的状态置为<code>UserState.STATE_RUNNING</code>，并发出广播<code>Intent.ACTION_BOOT_COMPLETED</code>广播。<br>至此，用户切换工作全部结束。</p>
<h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><h3 id="UserManagerService-2"><a href="#UserManagerService-2" class="headerlink" title="UserManagerService"></a>UserManagerService</h3><p><code>UserManagerService</code>中删除用户是在<code>removeUser()</code>方法中实现的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeUser</span><span class="params">(<span class="keyword">int</span> userHandle)</span> </span>&#123;</div><div class="line">    <span class="comment">// 检查该进程是否具有删除用户的权限</span></div><div class="line">    checkManageUsersPermission(<span class="string">"Only the system can remove users"</span>);</div><div class="line">    <span class="comment">// 检查一下该用户是否被限制删除用户</span></div><div class="line">    <span class="keyword">if</span> (getUserRestrictions(UserHandle.getCallingUserId()).getBoolean(</div><div class="line">            UserManager.DISALLOW_REMOVE_USER, <span class="keyword">false</span>)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">long</span> ident = Binder.clearCallingIdentity();</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">final</span> UserInfo user;</div><div class="line">        <span class="keyword">synchronized</span> (mPackagesLock) &#123;</div><div class="line">            user = mUsers.get(userHandle);</div><div class="line">            <span class="comment">// 检查被删除的用户是不是管理员用户userHandle=0，检查用户列表中是否有该用户，以及该用户是否是正在被删除的用户</span></div><div class="line">            <span class="keyword">if</span> (userHandle == <span class="number">0</span> || user == <span class="keyword">null</span> || mRemovingUserIds.get(userHandle)) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 将该用户放入mRemovingUserIds列表中，防止重复删除</span></div><div class="line">            <span class="comment">// mRemovingUserIds中的数据会一直保存直到系统重启，防止Id被重复使用</span></div><div class="line">            mRemovingUserIds.put(userHandle, <span class="keyword">true</span>);</div><div class="line"></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                mAppOpsService.removeUser(userHandle);</div><div class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                Log.w(LOG_TAG, <span class="string">"Unable to notify AppOpsService of removing user"</span>, e);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 将partial设置为true，这样如果后面的过程意外终止导致此次删除失败，系统重启后还是会继续删除工作的</span></div><div class="line">            user.partial = <span class="keyword">true</span>;</div><div class="line">            <span class="comment">// 设置FLAG_DISABLED，禁止该用户</span></div><div class="line">            user.flags |= UserInfo.FLAG_DISABLED;</div><div class="line">            <span class="comment">// 将上面更新的用户文件信息写入到xml文件中去</span></div><div class="line">            writeUserLocked(user);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 如果该user是一个user的一份profile，则发出一个ACTION_MANAGED_PROFILE_REMOVED广播</span></div><div class="line">        <span class="keyword">if</span> (user.profileGroupId != UserInfo.NO_PROFILE_GROUP_ID</div><div class="line">                &amp;&amp; user.isManagedProfile()) &#123;</div><div class="line">            sendProfileRemovedBroadcast(user.profileGroupId, user.id);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 调用AMS停止当前的用户，这部分后面会详细介绍</span></div><div class="line">        <span class="keyword">int</span> res;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            res = ActivityManagerNative.getDefault().stopUser(userHandle,</div><div class="line">                    <span class="comment">// 设置回调函数，调用finishRemoveUser继续后面的删除工作</span></div><div class="line">                    <span class="keyword">new</span> IStopUserCallback.Stub() &#123;</div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userStopped</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</div><div class="line">                            finishRemoveUser(userId);</div><div class="line">                        &#125;</div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userStopAborted</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</div><div class="line">                        &#125;</div><div class="line">                    &#125;);</div><div class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res == ActivityManager.USER_OP_SUCCESS;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        Binder.restoreCallingIdentity(ident);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>ActivityManagerNative.getDefault().stopUser</code>执行完后 UMS 会继续执行删除工作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">finishRemoveUser</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> userHandle)</span> </span>&#123;</div><div class="line">    <span class="comment">// Let other services shutdown any activity and clean up their state before completely</span></div><div class="line">    <span class="comment">// wiping the user's system directory and removing from the user list</span></div><div class="line">    <span class="keyword">long</span> ident = Binder.clearCallingIdentity();</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        Intent addedIntent = <span class="keyword">new</span> Intent(Intent.ACTION_USER_REMOVED);</div><div class="line">        addedIntent.putExtra(Intent.EXTRA_USER_HANDLE, userHandle);</div><div class="line">        mContext.sendOrderedBroadcastAsUser(addedIntent, UserHandle.ALL,</div><div class="line">                android.Manifest.permission.MANAGE_USERS,</div><div class="line"></div><div class="line">                <span class="keyword">new</span> BroadcastReceiver() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">                        <span class="keyword">new</span> Thread() &#123;</div><div class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                                <span class="keyword">synchronized</span> (mInstallLock) &#123;</div><div class="line">                                    <span class="keyword">synchronized</span> (mPackagesLock) &#123;</div><div class="line">                                        removeUserStateLocked(userHandle);</div><div class="line">                                    &#125;</div><div class="line">                                &#125;</div><div class="line">                            &#125;</div><div class="line">                        &#125;.start();</div><div class="line">                    &#125;</div><div class="line">                &#125;,</div><div class="line">                <span class="keyword">null</span>, Activity.RESULT_OK, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        Binder.restoreCallingIdentity(ident);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>根据代码可以看到<code>finishRemoveUser</code>方法只是发送了一个有序广播ACTION_USER_REMOVED，同时注册了一个广播接收器，这个广播接收器是最后一个接收到该广播的接收器，这样做的目的是让关心该广播的其他接收器处理完之后， UMS 才会进行删除用户的收尾工作，即调用<code>removeUserStateLocked</code>来删除用户的相关文件。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeUserStateLocked</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> userHandle)</span> </span>&#123;</div><div class="line">    <span class="comment">// 调用mPm.cleanUpUserLILPw来删除用户目录/data/user/&lt;用户id&gt;/下面的应用数据，后面会详细介绍</span></div><div class="line">    mPm.cleanUpUserLILPw(<span class="keyword">this</span>, userHandle);</div><div class="line"></div><div class="line">    <span class="comment">// 从mUsers列表中移除该用户信息</span></div><div class="line">    mUsers.remove(userHandle);</div><div class="line">    AtomicFile userFile = <span class="keyword">new</span> AtomicFile(<span class="keyword">new</span> File(mUsersDir, userHandle + XML_SUFFIX));</div><div class="line">    <span class="comment">// 删除用户信息文件 &lt;用户id&gt;.xml</span></div><div class="line">    userFile.delete();</div><div class="line">    <span class="comment">// 更新userlist.xml文件，将删除调用的用户从中移除</span></div><div class="line">    writeUserListLocked();</div><div class="line">    <span class="comment">// 更新mUserIds列表</span></div><div class="line">    updateUserIdsLocked();</div><div class="line">    <span class="comment">// 删除用户目录以及该用户的所有文件</span></div><div class="line">    removeDirectoryRecursive(Environment.getUserSystemDirectory(userHandle));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此，删除用户的工作已经全部完成。</p>
<h3 id="ActivityManagerService-1"><a href="#ActivityManagerService-1" class="headerlink" title="ActivityManagerService"></a>ActivityManagerService</h3><p>UMS的<code>removeUser()</code>会调用AMS的<code>stopUser()</code>来处理停止用户的一些工作，在AMS内部也会调用<code>stopUser()</code>。该方法在进行了权限检查之后，主要的工作都是由<code>stopUserLocked()</code>来完成的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">stopUserLocked</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> userId, <span class="keyword">final</span> IStopUserCallback callback)</span> </span>&#123;</div><div class="line">    <span class="comment">// 当前用户是不能被停止的，如果是当前用户则直接返回</span></div><div class="line">    <span class="keyword">if</span> (mCurrentUserId == userId &amp;&amp; mTargetUserId == UserHandle.USER_NULL) &#123;</div><div class="line">        <span class="keyword">return</span> ActivityManager.USER_OP_IS_CURRENT;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> UserState uss = mStartedUsers.get(userId);</div><div class="line">    <span class="keyword">if</span> (uss == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 如果当前用户还没有被启动，那么直接结束当前流程，调用回调函数，返回操作成功标志</span></div><div class="line">        <span class="keyword">if</span> (callback != <span class="keyword">null</span>) &#123;</div><div class="line">            mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        callback.userStopped(userId);</div><div class="line">                    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ActivityManager.USER_OP_SUCCESS;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (callback != <span class="keyword">null</span>) &#123;</div><div class="line">        uss.mStopCallbacks.add(callback);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (uss.mState != UserState.STATE_STOPPING</div><div class="line">            &amp;&amp; uss.mState != UserState.STATE_SHUTDOWN) &#123;</div><div class="line">        <span class="comment">// 将状态切换到正在停止</span></div><div class="line">        uss.mState = UserState.STATE_STOPPING;</div><div class="line">        <span class="comment">// 更新mStartedUserArray列表</span></div><div class="line">        updateStartedUserArrayLocked();</div><div class="line"></div><div class="line">        <span class="keyword">long</span> ident = Binder.clearCallingIdentity();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">final</span> Intent stoppingIntent = <span class="keyword">new</span> Intent(Intent.ACTION_USER_STOPPING);</div><div class="line">            stoppingIntent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);</div><div class="line">            stoppingIntent.putExtra(Intent.EXTRA_USER_HANDLE, userId);</div><div class="line">            stoppingIntent.putExtra(Intent.EXTRA_SHUTDOWN_USERSPACE_ONLY, <span class="keyword">true</span>);</div><div class="line">            <span class="keyword">final</span> Intent shutdownIntent = <span class="keyword">new</span> Intent(Intent.ACTION_SHUTDOWN);</div><div class="line">            <span class="comment">// 注册一个Intent.ACTION_SHUTDOWN广播接收器</span></div><div class="line">            <span class="keyword">final</span> IIntentReceiver shutdownReceiver = <span class="keyword">new</span> IIntentReceiver.Stub() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performReceive</span><span class="params">(Intent intent, <span class="keyword">int</span> resultCode, String data,</span></span></div><div class="line">                        Bundle extras, <span class="keyword">boolean</span> ordered, <span class="keyword">boolean</span> sticky, <span class="keyword">int</span> sendingUser) &#123;</div><div class="line">                    <span class="comment">//收到Intent.ACTION_SHUTDOWN广播，下面介绍此方法</span></div><div class="line">                    finishUserStop(uss);</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">            <span class="comment">// 注册一个Intent.ACTION_USER_STOPPING广播接收器</span></div><div class="line">            <span class="keyword">final</span> IIntentReceiver stoppingReceiver = <span class="keyword">new</span> IIntentReceiver.Stub() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performReceive</span><span class="params">(Intent intent, <span class="keyword">int</span> resultCode, String data,</span></span></div><div class="line">                        Bundle extras, <span class="keyword">boolean</span> ordered, <span class="keyword">boolean</span> sticky, <span class="keyword">int</span> sendingUser) &#123;</div><div class="line">                    <span class="keyword">synchronized</span> (ActivityManagerService.<span class="keyword">this</span>) &#123;</div><div class="line">                        <span class="keyword">if</span> (uss.mState != UserState.STATE_STOPPING) &#123;</div><div class="line">                            <span class="keyword">return</span>;</div><div class="line">                        &#125;</div><div class="line">                        <span class="comment">// 收到Intent.ACTION_USER_STOPPING广播后更新用户状态</span></div><div class="line">                        uss.mState = UserState.STATE_SHUTDOWN;</div><div class="line">                    &#125;</div><div class="line">                    mBatteryStatsService.noteEvent(</div><div class="line">                            BatteryStats.HistoryItem.EVENT_USER_RUNNING_FINISH,</div><div class="line">                            Integer.toString(userId), userId);</div><div class="line">                    <span class="comment">// 回调各个SystemServer的onStopUser方法</span></div><div class="line">                    mSystemServiceManager.stopUser(userId);</div><div class="line">                    <span class="comment">//发送Intent.ACTION_SHUTDOWN广播，此为有序广播，确保shutdownReceiver最后一个调用</span></div><div class="line">                    broadcastIntentLocked(<span class="keyword">null</span>, <span class="keyword">null</span>, shutdownIntent,</div><div class="line">                            <span class="keyword">null</span>, shutdownReceiver, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, AppOpsManager.OP_NONE,</div><div class="line">                            <span class="keyword">null</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, MY_PID, Process.SYSTEM_UID, userId);</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">            <span class="comment">// 发送Intent.ACTION_USER_STOPPING广播，此为有序广播，确保stoppingReceiver最后一个调用</span></div><div class="line">            broadcastIntentLocked(<span class="keyword">null</span>, <span class="keyword">null</span>, stoppingIntent,</div><div class="line">                    <span class="keyword">null</span>, stoppingReceiver, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>,</div><div class="line">                    <span class="keyword">new</span> String[] &#123;INTERACT_ACROSS_USERS&#125;, AppOpsManager.OP_NONE,</div><div class="line">                    <span class="keyword">null</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, MY_PID, Process.SYSTEM_UID, UserHandle.USER_ALL);</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            Binder.restoreCallingIdentity(ident);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> ActivityManager.USER_OP_SUCCESS;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>stopUserLocked()</code>方法首先检查当前的用户是否需要执行停止的工作，如果不需要直接调用参数的回调函数结束停止工作，如果需要，则先后发送<code>Intent.ACTION_USER_STOPPING</code>和<code>Intent.ACTION_SHUTDOWN</code>广播，方法中也注册了两个广播的接收器，在<code>Intent.ACTION_SHUTDOWN</code>广播接收器中执行<code>finishUserStop(uss)</code>方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">finishUserStop</span><span class="params">(UserState uss)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> userId = uss.mHandle.getIdentifier();</div><div class="line">    <span class="keyword">boolean</span> stopped;</div><div class="line">    ArrayList&lt;IStopUserCallback&gt; callbacks;</div><div class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">        callbacks = <span class="keyword">new</span> ArrayList&lt;IStopUserCallback&gt;(uss.mStopCallbacks);</div><div class="line">        <span class="keyword">if</span> (mStartedUsers.get(userId) != uss) &#123;</div><div class="line">            stopped = <span class="keyword">false</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (uss.mState != UserState.STATE_SHUTDOWN) &#123;</div><div class="line">            stopped = <span class="keyword">false</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            stopped = <span class="keyword">true</span>;</div><div class="line">            <span class="comment">// User can no longer run.</span></div><div class="line">            mStartedUsers.remove(userId);</div><div class="line">            mUserLru.remove(Integer.valueOf(userId));</div><div class="line">            updateStartedUserArrayLocked();</div><div class="line"></div><div class="line">            <span class="comment">// 杀掉和该用户相关的所有进程</span></div><div class="line">            forceStopUserLocked(userId, <span class="string">"finish user"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 清除用户相关的Recent Task列表</span></div><div class="line">        mRecentTasks.removeTasksForUserLocked(userId);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//调用在stopUserLocked中添加的回调函数</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;callbacks.size(); i++) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (stopped) callbacks.get(i).userStopped(userId);</div><div class="line">            <span class="keyword">else</span> callbacks.get(i).userStopAborted(userId);</div><div class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (stopped) &#123;</div><div class="line">        <span class="comment">// 回调各个SystemServer的onCleanupUser方法</span></div><div class="line">        mSystemServiceManager.cleanupUser(userId);</div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">            mStackSupervisor.removeUserLocked(userId);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>finishUserStop()</code>方法从<code>mStartedUsers</code>和<code>mUserLru</code>列表中删除该用户，更新<code>mStartedUserArray</code>列表，清理和该用户有关的进程，发送<code>Intent.ACTION_USER_STOPPED</code>广播来通知该用户已经停止，接下来清除用户相关的Recent Task列表以及从<code>mStackSupervisor</code>中删除用户的信息。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">forceStopUserLocked</span><span class="params">(<span class="keyword">int</span> userId, String reason)</span> </span>&#123;</div><div class="line">    <span class="comment">// 杀掉该用户相关的所有进程，具体流程会在ActivityManager相关文章中介绍</span></div><div class="line">    forceStopPackageLocked(<span class="keyword">null</span>, -<span class="number">1</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, userId, reason);</div><div class="line">    <span class="comment">// 发出Intent.ACTION_USER_STOPPED广播</span></div><div class="line">    Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_USER_STOPPED);</div><div class="line">    intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY</div><div class="line">            | Intent.FLAG_RECEIVER_FOREGROUND);</div><div class="line">    intent.putExtra(Intent.EXTRA_USER_HANDLE, userId);</div><div class="line">    broadcastIntentLocked(<span class="keyword">null</span>, <span class="keyword">null</span>, intent,</div><div class="line">            <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, AppOpsManager.OP_NONE,</div><div class="line">            <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, MY_PID, Process.SYSTEM_UID, UserHandle.USER_ALL);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此，AMS相关的删除用户的相关工作全部完成。</p>
<h3 id="PackageManagerService-1"><a href="#PackageManagerService-1" class="headerlink" title="PackageManagerService"></a>PackageManagerService</h3><p>删除用户数据cleanUpUserLILPw()</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cleanUpUserLILPw</span><span class="params">(UserManagerService userManager, <span class="keyword">int</span> userHandle)</span> </span>&#123;</div><div class="line">    mDirtyUsers.remove(userHandle);</div><div class="line">    mSettings.removeUserLPw(userHandle);</div><div class="line">    mPendingBroadcasts.remove(userHandle);</div><div class="line">    <span class="keyword">if</span> (mInstaller != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// Technically, we shouldn't be doing this with the package lock</span></div><div class="line">        <span class="comment">// held.  However, this is very rare, and there is already so much</span></div><div class="line">        <span class="comment">// other disk I/O going on, that we'll let it slide for now.</span></div><div class="line">        <span class="keyword">final</span> StorageManager storage = mContext.getSystemService(StorageManager.class);</div><div class="line">        <span class="keyword">for</span> (VolumeInfo vol : storage.getWritablePrivateVolumes()) &#123;</div><div class="line">            <span class="keyword">final</span> String volumeUuid = vol.getFsUuid();</div><div class="line">            mInstaller.removeUserDataDirs(volumeUuid, userHandle);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    mUserNeedsBadging.delete(userHandle);</div><div class="line">    removeUnusedPackagesLILPw(userManager, userHandle);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>删除用户的工作比较简单，删除用户的数据。同时调用<code>mSettings.removeUserLPw(userHandle)</code>来删除和 PMS 中和用户相关的信息。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeUserLPw</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</div><div class="line">    <span class="comment">// 删除每个应用中的该用户的信息</span></div><div class="line">    Set&lt;Entry&lt;String, PackageSetting&gt;&gt; entries = mPackages.entrySet();</div><div class="line">    <span class="keyword">for</span> (Entry&lt;String, PackageSetting&gt; entry : entries) &#123;</div><div class="line">        entry.getValue().removeUser(userId);</div><div class="line">    &#125;</div><div class="line">    mPreferredActivities.remove(userId);</div><div class="line">    File file = getUserPackagesStateFile(userId);</div><div class="line">    file.delete();</div><div class="line">    file = getUserPackagesStateBackupFile(userId);</div><div class="line">    file.delete();</div><div class="line">    removeCrossProfileIntentFiltersLPw(userId);</div><div class="line"></div><div class="line">    mRuntimePermissionsPersistence.onUserRemoved(userId);</div><div class="line">    <span class="comment">// 更新/data/system/packages.list文件</span></div><div class="line">    writePackageListLPr();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      基于Android6.0来分析Android的用户管理系统
    
    </summary>
    
      <category term="Android源码分析" scheme="http://yoursite.com/categories/Android%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Android源码分析" scheme="http://yoursite.com/tags/Android%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="UserManager" scheme="http://yoursite.com/tags/UserManager/"/>
    
  </entry>
  
  <entry>
    <title>开源项目- Lottie 源码分析</title>
    <link href="http://yoursite.com/2017/02/07/open-source-lottie-android-source-code-analysis/"/>
    <id>http://yoursite.com/2017/02/07/open-source-lottie-android-source-code-analysis/</id>
    <published>2017-02-07T04:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>Lottie的基本用法其实还是非常简单的，不熟悉的同学请阅读我的博客<a href="http://www.heqiangfly.com/2017/02/07/open-source-lottie-android-introduction/" target="_blank" rel="external">开源项目-Lottie简介</a>。接下来我们就从源码角度分析一下这么强大的功能是怎么实现的。<br><a id="more"></a></p>
<h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>Lottie使用json文件来作为动画数据源，然后把解析这些数据源出来，建立数据到对象的映射关系，根据里面的数据建立合适的<code>Drawable</code>绘制到<code>View</code>上面。</p>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>下面我们就从<code>LottieAnimationView</code>作为切入点来一步一步分析。</p>
<h3 id="LottieAnimationView"><a href="#LottieAnimationView" class="headerlink" title="LottieAnimationView"></a>LottieAnimationView</h3><p><code>LottieAnimationView</code>继承自<code>AppCompatImageView</code>，封装了一些动画的操作：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playAnimation</span><span class="params">()</span></span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancelAnimation</span><span class="params">()</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pauseAnimation</span><span class="params">()</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProgress</span><span class="params">(@FloatRange(from = <span class="number">0</span>f, to = <span class="number">1</span>f)</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getProgress</span><span class="params">()</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getDuration</span><span class="params">()</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAnimating</span><span class="params">()</span></div></pre></td></tr></table></figure></p>
<p>等等；<br><code>LottieAnimationView</code>有两个很重要的成员变量：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Nullable</span> <span class="keyword">private</span> LottieComposition.Cancellable compositionLoader;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> LottieDrawable lottieDrawable = <span class="keyword">new</span> LottieDrawable();</div></pre></td></tr></table></figure></p>
<p><code>LottieComposition</code>和<code>LottieDrawable</code>将会在下面专门进行分析，他们分别进行了两个重要的工作：json文件的解析和动画的绘制。<br><code>compositionLoader</code>进行了动画解析工作，得到<code>LottieComposition</code>。<br>我们看到的动画便是在<code>LottieDrawable</code>上面绘制出来的，<code>lottieDrawable</code>在<code>setComposition</code>方法中被添加到<code>LottieAnimationView</code>上面最终显示出来。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setImageDrawable(lottieDrawable);</div></pre></td></tr></table></figure></p>
<h3 id="解析JSON文件"><a href="#解析JSON文件" class="headerlink" title="解析JSON文件"></a>解析JSON文件</h3><h4 id="JSON文件"><a href="#JSON文件" class="headerlink" title="JSON文件"></a>JSON文件</h4><p>其实在 Bodymovin 插件这里也是比较神奇的，它是怎么生成json文件的呢？这个后面有时间再研究。解析出来的json文件是这样子的：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"assets"</span>: [</div><div class="line">    </div><div class="line">  ],</div><div class="line">  <span class="attr">"layers"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"ddd"</span>: <span class="number">0</span>,</div><div class="line">      <span class="attr">"ind"</span>: <span class="number">0</span>,</div><div class="line">      <span class="attr">"ty"</span>: <span class="number">1</span>,</div><div class="line">      <span class="attr">"nm"</span>: <span class="string">"MASTER"</span>,</div><div class="line">      <span class="attr">"ks"</span>: &#123;</div><div class="line">        <span class="attr">"o"</span>: &#123;</div><div class="line">          <span class="attr">"k"</span>: <span class="number">0</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"r"</span>: &#123;</div><div class="line">          <span class="attr">"k"</span>: <span class="number">0</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"p"</span>: &#123;</div><div class="line">          <span class="attr">"k"</span>: [</div><div class="line">            <span class="number">164.457</span>,</div><div class="line">            <span class="number">140.822</span>,</div><div class="line">            <span class="number">0</span></div><div class="line">          ]</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"a"</span>: &#123;</div><div class="line">          <span class="attr">"k"</span>: [</div><div class="line">            <span class="number">60</span>,</div><div class="line">            <span class="number">60</span>,</div><div class="line">            <span class="number">0</span></div><div class="line">          ]</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"s"</span>: &#123;</div><div class="line">          <span class="attr">"k"</span>: [</div><div class="line">            <span class="number">100</span>,</div><div class="line">            <span class="number">100</span>,</div><div class="line">            <span class="number">100</span></div><div class="line">          ]</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">"ao"</span>: <span class="number">0</span>,</div><div class="line">      <span class="attr">"sw"</span>: <span class="number">120</span>,</div><div class="line">      <span class="attr">"sh"</span>: <span class="number">120</span>,</div><div class="line">      <span class="attr">"sc"</span>: <span class="string">"#ffffff"</span>,</div><div class="line">      <span class="attr">"ip"</span>: <span class="number">12</span>,</div><div class="line">      <span class="attr">"op"</span>: <span class="number">179</span>,</div><div class="line">      <span class="attr">"st"</span>: <span class="number">0</span>,</div><div class="line">      <span class="attr">"bm"</span>: <span class="number">0</span>,</div><div class="line">      <span class="attr">"sr"</span>: <span class="number">1</span></div><div class="line">    &#125;,</div><div class="line">    ……</div><div class="line">  ],</div><div class="line">  <span class="attr">"v"</span>: <span class="string">"4.4.26"</span>,</div><div class="line">  <span class="attr">"ddd"</span>: <span class="number">0</span>,</div><div class="line">  <span class="attr">"ip"</span>: <span class="number">0</span>,</div><div class="line">  <span class="attr">"op"</span>: <span class="number">179</span>,</div><div class="line">  <span class="attr">"fr"</span>: <span class="number">30</span>,</div><div class="line">  <span class="attr">"w"</span>: <span class="number">325</span>,</div><div class="line">  <span class="attr">"h"</span>: <span class="number">202</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>重要的数据都在<code>layers</code>里面，后面会介绍。</p>
<h4 id="LottieComposition"><a href="#LottieComposition" class="headerlink" title="LottieComposition"></a>LottieComposition</h4><p>Lottie使用<code>LottieComposition</code>来作为存储json文件的对象，即把json文件映射到<code>LottieComposition</code>，<code>LottieComposition</code>中提供了解析json文件的几个静态方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Cancellable <span class="title">fromAssetFileName</span><span class="params">(Context context, String fileName, OnCompositionLoadedListener loadedListener)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Cancellable <span class="title">fromInputStream</span><span class="params">(Context context, InputStream stream, OnCompositionLoadedListener loadedListener)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LottieComposition <span class="title">fromFileSync</span><span class="params">(Context context, String fileName)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Cancellable <span class="title">fromJson</span><span class="params">(Resources res, JSONObject json, OnCompositionLoadedListener loadedListener)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LottieComposition <span class="title">fromInputStream</span><span class="params">(Resources res, InputStream file)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LottieComposition <span class="title">fromJsonSync</span><span class="params">(Resources res, JSONObject json)</span></span>;</div></pre></td></tr></table></figure>
<p>其实上面这些函数最终的解析工作是在<code>public static LottieComposition fromJsonSync(Resources res, JSONObject json)</code>里面进行的。进行了动画几个属性的解析以及<code>Layer</code>解析。<br>下面看一下<code>LottieComposition</code>里面的几个变量：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> LongSparseArray&lt;Layer&gt; layerMap = <span class="keyword">new</span> LongSparseArray&lt;&gt;();</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;Layer&gt; layers = <span class="keyword">new</span> ArrayList&lt;&gt;();</div></pre></td></tr></table></figure>
<p><code>layers</code>存储json文件中的<code>layers</code>数组里面的数据，<code>Layer</code>就是对应了做图中图层的概念，一个完整的动画就是由这些图层叠加起来的，具体到下面再介绍。<br><code>layerMap</code>存储了<code>Layer</code>和其<code>id</code>的映射关系。<br>下面几个是动画里面常用的几个属性：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> Rect bounds;</div><div class="line"><span class="keyword">private</span> <span class="keyword">long</span> startFrame;</div><div class="line"><span class="keyword">private</span> <span class="keyword">long</span> endFrame;</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> frameRate;</div><div class="line"><span class="keyword">private</span> <span class="keyword">long</span> duration;</div><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> hasMasks;</div><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> hasMattes;</div><div class="line"><span class="keyword">private</span> <span class="keyword">float</span> scale;</div></pre></td></tr></table></figure></p>
<h4 id="Layer"><a href="#Layer" class="headerlink" title="Layer"></a>Layer</h4><p><code>Layer</code>就是对应了做图中图层的概念，一个完整的动画就是由这些图层叠加起来的。<br><code>Layer</code>里面有个静态方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> Layer <span class="title">fromJson</span><span class="params">(JSONObject json, LottieComposition composition)</span>；</span></div></pre></td></tr></table></figure></p>
<p>它解析json文件的数据并转化为<code>Layer</code>对象，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;Object&gt; shapes = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line"><span class="keyword">private</span> String layerName;</div><div class="line"><span class="keyword">private</span> <span class="keyword">long</span> layerId;</div><div class="line"><span class="keyword">private</span> LottieLayerType layerType;</div><div class="line"><span class="keyword">private</span> <span class="keyword">long</span> parentId = -<span class="number">1</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">long</span> inFrame;</div><div class="line"><span class="keyword">private</span> <span class="keyword">long</span> outFrame;</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> frameRate;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;Mask&gt; masks = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> solidWidth;</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> solidHeight;</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> solidColor;</div><div class="line"></div><div class="line"><span class="keyword">private</span> AnimatableIntegerValue opacity;</div><div class="line"><span class="keyword">private</span> AnimatableFloatValue rotation;</div><div class="line"><span class="keyword">private</span> IAnimatablePathValue position;</div><div class="line"></div><div class="line"><span class="keyword">private</span> AnimatablePathValue anchor;</div><div class="line"><span class="keyword">private</span> AnimatableScaleValue scale;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> hasOutAnimation;</div><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> hasInAnimation;</div><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> hasInOutAnimation;</div><div class="line"><span class="meta">@Nullable</span> <span class="keyword">private</span> List&lt;Float&gt; inOutKeyFrames;</div><div class="line"><span class="meta">@Nullable</span> <span class="keyword">private</span> List&lt;Float&gt; inOutKeyTimes;</div><div class="line"></div><div class="line"><span class="keyword">private</span> MatteType matteType;</div></pre></td></tr></table></figure></p>
<p>一些成员变量一一对应json文件<code>layers</code>数组中的属性，动画就是由他们组合而来的。</p>
<h3 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h3><h4 id="LottieDrawable"><a href="#LottieDrawable" class="headerlink" title="LottieDrawable"></a>LottieDrawable</h4><p><code>LottieDrawable</code>继承自<code>AnimatableLayer</code>，关于<code>AnimatableLayer</code>我们后面再分析。<br><code>AnimatableLayer</code>还有其他的子类，<code>LottieDrawable</code>可以理解为根布局，里面包含着其他的<code>AnimatableLayer</code>的子类，他们的关系可以理解为<code>ViewGroup</code>以及<code>View</code>的关系，<code>ViewGroup</code>里面可以包含<code>ViewGroup</code>以及<code>View</code>。这部分暂且不细说，下面会详细介绍。<br><code>LottieDrawable</code>会通过<code>buildLayersForComposition(LottieComposition composition)</code>进行动画数据到动画对象的映射。<br>会根据<code>LottieComposition</code>里面的每一个<code>Layer</code>生成一个对应的<code>LayerView</code>。</p>
<h4 id="LayerView"><a href="#LayerView" class="headerlink" title="LayerView"></a>LayerView</h4><p><code>LayerView</code>也是<code>AnimatableLayer</code>的子类，它在<code>setupForModel()</code>里面会根据<code>Layer</code>里面的数据生成不同的<code>AnimatableLayer</code>的子类，添加到变量<code>layers</code>中去。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (item <span class="keyword">instanceof</span> ShapePath) &#123;</div><div class="line">  ShapePath shapePath = (ShapePath) item;</div><div class="line">  ShapeLayerView shapeLayer =</div><div class="line">      <span class="keyword">new</span> ShapeLayerView(shapePath, currentFill, currentStroke, currentTrimPath,</div><div class="line">          <span class="keyword">new</span> ShapeTransform(composition), getCallback());</div><div class="line">  addLayer(shapeLayer);</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (item <span class="keyword">instanceof</span> RectangleShape) &#123;</div><div class="line">  RectangleShape shapeRect = (RectangleShape) item;</div><div class="line">  RectLayer shapeLayer =</div><div class="line">      <span class="keyword">new</span> RectLayer(shapeRect, currentFill, currentStroke, <span class="keyword">new</span> ShapeTransform(composition),</div><div class="line">          getCallback());</div><div class="line">  addLayer(shapeLayer);</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (item <span class="keyword">instanceof</span> CircleShape) &#123;</div><div class="line">  CircleShape shapeCircle = (CircleShape) item;</div><div class="line">  EllipseShapeLayer shapeLayer =</div><div class="line">      <span class="keyword">new</span> EllipseShapeLayer(shapeCircle, currentFill, currentStroke, currentTrimPath,</div><div class="line">          <span class="keyword">new</span> ShapeTransform(composition), getCallback());</div><div class="line">  addLayer(shapeLayer);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="AnimatableLayer"><a href="#AnimatableLayer" class="headerlink" title="AnimatableLayer"></a>AnimatableLayer</h4><p>AnimatableLayer的子类，分别对应着json文件中的不同数据：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Drawable (android.graphics.drawable)</div><div class="line">    AnimatableLayer (com.airbnb.lottie)</div><div class="line">        ShapeLayerView (com.airbnb.lottie)</div><div class="line">        LottieDrawable (com.airbnb.lottie)</div><div class="line">        LayerView (com.airbnb.lottie)</div><div class="line">        RectLayer (com.airbnb.lottie)</div><div class="line">        <span class="function">RoundRectLayer in <span class="title">RectLayer</span> <span class="params">(com.airbnb.lottie)</span></span></div><div class="line">        <span class="title">MaskLayer</span> <span class="params">(com.airbnb.lottie)</span></div><div class="line">        <span class="title">EllipseShapeLayer</span> <span class="params">(com.airbnb.lottie)</span></div><div class="line">        <span class="title">ShapeLayer</span> <span class="params">(com.airbnb.lottie)</span></div><div class="line">        <span class="title">GroupLayerView</span> <span class="params">(com.airbnb.lottie)</span></div></pre></td></tr></table></figure></p>
<h3 id="绘制"><a href="#绘制" class="headerlink" title="绘制"></a>绘制</h3><p><code>LottieDrawable</code>的<code>animator</code>来触发整个动画的绘制，最终会调用<code>LottieAnimationView</code>的<code>public void invalidateDrawable(Drawable dr)</code>方法进行视图的更新和重绘。<br>绘制工作基本是由<code>LottieDrawable</code>来完成的，具体实在其父类<code>AnimatableLayer</code>的<code>public void draw(@NonNull Canvas canvas)</code>方法中进行：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(@NonNull Canvas canvas)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> saveCount = canvas.save();</div><div class="line">  applyTransformForLayer(canvas, <span class="keyword">this</span>);</div><div class="line"></div><div class="line">  <span class="keyword">int</span> backgroundAlpha = Color.alpha(backgroundColor);</div><div class="line">  <span class="keyword">if</span> (backgroundAlpha != <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">int</span> alpha = backgroundAlpha;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.alpha != <span class="keyword">null</span>) &#123;</div><div class="line">      alpha = alpha * <span class="keyword">this</span>.alpha.getValue() / <span class="number">255</span>;</div><div class="line">    &#125;</div><div class="line">    solidBackgroundPaint.setAlpha(alpha);</div><div class="line">    <span class="keyword">if</span> (alpha &gt; <span class="number">0</span>) &#123;</div><div class="line">      canvas.drawRect(getBounds(), solidBackgroundPaint);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; layers.size(); i++) &#123;</div><div class="line">    layers.get(i).draw(canvas);</div><div class="line">  &#125;</div><div class="line">  canvas.restoreToCount(saveCount);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>先绘制了本层的内容，然后开始绘制包含的<code>layers</code>的内容，这个过程类似与界面中<code>ViewGroup</code>嵌套绘制。如此完成各个<code>Layer</code>的绘制工作。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>由上面的分析我们得到了Lottie绘制动画的思路：</p>
<ol>
<li>创建 <code>LottieAnimationView lottieAnimationView</code></li>
<li>在<code>LottieAnimationView</code>中创建<code>LottieDrawable lottieDrawable</code></li>
<li>在<code>LottieAnimationView</code>中创建<code>compositionLoader</code>，进行json文件解析得到<code>LottieComposition</code>，完成数据到对象<code>Layer</code>的映射。</li>
<li>解析完后通过<code>setComposition</code>方法把<code>LottieComposition</code>给<code>lottieDrawable</code>，<code>lottieDrawable</code>在<code>setComposition</code>方法中把<code>Layer</code>转换为<code>LayerView</code>，为绘制做好准备。</li>
<li>在<code>LottieAnimationView</code>中把<code>lottieDrawable</code>设置<code>setImageDrawable</code>，</li>
<li>然后开始动画<code>lottieDrawable.playAnimation()</code>。</li>
</ol>
<h2 id="Lottie的性能"><a href="#Lottie的性能" class="headerlink" title="Lottie的性能"></a>Lottie的性能</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.jianshu.com/p/81be1bf9600c" target="_blank" rel="external">http://www.jianshu.com/p/81be1bf9600c</a></p>
]]></content>
    
    <summary type="html">
    
      分析 Lottie 的源码及其实现原理
    
    </summary>
    
      <category term="Android开源项目" scheme="http://yoursite.com/categories/Android%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Lottie" scheme="http://yoursite.com/tags/Lottie/"/>
    
  </entry>
  
  <entry>
    <title>开源项目- Lottie 简介</title>
    <link href="http://yoursite.com/2017/02/07/open-source-lottie-android-introduction/"/>
    <id>http://yoursite.com/2017/02/07/open-source-lottie-android-introduction/</id>
    <published>2017-02-07T02:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>Airbnb在GitHub上面开源了一个项目lottie-android，最近火的不要不要的，牢牢占据Trending排行榜（日、周、月）首位，下面我们就见识一下这个项目。<br>首先放上Lottie在GitHub上面的项目地址：<a href="https://github.com/airbnb/lottie-android" target="_blank" rel="external">Android</a>，<a href="https://github.com/airbnb/lottie-ios" target="_blank" rel="external">iOS</a>, 和<a href="https://github.com/airbnb/lottie-react-native" target="_blank" rel="external">React Native</a>。<br><a id="more"></a></p>
<h2 id="Lottie简介"><a href="#Lottie简介" class="headerlink" title="Lottie简介"></a>Lottie简介</h2><p>Lottie是一个为Android和IOS设备提供的一个开源框架，它能够解析通过<a href="http://www.adobe.com/products/aftereffects.html" target="_blank" rel="external">Adobe After Effects</a> 软件做出来的动画，动画文件通过<a href="https://github.com/bodymovin/bodymovin" target="_blank" rel="external">Bodymovin</a>导出json文件，就可以通过Lottie中的LottieAnimationView来使用了。<br><a href="https://github.com/bodymovin/bodymovin" target="_blank" rel="external">Bodymovin</a>是一个After Effects的插件，它由Hernan Torrisi开发。</p>
<p>我们先看看官方给出的实现的动画效果：</p>
<p><img src="https://raw.githubusercontent.com/airbnb/lottie-android/master/gifs/Example1.gif"></p>
<p><img src="https://raw.githubusercontent.com/airbnb/lottie-android/master/gifs/Example2.gif"></p>
<p><img src="https://raw.githubusercontent.com/airbnb/lottie-android/master/gifs/Example3.gif"></p>
<p><img src="https://raw.githubusercontent.com/airbnb/lottie-android/master/gifs/Community 2_3.gif"></p>
<p><img src="https://raw.githubusercontent.com/airbnb/lottie-android/master/gifs/Example4.gif"></p>
<p>这些动画如果让你实现起来，你可能会觉得很麻烦，但是通过Lottie这一切就变得很容易。<br>想了解更多请参考<a href="http://airbnb.design/introducing-lottie/" target="_blank" rel="external">官方介绍</a></p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>首先由视觉设计师通过Adobe After Effects做好这些动画，这个比我们用代码来实现会容易的很多，然后Bodymovin导出json文件，这些json文件描述了该动画的一些关键点的坐标以及运动轨迹，然后把json文件放到项目的app/src/main/assets目录下，代码中在build.gradle中添加依赖：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">  compile &apos;com.airbnb.android:lottie:1.0.1&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在布局文件上加上：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">com.airbnb.lottie.LottieAnimationView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/animation_view"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">app:lottie_fileName</span>=<span class="string">"hello-world.json"</span></div><div class="line">        <span class="attr">app:lottie_loop</span>=<span class="string">"true"</span></div></pre></td></tr></table></figure></p>
<p>或者代码中实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">LottieAnimationView animationView = (LottieAnimationView) findViewById(R.id.animation_view);</div><div class="line">animationView.setAnimation(<span class="string">"hello-world.json"</span>);</div><div class="line">animationView.loop(<span class="keyword">true</span>);</div></pre></td></tr></table></figure></p>
<p>此方法将加载文件并在后台解析动画，并在完成后异步开始呈现动画。<br>Lottie只支持Jellybean (API 16)或以上版本。<br>通过源码我们可以发现<code>LottieAnimationView</code>是继承自<code>AppCompatImageView</code>，我们可以像使用其他<code>View</code>一样来使用它。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LottieAnimationView animationView = (LottieAnimationView) findViewById(R.id.animation_view);</div></pre></td></tr></table></figure></p>
<p>甚至可以从网络上下载json数据：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">LottieComposition composition = LottieComposition.fromJson(getResources(), jsonObject, (composition) -&gt; &#123;</div><div class="line">    animationView.setComposition(composition);</div><div class="line">    animationView.playAnimation();</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>或者使用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setAnimation(JSONObject);</div></pre></td></tr></table></figure></p>
<p>我们还可以控制动画或者添加监听器：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">animationView.addAnimatorUpdateListener((animation) -&gt; &#123;</div><div class="line">    <span class="comment">// Do something.</span></div><div class="line">&#125;);</div><div class="line">animationView.playAnimation();</div><div class="line">...</div><div class="line"><span class="keyword">if</span> (animationView.isAnimating()) &#123;</div><div class="line">    <span class="comment">// Do something.</span></div><div class="line">&#125;</div><div class="line">...</div><div class="line">animationView.setProgress(<span class="number">0.5f</span>);</div><div class="line">...</div><div class="line"><span class="comment">// Custom animation speed or duration.</span></div><div class="line">ValueAnimator animator = ValueAnimator.ofFloat(<span class="number">0f</span>, <span class="number">1f</span>)</div><div class="line">    .setDuration(<span class="number">500</span>);</div><div class="line">animator.addUpdateListener(animation -&gt; &#123;</div><div class="line">    animationView.setProgress(animation.getAnimatedValue());</div><div class="line">&#125;);</div><div class="line">animator.start();</div><div class="line">...</div><div class="line">animationView.cancelAnimation();</div></pre></td></tr></table></figure></p>
<p><code>LottieAnimationView</code>是使用<code>LottieDrawable</code>来渲染动画的，如果有必要，还可以直接使用<code>LottieDrawable</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">LottieDrawable drawable = <span class="keyword">new</span> LottieDrawable();</div><div class="line">LottieComposition.fromAssetFileName(getContext(), <span class="string">"hello-world.json"</span>, (composition) -&gt; &#123;</div><div class="line">    drawable.setComposition(composition);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>如果动画会被频繁的复用，<code>LottieAnimationView</code>有一套缓存策略，可以使用<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LottieAnimationView#setAnimation(String, CacheStrategy)</div></pre></td></tr></table></figure></p>
<p>来实现它，<code>CacheStrategy</code>可以是<code>Strong</code>，<code>Weak</code>或者是<code>None</code>，这样<code>LottieAnimationView</code>就可以持有一个已经加载和解析动画的强引用或者弱引用。</p>
<p>先简单介绍到这里，如需要了解更多请看<a href="http://www.heqiangfly.com/2017/02/07/open-source-lottie-android-source-code-analysis/" target="_blank" rel="external">Lottie的源码分析</a>。</p>
]]></content>
    
    <summary type="html">
    
      介绍lottie-android的基本用法
    
    </summary>
    
      <category term="Android开源项目" scheme="http://yoursite.com/categories/Android%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Lottie" scheme="http://yoursite.com/tags/Lottie/"/>
    
  </entry>
  
  <entry>
    <title>React Native封装原生UI组件</title>
    <link href="http://yoursite.com/2017/01/15/react-native-native-ui-component/"/>
    <id>http://yoursite.com/2017/01/15/react-native-native-ui-component/</id>
    <published>2017-01-15T02:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>在React Native开发过程中，有时我们想要使用原生的一个UI组件或者是JS比较难以实现的动画效果时，我们可以在React Naitve应用程序中封装和植入已有的原生组件。<br>比如开源项目<a href="https://github.com/airbnb/lottie-android" target="_blank" rel="external">Lottie</a>在Android上能够非常简单的实现一些复杂的动画效果，如果我们想在JS中也实现这样的效果呢？很简单，我们可以自己构建一个原生UI组件。<br><a id="more"></a><br>接下来就以此为例来进行介绍。Lottie官方已经提供了<a href="https://github.com/airbnb/lottie-react-native" target="_blank" rel="external">React Native版本的Lottie</a>了，但这里我们作为例子再来介绍一下。<br><a href="http://reactnative.cn/docs/0.42/native-component-android.html#content" target="_blank" rel="external">官方中文文档</a><br>先看一下效果图：<br><img src="/images/react-native-native-ui-compent/lottie.gif" width="360" height="620"></p>
<h2 id="封装组件"><a href="#封装组件" class="headerlink" title="封装组件"></a>封装组件</h2><h3 id="创建ViewManager的子类"><a href="#创建ViewManager的子类" class="headerlink" title="创建ViewManager的子类"></a>创建ViewManager的子类</h3><p>创建<code>LottieViewManager</code>类，并实现<code>getName()</code>和<code>createViewInstance</code>方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LottieViewManager</span> <span class="keyword">extends</span> <span class="title">SimpleViewManager</span>&lt;<span class="title">LottieAnimationView</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REACT_CLASS = <span class="string">"LottieAnimationView"</span>;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> REACT_CLASS;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> LottieAnimationView <span class="title">createViewInstance</span><span class="params">(ThemedReactContext reactContext)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LottieAnimationView(reactContext);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="导出属性的设置方法"><a href="#导出属性的设置方法" class="headerlink" title="导出属性的设置方法"></a>导出属性的设置方法</h3><p>要导出给JavaScript使用的属性，需要申明带有<code>@ReactProp</code>（或<code>@ReactPropGroup</code>）注解的设置方法。方法的第一个参数是要修改属性的视图实例，第二个参数是要设置的属性值。方法的返回值类型必须为<code>void</code>，而且访问控制必须被声明为<code>public</code>。JavaScript所得知的属性类型会由该方法第二个参数的类型来自动决定。支持的类型有：<code>boolean</code>, <code>int</code>, <code>float</code>, <code>double</code>, <code>String</code>, <code>Boolean</code>, <code>Integer</code>, <code>ReadableArray</code>, <code>ReadableMap</code>。<br><code>@ReactProp</code>注解必须包含一个字符串类型的参数<code>name</code>。这个参数指定了对应属性在JavaScript端的名字。<br>除了<code>name</code>，<code>@ReactProp</code>注解还接受这些可选的参数：<code>defaultBoolean</code>, <code>defaultInt</code>, <code>defaultFloat</code>。这些参数必须是对应的基础类型的值（也就是<code>boolean</code>, <code>int</code>, <code>float</code>），这些值会被传递给<code>setter</code>方法，以免JavaScript端某些情况下在组件中移除了对应的属性。注意这个”默认”值只对基本类型生效，对于其他的类型而言，当对应的属性删除时，<code>null</code>会作为默认值提供给方法。<br>使用<code>@ReactPropGroup</code>来注解的设置方法和<code>@ReactProp</code>不同。请参见<code>@ReactPropGroup</code>注解类源代码中的文档来获取更多详情。<br><strong>注意</strong>： 在ReactJS里，修改一个属性会引发一次对设置方法的调用。有一种修改情况是，移除掉之前设置的属性。在这种情况下设置方法也一样会被调用，并且“默认”值会被作为参数提供（对于基础类型来说可以通过<code>defaultBoolean</code>、<code>defaultFloat</code>等<code>@ReactProp</code>的属性提供，而对于复杂类型来说参数则会设置为<code>null</code>）<br>在<code>LottieViewManager</code>中创建以下方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ReactProp</span>(name = <span class="string">"sourceName"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSourceName</span><span class="params">(LottieAnimationView view, String name)</span> </span>&#123;</div><div class="line">    view.setAnimation(name);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@ReactProp</span>(name = <span class="string">"progress"</span>, defaultFloat = <span class="number">0f</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProgress</span><span class="params">(LottieAnimationView view, <span class="keyword">float</span> progress)</span> </span>&#123;</div><div class="line">    view.setProgress(progress);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@ReactProp</span>(name = <span class="string">"loop"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoop</span><span class="params">(LottieAnimationView view, <span class="keyword">boolean</span> loop)</span> </span>&#123;</div><div class="line">    view.loop(loop);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里方法名可以随意定，但是<code>@ReactProp(name = &quot;loop&quot;)</code>一定要和JS里面调用的属性值对应。</p>
<h3 id="导出一些命令"><a href="#导出一些命令" class="headerlink" title="导出一些命令"></a>导出一些命令</h3><p>在<code>LottieViewManager</code>中添加以下方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COMMAND_PLAY = <span class="number">1</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COMMAND_RESET = <span class="number">2</span>;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Integer&gt; <span class="title">getCommandsMap</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> MapBuilder.of(</div><div class="line">            <span class="string">"play"</span>, COMMAND_PLAY,</div><div class="line">            <span class="string">"reset"</span>, COMMAND_RESET</div><div class="line">    );</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveCommand</span><span class="params">(<span class="keyword">final</span> LottieAnimationView view, <span class="keyword">int</span> commandId, @Nullable ReadableArray args)</span> </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (commandId) &#123;</div><div class="line">        <span class="keyword">case</span> COMMAND_PLAY: &#123;</div><div class="line">            <span class="keyword">new</span> Handler(Looper.getMainLooper()).post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">if</span> (ViewCompat.isAttachedToWindow(view)) &#123;</div><div class="line">                        view.setProgress(<span class="number">0f</span>);</div><div class="line">                        view.playAnimation();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> COMMAND_RESET: &#123;</div><div class="line">            <span class="keyword">new</span> Handler(Looper.getMainLooper()).post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">if</span> (ViewCompat.isAttachedToWindow(view)) &#123;</div><div class="line">                        view.cancelAnimation();</div><div class="line">                        view.setProgress(<span class="number">0f</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在js文件可以通过<code>this.runCommand(&#39;play&#39;)</code>来调用。</p>
<h3 id="注册ViewManager"><a href="#注册ViewManager" class="headerlink" title="注册ViewManager"></a>注册ViewManager</h3><p>实现<code>ReactPackage</code>的子类<code>LottiePackage</code>，这和<a href="http://www.heqiangfly.com/2017/01/14/react-native-native-modules/" target="_blank" rel="external">原生模块的注册方法</a>类似，唯一的区别是我们把它放到<code>createViewManagers</code>方法里：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LottiePackage</span> <span class="keyword">implements</span> <span class="title">ReactPackage</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;NativeModule&gt; <span class="title">createNativeModules</span><span class="params">(ReactApplicationContext reactContext)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Collections.emptyList();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> List&lt;Class&lt;? extends JavaScriptModule&gt;&gt; createJSModules() &#123;</div><div class="line">        <span class="keyword">return</span> Collections.emptyList();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;ViewManager&gt; <span class="title">createViewManagers</span><span class="params">(ReactApplicationContext reactContext)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Arrays.&lt;ViewManager&gt;asList(</div><div class="line">                <span class="keyword">new</span> LottieViewManager()</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="添加组件"><a href="#添加组件" class="headerlink" title="添加组件"></a>添加组件</h3><p>在<code>Application</code>的<code>getPackages()</code>方法中添加模块：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> List&lt;ReactPackage&gt; <span class="title">getPackages</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> Arrays.&lt;ReactPackage&gt;asList(</div><div class="line">            <span class="keyword">new</span> MainReactPackage(), <span class="keyword">new</span> LottiePackage()</div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>或者是在<code>Activity</code>的<code>onCreate</code>中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    mReactRootView = <span class="keyword">new</span> ReactRootView(<span class="keyword">this</span>);</div><div class="line">    mReactInstanceManager = ReactInstanceManager.builder()</div><div class="line">            .setApplication(getApplication())</div><div class="line">            .setBundleAssetName(<span class="string">"index.android.bundle"</span>)</div><div class="line">            .setJSMainModuleName(<span class="string">"index.android"</span>)</div><div class="line">            .addPackage(<span class="keyword">new</span> MainReactPackage())</div><div class="line">            .addPackage(<span class="keyword">new</span> LottiePackage())</div><div class="line">            .setUseDeveloperSupport(BuildConfig.DEBUG)</div><div class="line">            .setInitialLifecycleState(LifecycleState.RESUMED)</div><div class="line">            .build();</div><div class="line">    mReactRootView.startReactApplication(mReactInstanceManager, <span class="string">"HelloWorld"</span>, <span class="keyword">null</span>);</div><div class="line">    setContentView(mReactRootView);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="实现对应的JavaScript模块"><a href="#实现对应的JavaScript模块" class="headerlink" title="实现对应的JavaScript模块"></a>实现对应的JavaScript模块</h3><p>创建Lottie.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; PropTypes &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; </div><div class="line">    requireNativeComponent, </div><div class="line">    View,</div><div class="line">    UIManager,</div><div class="line">    findNodeHandle,</div><div class="line">    ReactNative,</div><div class="line">    Platform &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>; </div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">var LottieView = &#123;</div><div class="line">  name: 'LottieView',</div><div class="line">  defaultProps: &#123;</div><div class="line">   progress: 0,</div><div class="line">   loop: true,</div><div class="line">  &#125;,</div><div class="line">  propTypes: &#123;</div><div class="line">      sourceName :PropTypes.string,</div><div class="line">      progress: PropTypes.number,</div><div class="line">      loop: PropTypes.bool,</div><div class="line">    ...View.propTypes // 包含默认的View的属性</div><div class="line">  &#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line">module.exports = requireNativeComponent('LottieAnimationView', LottieView);</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="keyword">const</span> Lottie = requireNativeComponent(<span class="string">'LottieAnimationView'</span>, LottieView);</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LottieView</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  play() &#123;</div><div class="line">    <span class="keyword">this</span>.runCommand(<span class="string">'play'</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  reset() &#123;</div><div class="line">    <span class="keyword">this</span>.runCommand(<span class="string">'reset'</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  runCommand(name, args = []) &#123;</div><div class="line">    <span class="keyword">return</span> Platform.select(&#123;</div><div class="line">      <span class="attr">android</span>: <span class="function"><span class="params">()</span> =&gt;</span> UIManager.dispatchViewManagerCommand(</div><div class="line">        <span class="keyword">this</span>.getHandle(),</div><div class="line">        UIManager.LottieAnimationView.Commands[name],</div><div class="line">        args</div><div class="line">      ),</div><div class="line">      <span class="attr">ios</span>: <span class="function"><span class="params">()</span> =&gt;</span> LottieViewManager[name](<span class="keyword">this</span>.getHandle(), ...args),</div><div class="line">    &#125;)();</div><div class="line">  &#125;</div><div class="line">  getHandle() &#123;</div><div class="line">      <span class="keyword">return</span> findNodeHandle(<span class="keyword">this</span>.refs.lottieView);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Lottie</span> <span class="attr">ref</span>=<span class="string">"lottieView"</span> &#123;<span class="attr">...this.props</span>&#125; <span class="attr">loop</span>=<span class="string">&#123;true&#125;</span> /&gt;</span>;</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">module.exports = LottieView;</div></pre></td></tr></table></figure></p>
<p><code>UIManager.dispatchViewManagerCommand</code>把调用命令分发到Native端对应的组件类型的ViewManager，再通过ViewManager调用View组件实例的对应方法，这部分后面再介绍。</p>
<h2 id="调用组件"><a href="#调用组件" class="headerlink" title="调用组件"></a>调用组件</h2><p>在index.android.js里面调用：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> LottieView <span class="keyword">from</span> <span class="string">'./Lottie'</span></div><div class="line">……</div><div class="line">  onClicked()&#123;</div><div class="line">    <span class="keyword">this</span>.refs.lottie.play();</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">TouchableWithoutFeedback</span> <span class="attr">onPress</span>=<span class="string">&#123;()</span> =&gt;</span> this.onClicked()&#125;&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.lottieContainer&#125;</span> &gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">LottieView</span> <span class="attr">ref</span>=<span class="string">"lottie"</span> <span class="attr">style</span>=<span class="string">&#123;styles.lottie&#125;</span> <span class="attr">sourceName</span>=<span class="string">'LogoSmall.json'</span> <span class="attr">loop</span>=<span class="string">&#123;true&#125;</span>&gt;</span>  </div><div class="line">          <span class="tag">&lt;/<span class="name">LottieView</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">TouchableWithoutFeedback</span>&gt;</span></div><div class="line"></div><div class="line">    )</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>LogoSmall.json 文件可以从LottieAndroid的源码中获取，<a href="https://github.com/airbnb/lottie-android/blob/master/LottieSample/src/main/assets/Logo/LogoSmall.json" target="_blank" rel="external">点击这里</a>，放在 src/main/assets 即可。</p>
]]></content>
    
    <summary type="html">
    
      介绍如何在React Native中封装和调用Android原生UI组件
    
    </summary>
    
      <category term="React Native" scheme="http://yoursite.com/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="http://yoursite.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>React Native创建原生模块</title>
    <link href="http://yoursite.com/2017/01/14/react-native-native-modules/"/>
    <id>http://yoursite.com/2017/01/14/react-native-native-modules/</id>
    <published>2017-01-14T04:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>在React Native开发过程中，有时候我们可能需要访问平台的API，但React Native还没有相应的实现，或者是React Native还不支持一些原生的属性，我们需要调用原生代码来实现，或者是我们需要复用一些原来的Java代码，这个时候我们就需要创建一个原生模块来自己实现对我们需要功能的封装。<br><a id="more"></a><br>可以参考<a href="https://facebook.github.io/react-native/docs/native-modules-android.html" target="_blank" rel="external">官方文档</a>或<a href="http://reactnative.cn/docs/0.41/native-modules-android.html#content" target="_blank" rel="external">中文文档</a>。</p>
<h2 id="开发模块"><a href="#开发模块" class="headerlink" title="开发模块"></a>开发模块</h2><h3 id="实现模块"><a href="#实现模块" class="headerlink" title="实现模块"></a>实现模块</h3><p>下面我们就通过实现一个自定义模块，来熟悉编写原生模块需要用的一些知识。该模块主要实现调用一些Android原生的功能，比如弹<code>Toast</code>，启动<code>Activity</code>等。<br>我们首先来创建一个原生模块。一个原生模块是一个继承了 <code>ReactContextBaseJavaModule</code> 的Java类，它有一个必须实现的方法<code>getName()</code>，它返回一个字符串名字，在JS中我们就使用这个名字调用这个模块；还有构造函数<code>NativeModule</code>。<br>然后在这个类里面实现我们需要实现的方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyNativeModule</span> <span class="keyword">extends</span> <span class="title">ReactContextBaseJavaModule</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String MODULE_NAME = <span class="string">"MyNativeModule"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span>  String TestEvent = <span class="string">"TestEvent"</span>;</div><div class="line">    <span class="keyword">private</span> ReactApplicationContext mContext;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyNativeModule</span><span class="params">(ReactApplicationContext reactContext)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(reactContext);</div><div class="line">        mContext = reactContext;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> MODULE_NAME;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getConstants</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Map&lt;String, Object&gt; constants = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        constants.put(<span class="string">"SHORT"</span>, Toast.LENGTH_SHORT);</div><div class="line">        constants.put(<span class="string">"LONG"</span>, Toast.LENGTH_LONG);</div><div class="line">        constants.put(<span class="string">"NATIVE_MODULE_NAME"</span>, MODULE_NAME);</div><div class="line">        constants.put(TestEvent, TestEvent);</div><div class="line">        <span class="keyword">return</span> constants;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ReactMethod</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivity</span><span class="params">()</span></span>&#123;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(mContext,SecondActivity.class);</div><div class="line">        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class="line">        mContext.startActivity(intent);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ReactMethod</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showToast</span><span class="params">(String msg, <span class="keyword">int</span> duration)</span></span>&#123;</div><div class="line">        Toast.makeText(mContext, msg, duration).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>React Native调用的方法需要使用@ReactMethod注解。<br>方法的返回类型必须为void。</p>
<h4 id="参数类型"><a href="#参数类型" class="headerlink" title="参数类型"></a>参数类型</h4><p>原生Java数据类型和JS数据类型的映射关系：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Boolean -&gt; Bool</div><div class="line">Integer -&gt; Number</div><div class="line">Double -&gt; Number</div><div class="line">Float -&gt; Number</div><div class="line">String -&gt; String</div><div class="line">Callback -&gt; function</div><div class="line">ReadableMap -&gt; Object</div><div class="line">ReadableArray -&gt; Array</div></pre></td></tr></table></figure></p>
<p>详情参考：<a href="https://github.com/facebook/react-native/blob/master/ReactAndroid/src/main/java/com/facebook/react/bridge/ReadableMap.java" target="_blank" rel="external">ReadableMap</a>和<a href="https://github.com/facebook/react-native/blob/master/ReactAndroid/src/main/java/com/facebook/react/bridge/ReadableArray.java" target="_blank" rel="external">ReadableArray</a></p>
<h4 id="导出常量"><a href="#导出常量" class="headerlink" title="导出常量"></a>导出常量</h4><p>可以实现<code>getContants</code>方法导出需要给JavaScript使用的常量。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Nullable</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getConstants</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Map&lt;String, Object&gt; constants = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    constants.put(<span class="string">"SHORT"</span>, Toast.LENGTH_SHORT);</div><div class="line">    constants.put(<span class="string">"LONG"</span>, Toast.LENGTH_LONG);</div><div class="line">    constants.put(<span class="string">"NATIVE_MODULE_NAME"</span>, MODULE_NAME);</div><div class="line">    constants.put(TestEvent, TestEvent);</div><div class="line">    <span class="keyword">return</span> constants;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="注册模块"><a href="#注册模块" class="headerlink" title="注册模块"></a>注册模块</h3><p>然后我还要注册这个模块，通过实现<code>ReactPackage</code>接口来实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyReactPackage</span> <span class="keyword">implements</span> <span class="title">ReactPackage</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;NativeModule&gt; <span class="title">createNativeModules</span><span class="params">(ReactApplicationContext reactContext)</span> </span>&#123;</div><div class="line">        List&lt;NativeModule&gt; modules = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        modules.add(<span class="keyword">new</span> MyNativeModule(reactContext));</div><div class="line">        <span class="keyword">return</span> modules;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> List&lt;Class&lt;? extends JavaScriptModule&gt;&gt; createJSModules() &#123;</div><div class="line">        <span class="keyword">return</span> Collections.emptyList();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;ViewManager&gt; <span class="title">createViewManagers</span><span class="params">(ReactApplicationContext reactContext)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Collections.emptyList();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="添加模块"><a href="#添加模块" class="headerlink" title="添加模块"></a>添加模块</h3><p>在<code>Application</code>的<code>getPackages()</code>方法中添加模块：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> List&lt;ReactPackage&gt; <span class="title">getPackages</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> Arrays.&lt;ReactPackage&gt;asList(</div><div class="line">            <span class="keyword">new</span> MainReactPackage(), <span class="keyword">new</span> MyReactPackage()</div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>或者是在<code>Activity</code>的<code>onCreate</code>中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    mReactRootView = <span class="keyword">new</span> ReactRootView(<span class="keyword">this</span>);</div><div class="line">    mReactInstanceManager = ReactInstanceManager.builder()</div><div class="line">            .setApplication(getApplication())</div><div class="line">            .setBundleAssetName(<span class="string">"index.android.bundle"</span>)</div><div class="line">            .setJSMainModuleName(<span class="string">"index.android"</span>)</div><div class="line">            .addPackage(<span class="keyword">new</span> MainReactPackage())</div><div class="line">            .addPackage(<span class="keyword">new</span> MyReactPackage())</div><div class="line">            .setUseDeveloperSupport(BuildConfig.DEBUG)</div><div class="line">            .setInitialLifecycleState(LifecycleState.RESUMED)</div><div class="line">            .build();</div><div class="line">    mReactRootView.startReactApplication(mReactInstanceManager, <span class="string">"HelloWorld"</span>, <span class="keyword">null</span>);</div><div class="line">    setContentView(mReactRootView);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="封装模块"><a href="#封装模块" class="headerlink" title="封装模块"></a>封装模块</h3><p>为了使JavaScript端访问起来更为方便，通常我们都会把原生模块封装成一个JavaScript模块。在<code>index.android.js</code>文件的同一目录下面创建一个MyNativeModule.js。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; NativeModules &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>; </div><div class="line"></div><div class="line"><span class="comment">// 这里的MyNativeModule必须对应</span></div><div class="line"><span class="comment">// public String getName()中返回的字符串</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> NativeModules.MyNativeModule;</div></pre></td></tr></table></figure></p>
<h3 id="调用模块"><a href="#调用模块" class="headerlink" title="调用模块"></a>调用模块</h3><p>现在，在别处的JavaScript代码中可以这样调用你的方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> MyNativeModule <span class="keyword">from</span> <span class="string">'./MyNativeModule'</span>; </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  startActivity()&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"MODULE NAME: "</span>,MyNativeModule.NATIVE_MODULE_NAME);</div><div class="line">    MyNativeModule.startActivity();</div><div class="line">  &#125;</div><div class="line">  showToast()&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"MODULE NAME: "</span>,MyNativeModule.NATIVE_MODULE_NAME);</div><div class="line">    MyNativeModule.showToast(<span class="string">"From JS"</span>, MyNativeModule.LONG);</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">TouchableOpacity</span> <span class="attr">onPress</span>=<span class="string">&#123;this.startActivity&#125;</span>&gt;</span>  </div><div class="line">          <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.hello&#125;</span>&gt;</span>start Activity<span class="tag">&lt;/<span class="name">Text</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;/<span class="name">TouchableOpacity</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="其他特性"><a href="#其他特性" class="headerlink" title="其他特性"></a>其他特性</h2><p>React Native的跨语言访问是异步进行的，所以想要给JavaScript返回一个值的唯一办法是使用回调函数或者发送事件。</p>
<h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>原生模块还支持一种特殊的参数——回调函数。它提供了一个函数来把返回值传回给JS。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ReactMethod</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCallback</span><span class="params">(<span class="keyword">int</span> para1, <span class="keyword">int</span> para2, Callback resultCallback)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> result = para1 + para2;</div><div class="line">    resultCallback.invoke(result);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以在JS中调用：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">testCallback()&#123;</div><div class="line">  MyNativeModule.testCallback(<span class="number">100</span>,<span class="number">100</span>,(result) =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"result: "</span>,result); <span class="comment">//'result: ', 200</span></div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>原生模块通常只应调用回调函数一次。但是，它可以保存callback并在将来调用。<br>callback并非在对应的原生函数返回后立即被执行——注意跨语言通讯是异步的，这个执行过程会通过消息循环来进行。</p>
<h3 id="发送事件到JavaScript"><a href="#发送事件到JavaScript" class="headerlink" title="发送事件到JavaScript"></a>发送事件到JavaScript</h3><p>原生模块可以在没有被调用的情况下往JavaScript发送事件通知。最简单的办法就是通过<code>RCTDeviceEventEmitter</code>，这可以通过<code>ReactContext</code>来获得对应的引用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendEvent</span><span class="params">()</span></span>&#123;</div><div class="line">    WritableMap params = Arguments.createMap();</div><div class="line">    params.putString(<span class="string">"module"</span>, <span class="string">"MyNativeModule"</span>);</div><div class="line">    mContext</div><div class="line">            .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)</div><div class="line">            .emit(TestEvent, params);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在JS中这样调用：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; DeviceEventEmitter &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line">......</div><div class="line">  componentWillMount() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"componentWillMount"</span>);</div><div class="line">    <span class="comment">//接收事件</span></div><div class="line">    DeviceEventEmitter.addListener(MyNativeModule.TestEvent, info =&gt; &#123;</div><div class="line">      <span class="built_in">console</span>.log(info);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>如果对ES6的<code>Promise</code>对象不太熟悉的话，可以点<a href="http://es6.ruanyifeng.com/#docs/promise" target="_blank" rel="external">这里</a>进行了解。<br>原生模块还可以使用<code>promise</code>来简化代码，搭配ES2016(ES7)标准的<code>async/await</code>语法则效果更佳。如果桥接原生方法的最后一个参数是一个<code>Promise</code>，则对应的JS方法就会返回一个<code>Promise</code>对象。<br><code>Promise</code>是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理和更强大。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ReactMethod</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPromise</span><span class="params">(Boolean isResolve, Promise promise)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(isResolve) &#123;</div><div class="line">        promise.resolve(isResolve.toString());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        promise.reject(isResolve.toString());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在JS中调用：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">testPromise()&#123;</div><div class="line">  MyNativeModule.testPromise(<span class="literal">true</span>)</div><div class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"result1 is "</span>, result);</div><div class="line">  &#125;)</div><div class="line">  .catch(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"result2 is "</span>, result);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里可以用<code>then</code>方法分别指定<code>Resolved</code>状态和<code>Reject</code>状态的回调函数。第一个回调函数是<code>Promise</code>对象的状态变为<code>Resolved</code>时调用，第二个回调函数是<code>Promise</code>对象的状态变为<code>Reject</code>时调用。其中，第二个函数是可选的，不一定要提供。<br><code>catch</code>方法用于指定发生错误时的回调函数。<br>结果：<code>&#39;result1 is &#39;, &#39;true&#39;</code></p>
<h3 id="从startActivityForResult中获取结果"><a href="#从startActivityForResult中获取结果" class="headerlink" title="从startActivityForResult中获取结果"></a>从startActivityForResult中获取结果</h3><p>参考<a href="http://reactnative.cn/docs/0.41/native-modules-android.html#content" target="_blank" rel="external">官方文档</a></p>
<h3 id="监听生命周期"><a href="#监听生命周期" class="headerlink" title="监听生命周期"></a>监听生命周期</h3><p>监听activity的生命周期事件（比如<code>onResume</code>, <code>onPause</code>等等），模块必须实现<code>LifecycleEventListener</code>，然后需要在构造函数中注册一个监听函数：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyNativeModule</span><span class="params">(ReactApplicationContext reactContext)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(reactContext);</div><div class="line">    mContext = reactContext;</div><div class="line">    <span class="comment">//添加监听</span></div><div class="line">    reactContext.addLifecycleEventListener(<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>实现<code>LifecycleEventListener</code>的几个接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onHostResume</span><span class="params">()</span> </span>&#123;</div><div class="line">    Log.e(MODULE_NAME, <span class="string">"onHostResume"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onHostPause</span><span class="params">()</span> </span>&#123;</div><div class="line">    Log.e(MODULE_NAME, <span class="string">"onHostPause"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onHostDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">    Log.e(MODULE_NAME, <span class="string">"onHostDestroy"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后就可以监听ReactNative应用的生命周期了。</p>
]]></content>
    
    <summary type="html">
    
      介绍在React Native中创建Android原生模块的方法，实现调用Android原生模块的功能
    
    </summary>
    
      <category term="React Native" scheme="http://yoursite.com/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="http://yoursite.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>Android项目中集成React Native</title>
    <link href="http://yoursite.com/2017/01/14/react-native-integration-with-existing-apps/"/>
    <id>http://yoursite.com/2017/01/14/react-native-integration-with-existing-apps/</id>
    <published>2017-01-14T02:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>React Native是非常强大的，但有的时候我们可能并不需要从0开始去开发一个React Native应用，而是需要把它集成到我们现有的Android工程中去，去添加单个的React Native View。本章将主要介绍在原生Android中集成React Native。<br><a id="more"></a><br>可以参考<a href="http://facebook.github.io/react-native/releases/next/docs/integration-with-existing-apps.html" target="_blank" rel="external">官方文档</a>或<a href="http://reactnative.cn/docs/0.41/integration-with-existing-apps.html#content" target="_blank" rel="external">中文文档</a>。</p>
<h2 id="创建Android工程"><a href="#创建Android工程" class="headerlink" title="创建Android工程"></a>创建Android工程</h2><p>新建一个ReactNativeDemo的Android工程作为已有的工程。这部分步骤略过……</p>
<h2 id="集成-React-Native"><a href="#集成-React-Native" class="headerlink" title="集成 React Native"></a>集成 React Native</h2><h3 id="添加JS到App中"><a href="#添加JS到App中" class="headerlink" title="添加JS到App中"></a>添加JS到App中</h3><p>进入工程根目录执行以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm init</div><div class="line">npm install --save react react-native</div><div class="line">curl -o .flowconfig https://raw.githubusercontent.com/facebook/react-native/master/.flowconfig</div></pre></td></tr></table></figure></p>
<p><code>npm init</code>命令是根据提示生成 package.json 文件的。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">This utility will walk you through creating a package.json file.</div><div class="line">It only covers the most common items, and tries to guess sensible defaults.</div><div class="line"></div><div class="line">See `npm help json` for definitive documentation on these fields</div><div class="line">and exactly what they do.</div><div class="line"></div><div class="line">Use `npm install &lt;pkg&gt; --save` afterwards to install a package and</div><div class="line">save it as a dependency in the package.json file.</div><div class="line"></div><div class="line">Press ^C at any time to quit.</div><div class="line">name: (ReactNativeDemo) reactnativedemo</div><div class="line">version: (1.0.0) 1.0.0</div><div class="line">description: react native app demo</div><div class="line">entry point: (index.js) index.android.js</div><div class="line">test command: </div><div class="line">git repository: </div><div class="line">keywords: </div><div class="line">author: hq</div><div class="line">license: (ISC) </div><div class="line">About to write to /home/heqiang/react-native-workspace/ReactNativeDemo/package.json:</div><div class="line"></div><div class="line">&#123;</div><div class="line">  "name": "reactnativedemo",</div><div class="line">  "version": "1.0.0",</div><div class="line">  "description": "react native app demo",</div><div class="line">  "main": "index.android.js",</div><div class="line">  "scripts": &#123;</div><div class="line">    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1"</div><div class="line">  &#125;,</div><div class="line">  "author": "hq",</div><div class="line">  "license": "ISC"</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">Is this ok? (yes)</div></pre></td></tr></table></figure></p>
<p><code>npm install --save react react-native</code>命令是安装React Native依赖的模块，在根目录下生成<code>node_modules</code>。这个下载过程比较慢，如果其他工程下面有，复制过来也是可以的。<br><code>curl</code>用来下载.flowconfig文件</p>
<p>在<code>package.json</code>文件中添加下面语句：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">"start": "node node_modules/react-native/local-cli/cli.js start"</div></pre></td></tr></table></figure></p>
<p>现在的<code>package.json</code>是这样的：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"reactnativedemo"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">"react native app demo"</span>,</div><div class="line">  <span class="attr">"main"</span>: <span class="string">"index.android.js"</span>,</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"start"</span>: <span class="string">"node node_modules/react-native/local-cli/cli.js start"</span>,</div><div class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"author"</span>: <span class="string">"hq"</span>,</div><div class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</div><div class="line">  <span class="attr">"dependencies"</span>: &#123;</div><div class="line">    <span class="attr">"react"</span>: <span class="string">"^15.4.2"</span>,</div><div class="line">    <span class="attr">"react-native"</span>: <span class="string">"^0.41.2"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>创建<code>index.android.js</code>文件：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.hello&#125;</span>&gt;</span>Hello, World<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> styles = StyleSheet.create(&#123;</div><div class="line">  <span class="attr">container</span>: &#123;</div><div class="line">    <span class="attr">flex</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">justifyContent</span>: <span class="string">'center'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">hello</span>: &#123;</div><div class="line">    <span class="attr">fontSize</span>: <span class="number">20</span>,</div><div class="line">    <span class="attr">textAlign</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">margin</span>: <span class="number">10</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line">AppRegistry.registerComponent(<span class="string">'HelloWorld'</span>, () =&gt; HelloWorld);</div></pre></td></tr></table></figure></p>
<h3 id="工程配置"><a href="#工程配置" class="headerlink" title="工程配置"></a>工程配置</h3><p>在App的<code>build.gradle</code>中加入以下依赖：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line"> ...</div><div class="line"> compile &quot;com.facebook.react:react-native:+&quot; // From node_modules.</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在工程的<code>build.gradle</code>中加入以下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">allprojects &#123;</div><div class="line"> repositories &#123;</div><div class="line">     ...</div><div class="line">     maven &#123;</div><div class="line">         // All of React Native (JS, Android binaries) is installed from npm</div><div class="line">         url &quot;$rootDir/node_modules/react-native/android&quot;</div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line"> ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果sync过程中出现下面的错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Error:Execution failed for task &apos;:app:prepareDebugAndroidTestDependencies&apos;.</div></pre></td></tr></table></figure></p>
<p>参考<a href="http://stackoverflow.com/questions/30558737/execution-failed-for-task-apppreparedebugandroidtestdependencies" target="_blank" rel="external">这里</a>，在App的<code>build.gradle</code>中加入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">configurations.all &#123;</div><div class="line">    resolutionStrategy.force &apos;com.google.code.findbugs:jsr305:3.0.1&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在<code>AndroidManifest.xml</code>中加入网络权限：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="添加Native-Code"><a href="#添加Native-Code" class="headerlink" title="添加Native Code"></a>添加Native Code</h3><p>下面将修改原生代码，实现嵌入React Native功能。</p>
<h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>官方文档的做法，首先就是Activity实现DefaultHardwareBackBtnHandler接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">DefaultHardwareBackBtnHandler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ReactRootView mReactRootView;</div><div class="line">    <span class="keyword">private</span> ReactInstanceManager mReactInstanceManager;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        mReactRootView = <span class="keyword">new</span> ReactRootView(<span class="keyword">this</span>);</div><div class="line">        mReactInstanceManager = ReactInstanceManager.builder()</div><div class="line">                .setApplication(getApplication())</div><div class="line">                .setBundleAssetName(<span class="string">"index.android.bundle"</span>)</div><div class="line">                .setJSMainModuleName(<span class="string">"index.android"</span>)</div><div class="line">                .addPackage(<span class="keyword">new</span> MainReactPackage())</div><div class="line">                .setUseDeveloperSupport(BuildConfig.DEBUG)</div><div class="line">                .setInitialLifecycleState(LifecycleState.RESUMED)</div><div class="line">                .build();</div><div class="line">        mReactRootView.startReactApplication(mReactInstanceManager, <span class="string">"HelloWorld"</span>, <span class="keyword">null</span>);</div><div class="line">        setContentView(mReactRootView);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invokeDefaultOnBackPressed</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onBackPressed();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>新版本中可以用下面的方法，更简单：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">ReactActivity</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the name of the main component registered from JavaScript.</div><div class="line">     * This is used to schedule rendering of the component.</div><div class="line">     */</div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getMainComponentName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"HelloWorld"</span>; <span class="comment">//这个是在AppRegistry.registerComponent里面注册的。</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>但这个方法需要我们自定义一个Application否则 运行时会报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java.lang.RuntimeException: Unable to start activity ComponentInfo&#123;com.android.hq.reactnativedemo/com.android.hq.reactnativedemo.MainActivity&#125;: java.lang.ClassCastException: android.app.Application cannot be cast to com.facebook.react.ReactApplication</div></pre></td></tr></table></figure></p>
<p>Application的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> <span class="keyword">extends</span> <span class="title">android</span>.<span class="title">app</span>.<span class="title">Application</span> <span class="keyword">implements</span> <span class="title">ReactApplication</span>  </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReactNativeHost mReactNativeHost = <span class="keyword">new</span> ReactNativeHost(<span class="keyword">this</span>) &#123;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 是否支持开发模式，如果支持就返回true，此时需要打开悬浮窗权限。</div><div class="line">         * 不支持的话就返回false</div><div class="line">         * <span class="doctag">@return</span></div><div class="line">         */</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getUseDeveloperSupport</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> BuildConfig.DEBUG;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> List&lt;ReactPackage&gt; <span class="title">getPackages</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> Arrays.&lt;ReactPackage&gt;asList(</div><div class="line">                    <span class="keyword">new</span> MainReactPackage()</div><div class="line">            );</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ReactNativeHost <span class="title">getReactNativeHost</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mReactNativeHost;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>还要记得修改AndroidManifest.xml。</p>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>根目录运行下面命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">adb reverse tcp:8081 tcp:8081</div><div class="line">npm start</div></pre></td></tr></table></figure></p>
<p>启动server。<br>然后点击Android Studio的运行按钮：<br>如果运行时报下面的错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">02-22 19:18:59.050 24413 24413 E AndroidRuntime: java.lang.UnsatisfiedLinkError: dlopen failed: &quot;/data/data/com.android.hq.reactnativedemo/lib-main/libgnustl_shared.so&quot; is 32-bit instead of 64-bit</div></pre></td></tr></table></figure></p>
<p>可以参考<a href="http://blog.csdn.net/ssksuke/article/details/52611689" target="_blank" rel="external">这里</a>或者<a href="https://corbt.com/posts/2015/09/18/mixing-32-and-64bit-dependencies-in-android.html" target="_blank" rel="external">这里</a>的解决方案，在App的<code>build.gradle</code>里面添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">defaultConfig &#123;</div><div class="line">    ……</div><div class="line">    ndk &#123;</div><div class="line">        abiFilters &quot;armeabi-v7a&quot;, &quot;x86&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>再次运行，<code>Hello World</code>界面运行起来了。<br>另外记得去应用管理界面打开应用的悬浮窗权限，方便调试。</p>
<h3 id="生成Realease版本"><a href="#生成Realease版本" class="headerlink" title="生成Realease版本"></a>生成Realease版本</h3><p>在前面的App运行前，我们需要执行两条命令来启动development server，这在开发环境中可以这么做，但Realese版本这么做肯定是不行的。<br>下面就来生成Realease版本。</p>
<h4 id="方法一-1"><a href="#方法一-1" class="headerlink" title="方法一"></a>方法一</h4><p>在<code>app/src/main/</code>中新建<code>assets</code>，根目录下执行下面命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native bundle --platform android --dev <span class="literal">false</span> --entry-file index.android.js --bundle-output app/src/main/assets/index.android.bundle --assets-dest app/src/main/res/</div></pre></td></tr></table></figure></p>
<p>会在<code>assets</code>目录中生成<code>index.android.bundle</code>和<code>index.android.bundle.meta</code>文件。<code>index.android.bundle</code>文件是所有的React Native js文件打包生成的一个js文件，<code>index.android.bundle.meta</code>中存储的是bundle的sha1值，每次打包都会生成一个meta唯一标识bundle<br>再次编译运行App，不用启动启动服务App就可以正常运行了。</p>
<h4 id="方法二-1"><a href="#方法二-1" class="headerlink" title="方法二"></a>方法二</h4><p>其实也可以通过复制React Native Server里面bundle文件的方法来实现。<br>在根目录执行以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl <span class="string">"http://localhost:8081/index.android.bundle?platform=android"</span> -o <span class="string">"app/src/main/assets/index.android.bundle"</span></div></pre></td></tr></table></figure></p>
<p>也是可以的。</p>
]]></content>
    
    <summary type="html">
    
      介绍如何在一个已有的Android工程中集成React Native
    
    </summary>
    
      <category term="React Native" scheme="http://yoursite.com/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="http://yoursite.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>React Native-flexbox</title>
    <link href="http://yoursite.com/2017/01/13/react-native-flexbox/"/>
    <id>http://yoursite.com/2017/01/13/react-native-flexbox/</id>
    <published>2017-01-13T04:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍flexbox布局"><a href="#介绍flexbox布局" class="headerlink" title="介绍flexbox布局"></a>介绍flexbox布局</h2><p>flexbox是React Native应用开发中必不可少的内容，也是最常用的内容。flexbox是由W3C在2009年提出的一种新的布局方案，该布局可以简单快速地完成各种伸缩性的设计。<br>flexbox是Flexible Box的缩写，即为弹性盒子布局。<br>flexbox布局由伸缩容器和伸缩项目组成。采用Flex布局的元素称为伸缩容器。伸缩容器的子元素成为伸缩项目，伸缩项目使用伸缩布局模型来排版。<br><a id="more"></a></p>
<h3 id="伸缩容器的属性"><a href="#伸缩容器的属性" class="headerlink" title="伸缩容器的属性"></a>伸缩容器的属性</h3><p>伸缩容器支持的属性有：</p>
<ul>
<li>display</li>
<li>flex-direction</li>
<li>flex-wrap</li>
<li>flex-flow</li>
<li>justify-content</li>
<li>align-items</li>
<li>align-content</li>
</ul>
<h4 id="display"><a href="#display" class="headerlink" title="display"></a>display</h4><p>该属性用来制定元素是否为伸缩容器，其语法为：<br>display:flex | inline-flex</p>
<ul>
<li>flex：这个值用于产生块级伸缩容器，此时时父元素是<code>block</code>元素。</li>
<li>inline-flex：这个值用于产生行内级伸缩容器，此时时父元素是<code>inline</code>元素。</li>
</ul>
<h4 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h4><p>该属性用于指定主轴方向，其语法为：<br>flex-direction: row | row-reverse | column | column-reverse</p>
<ul>
<li>row: 默认值，如果为横向伸缩，则无需定义。该属性指定如果伸缩容器为水平方向轴，排版方式为从左向右排列。</li>
<li>row-reverse: 如果伸缩容器为水平方向轴，排版方式为从右向左排列。</li>
<li>column: 如果伸缩容器为垂直方向轴，排版方式为从上到下排列。</li>
<li>column-reverse: 如果伸缩容器为垂直方向轴，排版方式为从下向上排列。</li>
</ul>
<h4 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h4><p>该属性用于指定伸缩容器的主轴线方向空间不足的情况下，是否换行以及如何换行，其语法为：<br>flex-wrap: nowrap | wrap | wrap-reverse</p>
<ul>
<li>nowrap: 默认值，即使空间不足，伸缩容器也不允许换行。</li>
<li>wrap:允许换行。若主轴为水平轴，换行方向为从上到下。</li>
<li>wrap-reverse:允许换行。若主轴为水平轴，换行方向为从下向上。</li>
</ul>
<h4 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h4><p>该属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。</p>
<h4 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h4><p>该属性用来定义伸缩项目沿主轴线的对齐方式，其语法为：<br>justify-content: flex-start | flex-end | center | space-between | space-around</p>
<ul>
<li>flex-start: 默认值，伸缩项目向主轴线的起始位置靠齐。</li>
<li>flex-end: 伸缩项目向主轴线的结束位置靠齐。</li>
<li>center: 伸缩项目向主轴线的中间位置靠齐。</li>
<li>space-between: 伸缩项目平均地分布在主轴线里。第一个伸缩项目在主轴线的开始位置，最后一个伸缩项目在主轴线的终点位置。</li>
<li>space-around: 伸缩项目平均地分布在主轴线里。两端会保留间距一半的空间。</li>
</ul>
<h4 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h4><p>该属性用来定义伸缩项目在伸缩容器的交叉轴上的对其方式，其语法为：<br>align-items: flex-start | flex-end | center | baseline | stretch</p>
<ul>
<li>flex-start: 伸缩项目向交叉轴的起始位置靠齐。</li>
<li>flex-end: 伸缩项目向交叉轴的结束位置靠齐。</li>
<li>center: 伸缩项目向交叉轴的中间位置靠齐。</li>
<li>baseline： 伸缩项目根据他们的基线对齐。</li>
<li>stretch： 默认值，伸缩项目在交叉轴方向拉伸填充整个伸缩容器。</li>
</ul>
<h4 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h4><p>该属性用来调整伸缩项目出现换行后在交叉轴上的对齐方式，类似于伸缩项目在主轴上使用justify-content。其语法为：<br>align-content: flex-start | flex-end | center | space-between | space-around | stretch</p>
<ul>
<li>flex-start：伸缩项目向交叉轴的起点对齐。</li>
<li>flex-end：伸缩项目向交叉轴的终点对齐。</li>
<li>center：伸缩项目向交叉轴的中间位置对齐。</li>
<li>space-between：伸缩项目向交叉轴两端对齐，轴线之间的间隔平均分布。</li>
<li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>
<li>stretch（默认值）：伸缩项目会在交叉轴上伸展以占用剩余的空间。</li>
</ul>
<h3 id="伸缩项目的属性"><a href="#伸缩项目的属性" class="headerlink" title="伸缩项目的属性"></a>伸缩项目的属性</h3><p>伸缩项目支持的属性有：</p>
<ul>
<li>order</li>
<li>flex-grow</li>
<li>flex-shrink</li>
<li>flex-basis</li>
<li>flex</li>
<li>align-self</li>
</ul>
<h4 id="order"><a href="#order" class="headerlink" title="order"></a>order</h4><p>该属性用来定义项目的排列顺序。数值越小，排列越靠前，默认为0。其语法为：<br>order: <integer></integer></p>
<h4 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h4><p>该属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。其语法为：<br>flex-grow: <number> /<em>默认值为0</em>/</number></p>
<h4 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h4><p>该属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。<br>flex-shrink: <number>; /<em> default 1 </em>/<br>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。<br>负值对该属性无效。</number></p>
<h4 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h4><p>该属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。<br>该属性相当于设置了伸缩项目的一个基准值，剩余的空间按比率进行伸缩。其语法为：<br>flex-basis: <length> | auto; /<em> default auto </em>/</length></p>
<h4 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h4><p>该属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。其语法为：<br>flex: none | &lt;’flex-grow’&gt; &lt;’flex-shrink’&gt; &lt;’flex-basis’&gt;</p>
<h4 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h4><p>该属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。<br>align-self: auto | flex-start | flex-end | center | baseline | stretch</p>
<ul>
<li>atuo: 伸缩项目按自身设置的寬高显示，如果没有设置，则按stretch来计算其值。</li>
<li>flex-start: 伸缩项目向交叉轴的起始位置靠齐。</li>
<li>flex-end: 伸缩项目向交叉轴的结束位置靠齐。</li>
<li>center: 伸缩项目向交叉轴的中间位置靠齐。</li>
<li>baseline： 伸缩项目根据他们的基线对齐。</li>
<li>stretch： 伸缩项目在交叉轴方向拉伸填充整个伸缩容器。</li>
</ul>
<h2 id="在React-Native中的使用flexbox"><a href="#在React-Native中的使用flexbox" class="headerlink" title="在React Native中的使用flexbox"></a>在React Native中的使用flexbox</h2><p>React Native主要支持以下属性：</p>
<ul>
<li>alignItems</li>
<li>alignSelf</li>
<li>flex</li>
<li>flexDirection</li>
<li>flexWrap</li>
<li>justifyContent</li>
</ul>
<p>这些属性的用法和语法和上面介绍的是一样的，区别在于需要用驼峰拼写法。</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2>]]></content>
    
    <summary type="html">
    
      介绍flexbox布局的基本知识以及在React Native中的应用
    
    </summary>
    
      <category term="React Native" scheme="http://yoursite.com/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="http://yoursite.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>React Native-Image控件</title>
    <link href="http://yoursite.com/2017/01/13/react-native-image/"/>
    <id>http://yoursite.com/2017/01/13/react-native-image/</id>
    <published>2017-01-13T02:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h3 id="加载本地图片"><a href="#加载本地图片" class="headerlink" title="加载本地图片"></a>加载本地图片</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Image source=&#123;require(&apos;./img/baidu.png&apos;)&#125;/&gt;</div></pre></td></tr></table></figure>
<h3 id="加载App内资源图片"><a href="#加载App内资源图片" class="headerlink" title="加载App内资源图片"></a>加载App内资源图片</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Image source=&#123;&#123;uri: &apos;ic_launcher&apos;&#125;&#125; style=&#123;&#123;width: 140, height: 140&#125;&#125; /&gt;</div></pre></td></tr></table></figure>
<h3 id="加载网络图片"><a href="#加载网络图片" class="headerlink" title="加载网络图片"></a>加载网络图片</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Image source=&#123;&#123;uri:&apos;http://172.17.137.68/heqiang/2.jpg&apos;&#125;&#125; style=&#123;&#123;width: 200, height: 200&#125;&#125;/&gt;</div></pre></td></tr></table></figure>
<p>资源图片和网络图片必须声明图片寬高，否则不显示。<br><a id="more"></a></p>
<h3 id="适配不同平台"><a href="#适配不同平台" class="headerlink" title="适配不同平台"></a>适配不同平台</h3><p>有时我们希望在不同平台之间用不同的图片<br>比如baidu.android.png，baidu.ios.png，代码中只需要写baidu.png，便可以适配android和ios平台<br>baidu@2x.png，baidu@3x.png还可以适配不同分辨率的机型。如果没有图片恰好满足屏幕分辨率，则会自动选中最接近的一个图片。这点是和Android中是类似的。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View,</div><div class="line">  Image</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorldAppp</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"render()"</span>);</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;View&gt;</div><div class="line">        &lt;Text style=&#123;styles.title_text&#125;&gt;本地图片&lt;/Text&gt;</div><div class="line">        &lt;Image source=&#123;require('./img/baidu.png')&#125;/&gt;</div><div class="line">        &lt;Text style=&#123;styles.title_text&#125;&gt;资源图片&lt;/Text&gt;</div><div class="line">        &lt;Image source=&#123;&#123;uri: 'ic_launcher'&#125;&#125; style=&#123;&#123;width: 140, height: 140&#125;&#125; /&gt;</div><div class="line">        &lt;Text style=&#123;styles.title_text&#125;&gt;网络图片&lt;/Text&gt;</div><div class="line">        &lt;Image source=&#123;&#123;uri:'http://*******.jpg'&#125;&#125; style=&#123;&#123;width: 200, height: 200&#125;&#125;/&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">AppRegistry.registerComponent('AwesomeProject', () =&gt; HelloWorldAppp);</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  title_text:&#123;</div><div class="line">    fontSize:18,</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="/images/react-native-image/image1.png" alt="效果图"></p>
<h2 id="回调函数和属性"><a href="#回调函数和属性" class="headerlink" title="回调函数和属性"></a>回调函数和属性</h2><ul>
<li>onLayout：layout时调用，与View组件的onLayout函数类似</li>
<li>onLoadStart：开始加载时调用</li>
<li>onLoadEnd加载结束时调用</li>
<li><p>onLoad：成功读取图片时调用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;Image source=&#123;&#123;<span class="attr">uri</span>:<span class="string">'http://172.17.137.68/heqiang/23.jpg'</span>&#125;&#125; style=&#123;&#123;<span class="attr">width</span>: <span class="number">200</span>, <span class="attr">height</span>: <span class="number">200</span>&#125;&#125; </div><div class="line">  onLoad=&#123;<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">"onLoad"</span>);&#125;&#125;</div><div class="line">  onLayout=&#123;<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">"onLayout"</span>);&#125;&#125;</div><div class="line">  onLoadStart=&#123;<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">"onLoadStart"</span>);&#125;&#125;</div><div class="line">  onLoadEnd=&#123;<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">"onLoadEnd"</span>);&#125;&#125;</div><div class="line">  /&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>resizeMode</p>
<ul>
<li>cover：在显示比例不失真的情况下填充整个显示区域。可以对图片进行放大或者缩小，超出显示区域的部分不显示，也就是说，图片可能部分会显示不了。</li>
<li>contain：要求显示整张图片，可以对它进行等比缩小，图片会显示完整，可能会露出Image控件的底色。如果图片宽高都小于控件宽高，则不会对图片进行放大。</li>
<li>stretch：不考虑保持图片原来的宽高比，填充整个Image定义的显示区域，这种模式显示的图片可能会畸形和失真。</li>
<li>center：居中不缩放</li>
</ul>
<p>resizeMode也可以定义在style中，但在属性上定义的优先级比style中高。比如下面设置中最终生效的是Image.resizeMode.center。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;Image source=&#123;&#123;<span class="attr">uri</span>:<span class="string">'http://172.17.137.68/heqiang/test.png'</span>&#125;&#125; </div><div class="line">  style=&#123;&#123;<span class="attr">width</span>: <span class="number">200</span>, <span class="attr">height</span>: <span class="number">200</span>, <span class="attr">backgroundColor</span>: <span class="string">'grey'</span>,<span class="attr">resizeMode</span>: Image.resizeMode.contain&#125;&#125; </div><div class="line">  resizeMode=&#123;Image.resizeMode.center&#125;</div><div class="line">  /&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="样式风格"><a href="#样式风格" class="headerlink" title="样式风格"></a>样式风格</h2><ul>
<li>FlexBox 支持弹性盒子风格</li>
<li>Transforms 支持属性动画</li>
<li>resizeMode 设置缩放模式</li>
<li>backgroundColor 背景颜色</li>
<li>borderColor 边框颜色</li>
<li>borderWidth 边框宽度</li>
<li>borderRadius 边框圆角</li>
<li>overflow 设置图片尺寸超过容器可以设置显示或者隐藏(‘visible’,’hidden’)</li>
<li>tintColor 颜色设置</li>
<li>opacity 设置不透明度0.0(透明)-1.0(完全不透明)</li>
</ul>
]]></content>
    
    <summary type="html">
    
      介绍React Native中Image控件的基本使用
    
    </summary>
    
      <category term="React Native" scheme="http://yoursite.com/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="http://yoursite.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>React Native-组件Component</title>
    <link href="http://yoursite.com/2017/01/12/react-native-component/"/>
    <id>http://yoursite.com/2017/01/12/react-native-component/</id>
    <published>2017-01-12T02:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建一个Component"><a href="#创建一个Component" class="headerlink" title="创建一个Component"></a>创建一个Component</h2><p>一个组件类可以像前面Hello World工程中那样通过 <code>class HelloWorldAppp extends Component</code> 来创建，或者通过<code>React.createClass</code>来创建，并且提供一个render方法以及其他可选的生命周期函数、组件相关的事件或方法定义。<br><a id="more"></a><br>因此，HelloWorldAppp和下面的实现方法是等价的:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var HelloWorldAppp = React.createClass(&#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;View</div><div class="line"></div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>通过继承<code>Component</code>实现的组件中如果实现<code>getDefaultProps</code> <code>getInitialState</code>等方法时，会有下面警告：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Warning: getDefaultProps was defined on HelloWorldAppp, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.</div></pre></td></tr></table></figure></p>
<h2 id="React组件生命周期"><a href="#React组件生命周期" class="headerlink" title="React组件生命周期"></a>React组件生命周期</h2><p>先来看一段代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View,</div><div class="line">  Image,</div><div class="line">  TouchableHighlight</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> clickTime = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> HelloWorldAppp = React.createClass(&#123;</div><div class="line">  getDefaultProps()&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"getDefaultProps"</span>)</div><div class="line">    <span class="keyword">return</span> &#123;<span class="attr">title</span>:<span class="string">"HelloWorld"</span>&#125;</div><div class="line">  &#125;,</div><div class="line">  getInitialState()&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"getInitialState"</span>)</div><div class="line">   <span class="keyword">return</span> &#123;<span class="attr">content</span>:<span class="string">"点击屏幕任意位置"</span>&#125;</div><div class="line">  &#125;,</div><div class="line">  componentWillMount()&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"componentWillMount"</span>)</div><div class="line">  &#125;,</div><div class="line">  componentDidMount()&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"componentDidMount"</span>)</div><div class="line">  &#125;,</div><div class="line">  shouldComponentUpdate(nextProps,nextState)&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"shouldComponentUpdate"</span>)</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">  &#125;,</div><div class="line">  componentWillUpdate(nextProps,nextState)&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"componentWillUpdate"</span>)</div><div class="line">  &#125;,</div><div class="line">  componentDidUpdate(prevProps,prevState)&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"componentDidUpdate"</span>)</div><div class="line">  &#125;,</div><div class="line">  render() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"render"</span>)</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">TouchableHighlight</span></span></span></div><div class="line">        <span class="attr">onPress</span>=<span class="string">&#123;()</span> =&gt; this.backgorundClicked()&#125;</div><div class="line">        underlayColor = '#ddd'</div><div class="line">        style = &#123;styles.container&#125;</div><div class="line">        &gt;</div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.welcome&#125;</span>&gt;</span>&#123;clickTime &gt; 0 ? this.state.content : this.props.title + " \n " + this.state.content&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">TouchableHighlight</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;,</div><div class="line">  backgorundClicked()&#123;</div><div class="line">    clickTime++</div><div class="line">    <span class="keyword">this</span>.setState(&#123;</div><div class="line">      <span class="attr">content</span>:<span class="string">"第"</span>+clickTime+<span class="string">"次点击"</span></div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">AppRegistry.registerComponent(<span class="string">'AwesomeProject'</span>, () =&gt; HelloWorldAppp);</div><div class="line"></div><div class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</div><div class="line">    <span class="attr">container</span>: &#123;</div><div class="line">    <span class="attr">flex</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">justifyContent</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">alignItems</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">backgroundColor</span>: <span class="string">'#F5FCFF'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">welcome</span>: &#123;</div><div class="line">    <span class="attr">fontSize</span>: <span class="number">20</span>,</div><div class="line">    <span class="attr">textAlign</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">margin</span>: <span class="number">10</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">title_text</span>:&#123;</div><div class="line">    <span class="attr">fontSize</span>:<span class="number">18</span>,</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>然后认识一下组件中的一些函数：</p>
<ul>
<li>getDefaultProps： 用来设置组件属性的默认值。通常会将固定的内容放在这个过程中进行初始化和赋值，一个控件可以利用<code>this.props</code>获取在这里初始化它的属性，由于组件初始化后，再次使用该组件不会调用<code>getDefaultProps</code>函数，所以组件自己不可以自己修改props（即：props可认为是只读的），只可由其他组件调用它时在外部修改。<br><code>getDefaultProps</code>并不是在组件实例化时被调用，而是在<code>createClass</code>时被调用，返回值会被缓存。也就是说，不能在<code>getDefaultProps</code>中使用任何特定的实例数据。</li>
<li>getInitialState： 这里是对控件的一些状态进行初始化，由于该函数不同于<code>getDefaultProps</code>，在以后的过程中，会再次调用，所以可以将控制控件的状态的一些变量放在这里初始化，如控件上显示的文字，可以通过<code>this.state</code>来获取值，通过<code>this.setState</code>来修改state值，修改方式如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.setState(&#123;</div><div class="line">  <span class="attr">content</span>:<span class="string">"第"</span>+clickTime+<span class="string">"次点击"</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>值得注意的是，一旦调用了<code>this.setState</code>方法，控件必将调用render方法，对控件进行再次的渲染，不过，React框架会自动根据DOM的状态来判断是否需要真正的渲染。</p>
<ul>
<li>render：上面已经说过render是一个组件必须有的方法，形式为一个函数，并返回JSX或其他组件来构成DOM，和Android的XML布局、WPF的XAML布局类似，只能返回一个顶级元素。</li>
</ul>
<h3 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h3><ul>
<li>装载组件<ul>
<li>componentWillMount：这个方法被调用时期是组件将要被加载在视图上之前，功能比较少，即：render一个组件前最后一次修改state的机会。</li>
<li>componentDidMount：即调用了render方法后，组件加载成功并被成功渲染出来以后所执行的hook函数，一般会将网络请求等加载数据的操作，放在这个函数里进行，来保证不会出现UI上的错误.</li>
</ul>
</li>
<li>更新组件状态<br>存在期主要是用来处理与用户的交互，如：点击事件，都比较简单，也不是很常用，具体有以下几个过程：<ul>
<li>componentWillReceiveProps：指父元素对组件的props或state进行了修改。</li>
<li>shouldComponentUpdate：一般用于优化，可以返回false或true来控制是否进行渲染</li>
<li>componentWillUpdate：组件刷新前调用，类似<code>componentWillMount</code></li>
<li>componentDidUpdate：更新后的hook</li>
</ul>
</li>
<li>卸载（删除）组件<br>销毁期，用于清理一些无用的内容，如：点击事件Listener。<ul>
<li>componentWillUnmount</li>
</ul>
</li>
</ul>
<p>上面函数的调用顺序是：</p>
<ul>
<li>创建时<br>getDefaultProps<br>getInitialState<br>componentWillMount<br>render<br>componentDidMount</li>
<li>更新时<br>shouldComponentUpdate<br>componentWillUpdate<br>render<br>componentDidUpdate</li>
</ul>
<p>总得来讲，React Native组件的生命周期，经历了Mount-&gt;Update-&gt;Unmount这三个大的过程，即从创建到销毁的过程，如果借助Android和iOS的开发思想，那么React Native组件的生命周期就更容易理解了。那么，我们构建一个React Native控件也就能够知道如何下手，如何控制和优化。经过一层一层的封装和调用，一个完整的React Native应用也就构建出来了。</p>
<h2 id="Props（属性）和-State（状态）"><a href="#Props（属性）和-State（状态）" class="headerlink" title="Props（属性）和 State（状态）"></a>Props（属性）和 State（状态）</h2><p>Props 就是组件的属性，由外部通过 JSX 属性传入设置，一旦初始设置完成，就可以认为 <code>this.props</code> 是不可更改的，所以不要轻易更改设置 <code>this.props</code> 里面的值（虽然对于一个 JS 对象你可以做任何事）。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyText</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span>(</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;this.props.style&#125;</span>&gt;</span>&#123;this.props.content&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></div><div class="line">      );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorldAppp</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">MyText</span> <span class="attr">style</span>=<span class="string">&#123;styles.welcome&#125;</span> <span class="attr">content</span>=<span class="string">"HelloWorld"</span>/&gt;</span></span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>State 是组件的当前状态，可以把组件简单看成一个“状态机”，根据状态 state 呈现不同的 UI 展示。一旦状态（数据）更改，组件就会自动调用 render 重新渲染 UI，这个更改的动作会通过 <code>this.setState</code> 方法来触发。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorldAppp</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">showText</span>:<span class="string">"Test"</span>&#125;;</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span></div><div class="line">          <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.title_text&#125;</span>&gt;</span>&#123;this.state.showText&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line"></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h2><p>ref是React中的一种属性，当render函数返回某个组件的实例时，可以给render中的某个虚拟DOM节点添加一个ref属性。要获取一个React组件的引用，可以使用ref来获取你拥有的子组件的引用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> HelloWorldAppp = React.createClass(&#123;</div><div class="line">    render() &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"render"</span>);</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">TextInput</span> <span class="attr">style</span>=<span class="string">&#123;styles.welcome&#125;</span>  <span class="attr">ref</span>=<span class="string">"mytestinput"</span>&gt;</span><span class="tag">&lt;/<span class="name">TextInput</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.welcome&#125;</span> <span class="attr">onPress</span>=<span class="string">&#123;this.blur&#125;</span>&gt;</span>清除焦点<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.welcome&#125;</span> <span class="attr">onPress</span>=<span class="string">&#123;this.focus&#125;</span>&gt;</span>获取焦点<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;,</div><div class="line">  focus()&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.refs.mytestinput != <span class="literal">null</span>)&#123;</div><div class="line">      <span class="keyword">this</span>.refs.mytestinput.focus();</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  blur()&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.refs.mytestinput != <span class="literal">null</span>)&#123;</div><div class="line">      <span class="keyword">this</span>.refs.mytestinput.blur();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>在这个例子中，我们通过<code>this.refs.mytestinput</code>获取输入框实例，来实现获取焦点和清除焦点。</p>
<h2 id="组件之间通信"><a href="#组件之间通信" class="headerlink" title="组件之间通信"></a>组件之间通信</h2><p>通过上面的讲解我们可以知道：</p>
<ul>
<li>父组件调用子组件：可以通过<code>this.props</code>方法。</li>
<li>子组件调用父组件：通过回调函数；</li>
<li>兄弟组件：通过其父组件；通过<code>ref</code>来实现；</li>
<li>没有关联的组件：通过发送事件：Event Emitter/Target/Dispatcher或者可以通过<code>ref</code>来实现。</li>
<li>Redux</li>
<li>Flux</li>
</ul>
<p>这部分后面再介绍。</p>
]]></content>
    
    <summary type="html">
    
      介绍Component的创建、组件的生命周期、组件的Props和 State以及组建之间的通信
    
    </summary>
    
      <category term="React Native" scheme="http://yoursite.com/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="http://yoursite.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>React Native 入门</title>
    <link href="http://yoursite.com/2017/01/11/react-native-first-step/"/>
    <id>http://yoursite.com/2017/01/11/react-native-first-step/</id>
    <published>2017-01-11T02:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Helle-World代码分析"><a href="#Helle-World代码分析" class="headerlink" title="Helle World代码分析"></a>Helle World代码分析</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View,</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldAppp</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.welcome&#125;</span>&gt;</span></div><div class="line">          Welcome to React Native!</div><div class="line">        <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.instructions&#125;</span>&gt;</span></div><div class="line">          To get started, edit index.android.js</div><div class="line">        <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.instructions&#125;</span>&gt;</span></div><div class="line">          Double tap R on your keyboard to reload,&#123;'\n'&#125;</div><div class="line">          Shake or press menu button for dev menu</div><div class="line">        <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</div><div class="line">  <span class="attr">container</span>: &#123;</div><div class="line">    <span class="attr">flex</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">justifyContent</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">alignItems</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">backgroundColor</span>: <span class="string">'#F5FCFF'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">welcome</span>: &#123;</div><div class="line">    <span class="attr">fontSize</span>: <span class="number">20</span>,</div><div class="line">    <span class="attr">textAlign</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">margin</span>: <span class="number">10</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">instructions</span>: &#123;</div><div class="line">    <span class="attr">textAlign</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">color</span>: <span class="string">'#333333'</span>,</div><div class="line">    <span class="attr">marginBottom</span>: <span class="number">5</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">AppRegistry.registerComponent(<span class="string">'AwesomeProject'</span>, () =&gt; HelloWorldAppp);</div></pre></td></tr></table></figure>
<p>初看这段代码，可能觉得并不像JavaScript——没错，这是“未来”的JavaScript.<br>首先你需要了解ES2015 （也叫作ES6）——这是一套对JavaScript的语法改进的官方标准。但是这套标准目前还没有在所有的浏览器上完整实现，所以目前而言web开发中还很少使用。React Native内置了对ES2015标准的支持，你可以放心使用而无需担心兼容性问题。上面的示例代码中的<code>import</code>、<code>from</code>、<code>class</code>、<code>extends</code>、以及<code>() =&gt;</code>箭头函数等新语法都是ES2015中的特性。如果你不熟悉ES2015的话，可以看看阮一峰老师的书，<a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">ES 6 标准入门</a>。<br>示例中的这一行<code>&lt;Text&gt;*****&lt;/Text&gt;</code>恐怕很多人看起来也觉得陌生。这叫做JSX——是一种在JavaScript中嵌入XML结构的语法。很多传统的应用框架会设计自有的模板语法，让你在结构标记中嵌入代码。React反其道而行之，设计的JSX语法却是让你在代码中嵌入结构标记。初看起来，这种写法很像web上的HTML，只不过使用的并不是web上常见的标签如<code>&lt;div&gt;</code>或是<code>&lt;span&gt;</code>等，这里我们使用的是React Native的组件。上面的示例代码中，使用的是内置的<code>&lt;Text&gt;</code>组件，它专门用来显示文本。<br>上面的代码定义了一个名为<code>HelloWorldAppp</code>的新的组件（Component），并且使用了名为<code>AppRegistry</code>的内置模块进行了“注册”操作。你在编写React Native应用时，肯定会写出很多新的组件。而一个App的最终界面，其实也就是各式各样的组件的组合。组件本身结构可以非常简单——唯一必须的就是在render方法中返回一些用于渲染结构的JSX语句。<code>HelloWorldAppp</code>组件的名称你可以随意定，但<code>AppRegistry.registerComponent(&#39;AwesomeProject&#39;, () =&gt; HelloWorldAppp);</code>第一个参数必须和工程名称一致。<br><code>render()</code>方法为必须有的方法，实现组件渲染功能，返回JSX或其他组件来构成DOM，和Android的XML布局、WPF的XAML布局类似，只能返回一个顶级元素。<br>注意：</p>
<ul>
<li>组件类的第一个字母必须大写，否则会报错。</li>
<li>组件类只能包含一个顶层标签，否则也会报错。</li>
</ul>
<h2 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h2><p>React的核心机制之一就是可以在内存中创建虚拟的DOM元素。React利用虚拟DOM来减少对实际DOM的操作从而提升性能。<br>JSX就是Javascript和HTML结合的一种格式。可以看作JavaScript的拓展，看起来有点像HTML。React发明了JSX，利用HTML语法来创建虚拟DOM。HTML语言直接写在JavaScript语言之中，不加任何引号，这就是JSX的语法，它允许 HTML 与 JavaScript 的混写。遇到HTML标签（以 &lt; 开头），JSX就当HTML解析，遇到代码块（以 { 开头），就当JavaScript解析。最后，每个HTML标签都会转化为JavaScript代码来运行。<br>使用React，不一定非要使用JSX语法，可以使用原生的JS进行开发。但是React作者强烈建议我们使用JSX，因为JSX在定义类似HTML这种树形结构时，十分的简单明了。简明的代码结构更利于开发和维护。 XML有着开闭标签，在构建复杂的树形结构时，比函数调用和对象字面量更易读。<br>看个直接的对比，如下面两段代码是等价的：<br>JS：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> child1 = React.createElement(<span class="string">'li'</span>, <span class="literal">null</span>, <span class="string">'First Text Content'</span>);</div><div class="line"><span class="keyword">var</span> child2 = React.createElement(<span class="string">'li'</span>, <span class="literal">null</span>, <span class="string">'Second Text Content'</span>);</div><div class="line"><span class="keyword">var</span> root = React.createElement(<span class="string">'ul'</span>, &#123; <span class="attr">className</span>: <span class="string">'my-list'</span> &#125;, child1, child2);</div></pre></td></tr></table></figure>
<p>JSX：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> root =(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">"my-list"</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>First Text Content<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Second Text Content<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">);</div></pre></td></tr></table></figure>
<p>后者将XML语法直接加入JS中,通过代码而非模板来高效的定义界面。之后JSX通过翻译器转换为纯JS再由浏览器执行。在实际开发中，JSX在产品打包阶段都已经编译成纯JavaScript，JSX的语法不会带来任何性能影响。另外，由于JSX只是一种语法，因此JavaScript的关键字class, for等也不能出现在XML中，而要如例子中所示，使用className, htmlFor代替，这和原生DOM在JavaScript中的创建也是一致的。JSX只是创建虚拟DOM的一种语法格式而已,除了用JSX,我们也可以用JS代码来创建虚拟DOM。</p>
<h3 id="样式使用"><a href="#样式使用" class="headerlink" title="样式使用"></a>样式使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;View style=&#123;&#123;<span class="attr">width</span>: <span class="number">50</span>, <span class="attr">height</span>: <span class="number">50</span>, <span class="attr">flex</span>: <span class="number">1</span>,<span class="attr">backgroundColor</span>: <span class="string">'powderblue'</span>&#125;&#125; /&gt;</div></pre></td></tr></table></figure>
<p>上面第一个大括号是JSX语法，第二个大括号是JavaScript语法。</p>
<h3 id="JSX中绑定事件"><a href="#JSX中绑定事件" class="headerlink" title="JSX中绑定事件"></a>JSX中绑定事件</h3><p>JSX让事件直接绑定在元素上。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;button onClick=&#123;<span class="keyword">this</span>.checkAndSubmit.bind(<span class="keyword">this</span>)&#125;&gt;Submit&lt;<span class="regexp">/button&gt;</span></div></pre></td></tr></table></figure>
<p>和原生HTML定义事件的唯一区别就是JSX采用驼峰写法来描述事件名称，大括号中仍然是标准的JavaScript表达式，返回一个事件处理函数。<br>可以看到这里需要调用bind方法，这个方法第一个参数主要用来设置作用域，从第二个参数开始便是我们想要传递的参数了。</p>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><ul>
<li>代码中添加打印可以使用<code>console.log(&quot;&quot;)</code>方法，在logcat中过滤ReactNativeJS TAG。</li>
<li>在Chrome浏览器中进行调试。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      本文主要对Helle World示例的代码进行分析，介绍一下 React Native 一些入门知识
    
    </summary>
    
      <category term="React Native" scheme="http://yoursite.com/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="http://yoursite.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>搭建 React Native 开发环境</title>
    <link href="http://yoursite.com/2017/01/10/react-native-build-development-environment/"/>
    <id>http://yoursite.com/2017/01/10/react-native-build-development-environment/</id>
    <published>2017-01-10T04:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文是对Ubuntu环境下开发环境的搭建<br><a id="more"></a></p>
<h2 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a>Android Studio</h2><p>下载Android Studio2.2，React Native目前需要Android Studio2.0或更高版本: <a href="http://www.androiddevtools.cn/" target="_blank" rel="external">下载地址</a><br>下载android-sdk；<br>这部分相信Android开发者都懂，不做详细介绍。</p>
<h2 id="安装nodeJS"><a href="#安装nodeJS" class="headerlink" title="安装nodeJS"></a>安装nodeJS</h2><p>下载node-v5.0.0-linux-x64解压即可；<br><a href="https://nodejs.org/en/download/" target="_blank" rel="external">下载地址</a><br>创建软链接<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sudo ln <span class="_">-s</span> /XXXXXX/tools/node-v5.0.0-linux-x64/bin/node /usr/bin/node</div><div class="line">sudo ln <span class="_">-s</span> /XXXXXX/tools/node-v5.0.0-linux-x64/bin/npm /usr/bin/npm</div><div class="line">sudo npm install -g yarn react-native-cli</div><div class="line">sudo ln <span class="_">-s</span> /home/heqiang/install/tools/node-v5.0.0-linux-x64/bin/react-native /usr/bin/react-native</div><div class="line">sudo ln <span class="_">-s</span> /home/heqiang/install/tools/node-v5.0.0-linux-x64/bin/yarn /usr/bin/yarn</div><div class="line">sudo ln <span class="_">-s</span> /home/heqiang/install/tools/node-v5.0.0-linux-x64/bin/yarnpkg /usr/bin/yarnpkg</div></pre></td></tr></table></figure></p>
<ul>
<li><code>react-native-cli</code>是React Native的一个命令行工具，用于执行创建、初始化、更新项目、运行打包服务（packager）等任务。</li>
</ul>
<h2 id="开始创建第一个工程"><a href="#开始创建第一个工程" class="headerlink" title="开始创建第一个工程"></a>开始创建第一个工程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">react-native init AwesomeProject</div><div class="line"><span class="built_in">cd</span> AwesomeProject/</div></pre></td></tr></table></figure>
<p>连接好手机<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native run-android</div></pre></td></tr></table></figure></p>
<p>发现下面的错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">heqiang@EF-heqiang:~/react-native-workspace/AwesomeProject$ react-native run-android</div><div class="line">Starting JS server...</div><div class="line">Running adb -s M960ADPBB7C7M reverse tcp:8081 tcp:8081</div><div class="line">Building and installing the app on the device (cd android &amp;&amp; ./gradlew installDebug...</div><div class="line">Failed to notify ProjectEvaluationListener.afterEvaluate(), but primary configuration failure takes precedence.</div><div class="line">java.lang.RuntimeException: SDK location not found. Define location with sdk.dir in the local.properties file or with an ANDROID_HOME environment variable.</div><div class="line">	at com.android.build.gradle.internal.SdkHandler.getAndCheckSdkFolder(SdkHandler.java:102)</div><div class="line">	at com.android.build.gradle.internal.SdkHandler.getSdkLoader(SdkHandler.java:112)</div><div class="line">	at com.android.build.gradle.internal.SdkHandler.initTarget(SdkHandler.java:86)</div><div class="line">	at com.android.build.gradle.BasePlugin.ensureTargetSetup(BasePlugin.groovy:507)</div><div class="line">	at com.android.build.gradle.BasePlugin.createAndroidTasks(BasePlugin.groovy:455)</div><div class="line">	at com.android.build.gradle.BasePlugin$_createTasks_closure13_closure17.doCall(BasePlugin.groovy:415)</div><div class="line">	at com.android.build.gradle.BasePlugin$_createTasks_closure13_closure17.doCall(BasePlugin.groovy)</div><div class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</div></pre></td></tr></table></figure></p>
<p>按他说的去配置local.properties的adk.dir<br>添加<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sdk.dir=/home/heqiang/install/android-studio/android-sdk-linux</div></pre></td></tr></table></figure></p>
<p>再次启动，OK了。<br>这个时候你发现应用没有启动起来，需要进入应用管理，把悬浮窗权限打开。<br>终于见到启动界面了，只不过是这种。<br><img src="/images/react-native-build-development-environment/image1.png" alt="react demo"><br>配置一下网络环境：<br>(Android 5.0及以上)使用adb reverse命令</p>
<blockquote>
<p>注意，这个选项只能在5.0以上版本(API 21+)的安卓设备上使用。</p>
</blockquote>
<ol>
<li>首先把你的设备通过USB数据线连接到电脑上，并开启USB调试。</li>
<li>运行adb reverse tcp:8081 tcp:8081。（每次连接usb都要运行一下）</li>
<li>不需要更多配置，你就可以使用Reload JS和其它的开发选项了。</li>
</ol>
<p>(Android 5.0以下)通过Wi-Fi连接你的本地开发服务器</p>
<ol>
<li>首先确保你的电脑和手机设备在同一个Wi-Fi环境下。</li>
<li>在设备上运行你的React Native应用。和打开其它App一样操作。</li>
<li>你应该会看到一个“红屏”错误提示。这是正常的，下面的步骤会解决这个报错。</li>
<li>摇晃设备，或者运行adb shell input keyevent 82，可以打开开发者菜单。</li>
<li>点击进入Dev Settings。</li>
<li>点击Debug server host for device。</li>
<li>输入你电脑的IP地址和端口号（譬如10.0.1.1:8081）。在Mac上，你可以在系统设置/网络里找查询你的IP地址。在Windows上，打开命令提示符并输入ipconfig来查询你的IP地址。在Linux上你可以在终端中输入ifconfig来查询你的IP地址。</li>
<li>回到开发者菜单然后选择Reload JS。 </li>
</ol>
<p>由于我的环境是Android 5.0以上，所以选择第一种方式。<br>还是不行，在电脑pc上输入一下网址检查一下：<br><a href="http://172.17.137.68:8081/index.android.bundle?platform=android&amp;dev=true&amp;hot=false&amp;minify=false" target="_blank" rel="external">http://172.17.137.68:8081/index.android.bundle?platform=android&amp;dev=true&amp;hot=false&amp;minify=false</a><br>果然是打不开。<br>哦，应该是server没有启动起来，启动server了，电脑上启动 react-native start。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">Scanning 716 folders for symlinks in /home/heqiang/react-native-workspace/AwesomeProject/node_modules (8ms)</div><div class="line"> ┌────────────────────────────────────────────────────────────────────────────┐ </div><div class="line"> │  Running packager on port 8081.                                            │ </div><div class="line"> │                                                                            │ </div><div class="line"> │  Keep this packager running while developing on any JS projects. Feel      │ </div><div class="line"> │  free to close this tab and run your own packager instance if you          │ </div><div class="line"> │  prefer.                                                                   │ </div><div class="line"> │                                                                            │ </div><div class="line"> │  https://github.com/facebook/react-native                                  │ </div><div class="line"> │                                                                            │ </div><div class="line"> └────────────────────────────────────────────────────────────────────────────┘ </div><div class="line">Looking for JS files in</div><div class="line">   /home/heqiang/react-native-workspace/AwesomeProject </div><div class="line"></div><div class="line">[Hot Module Replacement] Server listening on /hot</div><div class="line"></div><div class="line">React packager ready.</div><div class="line"></div><div class="line">[2016-12-07 09:45:21] &lt;START&gt; Initializing Packager</div><div class="line">[2016-12-07 09:45:21] &lt;START&gt; Building in-memory fs for JavaScript</div><div class="line">[2016-12-07 09:45:21] &lt;END&gt;   Building in-memory fs for JavaScript (71ms)</div><div class="line">[2016-12-07 09:45:21] &lt;START&gt; Building Haste Map</div><div class="line">[2016-12-07 09:45:21] &lt;END&gt;   Building Haste Map (226ms)</div><div class="line">[2016-12-07 09:45:21] &lt;END&gt;   Initializing Packager (431ms)</div><div class="line">[2016-12-07 09:45:40] &lt;START&gt; Requesting bundle bundle_url: /index.Android.bundle?platform=android&amp;dev=true&amp;hot=false&amp;minify=false</div><div class="line">[2016-12-07 09:45:40] &lt;START&gt; Transforming files</div></pre></td></tr></table></figure></p>
<p>点击一下RELOAD，有东西显示了，可以对React Native Say Hello了！<br><img src="/images/react-native-build-development-environment/image2.png" alt="react demo"><br>这个时候可以打开JS，index.android.js，随便写点什么，然后摇一摇，点击RELOAD就可以显示出来了。<br><strong>总结</strong>：运行一个工程需要的步骤：</p>
<ol>
<li><code>react-native start</code>启动React packager</li>
<li><code>react-native run-android</code></li>
<li><code>adb reverse tcp:8081 tcp:8081</code>（Android5.0以上）</li>
<li>打开悬浮窗权限</li>
</ol>
<h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><h3 id="Sublime-Text-3"><a href="#Sublime-Text-3" class="headerlink" title="Sublime Text 3"></a>Sublime Text 3</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>下载安装包：<a href="https://www.sublimetext.com/" target="_blank" rel="external">https://www.sublimetext.com/</a><br>下载完成后点击，会打开Ubuntu软件中心进行安装，然后终端打开。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">subl</div></pre></td></tr></table></figure></p>
<p><img src="/images/react-native-build-development-environment/image3.png" alt="subl"><br>版本3126<br>但是会显示显示unregistered字样。<br>破解方法：参考<a href="https://my.oschina.net/u/574928/blog/505481" target="_blank" rel="external">https://my.oschina.net/u/574928/blog/505481</a><br>复制文中的注册码，subl中打开Help-&gt;enter license粘贴即可。</p>
<h4 id="导入项目"><a href="#导入项目" class="headerlink" title="导入项目"></a>导入项目</h4><p>点击菜单栏的“Project”–&gt;”Add Folder to Project” ，选择项目的目录，就将项目导入进来了。</p>
<h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><ol>
<li>点击菜单栏的“Preferences”–&gt;”Package Control”,或者可以使用快捷键CTRL+SHIFT+P打开。如果找不到Package Control，那么打开Tools–&gt;Install Package Control就可以了。</li>
<li>在打开的终端窗口，输入“install”,下方就会提示“Package Control:install package”,用鼠标点击。这时候等待几秒，就会弹出一个终端，在终端输入你想要安装的插件，进行查找，点击下方列表中插件，就会自动会为你安装了。</li>
</ol>
<p>React Native开发推荐的一些插件：</p>
<ol>
<li>ReactJS : 支持React开发，代码提示，高亮显示。<a href="https://github.com/facebookarchive/sublime-react" title="介绍" target="_blank" rel="external">介绍</a></li>
<li>Emmet 前端开发必备。</li>
</ol>
<blockquote>
<p><strong>功能：</strong> jsx 文件中快速通过 emmet 编写自定义组件。<br><strong>安装：</strong> PC上ctrl+shift+p（MacCmd+shift+p）打开面板输入emmet安装<br><strong>配置：</strong> 打开 preferences -&gt; Key bindings - Users，先用[]扩展为数组，然后把下面代码复制到[]内部。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">      "keys": [</div><div class="line">        "super+e"</div><div class="line">      ],</div><div class="line">      "args": &#123;</div><div class="line">        "action": "expand_abbreviation"</div><div class="line">      &#125;,</div><div class="line">      "command": "run_emmet_action",</div><div class="line">      "context": [&#123;</div><div class="line">        "key": "emmet_action_enabled.expand_abbreviation"</div><div class="line">      &#125;]</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      "keys": ["tab"],</div><div class="line">      "command": "expand_abbreviation_by_tab",</div><div class="line">      "context": [&#123;</div><div class="line">        "operand": "source.js",</div><div class="line">        "operator": "equal",</div><div class="line">        "match_all": true,</div><div class="line">        "key": "selector"</div><div class="line">      &#125;, &#123;</div><div class="line">        "key": "preceding_text",</div><div class="line">        "operator": "regex_contains",</div><div class="line">        "operand": "(\\b(a\\b|div|span|p\\b|button)(\\.\\w*|&gt;\\w*)?([^&#125;]*?&#125;$)?)",</div><div class="line">        "match_all": true</div><div class="line">      &#125;, &#123;</div><div class="line">        "key": "selection_empty",</div><div class="line">        "operator": "equal",</div><div class="line">        "operand": true,</div><div class="line">        "match_all": true</div><div class="line">      &#125;]</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>使用super+e触发 emmet，自动补齐；</p>
<ol>
<li>Terminal : 在sublime中打开终端并定位到当前目录，神器。快捷键：command+shift+T</li>
<li>react-native-snippets：react native 的代码片。<a href="https://github.com/Shrugs/react-native-snippets" title="介绍" target="_blank" rel="external">介绍</a></li>
<li>Babel</li>
<li>ESLint</li>
</ol>
<blockquote>
<p><strong>功能：</strong> 支持ES6和React JSX语法定义，我一般用它替代Sublime自带的js语法定义。<br><strong>安装：</strong> PC上ctrl+shift+p（MacCmd+shift+p）打开面板输入Babel安装.<br><strong>配置：</strong> 打开.js, .jsx 后缀的文件;打开菜单view-&gt; Syntax -&gt; Open all with current extension as… -&gt; Babel -&gt; JavaScript (Babel)，选择babel为默认 javascript 打开syntax,即可看到对react的语法高亮。</p>
</blockquote>
<p>Sublime Text 3的使用可以参考下面的文章：<br>如何优雅地使用Sublime Text3： <a href="http://www.jianshu.com/p/3cb5c6f2421c" target="_blank" rel="external">http://www.jianshu.com/p/3cb5c6f2421c</a><br><a href="http://www.jianshu.com/p/2ddfff095e90" target="_blank" rel="external">http://www.jianshu.com/p/2ddfff095e90</a></p>
<h3 id="VisualStudio-Code"><a href="#VisualStudio-Code" class="headerlink" title="VisualStudio Code"></a>VisualStudio Code</h3><p>相当强大的IDE工具，推荐使用。</p>
<h4 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h4><p>地址：<a href="https://code.visualstudio.com/" target="_blank" rel="external">https://code.visualstudio.com/</a></p>
<h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><ol>
<li>ESLint js,jsx,es6代码语法检测</li>
<li>React Native Tools 微软官方出的ReactNative插件</li>
<li>File Navigator Ctrl + l 导航文件</li>
<li>Auto Close Tag 写完开始标签，会自动补全结束标签</li>
<li>Auto Rename Tag 要修改标签名称的时候自动修改结束标签</li>
<li>vscode-icons 不同的问题有不同的图标标识</li>
<li>vscode-fileheader 支持头部注释,自动更新文件更新时间</li>
</ol>
<h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><p><a href="http://mp.weixin.qq.com/s?__biz=MjM5NDkxMTgyNw==&amp;mid=2653058224&amp;idx=1&amp;sn=553b4ce24b22680d8f46cba082eb8661&amp;scene=21#wechat_redirect" target="_blank" rel="external">http://mp.weixin.qq.com/s?__biz=MjM5NDkxMTgyNw==&amp;mid=2653058224&amp;idx=1&amp;sn=553b4ce24b22680d8f46cba082eb8661&amp;scene=21#wechat_redirect</a></p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p><a href="http://www.jianshu.com/p/1d3f9cdd15dc" target="_blank" rel="external">http://www.jianshu.com/p/1d3f9cdd15dc</a></p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://reactnative.cn/docs/0.39/getting-started.html" target="_blank" rel="external">http://reactnative.cn/docs/0.39/getting-started.html</a><br><a href="http://reactnative.cn/docs/0.39/running-on-device-android.html#content" target="_blank" rel="external">http://reactnative.cn/docs/0.39/running-on-device-android.html#content</a></p>
]]></content>
    
    <summary type="html">
    
      介绍在Ubuntu环境下搭建 React Native 开发环境
    
    </summary>
    
      <category term="React Native" scheme="http://yoursite.com/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="http://yoursite.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>开始了解React Native</title>
    <link href="http://yoursite.com/2017/01/10/react-native-begin-to-study/"/>
    <id>http://yoursite.com/2017/01/10/react-native-begin-to-study/</id>
    <published>2017-01-10T02:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="React是什么？"><a href="#React是什么？" class="headerlink" title="React是什么？"></a>React是什么？</h2><p>React是一个比较热门的前端框架，可以描述为一个用来构建用户界面的javascript库，（<a href="https://github.com/facebook/react" target="_blank" rel="external">GitHub地址</a>）。它起源于Facebook的内部项目，因为 FB 对市场上所有 JavaScript MVC 框架，都不满意，就决定自己写一套，用来架设 Instagram 的网站。做出来以后，发现这套东西很好用，就在2013年5月开源了。<br>由于 React 的设计思想极其独特，属于革命性创新，性能出众，代码逻辑却非常简单。所以，越来越多的人开始关注和使用，认为它可能是将来 Web 开发的主流工具。<br>和Backbone、Angular 等MV*框架不一样，它只处理View逻辑 。所以如果你喜欢它，你可以很容易的将它接入到现有工程中，然后用React重写HTML部分即可，不用修改逻辑。<br>近几年web领域的技术革新非常迅速，React 也是一项新技术，其实React出来也多年了，其实并不算什么新技术了，只是在国内还没有普及开。国内在热更新方面更热衷于纯Native的插件化技术。可以说，Android的未来必将是React-Native和插件化的天下……<br><a id="more"></a></p>
<h2 id="React-Native"><a href="#React-Native" class="headerlink" title="React Native"></a>React Native</h2><p>React Native是由React衍生出来的项目（<a href="https://github.com/facebook/react-native" target="_blank" rel="external">GitHub地址</a>），基于React来写的支持编写原生App的框架，目标是希望用写Web App的方式去写Native App。React Native看起来很像React，只不过其基础组件是原生组件而非web组件。</p>
<h2 id="React-Native能给移动开发带来什么？"><a href="#React-Native能给移动开发带来什么？" class="headerlink" title="React Native能给移动开发带来什么？"></a>React Native能给移动开发带来什么？</h2><p>像比较于Hybird app，Native app 以及Webapp，React Native有以下优势：</p>
<ol>
<li>极速的渲染性能：不用Webview，彻底摆脱了Webview让人不爽的交互和性能问题。</li>
<li>组件互相独立，关系隔离，可复用，有较强的扩展性：Native端提供的是基本控件，JS可以自由组合使用。</li>
<li>跨平台： Write once,run anywhere. React 能够用一套代码同时运行在浏览器和 node 里，而且能够以原生 App 的姿势运行在 iOS 和 Android 系统中，即拥有了 web 迭代迅速的特性，又拥有原生 App 的体验。</li>
<li>JS与Native原生优势互补：JS可以直接使用原生一些控件或者是JS里面比较难以实现的UI效果。</li>
<li>可以通过更新远端JS，直接更新App，不过现在热修复也基本已成为Native app的标配了。</li>
</ol>
<p>精通了React开发，感觉自己是不是有『全栈工程师』的特点了呢？</p>
<h2 id="其他类似的一些开源框架"><a href="#其他类似的一些开源框架" class="headerlink" title="其他类似的一些开源框架"></a>其他类似的一些开源框架</h2><ul>
<li>Weex：基于vue.js开发，使用V8作为JS引擎。</li>
</ul>
<h2 id="一些学习资料"><a href="#一些学习资料" class="headerlink" title="一些学习资料"></a>一些学习资料</h2><p>React Native的相关文档<a href="https://facebook.github.io/react/" target="_blank" rel="external">https://facebook.github.io/react/</a>   <a href="https://facebook.github.io/react-native/" target="_blank" rel="external">https://facebook.github.io/react-native/</a><br><a href="http://react-china.org/" target="_blank" rel="external">React 中文网</a><br><a href="http://reactnative.cn" target="_blank" rel="external">React Native中文网</a><br><a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">ECMAScript 6入门</a><br><a href="http://bbs.reactnative.cn/topic/15/react-react-native-%E7%9A%84es5-es6%E5%86%99%E6%B3%95%E5%AF%B9%E7%85%A7%E8%A1%A8" target="_blank" rel="external">React/React Native 的ES5 ES6写法对照表</a><br><a href="http://bbs.reactnative.cn/topic/320/2016%E5%B9%B41%E6%9C%889%E6%97%A5-react-native%E5%AE%9E%E6%88%98%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB%E4%BC%9A-%E5%8C%97%E4%BA%AC-%E5%88%86%E4%BA%AB%E8%AE%B0%E5%BD%95" target="_blank" rel="external">分析reactnative优劣</a><br><a href="https://zhuanlan.zhihu.com/p/20464825?refer=program-life" target="_blank" rel="external">ReactNativeAndroid源码分析-Js如何调用Native的代码</a><br><a href="https://zhuanlan.zhihu.com/p/20587485?refer=magilu" target="_blank" rel="external">ReactNative For Android 项目实战总结 QQ空间</a><br><a href="https://zhuanlan.zhihu.com/p/20259704" target="_blank" rel="external">React Native For Android 架构初探 QQ空间</a><br><a href="https://yq.aliyun.com/articles/2757?spm=5176.100240.searchblog.21.VfnaXO" target="_blank" rel="external">React native for Android 初步实践(淘宝)</a><br><a href="https://github.com/cnsnake11/blog/tree/master/ReactNative%E5%BC%80%E5%8F%91%E6%8C%87%E5%AF%BC" target="_blank" rel="external">ReactNative开发指导</a></p>
<p>随后继续补充</p>
<h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><a href="http://mp.weixin.qq.com/s?__biz=MzA3NTYzODYzMg==&amp;mid=401107957&amp;idx=1&amp;sn=200418877771f656c1a0ab33ad407516&amp;scene=1&amp;srcid=1119XfFA8t5QQprIjzp76fcr&amp;key=ff7411024a07f3ebf6601418be94ccd6219ed18e580029547278b6eadd5def524defc8dbfdfcf673a7daa87723cfa4bb&amp;ascene=0&amp;uin=NTYzMDc5MTc1&amp;devicetype=iMac+MacBookPro11%2C1+OSX+OSX+10.11.1+build%2815B42%29&amp;version=11020201&amp;pass_ticket=a82zcv0P%2B6ztN4xgcdnD%2FWtFbQjxhMOiiUJGZVbk6FUhTeozLqrMlGuES%2FvVmaI0" target="_blank" rel="external">http://mp.weixin.qq.com/s?__biz=MzA3NTYzODYzMg==&amp;mid=401107957&amp;idx=1&amp;sn=200418877771f656c1a0ab33ad407516&amp;scene=1&amp;srcid=1119XfFA8t5QQprIjzp76fcr&amp;key=ff7411024a07f3ebf6601418be94ccd6219ed18e580029547278b6eadd5def524defc8dbfdfcf673a7daa87723cfa4bb&amp;ascene=0&amp;uin=NTYzMDc5MTc1&amp;devicetype=iMac+MacBookPro11%2C1+OSX+OSX+10.11.1+build%2815B42%29&amp;version=11020201&amp;pass_ticket=a82zcv0P%2B6ztN4xgcdnD%2FWtFbQjxhMOiiUJGZVbk6FUhTeozLqrMlGuES%2FvVmaI0</a></p>
]]></content>
    
    <summary type="html">
    
      初步介绍一下 React Native 及其在移动开发中的优势
    
    </summary>
    
      <category term="React Native" scheme="http://yoursite.com/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="http://yoursite.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>Java基础 -- 注解</title>
    <link href="http://yoursite.com/2016/12/22/java-basic-annotation/"/>
    <id>http://yoursite.com/2016/12/22/java-basic-annotation/</id>
    <published>2016-12-22T02:00:00.000Z</published>
    <updated>2019-01-22T02:35:05.726Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Java 从1.5 版本后开始引入了注解（Annotation），其目的是不影响代码语义的情况下增强代码的可读性，并且不改变代码的执行逻辑。<br>注解相当于一种标记，在程序中加上了注解就等于为程序加上了某种标记，以后，JAVAC编译器，开发工具和其他程序可以用反射来了解你的类以及各种元素上有无任何标记，看你有什么标记，就去干相应的事。<br>注解可以用来注解类、方法、属性和方法参数等。</p>
<p>其实关于注解的使用有两派的争论，正方认为注解有助于数据和代码的耦合，在有代码的周边集合数据，反方认为注解把代码和数据混淆在一起，增加了代码的易变性，削弱了代码的健壮性和稳定性。<br>我们姑且不去看这些争论，在合适的地方去使用注解，确实能给我们带来不少便利。<br>目前看到的很多开源框架大部分都会有注解使用的影子，本文就简单的介绍一下注解的使用。</p>
<h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><h3 id="Java-注解"><a href="#Java-注解" class="headerlink" title="Java 注解"></a>Java 注解</h3><ul>
<li>@Override</li>
<li>@JavascriptInterface</li>
<li>@Deprecated</li>
<li>@SuppressWarnings</li>
<li>@Nullable</li>
<li>@NonNull</li>
<li>@StringRes</li>
<li>@DrawableRes</li>
<li>@ColorRes</li>
<li>@InterpolatorRes</li>
<li>@AnyRes</li>
<li>@IntDef</li>
</ul>
<h3 id="Android-注解"><a href="#Android-注解" class="headerlink" title="Android 注解"></a>Android 注解</h3><p>使用时要在build.gradle中加上 <code>compile &#39;com.android.support:support-annotations:22.0.0&#39;</code></p>
<ul>
<li>@StringDef</li>
<li>@UiThread</li>
<li>@MainThread</li>
<li>@WorkerThread</li>
<li>@BinderThread</li>
<li>@ColorInt</li>
<li>@Size</li>
<li>@IntRange</li>
<li>@FloatRange</li>
<li>@RequiresPermission</li>
<li>@CallSuper</li>
<li>@CheckResult</li>
<li>@VisibleForTesting</li>
<li>@Keep</li>
<li>@CheckResult</li>
</ul>
<h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><p>元注解是 java API 提供，是专门用来定义注解的注解。<br>元注解有四个：</p>
<ul>
<li>@Retention</li>
<li>@Target</li>
<li>@Document</li>
<li>@Inherited</li>
</ul>
<h3 id="Retention"><a href="#Retention" class="headerlink" title="Retention"></a>Retention</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(&#123;ElementType.ANNOTATION_TYPE&#125;)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Retention &#123;</div><div class="line">    <span class="function">RetentionPolicy <span class="title">value</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> RetentionPolicy &#123;</div><div class="line">    SOURCE,</div><div class="line">    CLASS,</div><div class="line">    RUNTIME;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">RetentionPolicy</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Retention</code> 表示该注解信息保存在什么级别，可选的参数值在枚举类型 RetentionPolicy 中，包括：</p>
<ul>
<li>RetentionPolicy.SOURCE：在编译阶段丢弃。这些注解在编译结束之后就不再有任何意义，所以它们不会写入字节码。<code>@Override</code>, <code>@SuppressWarnings</code> 都属于这类注解。 </li>
<li>RetentionPolicy.CLASS：默认值，编译器仅把注解保存在 class 文件中，在运行 Java 程序时，JVM 不会保留注释，即不能用反射（在运行期）来获取注释。</li>
<li>RetentionPolicy.RUNTIME：编译器不仅把注解保存在 class 文件中，同时在运行 Java 程序时，JVM 也会保留注释，即可以通过反射来获取注释。</li>
</ul>
<h3 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(&#123;ElementType.ANNOTATION_TYPE&#125;)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Target &#123;</div><div class="line">    ElementType[] value();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ElementType &#123;</div><div class="line">    TYPE,</div><div class="line">    FIELD,</div><div class="line">    METHOD,</div><div class="line">    PARAMETER,</div><div class="line">    CONSTRUCTOR,</div><div class="line">    LOCAL_VARIABLE,</div><div class="line">    ANNOTATION_TYPE,</div><div class="line">    PACKAGE,</div><div class="line">    TYPE_PARAMETER,</div><div class="line">    TYPE_USE;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ElementType</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Target</code> 表示该注解用于什么地方，可能的值在枚举类 ElemenetType 中，包括：</p>
<ul>
<li>ElemenetType.TYPE：修饰类、接口或枚举（enum) </li>
<li>ElemenetType.FIELD：注解成员变量</li>
<li>ElemenetType.METHOD：注解方法</li>
<li>ElemenetType.PARAMETER：注解方法参数 </li>
<li>ElemenetType.CONSTRUCTOR：注解构造函数</li>
<li>ElemenetType.LOCAL_VARIABLE：注解局部变量 </li>
<li>ElemenetType.ANNOTATION_TYPE：注解另一个自定义注解 </li>
<li>ElemenetType.PACKAGE：注解包</li>
<li>ElemenetType.TYPE_PARAMETER：该注解能写在类型变量的声明语句中</li>
<li>ElemenetType.TYPE_USE：该注解能写在使用类型的任何语句中</li>
</ul>
<h3 id="Document"><a href="#Document" class="headerlink" title="Document"></a>Document</h3><p>将此注解包含在 javadoc 中 ，它代表着此注解会被javadoc工具提取成文档。在 doc 文档中的内容会因为此注解的信息内容不同而不同。相当与@see,@param 等。</p>
<h3 id="Inherited"><a href="#Inherited" class="headerlink" title="Inherited"></a>Inherited</h3><p>允许子类继承父类中的该注解。如果不标记@Inherited，那么父类的该注解子类将无法继承。</p>
<h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><p>使用@interface自定义注解时，自动继承了 <code>java.lang.annotation.Annotation</code> 接口，由编译程序自动完成其他细节。在定义注解时，不能继承其他的注解或接口。<code>@interface</code> 用来声明一个注解，其中的每一个方法实际上是声明了一个配置参数。方法的名称就是参数的名称，返回值类型就是参数的类型。可以通过default来声明参数的默认值。<br>自定义注解格式：<br>public @interface 注解名 {定义体}<br>注解参数的可支持数据类型：</p>
<ul>
<li>所有基本数据类型（int,float,boolean,byte,double,char,long,short)</li>
<li>String类型</li>
<li>Class类型</li>
<li>enum类型</li>
<li>Annotation类型</li>
<li>以上所有类型的数组</li>
</ul>
<p>参数设定：</p>
<ul>
<li>只能用public或默认(default)这两个访问权修饰.例如,String value();这里把方法设为defaul默认类型；</li>
<li>参数成员只能用上面列举的集中类型</li>
<li>参数可以设置默认值，如果不设置，必须在添加注解时指定。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(&#123; ElementType.TYPE &#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Fruit&#123;</div><div class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">grade</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</div><div class="line">    <span class="function">String <span class="title">country</span><span class="params">()</span> <span class="keyword">default</span> "China"</span>;</div><div class="line">    String[] saleTo() <span class="keyword">default</span> &#123;&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="注解解析"><a href="#注解解析" class="headerlink" title="注解解析"></a>注解解析</h2><p>我们添加自定义注解的目的就是对标注的类或者方法进行一些特殊处理，这个就需要我们添加注解处理器。<br><code>Class</code> 类提供了下面的方法来获取类的注解信息：</p>
<ul>
<li><code>&lt;A extends Annotation&gt; A getAnnotation(Class&lt;A&gt; annotationType)</code>：获取指定的注解，该注解可以是自己声明的，也可以是继承的</li>
<li><code>Annotation[] getAnnotations()</code>：获取所有的注解，包括自己声明的以及继承的</li>
<li><code>Annotation[] getDeclaredAnnotations()</code>：获取自己声明的注解</li>
<li><code>isAnnotationPresent(Class&lt;? extends Annotation&gt; annotationType)</code>：检查类是否有注解</li>
<li><code>&lt;A extends Annotation&gt; A[] getAnnotationsByType(Class&lt;A&gt; annotationClass)</code></li>
<li><code>&lt;A extends Annotation&gt; A getDeclaredAnnotation(Class&lt;A&gt; var1)</code></li>
</ul>
<p><code>Method</code> 类提供了下面的方法来获取方法的注解信息：</p>
<ul>
<li><code>&lt;A extends Annotation&gt; A getAnnotation(Class&lt;A&gt; annotationType)</code></li>
<li><code>Annotation[][] getParameterAnnotations()</code></li>
</ul>
<p><code>Field</code> 类提供了下面的方法来获取属性的注解信息：</p>
<ul>
<li><code>isAnnotationPresent(Class&lt;? extends Annotation&gt; annotationType)</code></li>
<li><code>&lt;A extends Annotation&gt; A getAnnotation(Class&lt;A&gt; annotationType)</code></li>
<li><code>Annotation[] getDeclaredAnnotations()</code></li>
</ul>
<p>测试代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@Target(&#123; ElementType.TYPE &#125;)</div><div class="line">@Retention(RetentionPolicy.RUNTIME)</div><div class="line">public @interface Fruit&#123;</div><div class="line">    String name();</div><div class="line">    int grade() default 0;</div><div class="line">    String country() default &quot;China&quot;;</div><div class="line">    String[] saleTo() default &#123;&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@Fruit(name = &quot;Apple&quot;, saleTo = &#123;&quot;China&quot;,&quot;USA&quot;&#125;)</div><div class="line">public class TestAnnotation &#123;</div><div class="line">    public void commonMethod() &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @InternalAPI(name = &quot;annotationAPI&quot;, callerList = &#123;&quot;MainActivity&quot;,&quot;Custom&quot;&#125;)</div><div class="line">    public void annotationAPI(String para) &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">@Fruit(name = &quot;Apple&quot;, saleTo = &#123;&quot;China&quot;,&quot;USA&quot;&#125;)</div><div class="line">public class TestAnnotation &#123;</div><div class="line">    public void commonMethod() &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @InternalAPI(name = &quot;annotationAPI&quot;, callerList = &#123;&quot;MainActivity&quot;,&quot;Custom&quot;&#125;)</div><div class="line">    public void annotationAPI(String para) &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="类的注解处理"><a href="#类的注解处理" class="headerlink" title="类的注解处理"></a>类的注解处理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public void classAnnotationProcessor(Object object) &#123;</div><div class="line">    Class&lt;?&gt; cls = object.getClass();</div><div class="line"></div><div class="line">    if (cls.isAnnotationPresent(Fruit.class)) &#123;</div><div class="line">        Fruit fruit = cls.getAnnotation(Fruit.class);</div><div class="line">        if (fruit != null) &#123;</div><div class="line">            String name = fruit.name();</div><div class="line">            String country = fruit.country();</div><div class="line">            int grade = fruit.grade();</div><div class="line">            String [] saleTo = fruit.saleTo();</div><div class="line"></div><div class="line">            Log.e(&quot;Test&quot;,&quot;name = &quot;+name+&quot;,country = &quot;+country+&quot;, grade = &quot;+grade+&quot;, saleTo = &quot;+Arrays.toString(saleTo));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="方法的注解处理"><a href="#方法的注解处理" class="headerlink" title="方法的注解处理"></a>方法的注解处理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public void methodAnnotationProcessor(Object object) &#123;</div><div class="line">    Class&lt;?&gt; cls = object.getClass();</div><div class="line"></div><div class="line">    Method[] methods = cls.getDeclaredMethods();</div><div class="line"></div><div class="line">    for (Method method : methods) &#123;</div><div class="line">        // 获取方法修饰符</div><div class="line">        int modifiers = method.getModifiers();</div><div class="line">        // 获取方法参数列表</div><div class="line">        Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();</div><div class="line">        Log.e(&quot;Test&quot;,&quot;modifiers = &quot;+modifiers+&quot;, parameterTypes=&quot;+ Arrays.toString(parameterTypes));</div><div class="line">        // 获取方法的制定注解，如果没有被指定注解修饰，则返回 null</div><div class="line">        InternalAPI internalAPI = method.getAnnotation(InternalAPI.class);</div><div class="line"></div><div class="line">        if (internalAPI != null) &#123;</div><div class="line">            // 获取注解参数</div><div class="line">            String name = internalAPI.name();</div><div class="line">            boolean isHide = internalAPI.isHide();</div><div class="line">            String[] list = internalAPI.callerList();</div><div class="line">            Log.e(&quot;Test&quot;,&quot;name = &quot;+name+&quot;,isHide = &quot;+isHide+&quot;, caller = &quot;+Arrays.toString(list));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意：</strong></p>
<ul>
<li>子类重写的方法，注解无法被继承</li>
</ul>
<h2 id="annotationProcessor"><a href="#annotationProcessor" class="headerlink" title="annotationProcessor"></a>annotationProcessor</h2><p>annotationProcessor 是处理注解的工具，它用来在编译时扫描和处理注解。<br>在编译的时候就把注解信息给保存下来，这就省了我们在代码中寻找注解的开销，这也是注解类框架非常流行的原因。<br>后面会有专门写一篇博客园来介绍。</p>
<h2 id="注解的运用"><a href="#注解的运用" class="headerlink" title="注解的运用"></a>注解的运用</h2><h3 id="使用注解改进代码检查"><a href="#使用注解改进代码检查" class="headerlink" title="使用注解改进代码检查"></a>使用注解改进代码检查</h3><p><a href="https://developer.android.com/studio/write/annotations" target="_blank" rel="external">Android 官方文档：使用注解改进代码检查</a></p>
<h3 id="注解代替Enum"><a href="#注解代替Enum" class="headerlink" title="注解代替Enum"></a>注解代替Enum</h3><p><a href="http://www.heqiangfly.com/2013/06/26/java-basic-enum/" target="_blank" rel="external">我的博客：Java 基础 – enum</a></p>
]]></content>
    
    <summary type="html">
    
      介绍注解的用法
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Android热修复之AndFix源码分析</title>
    <link href="http://yoursite.com/2016/12/16/open-source-andfix-source-code-analysis/"/>
    <id>http://yoursite.com/2016/12/16/open-source-andfix-source-code-analysis/</id>
    <published>2016-12-16T02:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="AndFix基本原理"><a href="#AndFix基本原理" class="headerlink" title="AndFix基本原理"></a>AndFix基本原理</h2><p>AndFix实现热修复的原理就是用补丁文件的方法来替换原来有bug的方法。这一步骤是在Native层使用指针替换的方式来实现的。<br>基本原理：<br><img src="https://github.com/alibaba/AndFix/raw/master/images/principle.png"><br>实现热修复整体流程：<br><img src="https://github.com/alibaba/AndFix/raw/master/images/process.png"><br>AndFix通过Java的自定义注解来判断一个方法是否应该被替换，如果可以就会hook该方法并进行替换。AndFix在ART架构上的Native方法是<code>art_replaceMethod</code>、在X86架构上的Native方法是<code>dalvik_replaceMethod</code>。他们的实现方式是不同的。对于Dalvik，它将改变目标方法的类型为Native同时hook方法的实现至AndFix自己的Native方法，这个方法称为<code>dalvik_dispatcher</code>,这个方法将会唤醒已经注册的回调，这就是我们通常说的hooked（挂钩）。对于ART来说，我们仅仅改变目标方法的属性来替代它。</p>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="Java源码"><a href="#Java源码" class="headerlink" title="Java源码"></a>Java源码</h3><p>我们根据AndFix的步骤来解析。</p>
<h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><h5 id="创建一个PatchManager实例："><a href="#创建一个PatchManager实例：" class="headerlink" title="创建一个PatchManager实例："></a>创建一个PatchManager实例：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mPatchManager = <span class="keyword">new</span> PatchManager(<span class="keyword">this</span>);</div></pre></td></tr></table></figure>
<p>PatchManager源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">PatchManager</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">	mContext = context;</div><div class="line">	mAndFixManager = <span class="keyword">new</span> AndFixManager(mContext);<span class="comment">//初始化AndFixManager</span></div><div class="line">	mPatchDir = <span class="keyword">new</span> File(mContext.getFilesDir(), DIR);<span class="comment">//初始化存放patch补丁文件的文件夹</span></div><div class="line">	mPatchs = <span class="keyword">new</span> ConcurrentSkipListSet&lt;Patch&gt;();<span class="comment">//初始化存在Patch类的集合,即需要修复类的集合,此类适合大并发</span></div><div class="line">	mLoaders = <span class="keyword">new</span> ConcurrentHashMap&lt;String, ClassLoader&gt;();<span class="comment">//初始化存放类对应的类加载器集合</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ol>
<li>初始化AndFixManager：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">AndFixManager</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">	mContext = context;</div><div class="line">	mSupport = Compat.isSupport();<span class="comment">//判断Android机型是否适支持AndFix</span></div><div class="line">	<span class="keyword">if</span> (mSupport) &#123;</div><div class="line">		mSecurityChecker = <span class="keyword">new</span> SecurityChecker(mContext);<span class="comment">//初始化签名判断类</span></div><div class="line">		mOptDir = <span class="keyword">new</span> File(mContext.getFilesDir(), DIR);</div><div class="line">		<span class="keyword">if</span> (!mOptDir.exists() &amp;&amp; !mOptDir.mkdirs()) &#123;<span class="comment">// make directory fail</span></div><div class="line">			mSupport = <span class="keyword">false</span>;</div><div class="line">			Log.e(TAG, <span class="string">"opt dir create error."</span>);</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!mOptDir.isDirectory()) &#123;<span class="comment">// not directory</span></div><div class="line">			mOptDir.delete();</div><div class="line">			mSupport = <span class="keyword">false</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>1.1 判断是否支持AndFix：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">isSupport</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (isChecked)</div><div class="line">		<span class="keyword">return</span> isSupport;</div><div class="line"></div><div class="line">	isChecked = <span class="keyword">true</span>;</div><div class="line">	<span class="comment">// not support alibaba's YunOs</span></div><div class="line">	<span class="comment">//不支持YunOS系统；AndFix.setup判断是Dalvik还是Art虚拟机，来注册Native方法；isSupportSDKVersion版本SDK判断是否支持，支持android 2.3到android 7.0</span></div><div class="line">	<span class="keyword">if</span> (!isYunOS() &amp;&amp; AndFix.setup() &amp;&amp; isSupportSDKVersion()) &#123;</div><div class="line">		isSupport = <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (inBlackList()) &#123;</div><div class="line">		isSupport = <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> isSupport;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		<span class="keyword">final</span> String vmVersion = System.getProperty(<span class="string">"java.vm.version"</span>);</div><div class="line">		<span class="keyword">boolean</span> isArt = vmVersion != <span class="keyword">null</span> &amp;&amp; vmVersion.startsWith(<span class="string">"2"</span>);<span class="comment">//判断是否是art虚拟机</span></div><div class="line">		<span class="keyword">int</span> apilevel = Build.VERSION.SDK_INT;<span class="comment">//API版本判断</span></div><div class="line">		<span class="keyword">return</span> setup(isArt, apilevel); <span class="comment">//这里用到native方法setup，后面再介绍</span></div><div class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">		Log.e(TAG, <span class="string">"setup"</span>, e);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// from android 2.3 to android 7.0</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSupportSDKVersion</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (android.os.Build.VERSION.SDK_INT &gt;= <span class="number">8</span></div><div class="line">			&amp;&amp; android.os.Build.VERSION.SDK_INT &lt;= <span class="number">24</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>1.2 签名机制的初始化过程：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">SecurityChecker</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">	mContext = context;</div><div class="line">	init(mContext);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// initialize,and check debuggable</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		PackageManager pm = context.getPackageManager();</div><div class="line">		String packageName = context.getPackageName();</div><div class="line"></div><div class="line">		<span class="comment">//获得包含签名的包信息</span></div><div class="line">		PackageInfo packageInfo = pm.getPackageInfo(packageName,</div><div class="line">				PackageManager.GET_SIGNATURES);</div><div class="line">		<span class="comment">//证书工厂类，这个类实现了出厂合格证算法的功能</span></div><div class="line">		CertificateFactory certFactory = CertificateFactory</div><div class="line">				.getInstance(<span class="string">"X.509"</span>);</div><div class="line">		<span class="comment">//将签名转换为字节数组流</span></div><div class="line">		ByteArrayInputStream stream = <span class="keyword">new</span> ByteArrayInputStream(</div><div class="line">				packageInfo.signatures[<span class="number">0</span>].toByteArray());</div><div class="line">		<span class="comment">//X509证书，X.509是一种非常通用的证书格式</span></div><div class="line">		X509Certificate cert = (X509Certificate) certFactory</div><div class="line">				.generateCertificate(stream);</div><div class="line">		<span class="comment">//以X500Principal的形式返回证书的主体（主体标识名）值，来判断是否是debug的key</span></div><div class="line">		mDebuggable = cert.getSubjectX500Principal().equals(DEBUG_DN);</div><div class="line">		<span class="comment">//从此证书中获取公钥。 </span></div><div class="line">		mPublicKey = cert.getPublicKey();</div><div class="line">	&#125; <span class="keyword">catch</span> (NameNotFoundException e) &#123;</div><div class="line">		Log.e(TAG, <span class="string">"init"</span>, e);</div><div class="line">	&#125; <span class="keyword">catch</span> (CertificateException e) &#123;</div><div class="line">		Log.e(TAG, <span class="string">"init"</span>, e);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="版本的初始化"><a href="#版本的初始化" class="headerlink" title="版本的初始化"></a>版本的初始化</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mPatchManager.init(version);</div></pre></td></tr></table></figure>
<p>init方法源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(String appVersion)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (!mPatchDir.exists() &amp;&amp; !mPatchDir.mkdirs()) &#123;<span class="comment">// make directory fail</span></div><div class="line">		Log.e(TAG, <span class="string">"patch dir create error."</span>);</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!mPatchDir.isDirectory()) &#123;<span class="comment">// not directory</span></div><div class="line">		mPatchDir.delete();</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//从SharedPreferences文件_andfix_.xml中获取patch文件的信息</span></div><div class="line">	SharedPreferences sp = mContext.getSharedPreferences(SP_NAME,</div><div class="line">			Context.MODE_PRIVATE);</div><div class="line">	String ver = sp.getString(SP_VERSION, <span class="keyword">null</span>);</div><div class="line">	<span class="keyword">if</span> (ver == <span class="keyword">null</span> || !ver.equalsIgnoreCase(appVersion)) &#123;</div><div class="line">		cleanPatch();<span class="comment">//删除本地patch文件，也就是/data/data/***/file/apatch下面的patch文件</span></div><div class="line">		sp.edit().putString(SP_VERSION, appVersion).commit();<span class="comment">//并把传入的版本号保存</span></div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		initPatchs();<span class="comment">//初始化patch列表，把本地的patch文件加载到内存</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">cleanPatch</span><span class="params">()</span> </span>&#123;</div><div class="line">	File[] files = mPatchDir.listFiles();</div><div class="line">	<span class="keyword">for</span> (File file : files) &#123;</div><div class="line">		mAndFixManager.removeOptFile(file);<span class="comment">///data/data/***/file/apatch_opt下面的patch文件</span></div><div class="line">		<span class="keyword">if</span> (!FileUtil.deleteFile(file)) &#123;</div><div class="line">			Log.e(TAG, file.getName() + <span class="string">" delete error."</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initPatchs</span><span class="params">()</span> </span>&#123;</div><div class="line">	File[] files = mPatchDir.listFiles();</div><div class="line">	<span class="keyword">for</span> (File file : files) &#123;</div><div class="line">		addPatch(file);<span class="comment">//加载Patch文件</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> Patch <span class="title">addPatch</span><span class="params">(File file)</span> </span>&#123;</div><div class="line">	Patch patch = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">if</span> (file.getName().endsWith(SUFFIX)) &#123; <span class="comment">//判断是否是.apatch后缀的文件</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			patch = <span class="keyword">new</span> Patch(file);</div><div class="line">			mPatchs.add(patch);</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			Log.e(TAG, <span class="string">"addPatch"</span>, e);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> patch;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Patch文件：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Patch</span><span class="params">(File file)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">	mFile = file;</div><div class="line">	init();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">	JarFile jarFile = <span class="keyword">null</span>;</div><div class="line">	InputStream inputStream = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		jarFile = <span class="keyword">new</span> JarFile(mFile);<span class="comment">//使用JarFile读取Patch文件</span></div><div class="line">		JarEntry entry = jarFile.getJarEntry(ENTRY_NAME);<span class="comment">//获取META-INF/PATCH.MF文件</span></div><div class="line">		inputStream = jarFile.getInputStream(entry);</div><div class="line">		Manifest manifest = <span class="keyword">new</span> Manifest(inputStream);</div><div class="line">		Attributes main = manifest.getMainAttributes();</div><div class="line">		mName = main.getValue(PATCH_NAME);<span class="comment">//获取PATCH.MF属性Patch-Name</span></div><div class="line">		mTime = <span class="keyword">new</span> Date(main.getValue(CREATED_TIME));<span class="comment">//获取PATCH.MF属性Created-Time</span></div><div class="line"></div><div class="line">		mClassesMap = <span class="keyword">new</span> HashMap&lt;String, List&lt;String&gt;&gt;();</div><div class="line">		Attributes.Name attrName;</div><div class="line">		String name;</div><div class="line">		List&lt;String&gt; strings;</div><div class="line">		<span class="keyword">for</span> (Iterator&lt;?&gt; it = main.keySet().iterator(); it.hasNext();) &#123;</div><div class="line">			attrName = (Attributes.Name) it.next();</div><div class="line">			name = attrName.toString();</div><div class="line">			<span class="comment">//判断name的后缀是否是-Classes，并把name对应的值加入到集合中，对应的值就是class类名的列表</span></div><div class="line">			<span class="keyword">if</span> (name.endsWith(CLASSES)) &#123;</div><div class="line">				strings = Arrays.asList(main.getValue(attrName).split(<span class="string">","</span>));</div><div class="line">				<span class="keyword">if</span> (name.equalsIgnoreCase(PATCH_CLASSES)) &#123;</div><div class="line">					mClassesMap.put(mName, strings);</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					mClassesMap.put(</div><div class="line">							name.trim().substring(<span class="number">0</span>, name.length() - <span class="number">8</span>),<span class="comment">// remove</span></div><div class="line">																		<span class="comment">// "-Classes"</span></div><div class="line">							strings);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">finally</span> &#123;</div><div class="line">		<span class="keyword">if</span> (jarFile != <span class="keyword">null</span>) &#123;</div><div class="line">			jarFile.close();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (inputStream != <span class="keyword">null</span>) &#123;</div><div class="line">			inputStream.close();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="运行时加载Patch文件"><a href="#运行时加载Patch文件" class="headerlink" title="运行时加载Patch文件"></a>运行时加载Patch文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mPatchManager.loadPatch();</div></pre></td></tr></table></figure>
<p>loadPatch源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadPatch</span><span class="params">()</span> </span>&#123;</div><div class="line">	mLoaders.put(<span class="string">"*"</span>, mContext.getClassLoader());<span class="comment">// wildcard</span></div><div class="line">	Set&lt;String&gt; patchNames;</div><div class="line">	List&lt;String&gt; classes;</div><div class="line">	<span class="keyword">for</span> (Patch patch : mPatchs) &#123;</div><div class="line">		patchNames = patch.getPatchNames();</div><div class="line">		<span class="keyword">for</span> (String patchName : patchNames) &#123;</div><div class="line">			classes = patch.getClasses(patchName);</div><div class="line">			mAndFixManager.fix(patch.getFile(), mContext.getClassLoader(),</div><div class="line">					classes);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>重头戏，Fix bug：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">fix</span><span class="params">(File file, ClassLoader classLoader,</span></span></div><div class="line">		List&lt;String&gt; classes) &#123;</div><div class="line">	<span class="keyword">if</span> (!mSupport) &#123;</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//校验签名</span></div><div class="line">	<span class="keyword">if</span> (!mSecurityChecker.verifyApk(file)) &#123;<span class="comment">// security check fail</span></div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		<span class="comment">//校验apatch_opt下面的同名patch文件，防止漏洞攻击</span></div><div class="line">		File optfile = <span class="keyword">new</span> File(mOptDir, file.getName());</div><div class="line">		<span class="keyword">boolean</span> saveFingerprint = <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">if</span> (optfile.exists()) &#123;</div><div class="line">			<span class="comment">// need to verify fingerprint when the optimize file exist,</span></div><div class="line">			<span class="comment">// prevent someone attack on jailbreak device with</span></div><div class="line">			<span class="comment">// Vulnerability-Parasyte.</span></div><div class="line">			<span class="comment">// btw:exaggerated android Vulnerability-Parasyte</span></div><div class="line">			<span class="comment">// http://secauo.com/Exaggerated-Android-Vulnerability-Parasyte.html</span></div><div class="line">			<span class="keyword">if</span> (mSecurityChecker.verifyOpt(optfile)) &#123;</div><div class="line">				saveFingerprint = <span class="keyword">false</span>;</div><div class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!optfile.delete()) &#123;</div><div class="line">				<span class="keyword">return</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">//加载patch文件中的dex</span></div><div class="line">		<span class="keyword">final</span> DexFile dexFile = DexFile.loadDex(file.getAbsolutePath(),</div><div class="line">				optfile.getAbsolutePath(), Context.MODE_PRIVATE);</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (saveFingerprint) &#123;</div><div class="line">			<span class="comment">//保存文件md5</span></div><div class="line">			mSecurityChecker.saveOptSig(optfile);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		ClassLoader patchClassLoader = <span class="keyword">new</span> ClassLoader(classLoader) &#123;</div><div class="line">			<span class="comment">//重写ClasLoader的findClass方法</span></div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="keyword">protected</span> Class&lt;?&gt; findClass(String className)</div><div class="line">					<span class="keyword">throws</span> ClassNotFoundException &#123;</div><div class="line">				Class&lt;?&gt; clazz = dexFile.loadClass(className, <span class="keyword">this</span>);</div><div class="line">				<span class="keyword">if</span> (clazz == <span class="keyword">null</span></div><div class="line">						&amp;&amp; className.startsWith(<span class="string">"com.alipay.euler.andfix"</span>)) &#123;</div><div class="line">					<span class="keyword">return</span> Class.forName(className);<span class="comment">// annotation’s class</span></div><div class="line">														<span class="comment">// not found</span></div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</div><div class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(className);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">return</span> clazz;</div><div class="line">			&#125;</div><div class="line">		&#125;;</div><div class="line">		Enumeration&lt;String&gt; entrys = dexFile.entries();</div><div class="line">		Class&lt;?&gt; clazz = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">while</span> (entrys.hasMoreElements()) &#123;</div><div class="line">			String entry = entrys.nextElement();</div><div class="line">			<span class="keyword">if</span> (classes != <span class="keyword">null</span> &amp;&amp; !classes.contains(entry)) &#123;</div><div class="line">				<span class="keyword">continue</span>;<span class="comment">// skip, not need fix</span></div><div class="line">			&#125;</div><div class="line">			clazz = dexFile.loadClass(entry, patchClassLoader);<span class="comment">//获取有bug的类文件</span></div><div class="line">			<span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</div><div class="line">				fixClass(clazz, classLoader);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">		Log.e(TAG, <span class="string">"pacth"</span>, e);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fixClass</span><span class="params">(Class&lt;?&gt; clazz, ClassLoader classLoader)</span> </span>&#123;</div><div class="line">	Method[] methods = clazz.getDeclaredMethods();</div><div class="line">	MethodReplace methodReplace;</div><div class="line">	String clz;</div><div class="line">	String meth;</div><div class="line">	<span class="keyword">for</span> (Method method : methods) &#123;</div><div class="line">		<span class="comment">////获取此方法的注解，有bug的方法在生成的patch的类中的方法都是有注解的</span></div><div class="line">		methodReplace = method.getAnnotation(MethodReplace.class);</div><div class="line">		<span class="keyword">if</span> (methodReplace == <span class="keyword">null</span>)</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line">		clz = methodReplace.clazz();<span class="comment">//获取注解中clazz的值</span></div><div class="line">		meth = methodReplace.method();<span class="comment">//获取注解中method的值</span></div><div class="line">		<span class="keyword">if</span> (!isEmpty(clz) &amp;&amp; !isEmpty(meth)) &#123;</div><div class="line">			replaceMethod(classLoader, clz, meth, method);<span class="comment">//方法替换</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">replaceMethod</span><span class="params">(ClassLoader classLoader, String clz,</span></span></div><div class="line">		String meth, Method method) &#123;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		String key = clz + <span class="string">"@"</span> + classLoader.toString();</div><div class="line">		Class&lt;?&gt; clazz = mFixedClass.get(key);<span class="comment">//判断此类是否被fix</span></div><div class="line">		<span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;<span class="comment">// class not load</span></div><div class="line">			Class&lt;?&gt; clzz = classLoader.loadClass(clz);</div><div class="line">			<span class="comment">// initialize target class</span></div><div class="line">			clazz = AndFix.initTargetClass(clzz);<span class="comment">//初始化class</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;<span class="comment">// initialize class OK</span></div><div class="line">			mFixedClass.put(key, clazz);</div><div class="line">			Method src = clazz.getDeclaredMethod(meth,</div><div class="line">					method.getParameterTypes());<span class="comment">//根据反射获取到有bug的类的方法(有bug的apk)</span></div><div class="line">			AndFix.addReplaceMethod(src, method);<span class="comment">//src是有bug的方法，method是补丁方法</span></div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">		Log.e(TAG, <span class="string">"replaceMethod"</span>, e);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>AndFix.addReplaceMethod源码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addReplaceMethod</span><span class="params">(Method src, Method dest)</span> </span>&#123;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		replaceMethod(src, dest);<span class="comment">//调用了native方法，具体见JNI方法介绍</span></div><div class="line">		initFields(dest.getDeclaringClass());</div><div class="line">	&#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line">		Log.e(TAG, <span class="string">"addReplaceMethod"</span>, e);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initFields</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</div><div class="line">	Field[] srcFields = clazz.getDeclaredFields();</div><div class="line">	<span class="keyword">for</span> (Field srcField : srcFields) &#123;</div><div class="line">		Log.d(TAG, <span class="string">"modify "</span> + clazz.getName() + <span class="string">"."</span> + srcField.getName()</div><div class="line">				+ <span class="string">" flag:"</span>);</div><div class="line">		setFieldFlag(srcField);<span class="comment">//调用了native方法，具体见JNI方法介绍</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">replaceMethod</span><span class="params">(Method dest, Method src)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">setFieldFlag</span><span class="params">(Field field)</span></span>;</div></pre></td></tr></table></figure>
<h4 id="添加Patch"><a href="#添加Patch" class="headerlink" title="添加Patch"></a>添加Patch</h4><p>也就是将SDCard中的Patch文件copy到/data/data/<em>*</em>/apatch下面，并加载。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    <span class="comment">// .apatch file path</span></div><div class="line">    String patchFileString = Environment.getExternalStorageDirectory()</div><div class="line">            .getAbsolutePath() + APATCH_PATH;</div><div class="line">    Log.e(TAG, <span class="string">"path:"</span> + patchFileString );</div><div class="line">    mPatchManager.addPatch(patchFileString);</div><div class="line">    Log.e(TAG, <span class="string">"apatch:"</span> + patchFileString + <span class="string">" added."</span>);</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    Log.e(TAG, <span class="string">""</span>, e);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>PatchManager.addPatch源码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addPatch</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">	File src = <span class="keyword">new</span> File(path);</div><div class="line">	File dest = <span class="keyword">new</span> File(mPatchDir, src.getName());</div><div class="line">	<span class="keyword">if</span>(!src.exists())&#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(path);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (dest.exists()) &#123;</div><div class="line">		Log.d(TAG, <span class="string">"patch ["</span> + path + <span class="string">"] has be loaded."</span>);</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	FileUtil.copyFile(src, dest);<span class="comment">// copy to patch's directory</span></div><div class="line">	Patch patch = addPatch(dest);<span class="comment">//同loadPatch中的addPatch一样的操作</span></div><div class="line">	<span class="keyword">if</span> (patch != <span class="keyword">null</span>) &#123;</div><div class="line">		loadPatch(patch);<span class="comment">//加载pach，同上loadPatch</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="JNI源码"><a href="#JNI源码" class="headerlink" title="JNI源码"></a>JNI源码</h3><p>AndFix分别针对Dalvik虚拟机和Art虚拟机，实现了不同的native方法。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//dalvik</span></div><div class="line"><span class="function"><span class="keyword">extern</span> jboolean <span class="title">dalvik_setup</span><span class="params">(JNIEnv* env, <span class="keyword">int</span> apilevel)</span></span>;</div><div class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">dalvik_replaceMethod</span><span class="params">(JNIEnv* env, jobject src, jobject dest)</span></span>;</div><div class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">dalvik_setFieldFlag</span><span class="params">(JNIEnv* env, jobject field)</span></span>;</div><div class="line"><span class="comment">//art</span></div><div class="line"><span class="function"><span class="keyword">extern</span> jboolean <span class="title">art_setup</span><span class="params">(JNIEnv* env, <span class="keyword">int</span> apilevel)</span></span>;</div><div class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">art_replaceMethod</span><span class="params">(JNIEnv* env, jobject src, jobject dest)</span></span>;</div><div class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">art_setFieldFlag</span><span class="params">(JNIEnv* env, jobject field)</span></span>;</div></pre></td></tr></table></figure>
<h4 id="setUp"><a href="#setUp" class="headerlink" title="setUp"></a>setUp</h4><h5 id="Dalvik-setUp"><a href="#Dalvik-setUp" class="headerlink" title="Dalvik setUp"></a>Dalvik setUp</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">extern</span> jboolean __attribute__ ((visibility (<span class="string">"hidden"</span>))) dalvik_setup(</div><div class="line">		JNIEnv* env, <span class="keyword">int</span> apilevel) &#123;</div><div class="line">	<span class="keyword">void</span>* dvm_hand = dlopen(<span class="string">"libdvm.so"</span>, RTLD_NOW);</div><div class="line">	<span class="keyword">if</span> (dvm_hand) &#123;</div><div class="line">		<span class="comment">//从libdvm.so中获取两个函数的指针：dvmDecodeIndirectRef和dvmThreadSelf。</span></div><div class="line">		dvmDecodeIndirectRef_fnPtr = dvm_dlsym(dvm_hand,</div><div class="line">				apilevel &gt; <span class="number">10</span> ?</div><div class="line">						<span class="string">"_Z20dvmDecodeIndirectRefP6ThreadP8_jobject"</span> :</div><div class="line">						<span class="string">"dvmDecodeIndirectRef"</span>);</div><div class="line">		<span class="keyword">if</span> (!dvmDecodeIndirectRef_fnPtr) &#123;</div><div class="line">			<span class="keyword">return</span> JNI_FALSE;</div><div class="line">		&#125;</div><div class="line">		dvmThreadSelf_fnPtr = dvm_dlsym(dvm_hand,</div><div class="line">				apilevel &gt; <span class="number">10</span> ? <span class="string">"_Z13dvmThreadSelfv"</span> : <span class="string">"dvmThreadSelf"</span>);</div><div class="line">		<span class="keyword">if</span> (!dvmThreadSelf_fnPtr) &#123;</div><div class="line">			<span class="keyword">return</span> JNI_FALSE;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//获得Method类的getDeclaringClass方法ID jClassMethod</span></div><div class="line">		jclass clazz = env-&gt;FindClass(<span class="string">"java/lang/reflect/Method"</span>);</div><div class="line">		jClassMethod = env-&gt;GetMethodID(clazz, <span class="string">"getDeclaringClass"</span>,</div><div class="line">						<span class="string">"()Ljava/lang/Class;"</span>);</div><div class="line"></div><div class="line">		<span class="keyword">return</span> JNI_TRUE;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> JNI_FALSE;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>dvmDecodeIndirectRef是libdvm中的方法，它可以从java对象的间接引用获得ClassObject对象。在dalvik_replaceMethod会用到这个方法。</p>
<h5 id="Art-setUp"><a href="#Art-setUp" class="headerlink" title="Art setUp"></a>Art setUp</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">extern</span> jboolean __attribute__ ((visibility (<span class="string">"hidden"</span>))) art_setup(JNIEnv* env,</div><div class="line">		<span class="keyword">int</span> level) &#123;</div><div class="line">	apilevel = level;</div><div class="line">	<span class="keyword">return</span> JNI_TRUE;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>art_setup很简单，只是记录了apilevel。以便后面替换方法的时候选取不同的处理函数。</p>
<h4 id="replaceMethod"><a href="#replaceMethod" class="headerlink" title="replaceMethod"></a>replaceMethod</h4><h5 id="Dalvik-replaceMethod"><a href="#Dalvik-replaceMethod" class="headerlink" title="Dalvik replaceMethod"></a>Dalvik replaceMethod</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">extern</span> <span class="keyword">void</span> __attribute__ ((visibility (<span class="string">"hidden"</span>))) dalvik_replaceMethod(</div><div class="line">		JNIEnv* env, jobject src, jobject dest) &#123;</div><div class="line">	jobject clazz = env-&gt;CallObjectMethod(dest, jClassMethod);</div><div class="line">	ClassObject* clz = (ClassObject*) dvmDecodeIndirectRef_fnPtr(</div><div class="line">			dvmThreadSelf_fnPtr(), clazz);</div><div class="line">	clz-&gt;status = CLASS_INITIALIZED;</div><div class="line"></div><div class="line">	Method* meth = (Method*) env-&gt;FromReflectedMethod(src);</div><div class="line">	Method* target = (Method*) env-&gt;FromReflectedMethod(dest);</div><div class="line">	LOGD(<span class="string">"dalvikMethod: %s"</span>, meth-&gt;name);</div><div class="line"></div><div class="line"><span class="comment">//	meth-&gt;clazz = target-&gt;clazz;</span></div><div class="line">	meth-&gt;accessFlags |= ACC_PUBLIC;</div><div class="line">	meth-&gt;methodIndex = target-&gt;methodIndex;</div><div class="line">	meth-&gt;jniArgInfo = target-&gt;jniArgInfo;</div><div class="line">	meth-&gt;registersSize = target-&gt;registersSize;</div><div class="line">	meth-&gt;outsSize = target-&gt;outsSize;</div><div class="line">	meth-&gt;insSize = target-&gt;insSize;</div><div class="line"></div><div class="line">	meth-&gt;prototype = target-&gt;prototype;</div><div class="line">	meth-&gt;insns = target-&gt;insns;</div><div class="line">	meth-&gt;nativeFunc = target-&gt;nativeFunc;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="Art-replaceMethod"><a href="#Art-replaceMethod" class="headerlink" title="Art replaceMethod"></a>Art replaceMethod</h5><p>Art针对不同的Android版本实现了不同的方法</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">extern</span> <span class="keyword">void</span> __attribute__ ((visibility (<span class="string">"hidden"</span>))) art_replaceMethod(</div><div class="line">		JNIEnv* env, jobject src, jobject dest) &#123;</div><div class="line">    <span class="keyword">if</span> (apilevel &gt; <span class="number">23</span>) &#123;</div><div class="line">        replace_7_0(env, src, dest);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (apilevel &gt; <span class="number">22</span>) &#123;</div><div class="line">		replace_6_0(env, src, dest);</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (apilevel &gt; <span class="number">21</span>) &#123;</div><div class="line">		replace_5_1(env, src, dest);</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (apilevel &gt; <span class="number">19</span>) &#123;</div><div class="line">		replace_5_0(env, src, dest);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        replace_4_4(env, src, dest);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以6.0为例：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">replace_6_0</span><span class="params">(JNIEnv* env, jobject src, jobject dest)</span> </span>&#123;</div><div class="line">	art::mirror::ArtMethod* smeth =</div><div class="line">			(art::mirror::ArtMethod*) env-&gt;FromReflectedMethod(src);</div><div class="line"></div><div class="line">	art::mirror::ArtMethod* dmeth =</div><div class="line">			(art::mirror::ArtMethod*) env-&gt;FromReflectedMethod(dest);</div><div class="line"></div><div class="line">    <span class="keyword">reinterpret_cast</span>&lt;art::mirror::Class*&gt;(dmeth-&gt;declaring_class_)-&gt;class_loader_ =</div><div class="line">    <span class="keyword">reinterpret_cast</span>&lt;art::mirror::Class*&gt;(smeth-&gt;declaring_class_)-&gt;class_loader_; <span class="comment">//for plugin classloader</span></div><div class="line">    <span class="keyword">reinterpret_cast</span>&lt;art::mirror::Class*&gt;(dmeth-&gt;declaring_class_)-&gt;clinit_thread_id_ =</div><div class="line">    <span class="keyword">reinterpret_cast</span>&lt;art::mirror::Class*&gt;(smeth-&gt;declaring_class_)-&gt;clinit_thread_id_;</div><div class="line">    <span class="keyword">reinterpret_cast</span>&lt;art::mirror::Class*&gt;(dmeth-&gt;declaring_class_)-&gt;status_ = <span class="keyword">reinterpret_cast</span>&lt;art::mirror::Class*&gt;(smeth-&gt;declaring_class_)-&gt;status_<span class="number">-1</span>;</div><div class="line">    <span class="comment">//for reflection invoke</span></div><div class="line">    <span class="keyword">reinterpret_cast</span>&lt;art::mirror::Class*&gt;(dmeth-&gt;declaring_class_)-&gt;super_class_ = <span class="number">0</span>;</div><div class="line"></div><div class="line">    smeth-&gt;declaring_class_ = dmeth-&gt;declaring_class_;</div><div class="line">    smeth-&gt;dex_cache_resolved_methods_ = dmeth-&gt;dex_cache_resolved_methods_;</div><div class="line">    smeth-&gt;dex_cache_resolved_types_ = dmeth-&gt;dex_cache_resolved_types_;</div><div class="line">    smeth-&gt;access_flags_ = dmeth-&gt;access_flags_ | <span class="number">0x0001</span>;</div><div class="line">    smeth-&gt;dex_code_item_offset_ = dmeth-&gt;dex_code_item_offset_;</div><div class="line">    smeth-&gt;dex_method_index_ = dmeth-&gt;dex_method_index_;</div><div class="line">    smeth-&gt;method_index_ = dmeth-&gt;method_index_;</div><div class="line">    </div><div class="line">    smeth-&gt;ptr_sized_fields_.entry_point_from_interpreter_ =</div><div class="line">    dmeth-&gt;ptr_sized_fields_.entry_point_from_interpreter_;</div><div class="line">    </div><div class="line">    smeth-&gt;ptr_sized_fields_.entry_point_from_jni_ =</div><div class="line">    dmeth-&gt;ptr_sized_fields_.entry_point_from_jni_;</div><div class="line">    smeth-&gt;ptr_sized_fields_.entry_point_from_quick_compiled_code_ =</div><div class="line">    dmeth-&gt;ptr_sized_fields_.entry_point_from_quick_compiled_code_;</div><div class="line">    </div><div class="line">    LOGD(<span class="string">"replace_6_0: %d , %d"</span>,</div><div class="line">         smeth-&gt;ptr_sized_fields_.entry_point_from_quick_compiled_code_,</div><div class="line">         dmeth-&gt;ptr_sized_fields_.entry_point_from_quick_compiled_code_);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      通过分析热修复框架AndFix的源码来了解其基本原理
    
    </summary>
    
      <category term="Android开源项目" scheme="http://yoursite.com/categories/Android%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="热修复" scheme="http://yoursite.com/tags/%E7%83%AD%E4%BF%AE%E5%A4%8D/"/>
    
      <category term="AndFix" scheme="http://yoursite.com/tags/AndFix/"/>
    
  </entry>
  
  <entry>
    <title>Android热修复之AndFix使用简介</title>
    <link href="http://yoursite.com/2016/12/15/open-source-andfix-introduction/"/>
    <id>http://yoursite.com/2016/12/15/open-source-andfix-introduction/</id>
    <published>2016-12-15T02:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="AndFix简介"><a href="#AndFix简介" class="headerlink" title="AndFix简介"></a>AndFix简介</h2><p>AndFix，全称是 Android hot-fix。是阿里开源的一个Android热补丁框架，允许APP在不重新发布版本的情况下修复线上的bug，支持Android 2.3 到 6.0。<br><a href="https://github.com/alibaba/AndFix" target="_blank" rel="external">GitHub源码</a></p>
<h2 id="AndFix使用"><a href="#AndFix使用" class="headerlink" title="AndFix使用"></a>AndFix使用</h2><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>在build.gradle中添加依赖：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile &apos;com.alipay.euler:andfix:0.5.0@aar&apos;</div></pre></td></tr></table></figure>
<p>添加读取SDcard权限</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_EXTERNAL_STORAGE"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>Application：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MainApplication"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String APATCH_PATH = <span class="string">"/out.apatch"</span>;</div><div class="line">    <span class="keyword">private</span> PatchManager mPatchManager;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line"></div><div class="line">        <span class="comment">// initialize</span></div><div class="line">        mPatchManager = <span class="keyword">new</span> PatchManager(<span class="keyword">this</span>);</div><div class="line">        mPatchManager.init(<span class="string">"1.0"</span>);</div><div class="line">        Log.e(TAG, <span class="string">"inited."</span>);</div><div class="line"></div><div class="line">        <span class="comment">// load patch</span></div><div class="line">        mPatchManager.loadPatch();</div><div class="line">        Log.e(TAG, <span class="string">"apatch loaded."</span>);</div><div class="line"></div><div class="line">        <span class="comment">// add patch at runtime</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// .apatch file path</span></div><div class="line">            String patchFileString = Environment.getExternalStorageDirectory()</div><div class="line">                    .getAbsolutePath() + APATCH_PATH;</div><div class="line">            Log.e(TAG, <span class="string">"path:"</span> + patchFileString );</div><div class="line">            mPatchManager.addPatch(patchFileString);</div><div class="line">            Log.e(TAG, <span class="string">"apatch:"</span> + patchFileString + <span class="string">" added."</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            Log.e(TAG, <span class="string">""</span>, e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里通过一个测试类来验证，修复之前：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getString</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"There is a bug!"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修复之后：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getString</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Bug has been fixed!"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>把获得的字符串现实在一个<code>TextView</code>上面。</p>
<h3 id="生成Patch文件"><a href="#生成Patch文件" class="headerlink" title="生成Patch文件"></a>生成Patch文件</h3><p>使用工具apkpatch-1.0.3来生成patch文件，这个工具可以在这里<a href="https://github.com/alibaba/AndFix/raw/master/tools/apkpatch-1.0.3.zip" target="_blank" rel="external">下载</a>。<br>用法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">usage: apkpatch -f &lt;new&gt; -t &lt;old&gt; -o &lt;output&gt; -k &lt;keystore&gt; -p &lt;***&gt; -a &lt;alias&gt; -e &lt;***&gt;</div><div class="line"> -a,--alias &lt;alias&gt;     keystore entry alias.</div><div class="line"> -e,--epassword &lt;***&gt;   keystore entry password.</div><div class="line"> -f,--from &lt;loc&gt;        new Apk file path.</div><div class="line"> -k,--keystore &lt;loc&gt;    keystore path.</div><div class="line"> -n,--name &lt;name&gt;       patch name.</div><div class="line"> -o,--out &lt;dir&gt;         output dir.</div><div class="line"> -p,--kpassword &lt;***&gt;   keystore password.</div><div class="line"> -t,--to &lt;loc&gt;          old Apk file path.</div></pre></td></tr></table></figure>
<p>原理：根据两个apk包，一个是线上已经发布的包，另外一个是新的修复bug的包，生成一个差异文件，就是所谓的补丁文件即patch文件。<br>根据下面命令生成一个.patch文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./apkpatch.sh -f new.apk -t old.apk -o out.apatch -k debug.keystore -p android -a androiddebugkey -e android</div><div class="line">add modified Method:Ljava/lang/String;  getString()  in Class:Lcom/android/hq/andfixtest/Test;</div></pre></td></tr></table></figure></p>
<p>会在当前目录下面生成out.apatch目录，目录中.apatch后缀的文件就是我们需要的patch文件。</p>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>进入目录将.apatch文件重命名后copy到手机中。先安装old.apk，运行，显示There is a bug！然后再将patch文件copy到sdcard，重启应用显示Bug has been fixed！测试成功！<br>之后应用会把patch放在/data/data/<strong>*</strong>/files/apatch，sdcard目录下面的删除掉就可以了。</p>
<h2 id="遇到的错误"><a href="#遇到的错误" class="headerlink" title="遇到的错误"></a>遇到的错误</h2><h3 id="File-too-short-to-be-a-zip-file"><a href="#File-too-short-to-be-a-zip-file" class="headerlink" title="File too short to be a zip file"></a>File too short to be a zip file</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">01-19 17:16:16.138  9508  9508 D AndFix  : vm is: art , apilevel is: 23</div><div class="line">01-19 17:16:16.143  9508  9508 E PatchManager: addPatch</div><div class="line">01-19 17:16:16.143  9508  9508 E PatchManager: java.util.zip.ZipException: File too short to be a zip file: 0</div><div class="line">01-19 17:16:16.143  9508  9508 E PatchManager: 	at java.util.zip.ZipFile.readCentralDir(ZipFile.java:388)</div><div class="line">01-19 17:16:16.143  9508  9508 E PatchManager: 	at java.util.zip.ZipFile.&lt;init&gt;(ZipFile.java:175)</div><div class="line">01-19 17:16:16.143  9508  9508 E PatchManager: 	at java.util.jar.JarFile.&lt;init&gt;(JarFile.java:199)</div><div class="line">01-19 17:16:16.143  9508  9508 E PatchManager: 	at java.util.jar.JarFile.&lt;init&gt;(JarFile.java:182)</div><div class="line">01-19 17:16:16.143  9508  9508 E PatchManager: 	at java.util.jar.JarFile.&lt;init&gt;(JarFile.java:168)</div><div class="line">01-19 17:16:16.143  9508  9508 E PatchManager: 	at com.alipay.euler.andfix.patch.Patch.init(Patch.java:75)</div><div class="line">01-19 17:16:16.143  9508  9508 E PatchManager: 	at com.alipay.euler.andfix.patch.Patch.&lt;init&gt;(Patch.java:67)</div><div class="line">01-19 17:16:16.143  9508  9508 E PatchManager: 	at com.alipay.euler.andfix.patch.PatchManager.addPatch(PatchManager.java:126)</div><div class="line">01-19 17:16:16.143  9508  9508 E PatchManager: 	at com.alipay.euler.andfix.patch.PatchManager.initPatchs(PatchManager.java:112)</div><div class="line">01-19 17:16:16.143  9508  9508 E PatchManager: 	at com.alipay.euler.andfix.patch.PatchManager.init(PatchManager.java:105)</div><div class="line">01-19 17:16:16.143  9508  9508 E PatchManager: 	at com.android.hq.andfixtest.MainApplication.onCreate(MainApplication.java:25)</div><div class="line">01-19 17:16:16.143  9508  9508 E PatchManager: 	at com.android.tools.fd.runtime.BootstrapApplication.onCreate(BootstrapApplication.java:370)</div><div class="line">01-19 17:16:16.143  9508  9508 E PatchManager: 	at android.app.Instrumentation.callApplicationOnCreate(Instrumentation.java:1020)</div><div class="line">01-19 17:16:16.143  9508  9508 E PatchManager: 	at android.app.ActivityThread.handleBindApplication(ActivityThread.java:4952)</div><div class="line">01-19 17:16:16.143  9508  9508 E PatchManager: 	at android.app.ActivityThread.-wrap1(ActivityThread.java)</div><div class="line">01-19 17:16:16.143  9508  9508 E PatchManager: 	at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1531)</div><div class="line">01-19 17:16:16.143  9508  9508 E PatchManager: 	at android.os.Handler.dispatchMessage(Handler.java:102)</div><div class="line">01-19 17:16:16.143  9508  9508 E PatchManager: 	at android.os.Looper.loop(Looper.java:148)</div><div class="line">01-19 17:16:16.143  9508  9508 E PatchManager: 	at android.app.ActivityThread.main(ActivityThread.java:5660)</div><div class="line">01-19 17:16:16.143  9508  9508 E PatchManager: 	at java.lang.reflect.Method.invoke(Native Method)</div><div class="line">01-19 17:16:16.143  9508  9508 E PatchManager: 	at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:775)</div><div class="line">01-19 17:16:16.143  9508  9508 E PatchManager: 	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:665)</div></pre></td></tr></table></figure>
<p>加上读取SDCard权限，就不报这个错误了</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_EXTERNAL_STORAGE"</span>/&gt;</span></div></pre></td></tr></table></figure>
<h3 id="open-failed-EISDIR"><a href="#open-failed-EISDIR" class="headerlink" title="open failed: EISDIR"></a>open failed: EISDIR</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">01-20 09:54:50.351 25113 25113 D MainApplication: inited.</div><div class="line">01-20 09:54:50.352 25113 25113 D MainApplication: apatch loaded.</div><div class="line">01-20 09:54:50.354 25113 25113 E MainApplication: </div><div class="line">01-20 09:54:50.354 25113 25113 E MainApplication: java.io.FileNotFoundException: /storage/emulated/0/out.apatch: open failed: EISDIR (Is a directory)</div><div class="line">01-20 09:54:50.354 25113 25113 E MainApplication: 	at libcore.io.IoBridge.open(IoBridge.java:468)</div><div class="line">01-20 09:54:50.354 25113 25113 E MainApplication: 	at java.io.FileInputStream.&lt;init&gt;(FileInputStream.java:76)</div><div class="line">01-20 09:54:50.354 25113 25113 E MainApplication: 	at com.alipay.euler.andfix.util.FileUtil.copyFile(FileUtil.java:51)</div><div class="line">01-20 09:54:50.354 25113 25113 E MainApplication: 	at com.alipay.euler.andfix.patch.PatchManager.addPatch(PatchManager.java:162)</div><div class="line">01-20 09:54:50.354 25113 25113 E MainApplication: 	at com.android.hq.andfixtest.MainApplication.onCreate(MainApplication.java:37)</div><div class="line">01-20 09:54:50.354 25113 25113 E MainApplication: 	at com.android.tools.fd.runtime.BootstrapApplication.onCreate(BootstrapApplication.java:370)</div><div class="line">01-20 09:54:50.354 25113 25113 E MainApplication: 	at android.app.Instrumentation.callApplicationOnCreate(Instrumentation.java:1020)</div><div class="line">01-20 09:54:50.354 25113 25113 E MainApplication: 	at android.app.ActivityThread.handleBindApplication(ActivityThread.java:4952)</div><div class="line">01-20 09:54:50.354 25113 25113 E MainApplication: 	at android.app.ActivityThread.-wrap1(ActivityThread.java)</div><div class="line">01-20 09:54:50.354 25113 25113 E MainApplication: 	at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1531)</div><div class="line">01-20 09:54:50.354 25113 25113 E MainApplication: 	at android.os.Handler.dispatchMessage(Handler.java:102)</div><div class="line">01-20 09:54:50.354 25113 25113 E MainApplication: 	at android.os.Looper.loop(Looper.java:148)</div><div class="line">01-20 09:54:50.354 25113 25113 E MainApplication: 	at android.app.ActivityThread.main(ActivityThread.java:5660)</div><div class="line">01-20 09:54:50.354 25113 25113 E MainApplication: 	at java.lang.reflect.Method.invoke(Native Method)</div><div class="line">01-20 09:54:50.354 25113 25113 E MainApplication: 	at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:775)</div><div class="line">01-20 09:54:50.354 25113 25113 E MainApplication: 	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:665)</div><div class="line">01-20 09:54:50.354 25113 25113 E MainApplication: Caused by: android.system.ErrnoException: open failed: EISDIR (Is a directory)</div><div class="line">01-20 09:54:50.354 25113 25113 E MainApplication: 	at libcore.io.IoBridge.open(IoBridge.java:453)</div><div class="line">01-20 09:54:50.354 25113 25113 E MainApplication: 	... 15 more</div></pre></td></tr></table></figure>
<p>遇到这个错误是你要把out.apatch目录下面的patch文件copy到sdcard，而不是out.apatch整个目录。</p>
]]></content>
    
    <summary type="html">
    
      通过一个Demo来介绍来简单介绍热修复框架AndFix的基本用法
    
    </summary>
    
      <category term="Android开源项目" scheme="http://yoursite.com/categories/Android%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="热修复" scheme="http://yoursite.com/tags/%E7%83%AD%E4%BF%AE%E5%A4%8D/"/>
    
      <category term="AndFix" scheme="http://yoursite.com/tags/AndFix/"/>
    
  </entry>
  
  <entry>
    <title>Java 基础 -- Fork/Join 框架</title>
    <link href="http://yoursite.com/2016/12/06/java-basic-fork-join-base/"/>
    <id>http://yoursite.com/2016/12/06/java-basic-fork-join-base/</id>
    <published>2016-12-06T02:00:00.000Z</published>
    <updated>2018-11-11T12:08:47.867Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Fork/Join 框架是 Java7 提供的一个用于并行执行任务的框架，是一个把大任务分割成若干个小任务，最终汇总每个小任务结果后得到大任务结果的框架。<br>下图是网上流传的 Fork Join 的运行流程图，直接拿过来用了：</p>
<p><img src="/images/java-basic-fork-join-base/fork-join-principle.png" alt="效果图"></p>
<h2 id="工作窃取算法"><a href="#工作窃取算法" class="headerlink" title="工作窃取算法"></a>工作窃取算法</h2><p>工作窃取（work-stealing）算法是指某个线程从其他队列里窃取任务来执行。<br>那么为什么要使用这个算法呢？<br>假如我们需要做一个比较大的任务，可以把这个任务分割为若干个互不依赖的子任务，为了减少线程间的竞争，把这些子任务分别放到不同的队列里，并为每个队列创建一个单独的线程来执行队列里的任务，线程和队列一一对应。比如A线程负责处理A队列里的任务。但是，有的线程会先把自己队列里的任务干完，而其他线程队列对应的队列里还有任务等待处理。干完活的线程与其等着，不如去帮其他线程干活，于是它就去其他线程的队列里窃取一个任务来执行。而在这时它们会访问同一个队列，为了减少窃取任务线程和被窃取任务线程之间的竞争，通常会使用双端队列，被窃取任务线程永远从双端队列的头部拿任务执行，而窃取任务的线程永远从双端队列的尾部拿任务执行。<br>工作窃取算法的优缺点：</p>
<ul>
<li>优点：充分利用线程进行并行计算，减少了线程间的竞争。</li>
<li>缺点：在某些情况下还是存在竞争，比如双端队列里只有一个任务时。并且该算法会消耗了更多的系统资源，比如创建多个线程和多个双端队列。</li>
</ul>
<h2 id="Fork-Join-框架工作流程"><a href="#Fork-Join-框架工作流程" class="headerlink" title="Fork/Join 框架工作流程"></a>Fork/Join 框架工作流程</h2><p>首先，是分割任务。需要有个fork类来把大任务分割成子任务，有可能子任务还是很大，那么还需要不停的分割，知道分割的任务足够小。<br>然后，执行任务的合并结果。分割的子任务分别放在双端队列里，然后几个启动线程分别从双端队列里获取任务执行。子任务执行完的结果统一放在一个队列里，启动一个线程从队列里拿数据，然后合并这些数据。</p>
<h2 id="Fork-Join-框架的使用"><a href="#Fork-Join-框架的使用" class="headerlink" title="Fork/Join 框架的使用"></a>Fork/Join 框架的使用</h2><p>Fork/Join 的使用需要使用两个类：</p>
<ul>
<li>ForkJoinTask：要使用 Fork/Join 框架首先要创建一个 ForkJoin 任务，它提供在任务中执行 fork() 和 join() 操作的机制。通常情况下，我们不需要直接继承ForkJoinTask类，只需要继承它的子类，Fork/Join 框架提供了下面两个子类：<ul>
<li>RecursiveAction：用于没有返回结果的任务。</li>
<li>RecursizeTask：用于有返回结果的任务。</li>
</ul>
</li>
<li>ForkJoinPool：ForkJoinTask 需要通过 ForkJoinPool 来执行。</li>
</ul>
<p>任务分割出的子任务会添加到当前工作线程所维护的双端队列中，进入队列的头部。当一个工作线程的队列暂时没有其他任务时，它会随机从其他工作线程的队列的尾部获取一个任务。<br>下面我们通过一个简单的例子来了解一下 Fork/Join 框架的使用：计算 1+2+3+…..+10的结果。<br>使用 Fork/Join 框架首先要考虑的是如何分割任务，这个需要我们在代码里面实现。<br>因为这个是需要返回结果的任务，因此只能使用 <code>RecursiveTask</code> 来实现。代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">public static void testForkJoin() &#123;</div><div class="line">    ForkJoinPool forkJoinPool = new ForkJoinPool();</div><div class="line">    // 生成一个计算任务</div><div class="line">    CountTask countTask = new CountTask(1, 10);</div><div class="line">    // 执行任务</div><div class="line">    Future&lt;Integer&gt; result =  forkJoinPool.submit(countTask);</div><div class="line">    int sum = 0;</div><div class="line">    try &#123;</div><div class="line">        sum = result.get();</div><div class="line">    &#125; catch (InterruptedException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; catch (ExecutionException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    Log.e(&quot;Test&quot;,&quot;sum = &quot;+sum);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">public static class CountTask extends RecursiveTask&lt;Integer&gt; &#123;</div><div class="line">    // 设置一个阈值</div><div class="line">    private static final int  THRESHOLD = 2;</div><div class="line">    private int mStart;</div><div class="line">    private int mEnd;</div><div class="line"></div><div class="line">    public CountTask(int start, int end) &#123;</div><div class="line">        mStart = start;</div><div class="line">        mEnd = end;</div><div class="line">        Log.e(&quot;Test&quot;, &quot;CountTask start = &quot;+start+&quot;, end= = &quot;+end);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected Integer compute() &#123;</div><div class="line">        int sum = 0;</div><div class="line">        boolean canCompute = (mEnd - mStart) &lt;= THRESHOLD;</div><div class="line">        if (canCompute) &#123;</div><div class="line">            for(int i = mStart; i&lt;=mEnd;i++)&#123;</div><div class="line">                sum += i;</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">            // 如果大于阈值，就要继续分割任务</div><div class="line">            int middle = (mStart + mEnd) / 2;</div><div class="line">            CountTask leftTask = new CountTask(mStart, middle);</div><div class="line">            CountTask rightTask = new CountTask(middle + 1, mEnd);</div><div class="line">            // 执行子任务</div><div class="line">            leftTask.fork();</div><div class="line">            rightTask.fork();</div><div class="line">            //等待子任务执行完，并获取执行结果</div><div class="line">            int leftResult = leftTask.join();</div><div class="line">            int rightResult = rightTask.join();</div><div class="line">            // 合并子任务</div><div class="line">            sum = leftResult + rightResult;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        return sum;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>ForkJoinTask</code> 与一般任务的主要区别在于它需要实现 <code>compute</code> 方法，在这个方法里面，首先要判断任务是否足够小，如果足够小就直接执行任务，如果不够小，就必须分割成两个子任务，每个子任务在调用 <code>fork</code> 方法时，又会进入 <code>compute</code> 方法，看看当前子任务是否需要继续分割成子任务，如果不继续分割，则执行当前任务并返回结果。使用 <code>join</code> 方法会等待任务执行完并得到其结果。</p>
<h2 id="Fork-Join-框架的异常处理"><a href="#Fork-Join-框架的异常处理" class="headerlink" title="Fork/Join 框架的异常处理"></a>Fork/Join 框架的异常处理</h2><p><code>ForkJoinTask</code> 在执行任务的时候可能会抛出异常，但是我们没有办法在主线程里直接捕获异常，所以 <code>ForkJoinTask</code> 提供了 <code>isCompletedAbnormally()</code> 方法来判断任务是否已经抛出异常或者已经取消了，并且可以通过 <code>ForkJoinTask</code> 的 <code>getException()</code> 方法获取异常。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">if (leftTask.isCompletedAbnormally()) &#123;</div><div class="line">    if (leftTask.getException() != null ) &#123;</div><div class="line">        leftTask.getException().printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>getException()</code> 方法返回 <code>Throwable</code> 对象，如果任务取消了则返回 <code>CancellationException</code>。如果任务没有完成或者没有抛出异常则返回 null。</p>
<h2 id="Fork-Join-框架的实现原理"><a href="#Fork-Join-框架的实现原理" class="headerlink" title="Fork/Join 框架的实现原理"></a>Fork/Join 框架的实现原理</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>《Java 并发编程的艺术》</p>
]]></content>
    
    <summary type="html">
    
      Fork/Join 框架的使用
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Fork/Join" scheme="http://yoursite.com/tags/Fork-Join/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio 导入 Android 源码</title>
    <link href="http://yoursite.com/2016/12/03/development-tool-import-source-to-android-studio/"/>
    <id>http://yoursite.com/2016/12/03/development-tool-import-source-to-android-studio/</id>
    <published>2016-12-03T02:00:00.000Z</published>
    <updated>2018-06-16T07:19:36.647Z</updated>
    
    <content type="html"><![CDATA[<p>Android 的源码代码量是非常大的，也有多种代码编辑器来供我们选择来去阅读Android源码，虽然在 Eclipse 和 SourceInsight 上阅读 Android 源码也能带来很好的体验，但习惯于用 Android Studio 来作为应用开发工具的大家肯定也希望用它来阅读源代码。本文将介绍如何将 Android 源码导入到 Android Studio 中来的技巧。<br><a id="more"></a></p>
<h2 id="导入源码"><a href="#导入源码" class="headerlink" title="导入源码"></a>导入源码</h2><h3 id="修改Android-Studio的配置文件"><a href="#修改Android-Studio的配置文件" class="headerlink" title="修改Android Studio的配置文件"></a>修改Android Studio的配置文件</h3><p>由于导入源码时需要消耗大量内存，所以建议修改<code>studio64.vmoptions</code>文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-Xms1024m</div><div class="line">-Xmx1024m</div></pre></td></tr></table></figure></p>
<h3 id="生成导入到Android-Studio所需的配置文件"><a href="#生成导入到Android-Studio所需的配置文件" class="headerlink" title="生成导入到Android Studio所需的配置文件"></a>生成导入到Android Studio所需的配置文件</h3><p>首先要编译一次源码，然后看有没有<code>out/host/linux-x86/framework/idegen.jar</code><br>如果没有的话就执行一下下面的命令，生成<code>out/host/linux-x86/framework/idegen.jar</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">source build/envsetup.sh</div><div class="line">mmm development/tools/idegen/</div></pre></td></tr></table></figure></p>
<p>然后执行一下下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">development/tools/idegen/idegen.sh</div></pre></td></tr></table></figure></p>
<p>会在根目录下面生成<code>android.ipr</code>和<code>android.iml</code>。<br>这里如果你不想编译源码，只想导入进来查看源代码的话，也可以使用其他工程生成的 <code>android.ipr</code> 和 <code>android.iml</code> ，复制到根目录即可。<br><code>android.ipr</code> 一般保存了工程相关的设置，比如modules和modules libraries的路径，编译器配置，入口点等。<br><code>android.iml</code> 用来描述modules。它包括modules路径、 依赖关系，顺序设置等。一个项目可以包含多个 *.iml 文件。<br>到这一步我们其实就可以导入到Android Studio里面去了。</p>
<h3 id="过滤一些模块"><a href="#过滤一些模块" class="headerlink" title="过滤一些模块"></a>过滤一些模块</h3><p>如果把Android所有的源码全部导入到Android Studio里面去，工程将会非常大，而且会很耗时间，那么我们就可以把不需要的模块给过滤掉。<br>打开<code>android.iml</code>文件，加入以下代码，修改<code>excludeFolder</code>的配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/.repo&quot;/&gt;</div><div class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/abi&quot;/&gt;</div><div class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/frameworks/base/docs&quot;/&gt;</div><div class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/art&quot;/&gt;</div><div class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/bionic&quot;/&gt;</div><div class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/bootable&quot;/&gt;</div><div class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/build&quot;/&gt;</div><div class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/cts&quot;/&gt;</div><div class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/dalvik&quot;/&gt;</div><div class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/developers&quot;/&gt;</div><div class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/development&quot;/&gt;</div><div class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/device&quot;/&gt;</div><div class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/docs&quot;/&gt;</div><div class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/external&quot;/&gt;</div><div class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/hardware&quot;/&gt;</div><div class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/kernel-3.18&quot;/&gt;</div><div class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/libcore&quot;/&gt;</div><div class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/libnativehelper&quot;/&gt;</div><div class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/ndk&quot;/&gt;</div><div class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/out&quot;/&gt;</div><div class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/pdk&quot;/&gt;</div><div class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/platform_testing&quot;/&gt;</div><div class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/prebuilts&quot;/&gt;</div><div class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/rc_projects&quot;/&gt;</div><div class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/sdk&quot;/&gt;</div><div class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/system&quot;/&gt;</div><div class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/tools&quot;/&gt;</div><div class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/trusty&quot;/&gt;</div><div class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/vendor&quot;/&gt;</div></pre></td></tr></table></figure></p>
<p>这样我们就只导入了<code>frameworks</code>和<code>packages</code>的代码。</p>
<h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p><code>File</code> -&gt; <code>Open</code> 选择源码目录就可以导入了，整个导入过程需要3分钟左右，然后就可以去阅读源码了。</p>
<h2 id="一些配置"><a href="#一些配置" class="headerlink" title="一些配置"></a>一些配置</h2><h3 id="设置SDK和JDK"><a href="#设置SDK和JDK" class="headerlink" title="设置SDK和JDK"></a>设置SDK和JDK</h3><p><img src="/images/development-tool-import-source-to-android-studio/project.png" alt="配置图"></p>
<h3 id="解决源码中跳转错误问题"><a href="#解决源码中跳转错误问题" class="headerlink" title="解决源码中跳转错误问题"></a>解决源码中跳转错误问题</h3><p>设置<code>Modules</code>的依赖：<br>先将所有依赖删掉，只留下图中的两个(注意:这里删除全部只是为了方便。如果确实用到了.jar，再将它们的路径添加进来就可以了）。<br><img src="/images/development-tool-import-source-to-android-studio/modules-add.png" alt="配置图"></p>
<p>点击上图中的’+’并选择上图中的<code>Jars or directories</code>选项，依次将<code>frameworks</code>和<code>external</code>文件夹添加进来。如图：</p>
<p><img src="/images/development-tool-import-source-to-android-studio/modules-added.png" alt="配置图"></p>
<p>推荐把frameworks和external这两个移到最上面，这样在代码跳转时会优先从这两个文件夹下查找，而不是在Android.jar中查找。</p>
<h3 id="Debug源码"><a href="#Debug源码" class="headerlink" title="Debug源码"></a>Debug源码</h3><p>我们可以通过给刚导入的工程在<code>Modules</code>中添加<code>Android Framework</code>来让AS将它作为一个Android工程，从而方便我们调试代码。<br>可以按照下图中来添加Android Framework支持，点击 + 号，然后选择 Android。</p>
<p><img src="/images/development-tool-import-source-to-android-studio/debug-add.png" alt="配置图"></p>
<p>然后我们就可以发现，调试按钮已经可以点击了。</p>
<p><img src="/images/development-tool-import-source-to-android-studio/debug-added.png" alt="配置图"></p>
<h2 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h2><h3 id="Choose-Process-gt-Nothing-to-show"><a href="#Choose-Process-gt-Nothing-to-show" class="headerlink" title="Choose Process -&gt; Nothing to show"></a>Choose Process -&gt; Nothing to show</h3><p>有时候遇到过点击调试按钮没有调试进程可以选择，打开<code>Project Structure</code>-&gt;<code>Project</code>，重新选择一下<code>Projct SDK</code>就可以了。</p>
]]></content>
    
    <summary type="html">
    
      介绍一些如何使用 Android Studio 导入 Android 源码以及一些配置方法
    
    </summary>
    
      <category term="开发工具" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="开发工具" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Android Studio" scheme="http://yoursite.com/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>程序员学习资料汇总</title>
    <link href="http://yoursite.com/2016/12/01/materials-programmer-materials/"/>
    <id>http://yoursite.com/2016/12/01/materials-programmer-materials/</id>
    <published>2016-12-01T02:00:00.000Z</published>
    <updated>2019-03-05T01:22:29.178Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>记录一些作为一名程序员在学习道路上经常用到的一些资料，以备不时之需。</p>
<a id="more"></a>
<h2 id="资料篇"><a href="#资料篇" class="headerlink" title="资料篇"></a>资料篇</h2><h3 id="技术网站"><a href="#技术网站" class="headerlink" title="技术网站"></a>技术网站</h3><h4 id="开发社区"><a href="#开发社区" class="headerlink" title="开发社区"></a>开发社区</h4><ul>
<li><a href="http://www.csdn.net/" target="_blank" rel="external">CSDN</a>：号称全球最大的中文IT社区，很多业界大牛在上面开通有博客</li>
<li><a href="https://yq.aliyun.com/" target="_blank" rel="external">云栖社区</a>：云栖社区是面向开发者的开放型技术平台。源自阿里云,服务于云计算技术全生态。</li>
<li><a href="http://www.chinaunix.net/" target="_blank" rel="external">ChinaUnix</a>：号称全球最大的Linux/Unix应用与开发者社区</li>
<li><a href="http://www.51cto.com/" target="_blank" rel="external">51CTO</a>：中国领先的IT技术网站</li>
<li><a href="http://www.cnblogs.com/" target="_blank" rel="external">博客园</a>：老牌开发者社区</li>
<li><a href="http://stackoverflow.com/" target="_blank" rel="external">stackoverflow</a>：技术问题问答网站</li>
<li><a href="http://www.jobbole.com/" target="_blank" rel="external">伯乐在线</a>：技术博客、IT职场、书籍教程</li>
<li><a href="http://www.ctolib.com/" target="_blank" rel="external">CTOLib码库</a>：每日更新收录实用的开源项目和资源</li>
<li><a href="https://github.com/" target="_blank" rel="external">GitHub</a>：代码托管平台</li>
<li><a href="https://git.oschina.net/" target="_blank" rel="external">码云</a>：类似GitHub的代码托管平台</li>
<li><a href="http://www.linuxdiyf.com/" target="_blank" rel="external">红联Linux</a>：中国领先的Linux技术网站</li>
<li><a href="http://www.php100.com/" target="_blank" rel="external">PHP100中文网</a>：中国第一档PHP资料分享门户</li>
<li><a href="http://www.itpub.net/" target="_blank" rel="external">ITPUB</a>：IT技术社区</li>
<li><a href="http://www.ibm.com/developerworks/cn/" target="_blank" rel="external">IBM DeveloperWorks</a>：IBM中国开发者社区，有一些不错的技术资料</li>
<li><a href="https://software.intel.com/zh-cn" target="_blank" rel="external">Intel® Developer Zone</a>：Intel中国开发着社区</li>
<li><a href="https://developer.mozilla.org/zh-CN/" target="_blank" rel="external">MOZILLA 开发者网络</a>：MOZILLA开发者社区</li>
<li><a href="http://developer.baidu.com" target="_blank" rel="external">百度开发者中心</a>：</li>
<li><a href="http://www.phpchina.com/" target="_blank" rel="external">PHPChina开发者社区</a>：</li>
<li><a href="http://ifeve.com/" target="_blank" rel="external">并发编程网</a>：致力于让天下没有难学的技术这一使命，包括Java，C++，JS，开源框架，管理和架构等，致力于精品技术的研究和传播。</li>
</ul>
<h4 id="Android开发"><a href="#Android开发" class="headerlink" title="Android开发"></a>Android开发</h4><ul>
<li><a href="https://developer.android.com/index.html" target="_blank" rel="external">Android Developers</a>：Android官方开发者网站，有各种开发文档可以阅读，以及下载开发工具，英语不太好的可以选择“简体中文”哦！</li>
<li><a href="https://source.android.com/" target="_blank" rel="external">Android Open Source Project</a></li>
<li><a href="http://a.code4app.com/" target="_blank" rel="external">Android 常用自定义效果和控件</a>：</li>
</ul>
<h4 id="网站开发"><a href="#网站开发" class="headerlink" title="网站开发"></a>网站开发</h4><ul>
<li><a href="http://www.discuz.net/" target="_blank" rel="external">Discuz</a>：Discuz社区</li>
<li><a href="http://www.ecshop.com/" target="_blank" rel="external">Ecshop</a>：开源网店系统</li>
<li><a href="http://www.shopnc.net/" target="_blank" rel="external">Shopnc</a>：商城系统</li>
<li><a href="https://cn.wordpress.org/" target="_blank" rel="external">WordPress</a>：一种使用PHP语言开发的博客平台</li>
<li><a href="https://www.djangoproject.com/" target="_blank" rel="external">Django</a>：Python Web应用框架</li>
<li><a href="http://webpy.org/" target="_blank" rel="external">webpy</a>：Python Web应用框架</li>
</ul>
<h4 id="IT业界资讯"><a href="#IT业界资讯" class="headerlink" title="IT业界资讯"></a>IT业界资讯</h4><ul>
<li><a href="http://www.huxiu.com/" target="_blank" rel="external">虎嗅</a>：聚合优质的创新信息与人群,捕获精选|深度|犀利的商业科技资讯。</li>
<li><a href="http://www.lieyunwang.com/" target="_blank" rel="external">猎云</a>：创业项目推荐创业创新咨询</li>
<li><a href="http://www.cnbeta.com/" target="_blank" rel="external">cnBeta</a>：中文业界资讯网站</li>
<li><a href="http://www.freebuf.com/" target="_blank" rel="external">FreeBuf</a>：关注黑客与极客</li>
</ul>
<h4 id="源码网站"><a href="#源码网站" class="headerlink" title="源码网站"></a>源码网站</h4><ul>
<li><a href="https://www.codota.com/" target="_blank" rel="external">codota</a>：如果你不知道一个Android的类怎么用，可以在Codota上面快速的找到很多不错的示例代码。</li>
<li><a href="https://android.googlesource.com/" target="_blank" rel="external">android.googlesource</a>：Android所有的源代码都在这里，只需找到对应想要的模块，用Git克隆下来即可。比如，我想要的framework代码。</li>
<li><a href="http://androidxref.com/" target="_blank" rel="external">androidxref</a>：</li>
<li><a href="http://grepcode.com/" target="_blank" rel="external">GrepCode</a>：除了AndroidXRef可以查看某个类的源代码外，GrepCode同样也能做到。而且GrepCode不限于Android的源码</li>
</ul>
<h4 id="学习网站"><a href="#学习网站" class="headerlink" title="学习网站"></a>学习网站</h4><ul>
<li><a href="http://www.w3school.com.cn/" target="_blank" rel="external">W3School</a></li>
<li><a href="https://www.w3cschool.cn/" target="_blank" rel="external">W3Cschool</a>：注意和W3School一字之差。W3Cschool是一个专业的编程入门学习及技术文档查询网站,提供包括HTML,CSS,Javascript,jQuery,C,PHP,Java,Python,Sql,Mysql等编程语言和开源技术的在线教程及使用手册。设计前端、服务器、大数据、移动端等技术。</li>
<li><a href="http://www.runoob.com/" target="_blank" rel="external">菜鸟教程</a>：涵盖前端、服务器、Android等教程</li>
<li><a href="https://leetcode.com/" target="_blank" rel="external">Leetcode</a>，<a href="https://leetcode-cn.com/" target="_blank" rel="external">Leetcode中文版</a>：在线技术平台，编程做题</li>
<li><a href="https://www.nowcoder.com/" target="_blank" rel="external">牛客网</a>：专业IT笔试面试备考平台</li>
</ul>
<h3 id="技术博客"><a href="#技术博客" class="headerlink" title="技术博客"></a>技术博客</h3><h4 id="技术团队博客"><a href="#技术团队博客" class="headerlink" title="技术团队博客"></a>技术团队博客</h4><ul>
<li><a href="http://tech.meituan.com/" target="_blank" rel="external">美团点评技术团队</a>：一个非常接地气的技术博客，涉及内容广泛，例如：支付通道开发、插件化实践、前端项目等等。事无巨细的总结好他们的思路给你。</li>
<li><a href="http://kernel.meizu.com/" target="_blank" rel="external">魅族内核团队</a>：魅族内核团队发表的一些博客</li>
<li><a href="https://techblog.toutiao.com/" target="_blank" rel="external">今日头条技术博客</a>：众所周知今日头条有着一项强大的技术武器——推荐引擎。这个博客里面关于机器学习的内容非常丰富。文章也清晰有条理，他会交代实践背景、要求、失败案例、难点、最后给出一个甚至几个优选方案。</li>
<li><a href="https://isux.tencent.com/articles/" target="_blank" rel="external">Tencent ISUX</a>：ISUX是腾讯核心设计团队,负责腾讯社交网络相关产品的用户体验设计与研究。主要涉及互联网产品的设计、重构、前端、用研等。</li>
<li><a href="http://taobaofed.org/" target="_blank" rel="external">淘宝前端团队（FED）</a></li>
<li><a href="http://tgideas.qq.com/#4" target="_blank" rel="external">TGidea</a>：腾讯游戏的专业设计团队，工作范围涉及腾讯游戏旗下各类网游产品的包装、创意、网站等设计工作。</li>
<li><a href="http://www.alloyteam.com/" target="_blank" rel="external">Alloy Team</a>：这个团队就厉害了，是腾讯的核心团队。他们致力于Web前端技术的研究，热衷HTML5、移动Web技术，用最酷的新技术开发各种有趣的开源项目。</li>
<li><a href="http://www.aliued.cn/" target="_blank" rel="external">UED</a>：阿里巴巴集团最为资深的用户体验设计部门之一，涉及领域有用户研究、交互设计、视觉设计、前端开发等。</li>
<li><a href="https://research.google.com/" target="_blank" rel="external">Google研究所</a>：</li>
<li><a href="https://engineering.linkedin.com/" target="_blank" rel="external">Linkdln</a>：全球最大的职业社交网站，他们的技术团队从各个方面详细地介绍了LinkedIn技术人员如何使用高度结构化的数据来完成LinkedIn的搜索功能、社交图谱以及机器学习系统。</li>
<li><a href="https://medium.com/square-corner-blog" target="_blank" rel="external">Square</a>：Square的技术博客包含的更多的是数据科学、数据分析、机器学习相关内容</li>
</ul>
<h4 id="CSDN博客"><a href="#CSDN博客" class="headerlink" title="CSDN博客"></a>CSDN博客</h4><ul>
<li><a href="http://blog.csdn.net/blogdevteam/" target="_blank" rel="external">CSDN 官方博客</a></li>
<li><a href="http://blog.csdn.net/luoshengyang" target="_blank" rel="external">老罗的Android之旅</a>：CSDN排名前100，博客专栏“老罗的Android之旅”有对Android从上层应用到底层驱动的介绍，著有《Android系统源代码情景分析》一书。</li>
<li><a href="http://blog.csdn.net/singwhatiwanna" target="_blank" rel="external">任玉刚</a>：有“Android源码解析”和“Android开发小栈”两个专栏，著有《Android开发艺术探索》一书。</li>
<li><a href="http://blog.csdn.net/eclipsexys" target="_blank" rel="external">eclipse_xu徐宜生</a>：有“Android异步任务处理从零开始”，“android拼图游戏开发记录”和“Android UI开发详解”博客专栏，著有《Android群英传》一书。</li>
<li><a href="http://blog.csdn.net/guolin_blog" target="_blank" rel="external">郭霖的专栏</a>：CSDN排名前100</li>
<li><a href="http://blog.csdn.net/yzzst" target="_blank" rel="external">北漂周</a>：《Android安全技术揭秘与防范》一书的作者的CSDN博客</li>
<li><a href="http://blog.csdn.net/Innost" target="_blank" rel="external">Innost的专栏</a>：作者邓凡平，《深入理解Android》一书的作者。</li>
</ul>
<h4 id="个人主页"><a href="#个人主页" class="headerlink" title="个人主页"></a>个人主页</h4><ul>
<li><a href="http://www.ruanyifeng.com/home.html" target="_blank" rel="external">阮一峰的网络日志</a>：著有《ECMAScript 6入门》一书，并在该网站开源。</li>
<li><a href="https://www.liaoxuefeng.com/" target="_blank" rel="external">廖雪峰的官方网站</a></li>
<li><a href="http://hukai.me/" target="_blank" rel="external">胡凯</a>：腾讯开发者，翻译了一系列的Google Android性能优化典范的文章。</li>
<li><a href="http://gityuan.com/" target="_blank" rel="external">Gityuan</a>：作者是小米的MIUI系统工程师Gityuan(如果你想了解Android系统中常见模块的实现细节的话，非常推荐阅读这位开发者的博客，他的博客中文章的质量都非常高)，里面的“Friends”专栏有很多开发学习资料。</li>
<li><a href="https://hujiaweibujidao.github.io/" target="_blank" rel="external">Hujiawei Bujidao</a>：很多Android系统性能相关的文章</li>
<li><a href="http://0xcc0xcd.com/p/index.php" target="_blank" rel="external">进击的程序员</a>：老罗，罗升阳的个人博客站点</li>
<li><a href="http://weishu.me/" target="_blank" rel="external">Weishu’s Notes</a>：有一些不错的文章</li>
<li><a href="http://hencoder.com/" target="_blank" rel="external">HenCoder</a>：大神扔物线的给<font color="#DC143C">高阶Android工程师</font>的进阶手册</li>
</ul>
<h3 id="微信公众号"><a href="#微信公众号" class="headerlink" title="微信公众号"></a>微信公众号</h3><h4 id="技术类"><a href="#技术类" class="headerlink" title="技术类"></a>技术类</h4><ul>
<li>移动开发前线</li>
<li>WeMobileDev</li>
<li>Android程序员</li>
<li>AndroidDeveloper：分享Android开发最新的技术与前沿消息</li>
<li>Android订阅：定时发布不一样的Android干货，关注Android技术和交流平台</li>
<li>Android干货分享：致力于Android技术交流,为大家及时快捷有效的提供Android技术方面的干货</li>
<li>Android开发艺术探索</li>
<li>安卓开发</li>
<li>安卓开发精选</li>
<li>安卓应用频道：分享安卓应用相关内容,包括:安卓应用开发、设计和推广</li>
<li>菜鸟教程</li>
<li>caoz的梦呓</li>
<li>程序视界</li>
<li>程序猿：为程序员提供最新最全的编程学习资料的查询.目前已经开通PHP、C/C++函数库、.NET Framework类库、J2SE API查询功能</li>
<li>程序员的那点事</li>
<li>程序员的那些事：分享国内外同行的观点,关注程序员相关话题:IT资讯、职场分享、幽默、学习资源等</li>
<li>程序员之家</li>
<li>codeKK</li>
<li>CPP开发者</li>
<li>CSDN-CODE：CSDN旗下开源平台</li>
<li>developerWorks：码农IO(manong.io),专注于IT技术干货分享</li>
<li>eoe移动开发者社区：eoe移动开发社区 eoe.cn官方微博 @eoe移动开发者社区</li>
<li>鸿洋</li>
<li>互联网思维</li>
<li>ImportNew：专注 Java 和 Android 技术分享.ImportNew 由两个 Java 关键字 import 和 new 组成.意指:Java &amp; Android 程序员学习新知识的网站</li>
<li>InfoQ：关注中高端技术人员的社区媒体,促进软件开发领域知识与创新的传播</li>
<li>Java编程</li>
<li>JAVA开发者联盟：精彩的JAVA文章,实用的JAVA技术,经典的JAVA书籍尽在JAVA开发者联盟</li>
<li>java一日一条</li>
<li>技术最前线</li>
<li>Linux爱好者</li>
<li>牛客网：最全IT名企笔试/面试题库,免费提供在线笔试真题模考,并即时反馈得分及知识结构薄弱点,系统化快速提高备考效率</li>
<li>Piasy</li>
<li>Python开发者</li>
<li>软件开发务实</li>
<li>SegmentFault：中国最大的年轻开发者极客社区,我们为开发者提供最纯粹的技术交流和分享平台</li>
<li>算法爱好者</li>
<li>算法与数据结构</li>
<li>腾讯Bugly</li>
<li>WeMobileDev</li>
<li>移动开发前线</li>
<li>51CTO博客：51CTO技术博客倡导“原创·技术·分享“,愿我们和你一起悦享技术,悦享生活.更有美女小编随时与您畅聊技术哦</li>
<li>最代码：高质量的代码服务</li>
<li>携程技术中心：携程技术中心官方帐号，分享来自携程技术人的一手干货，及各类线上线下技术活动</li>
<li>美团点评技术团队</li>
<li>谷歌开发者：Google中国官方帐号</li>
<li>郭霖：CSDN上<a href="http://blog.csdn.net/guolin_blog" target="_blank" rel="external">郭霖的专栏</a>的公众号</li>
<li>极客公园：提供科技领域的前沿报道</li>
<li>AI科技大本营：程序员转型第一站</li>
<li>老马说编程</li>
<li>GitChat：一种全新的IT知识交流方式</li>
<li>HenCoder：大神扔物线的给高阶Android工程师的进阶手册</li>
<li>视觉求索：计算机视觉领域资深华人教授与研究员共同发起的、非盈利性的、独立于产业界的移动新媒体平台</li>
<li>云栖社区：由阿里云负责运营、阿里巴巴技术协会和阿里巴巴集团各技术团队提供内容支持的开放式技术社区</li>
<li>淘宝前端团队</li>
<li>LeetCode领扣：LeetCode官方微信公众号</li>
</ul>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul>
<li>斗牛人</li>
<li>伯乐在线：关注职业资讯;学习各类职业感悟、心得和经验分享,扩大职业视野;体会求职、工作和创业的历程 - 就在JobBole.com 伯乐在线</li>
<li>创业新锋</li>
<li>管理思维</li>
<li>拾遗</li>
<li>玩车教授</li>
<li>移动互联网创业网</li>
<li>移动互联网咨询</li>
</ul>
<h3 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h3><h4 id="关于开源项目的网站"><a href="#关于开源项目的网站" class="headerlink" title="关于开源项目的网站"></a>关于开源项目的网站</h4><ul>
<li><a href="http://p.codekk.com/" target="_blank" rel="external">p.codeKK</a>：Android开源项目集合</li>
<li><a href="http://a.codekk.com/" target="_blank" rel="external">a.codeKK</a>：Android源码解析</li>
<li><a href="http://blog.csdn.net/fbird45/article/details/43053235" target="_blank" rel="external">gitHub优秀开源项目</a>：</li>
<li><a href="https://github.com/Trinea/android-open-project" target="_blank" rel="external">android-open-project</a>：Android 开源项目分类汇总</li>
<li><a href="https://github.com/googlesamples" target="_blank" rel="external">googlesamples</a>：Android系统每次推出一些新特性，Google都会写一些Demo放在Github上，对于想要了解新特性怎么玩的同学，肯定不能错过它。</li>
<li><a href="https://android-arsenal.com/" target="_blank" rel="external">android-arsenal</a>：你是否还在为找不到合适的开源库而苦恼，Android Arsenal这个网站已经帮你做了一定的分类，可以帮你提高不少效率。</li>
</ul>
<h4 id="知名互联网企业开源项目"><a href="#知名互联网企业开源项目" class="headerlink" title="知名互联网企业开源项目"></a>知名互联网企业开源项目</h4><ul>
<li><a href="https://github.com/alibaba" target="_blank" rel="external">阿里巴巴GitHub</a></li>
<li><a href="http://tencentopen.github.io/" target="_blank" rel="external">腾讯开源项目</a>，<a href="https://github.com/Tencent" target="_blank" rel="external">腾讯GitHub</a>，<a href="https://github.com/TencentOpen" target="_blank" rel="external">腾讯GitHub</a></li>
<li><a href="https://github.com/douban" target="_blank" rel="external">豆瓣GitHub</a></li>
<li><a href="https://github.com/dianping" target="_blank" rel="external">大众点评GitHub</a></li>
<li><a href="https://github.com/netease" target="_blank" rel="external">网易GitHub</a></li>
<li><a href="https://github.com/Meituan-Dianping" target="_blank" rel="external">美团·大众点评GitHub官方账号</a></li>
<li><a href="https://github.com/google/" target="_blank" rel="external">Google</a></li>
<li><a href="https://github.com/googlesamples" target="_blank" rel="external">googlesamples</a>：Google官方提供的有用的Android范例程序</li>
<li><a href="https://github.com/didi/" target="_blank" rel="external">滴滴开源平台GitHub</a></li>
<li><a href="https://github.com/Qihoo360" target="_blank" rel="external">360开源平台GitHub</a></li>
<li><a href="https://github.com/baidu" target="_blank" rel="external">百度</a></li>
<li><a href="http://AlloyTeam.github.com" target="_blank" rel="external">Alloy Team</a>：腾讯的核心团队。他们致力于Web前端技术的研究，热衷HTML5、移动Web技术，用最酷的新技术开发各种有趣的开源项目。</li>
<li><a href="http://square.github.io/" target="_blank" rel="external">Square</a>：</li>
</ul>
<h4 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h4><ul>
<li><a href="https://github.com/ReactiveX/RxAndroid" target="_blank" rel="external">RxAndroid</a>：RxJava的Android扩展。</li>
<li><a href="https://github.com/square/retrofit" target="_blank" rel="external">Retrofit</a>：Square公司开发的一款针对Android网络请求的框架，Retrofit2底层基于OkHttp实现的。</li>
<li><a href="https://github.com/square/okhttp" target="_blank" rel="external">OkHttp</a>：一个处理网络请求的框架。</li>
<li><a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external">EventBus</a>：一个发布 / 订阅的事件总线。</li>
<li><a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="external">ButterKnife</a>：Android系统的View注入框架。</li>
<li><a href="https://github.com/airbnb/lottie-android" target="_blank" rel="external">Lottie</a>：为Android和IOS设备提供的一个开源框架，它能够解析通过Adobe After Effects 软件做出来的动画，供App使用。</li>
<li><a href="https://github.com/Ajian-studio/GADownloading" target="_blank" rel="external">GADownloading</a>：一个比较酷的下载动画</li>
<li><a href="https://github.com/alibaba/atlas" target="_blank" rel="external">Atlas</a>：阿里开源项目，运行于Android系统上的一个容器化框架，我们也叫动态组件化(Dynamic Bundle)框架。它主要提供了解耦化、组件化、动态性的支持。覆盖了工程师的工程编码期、Apk运行期以及后续运维期的各种问题。</li>
<li><a href="https://github.com/alibaba/AndFix" target="_blank" rel="external">AndFix</a>：阿里开源热更新框架</li>
<li><a href="https://github.com/alibaba/dexposed" target="_blank" rel="external">dexposed</a>：阿里开源热更新框架</li>
<li><a href="https://github.com/Tencent/tinker" target="_blank" rel="external">tinker</a>：腾讯开源热更新框架</li>
<li><a href="https://github.com/jasonross/Nuwa" target="_blank" rel="external">Nuwa</a>：大众点评开源热更新框架</li>
<li><a href="https://github.com/Meituan-Dianping/Robust" target="_blank" rel="external">Robust</a>：美团点评开源热更新框架</li>
<li><a href="https://github.com/Xiaofei-it/Hermes" target="_blank" rel="external">Hermes</a>：简单易用的安卓进程间通信IPC框架，抽空看看源码</li>
<li><a href="https://github.com/google/flexbox-layout" target="_blank" rel="external">FlexboxLayout</a>：Google开源项目，CSS Flexible Box 在Android上的应用</li>
<li><a href="https://github.com/vikramkakkar/DeckView" target="_blank" rel="external">DeckView</a>：Android 5.0层叠式卡片布局（类似原生多任务栏的效果）</li>
<li><a href="https://github.com/nostra13/Android-Universal-Image-Loader" target="_blank" rel="external">Android-Universal-Image-Loader</a>：图片异步加载库</li>
<li><a href="https://github.com/hdodenhof/CircleImageView" target="_blank" rel="external">CircleImageView</a>：圆形图片</li>
<li><a href="https://github.com/chiuki/animated-vector-drawable" target="_blank" rel="external">animated-vector-drawable</a>：Android矢量图及动画</li>
<li><a href="https://github.com/facebook/fresco" target="_blank" rel="external">fresco</a>：图片加载库 Fresco</li>
<li><a href="https://android.googlesource.com/platform/frameworks/volley" target="_blank" rel="external">Volley</a>：网络框架Volley，已经集成到Android源码中，frameworks/volley</li>
<li><a href="https://github.com/square/leakcanary" target="_blank" rel="external">LeakCanary</a>：内存泄漏检测</li>
<li><a href="https://github.com/google/dagger" target="_blank" rel="external">Dagger 2</a>：</li>
<li><a href="https://github.com/wasabeef/awesome-android-ui" target="_blank" rel="external">awesome-android-ui</a>：</li>
<li><a href="https://github.com/didi/VirtualAPK" target="_blank" rel="external">VirtualAPK</a>：滴滴插件化框架</li>
<li><a href="https://github.com/Qihoo360/RePlugin" target="_blank" rel="external">RePlugin</a>：360插件化框架</li>
<li><a href="https://github.com/wequick/Small" target="_blank" rel="external">Small</a>：插件化框架Small</li>
</ul>
<h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><ul>
<li><a href="https://github.com/jhy/jsoup" target="_blank" rel="external">JSOUP</a>：基于Java的HTML解析器。</li>
<li><a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="external">RxJava</a>：一个基于事件订阅的异步执行的一个类库。</li>
<li><a href="https://github.com/eclipsesource/J2V8" target="_blank" rel="external">J2V8</a>：Java封装的V8引擎，支持Android</li>
</ul>
<h4 id="Java-SDK"><a href="#Java-SDK" class="headerlink" title="Java SDK"></a>Java SDK</h4><ul>
<li><a href="http://jboss-javassist.github.io/javassist/" target="_blank" rel="external">Javassist</a>：Javassist是一个开源的分析、编辑和创建Java字节码的类库。</li>
<li><a href="http://commons.apache.org/proper/commons-bcel/index.html" target="_blank" rel="external">BCEL</a>：类似Javassist，可以转换现有的类表示或者构建新的类。</li>
</ul>
<h4 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h4><ul>
<li><a href="https://github.com/tensorflow/tensorflow" target="_blank" rel="external">tensorflow</a>：google开发的开源深度学习框架。</li>
<li><a href="https://github.com/baidu/mobile-deep-learning" target="_blank" rel="external">mobile-deep-learning</a>：百度开源移动端深度学习框架 </li>
</ul>
<h4 id="VR-AR"><a href="#VR-AR" class="headerlink" title="VR/AR"></a>VR/AR</h4><ul>
<li><a href="https://github.com/google-ar" target="_blank" rel="external">ArCore</a>：Google 发布的基于 Android 平台的 AR SDK。</li>
</ul>
<h4 id="图形图像处理"><a href="#图形图像处理" class="headerlink" title="图形图像处理"></a>图形图像处理</h4><ul>
<li><a href="https://github.com/alibaba/GCanvas" target="_blank" rel="external">GCanvas</a>：阿里巴巴跨平台图形渲染引擎</li>
<li><a href="https://github.com/alibaba/G3D" target="_blank" rel="external">G3D</a>：阿里巴巴基于WebGL的Javascript 3D绘图引擎</li>
</ul>
<h4 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h4><ul>
<li><a href="https://github.com/facebook/conceal" target="_blank" rel="external">conceal</a>：facebook开源的用来对数据进行快速加密和认证的API。</li>
<li><a href="https://github.com/OYsun/AE-Element" target="_blank" rel="external">AE-Element</a>使用bodymovin渲染一些有趣的After Effects矢量元素，可以直接使用<a href="https://github.com/airbnb/lottie-android" target="_blank" rel="external">Lottie</a>应用在客户端开发上面。</li>
<li><a href="https://github.com/apache/incubator-weex" target="_blank" rel="external">Weex</a>：阿里开源项目，跨平台开发框架</li>
<li><a href="https://github.com/facebook/react-native" target="_blank" rel="external">React Native</a>：Facebook开源项目，跨平台开发框架</li>
<li><a href="https://github.com/hexojs/hexo" target="_blank" rel="external">Hexo</a>：一个简单地、轻量地、基于Node.js的一个静态博客框架</li>
<li><a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">hexo-theme-next</a>：为hexo设计的next主题风格</li>
<li><a href="https://realm.io/" target="_blank" rel="external">Realm</a>：</li>
<li><a href="https://github.com/googlesamples/android-architecture" target="_blank" rel="external">android-architecture</a>：</li>
</ul>
<h4 id="资料汇总"><a href="#资料汇总" class="headerlink" title="资料汇总"></a>资料汇总</h4><ul>
<li><a href="https://github.com/stanzhai/be-a-professional-programmer" target="_blank" rel="external">be-a-professional-programmer</a>：汇集了一些程序员的资料，与本篇功能类似</li>
<li><a href="https://github.com/jobbole/awesome-programming-books" target="_blank" rel="external">awesome-programming-books</a>：经典编程书籍大全，与本篇功能类似</li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&amp;mid=2650823358&amp;idx=1&amp;sn=945e089df1adae9781a725b4c9bf39d9&amp;chksm=80b78e20b7c007367fe1e7c9aa70c49d8b57dbd5007f143336f90c0ae26206b93f64799031f1&amp;mpshare=1&amp;scene=1&amp;srcid=0810m24J3qtdjkjfw8ESxReJ&amp;pass_ticket=3N%2BbQ1oa4hm%2F7cS5F2LQ4J0PRgwjccpyBTF3KV4aHPJmxm0blDQw9tKh6alcOVl9#rd" target="_blank" rel="external">2017年Android百大框架排行榜</a>：汇总一些github的开源框架</li>
</ul>
<h4 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h4><ul>
<li><a href="https://github.com/LittleFriendsGroup/AndroidSdkSourceAnalysis" target="_blank" rel="external">AndroidSdkSourceAnalysis</a>：CJJ，网易的开发者，由他带领发起的Android SDK源码解析GitHub项目</li>
</ul>
<h3 id="GitBook"><a href="#GitBook" class="headerlink" title="GitBook"></a>GitBook</h3><ul>
<li><a href="https://www.gitbook.com/@wizardforcel" target="_blank" rel="external">wizardforcel</a>：目前收集了约223本书，偏向计算机科学，编程类等。</li>
<li><a href="https://www.gitbook.com/book/wizardforcel/core-python-2e/details" target="_blank" rel="external">Python 核心编程 第二版</a></li>
<li><a href="https://www.gitbook.com/book/lenkimo/byte-of-python-chinese-edition/details" target="_blank" rel="external">简明 Python 教程</a></li>
<li><a href="https://www.gitbook.com/book/wizardforcel/the-art-of-programming-by-july/details" target="_blank" rel="external">编程之法：面试和算法心得</a></li>
<li><a href="https://www.gitbook.com/book/skyao/learning-linux-mint/details" target="_blank" rel="external">Linux Mint 学习笔记</a></li>
<li><a href="https://www.gitbook.com/book/wizardforcel/lcthw/details" target="_blank" rel="external">笨办法学C</a></li>
</ul>
<h2 id="必读书籍"><a href="#必读书籍" class="headerlink" title="必读书籍"></a>必读书籍</h2><h3 id="程序开发"><a href="#程序开发" class="headerlink" title="程序开发"></a>程序开发</h3><ul>
<li>《重构 改善既有代码的设计》</li>
</ul>
<h3 id="Android-1"><a href="#Android-1" class="headerlink" title="Android"></a>Android</h3><ul>
<li>《Android开发艺术探索》</li>
<li>《App研发录》</li>
<li>《Android安全技术揭秘与防范》</li>
<li>《Android开发精要》</li>
<li>《深入理解Android5.0系统》</li>
<li>《深入理解Android（卷3）》</li>
<li>《阿里巴巴Android开发手册》</li>
</ul>
<h3 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h3><ul>
<li>《实战 Gradle》</li>
</ul>
<h3 id="程序原理"><a href="#程序原理" class="headerlink" title="程序原理"></a>程序原理</h3><ul>
<li>《程序员的自我修养—链接、装载与库》</li>
<li>《链接器和加载器》</li>
</ul>
<h3 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h3><ul>
<li>《深入java虚拟机》</li>
<li>《深入理解Java虚拟机++JVM高级特性与最佳实践》</li>
</ul>
<h3 id="Java-1"><a href="#Java-1" class="headerlink" title="Java"></a>Java</h3><ul>
<li>《Effective Java》</li>
<li>《Java多线程编程核心技术》</li>
<li>《Java NIO》</li>
<li>《阿里巴巴Java开发手册》</li>
<li>《java并发编程的艺术》</li>
<li>《编写高质量代码：改善Java程序的151个建议》</li>
<li>《深入了解JAVA虚拟机》</li>
</ul>
<h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><ul>
<li>《Linux内核修炼之道》</li>
<li>《深入理解LINUX内核》</li>
<li>《Linux内核设计与实现》</li>
<li>《Linux设备驱动程序》</li>
<li>《深入理解Linux虚拟内存管理》</li>
<li>《深入理解Linux网络技术内幕》</li>
<li>《Linux 多线程服务端编程:使用 muduo C++ 网络库》</li>
</ul>
<h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><ul>
<li>《构建高性能web站点》</li>
<li>《高性能网站构建实战》</li>
</ul>
<h3 id="个人发展"><a href="#个人发展" class="headerlink" title="个人发展"></a>个人发展</h3><ul>
<li>《软技能，代码之外的生存指南》</li>
<li>《总裁日记》</li>
<li>《浪潮之巅》</li>
<li>《异类–不一样的成功启示录》</li>
<li>《拆掉思维的墙–原来我还可以这样活》</li>
<li>《乔布斯传》</li>
<li>《Facebook效应》</li>
<li>《大数据时代》</li>
<li>《第五项修炼》</li>
<li>《这个历史挺靠谱》</li>
<li>《摇摆》</li>
<li>《结网-改变世界的互联网产品经理》</li>
<li>《素书》</li>
<li>《乌合之众》</li>
<li>《从零开始做运营-张亮》</li>
<li>《卓有成效的管理者》</li>
<li>《金字塔原理》</li>
<li>《软技能：代码之外的生存指》</li>
<li>《人人都是产品经理》</li>
<li>《数据挖掘与数据化运营实战》</li>
<li>《长尾理论》</li>
<li>《点石成金》</li>
<li>《启示录-打造用户喜爱的产品》</li>
<li>《精益创业》</li>
<li>《认知盈余》</li>
<li>《定位》</li>
<li>《PRINCE2成功的项目管理》</li>
<li>《超越对手-软件项目经理的18种使用技能》</li>
<li>《快速软件开发》</li>
<li>《人件》</li>
<li>《人月神话》</li>
<li>《写给大家看的项目管理》</li>
<li>《有效沟通-管理者的沟通艺术》</li>
<li>《最后期限》</li>
<li>《Scrum实战——敏捷软件项目管理与开发》</li>
</ul>
<h3 id="投资理财"><a href="#投资理财" class="headerlink" title="投资理财"></a>投资理财</h3><ul>
<li>《股票操盘手回忆录》</li>
<li>《彼得林奇的成功投资》</li>
<li>《战胜华尔街》</li>
</ul>
<h2 id="工具篇"><a href="#工具篇" class="headerlink" title="工具篇"></a>工具篇</h2><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><h4 id="工具网站"><a href="#工具网站" class="headerlink" title="工具网站"></a>工具网站</h4><ul>
<li><a href="https://developer.android.com/index.html" target="_blank" rel="external">Android Developers</a>：Android官方开发者网站，有各种开发文档可以阅读，以及下载开发工具，英语不太好的可以选择“简体中文”哦！</li>
<li><a href="http://www.androiddevtools.cn/" target="_blank" rel="external">AndroidDevTools</a>：收集和整理了Android SDK、开发工具、开发教程的下载地址</li>
<li><a href="ftp://ftp.qt-project.org/qt/source/" target="_blank" rel="external">下载qt源码</a>：</li>
<li><a href="http://www.findjar.com" target="_blank" rel="external">下载jar包</a>：</li>
<li><a href="http://grepcode.com/" target="_blank" rel="external">GrepCode</a>：第三方的源码网站，可以查看和下载Java，Android等的源码，还可以提供多不同版本的源码在线查看，下载，以及可以方便的对比各个版本的差异。</li>
</ul>
<h4 id="调试利器"><a href="#调试利器" class="headerlink" title="调试利器"></a>调试利器</h4><ul>
<li><a href="http://facebook.github.io/stetho/" target="_blank" rel="external">Stetho</a>：Stetho，来自Facebook，它能做什么？无需root，借助Chrome可以查看SharePreferences和数据库中的数据，此外还有网络抓包以及查看View树等。</li>
</ul>
<h4 id="AS插件"><a href="#AS插件" class="headerlink" title="AS插件"></a>AS插件</h4><ul>
<li><a href="https://github.com/mcharmas/android-parcelable-intellij-plugin" target="_blank" rel="external">android-parcelable-intellij-plugin</a>：帮助继承Parcelable的类自动生成相应代码，在没遇见它之前，手动写过大量的Parcelable实现代码，真的好痛苦。</li>
<li><a href="https://github.com/zzz40500/GsonFormat" target="_blank" rel="external">GsonFormat</a>：根据JSON数据快速生成Java实体类，又一波解放生产力。</li>
</ul>
<h4 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h4><ul>
<li><a href="https://github.com/skylot/jadx/" target="_blank" rel="external">Jdax</a>：轻轻一下，立马让apk宽衣解带</li>
<li><a href="https://github.com/google/android-classyshark" target="_blank" rel="external">Classyshark</a>：轻松查看apk内部每个包的方法数，用了哪些开源库。</li>
<li><a href="https://github.com/JesusFreke/smali/wiki/smalidea" target="_blank" rel="external">smali代码调试插件</a>：你以为没有拿到安卓Java源码就不能调试了吗？图样图森破了吧。</li>
<li><a href="https://www.hex-rays.com/products/ida/" target="_blank" rel="external">IDA Pro</a>：逆向大利器，不管你是smali还是so文件，照样动态调试你。</li>
</ul>
<h4 id="Crash搜集"><a href="#Crash搜集" class="headerlink" title="Crash搜集"></a>Crash搜集</h4><ul>
<li><a href="https://bugly.qq.com" target="_blank" rel="external">Bugly</a>：腾讯出品的SDK，对Crash搜集的体验非常赞，能搜集到JNI层的奔溃以及监控线上的ANR问题。</li>
<li><a href="https://try.crashlytics.com/" target="_blank" rel="external">Crashlytics</a>：国外的一个SDK</li>
<li><a href="https://github.com/ACRA/acra" target="_blank" rel="external">ARCA</a>：一个开源的崩溃日志搜集器，轻松让你实现客户端的崩溃日志上传到后台，如果你不喜欢接入别人家的SDK，可以使用它。有一个不足之处，就是它搜集不到JNI层的奔溃。</li>
</ul>
<h3 id="素材站点"><a href="#素材站点" class="headerlink" title="素材站点"></a>素材站点</h3><ul>
<li>IconFont 阿里巴巴矢量图标库： <a href="http://www.iconfont.cn/" target="_blank" rel="external">http://www.iconfont.cn/</a></li>
<li>IconMoon： <a href="https://icomoon.io/app/#/select" target="_blank" rel="external">https://icomoon.io/app/#/select</a></li>
<li>Iconion： <a href="http://iconion.com/" target="_blank" rel="external">http://iconion.com/</a></li>
<li>Android-Iconics： <a href="https://github.com/mikepenz/Android-Iconics" target="_blank" rel="external">https://github.com/mikepenz/Android-Iconics</a></li>
<li><a href="http://findicons.com/" target="_blank" rel="external">http://findicons.com/</a></li>
<li><a href="https://www.iconfinder.com/" target="_blank" rel="external">https://www.iconfinder.com/</a></li>
<li><a href="http://www.flaticon.com/" target="_blank" rel="external">http://www.flaticon.com/</a></li>
<li><a href="http://www.iconarchive.com/" target="_blank" rel="external">http://www.iconarchive.com/</a></li>
<li><a href="https://github.com/google/material-design-icons" target="_blank" rel="external">https://github.com/google/material-design-icons</a></li>
<li><a href="http://www.bestpsdfreebies.com/category-freebie/icons/" target="_blank" rel="external">http://www.bestpsdfreebies.com/category-freebie/icons/</a></li>
<li><a href="http://www.premiumpixels.com/page/1/?s=icon" target="_blank" rel="external">http://www.premiumpixels.com/page/1/?s=icon</a></li>
</ul>
<p>博客 <a href="http://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&amp;mid=2650821086&amp;idx=1&amp;sn=080bc2cfaa04947b974bf6273bbd7259&amp;chksm=80b78540b7c00c56fd15fb8027b4d2730523c32c2099970cc49f9ddc03d235c907dc59e1695c&amp;scene=4#wechat_redirect" target="_blank" rel="external">Android IconFont全攻略</a></p>
<h3 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h3><ul>
<li>GifCam：一个好用的视频转gif工具</li>
<li><a href="https://jitpack.io/" target="_blank" rel="external">JitPack</a>：GitHub上面的开源库可以发布到这里，创建属于自己的开源库，供其他开发者使用</li>
<li><a href="https://webkit.org/perf/sunspider/sunspider.html" target="_blank" rel="external">SunSpider</a>：JavaScript Benchmark</li>
<li><a href="http://browserbench.org/JetStream/" target="_blank" rel="external">JetStream</a>：JavaScript Benchmark</li>
<li><a href="http://staruml.io/" target="_blank" rel="external">StarUML</a>：开源免费的UML工具</li>
<li><a href="https://1024tools.com/" target="_blank" rel="external">1024程序员开发工具箱</a>： JSON格式化，Markdown 编辑转Html等工具</li>
</ul>
<h3 id="在线绘图"><a href="#在线绘图" class="headerlink" title="在线绘图"></a>在线绘图</h3><ul>
<li><a href="https://www.processon.com" target="_blank" rel="external">ProcessOn</a>：免费在线作图，可以生成本地PNG</li>
<li><a href="http://plantuml.com/" target="_blank" rel="external">PlantUML</a>：在线作图，可以生成在线PNG，可以版本控制</li>
<li><a href="http://www.gravizo.com/" target="_blank" rel="external">Gravizo</a>：在线绘图的渲染引擎</li>
<li><a href="http://naotu.baidu.com/" target="_blank" rel="external">百度脑图</a>：在线绘制思维导图，免安装，云存储，易分享</li>
</ul>
<h3 id="Markdown-相关工具"><a href="#Markdown-相关工具" class="headerlink" title="Markdown 相关工具"></a>Markdown 相关工具</h3><h4 id="在线编辑工具"><a href="#在线编辑工具" class="headerlink" title="在线编辑工具"></a>在线编辑工具</h4><ul>
<li>leanote 蚂蚁笔记：<a href="https://leanote.com/" target="_blank" rel="external">地址</a>：在线功能强大，客户端功能更强大</li>
<li>Dillinger：<a href="https://dillinger.io/" target="_blank" rel="external">地址</a></li>
<li>StackEdit：<a href="https://stackedit.io/" target="_blank" rel="external">地址</a></li>
</ul>
<p>功能：</p>
<ul>
<li>即时渲染</li>
<li>管理多个 MarkDown 文档，可在线或离线编辑</li>
<li>通过模板导出 MarkDown 、 HTML 或者 pdf 格式文件</li>
<li>转换HTML到 MarkDown</li>
<li>云同步，一键发布</li>
</ul>
<h4 id="Markdown-转-pdf"><a href="#Markdown-转-pdf" class="headerlink" title="Markdown 转 pdf"></a>Markdown 转 pdf</h4><ul>
<li>用 leanote，客户端功能很强大</li>
<li>用 Chrome 打开 md 文件，然后打印用 pdf 格式输出。</li>
<li>用 StackEdit 保存为 pdf 格式，不过这种格式要收费才能使用，可以保存为html，然后用浏览器打开打印成 pdf。格式转化可能会有问题</li>
<li>用 Dillinger 保存为 pdf 格式，但是中文转化有问题</li>
</ul>
<h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p>一些后台数据的API，可用来应用开发练手</p>
<ul>
<li><a href="http://apis.io/" target="_blank" rel="external">API 搜索</a></li>
<li><a href="https://www.zhihu.com/question/39479153" target="_blank" rel="external">知乎上面的回答集合</a></li>
<li><a href="http://apistore.baidu.com/" target="_blank" rel="external">百度 API Store</a>：为开发者提供最全面的 API 服务</li>
<li><a href="https://www.juhe.cn/" target="_blank" rel="external">聚合数据</a>：一家数据银行</li>
<li><a href="http://www.haoservice.com/" target="_blank" rel="external">HaoService</a>：专业数据平台</li>
<li><a href="http://gank.io/" target="_blank" rel="external">干货集中营</a>：每日分享妹子图和技术干货，还有供大家中午休息的休闲视频</li>
<li><a href="https://github.com/izzyleung/ZhihuDailyPurify/wiki/%E7%9F%A5%E4%B9%8E%E6%97%A5%E6%8A%A5-API-%E5%88%86%E6%9E%90" target="_blank" rel="external">知乎日报API</a>：知乎日报 API 分析</li>
<li><a href="https://developer.github.com/v3/" target="_blank" rel="external">Github</a></li>
<li><a href="http://open.weibo.com/wiki/API" target="_blank" rel="external">微博API</a></li>
<li><a href="http://developer.dribbble.com/" target="_blank" rel="external">Dribbble</a></li>
<li><a href="https://github.com/metowolf/Meting" target="_blank" rel="external">Meting</a>：Github上面的音乐API</li>
</ul>
<h3 id="专利检索"><a href="#专利检索" class="headerlink" title="专利检索"></a>专利检索</h3><ul>
<li><a href="http://www.pss-system.gov.cn" target="_blank" rel="external">专利检索及分析</a></li>
<li><a href="http://www.patexplorer.com/" target="_blank" rel="external">专利探索者</a></li>
</ul>
<h3 id="其他-2"><a href="#其他-2" class="headerlink" title="其他"></a>其他</h3><h4 id="视频地址解析"><a href="#视频地址解析" class="headerlink" title="视频地址解析"></a>视频地址解析</h4><ul>
<li><a href="http://www.flvxz.com/" target="_blank" rel="external">飞驴视频下载</a>：</li>
<li><a href="http://www.flvcd.com/" target="_blank" rel="external">硕鼠</a>：</li>
</ul>
<p>持续更新中……</p>
]]></content>
    
    <summary type="html">
    
      记录一些作为一名程序员在学习道路上经常用到的一些资料，以备不时之需
    
    </summary>
    
      <category term="学习资料" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"/>
    
    
      <category term="学习资料" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"/>
    
  </entry>
  
  <entry>
    <title>Java 基础 -- ThreadLocal</title>
    <link href="http://yoursite.com/2016/11/16/java-basic-threadlocal/"/>
    <id>http://yoursite.com/2016/11/16/java-basic-threadlocal/</id>
    <published>2016-11-16T02:00:00.000Z</published>
    <updated>2019-01-23T07:20:07.167Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是-ThreadLocal"><a href="#什么是-ThreadLocal" class="headerlink" title="什么是 ThreadLocal"></a>什么是 ThreadLocal</h2><p>ThreadLocal 从字面意思理解很容易让人认为是一个“本地线程”，其实，ThreadLocal 并不是一个 Thread ，而是 Thread 的局部变量，也许把它命名为 ThreadLocalVariable 更容易让人理解一些。<br>ThreadLocal 保存了一些变量，对于同一个 ThreadLocal，在多线程环境中不同线程通过 get 或者 set 方法操作的变量都是互相隔离的，也就是操作的只是属于自己线程的变量，这个操作不会影响其他线程的变量。即使它们使用的是同一个 ThreadLocal 对象。</p>
<h2 id="用法介绍"><a href="#用法介绍" class="headerlink" title="用法介绍"></a>用法介绍</h2><p>ThreadLocal 的几个方法：</p>
<ul>
<li>get()：获取 ThreadLocal 中当前线程的“本地变量”的值。</li>
<li>set(T value)：设置 ThreadLocal 中当前线程的“本地变量”的值。</li>
<li>remove()：删除 ThreadLocal 中当前线程的“本地变量”的值。</li>
<li>initialValue()：调用get方法时，如果当前线程没有设置本地变量，就调用这个方法返回默认值。可以重写这个方法返回自己想要的默认值。</li>
</ul>
<p>下面简单写个 demo 来介绍一下它的用法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">private ThreadLocal&lt;String&gt; mThreadLocal = new ThreadLocal&lt;&gt;();</div><div class="line"></div><div class="line">    new Thread(new Runnable() &#123;</div><div class="line">        @Override</div><div class="line">        public void run() &#123;</div><div class="line">            Log.e(&quot;Test&quot;,&quot;thread1 set&quot;);</div><div class="line">            mThreadLocal.set(Thread.currentThread().getName());</div><div class="line">            try &#123;</div><div class="line">                Thread.sleep(2000);</div><div class="line">            &#125; catch (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            Log.e(&quot;Test&quot;,&quot;thread1 get = &quot;+mThreadLocal.get());</div><div class="line">        &#125;</div><div class="line">    &#125;,&quot;Thread1&quot;).start();</div><div class="line"></div><div class="line"></div><div class="line">    new Thread(new Runnable() &#123;</div><div class="line">        @Override</div><div class="line">        public void run() &#123;</div><div class="line">            try &#123;</div><div class="line">                Thread.sleep(1000);</div><div class="line">                Log.e(&quot;Test&quot;,&quot;thread2 set&quot;);</div><div class="line">                mThreadLocal.set(Thread.currentThread().getName());</div><div class="line"></div><div class="line">                Thread.sleep(2000);</div><div class="line">            &#125; catch (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            Log.e(&quot;Test&quot;,&quot;thread2 get = &quot;+mThreadLocal.get());</div><div class="line">        &#125;</div><div class="line">    &#125;,&quot;Thread2&quot;).start();</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">thread1 set</div><div class="line">thread2 set</div><div class="line">thread1 get = Thread1</div><div class="line">thread2 get = Thread2</div></pre></td></tr></table></figure>
<p>对于同一个 mThreadLocal 变量，在 Thread1 中的保存的变量是字符串 “Thread1”，在 Thread2 中的保存的变量是字符串 “Thread2”。</p>
<h2 id="ThreadLocal-原理和源码分析"><a href="#ThreadLocal-原理和源码分析" class="headerlink" title="ThreadLocal 原理和源码分析"></a>ThreadLocal 原理和源码分析</h2><p>Thread 类中有个变量 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ThreadLocal.ThreadLocalMap threadLocals = null</div></pre></td></tr></table></figure>
<p>也就是说每个线程中都存在一个这样的 ThreadLocalMap 映射表，</p>
<p>ThreadLocalMap 又是怎么和 ThreadLocal 联系起来的呢？我们不妨先来看一下 ThreadLocal 几个方法的源码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public void set(T value) &#123;</div><div class="line">    Thread t = Thread.currentThread();</div><div class="line">    ThreadLocalMap map = getMap(t);</div><div class="line">    if (map != null)</div><div class="line">        map.set(this, value);</div><div class="line">    else</div><div class="line">        createMap(t, value);</div><div class="line">&#125;</div><div class="line"></div><div class="line">ThreadLocalMap getMap(Thread t) &#123;</div><div class="line">    return t.threadLocals;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void createMap(Thread t, T firstValue) &#123;</div><div class="line">    t.threadLocals = new ThreadLocalMap(this, firstValue);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>set 方法会从当前 Thread 中获取  threadLocals 变量，它是 ThreadLocalMap 对象，然后以调用 set 方法的 ThreadLocal 对象为key，把值设置到该映射表中去。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public T get() &#123;</div><div class="line">    Thread t = Thread.currentThread();</div><div class="line">    ThreadLocalMap map = getMap(t);</div><div class="line">    if (map != null) &#123;</div><div class="line">        ThreadLocalMap.Entry e = map.getEntry(this);</div><div class="line">        if (e != null)</div><div class="line">            return (T)e.value;</div><div class="line">    &#125;</div><div class="line">    return setInitialValue();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>get 方法是把调用 get 方法 ThreadLocal 对象为key的值从当前 Thread 的映射表中取出来。</p>
<p>在为每个 Thread 初始化 ThreadLocalMap 时，会把 ThreadLocal 对象和要存储的本地变量作为参数传入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ThreadLocalMap(ThreadLocal firstKey, Object firstValue) &#123;</div><div class="line">    // 设置初始容量为 16</div><div class="line">    table = new Entry[INITIAL_CAPACITY];</div><div class="line">    // 以 ThreadLocal 的 threadLocalHashCode 来作为在数组中的存储位置。</div><div class="line">    int i = firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - 1);</div><div class="line">    table[i] = new Entry(firstKey, firstValue);</div><div class="line">    size = 1;</div><div class="line">    setThreshold(INITIAL_CAPACITY);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>每个 ThreadLocalMap 对象有个 Entry 数组 table，Entry 对象包含 key（当前 ThreadLocal 对象） 和 value （要保存的本地变量）两个属性 ：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">static class Entry extends WeakReference&lt;ThreadLocal&gt; &#123;</div><div class="line">    /** The value associated with this ThreadLocal. */</div><div class="line">    Object value;</div><div class="line"></div><div class="line">    Entry(ThreadLocal k, Object v) &#123;</div><div class="line">        super(k);</div><div class="line">        value = v;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Entry 继承 WeakReference 可以保证不再使用的 ThreadLocal 可以及时的垃圾回收。<br>那么如果保证不同的 ThreadLocal 在 数组中的位置不同呢？我们来看一下 ThreadLocal 的 threadLocalHashCode 变量。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">private final int threadLocalHashCode = nextHashCode();</div><div class="line">private static final int HASH_INCREMENT = 0x61c88647;</div><div class="line">private static int nextHashCode() &#123;</div><div class="line">    return nextHashCode.getAndAdd(HASH_INCREMENT);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里以静态变量从0开始不断加 0x61c88647 来作为不同 ThreadLocal 的哈希值，这里为什么选用 0x61c88647，可以参考网络上介绍的很多文章：为了让 hash code 能更好地均匀分布在尺寸为 2 的 N 次方的数组里。<br>这里又有个问题，如果仅仅为了保证均匀分布，那为什么不采用直接从0自增的方式来分配hash code，然后对数组大小取模来生成数组位置。这里我们需要注意的是 Entry 是可能会被回收的，这样可能会造成空间的浪费。而 ThreadLocalMap 的这种方法是跳跃分布分配，这样即使出现了冲突，也能通过解决hash冲突的方法来解决。ThreadLocalMap 解决hash冲突的方法是开地址法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">private void set(ThreadLocal key, Object value) &#123;</div><div class="line">    Entry[] tab = table;</div><div class="line">    int len = tab.length;</div><div class="line">    int i = key.threadLocalHashCode &amp; (len-1);</div><div class="line"></div><div class="line">    for (Entry e = tab[i];</div><div class="line">         e != null;</div><div class="line">         e = tab[i = nextIndex(i, len)]) &#123;</div><div class="line">        ThreadLocal k = e.get();</div><div class="line"></div><div class="line">        if (k == key) &#123;</div><div class="line">            e.value = value;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (k == null) &#123;</div><div class="line">            replaceStaleEntry(key, value, i);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    tab[i] = new Entry(key, value);</div><div class="line">    int sz = ++size;</div><div class="line">    if (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)</div><div class="line">        rehash();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>到此我们基本明白了 ThreadLocal 原理：在每个 Thread 对象中有个映射表，这个映射表用一个数组键值对的形式来保存在当前线程中通过 ThreadLocal set 方法设置的局部变量，这个键值对的key是 ThreadLocal。</p>
<h2 id="为什么要用-ThreadLocal"><a href="#为什么要用-ThreadLocal" class="headerlink" title="为什么要用 ThreadLocal"></a>为什么要用 ThreadLocal</h2><p>我们为什么要用 ThreadLocal 呢？当然使用其他方法也同样是可以满足我们的需求的。<br>比如使用自定义线程的局部变量：其实 ThreadLocal 也是定义了线程的局部变量 ThreadLocalMap。它已经替我们封装好了，隐藏了实现细节，方便我们使用。<br>比如使用自定义全局变量：全局变量在多线程使用要注意同步问题，会影响效率。</p>
<p>通过上面的分析，我们知道 ThreadLocal 的特点：</p>
<ul>
<li>ThreadLocal 提供了获取本线程局部变量的能力，多线程编程时，每个线程都往同一个 ThreadLocal 对象中存取所需要的变量就可以了，使用 ThreadLocal 存取的变量，就像是每个线程自己的局部变量，不受其他线程运行状态的影响。</li>
<li>ThreadLocal 以空间换时间解决了对象在被共享访问带来线程安全问题。每个线程都有一个ThreadLocalMap映射表，正是利用了这个映射表所占用的空间，使得多个线程都可以访问自己的这片空间，不用担心考虑线程同步问题，效率自然会高。打个比方说，现在有100个同学需要填写一张表格但是只有一支笔，同步就相当于A使用完这支笔后给B，B使用后给C用……老师就控制着这支笔的使用顺序，使得同学之间不会产生冲突。而threadLocal就相当于，老师直接准备了100支笔，这样每个同学都使用自己的，同学之间就不会产生冲突。很显然这就是两种不同的思路，同步机制以“时间换空间”，由于每个线程在同一时刻共享对象只能被一个线程访问造成整体上响应时间增加，但是对象只占有一份内存，牺牲了时间效率换来了空间效率即“时间换空间”。而threadLocal，为每个线程都分配了一份对象，自然而然内存使用率增加，每个线程各用各的，整体上时间效率要增加很多，牺牲了空间效率换来时间效率即“空间换时间”。</li>
</ul>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><h3 id="Looper-中的运用"><a href="#Looper-中的运用" class="headerlink" title="Looper 中的运用"></a>Looper 中的运用</h3><p>是 Looper 控制消息队列的类，每个拥有消息队列的线程，都会有一个独立的Looper类，用于处理本线程的消息。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public final class Looper &#123;</div><div class="line"></div><div class="line">    static final ThreadLocal&lt;Looper&gt; sThreadLocal = new ThreadLocal&lt;Looper&gt;();</div><div class="line">    </div><div class="line">    private static void prepare(boolean quitAllowed) &#123;</div><div class="line">        if (sThreadLocal.get() != null) &#123;</div><div class="line">            throw new RuntimeException(&quot;Only one Looper may be created per thread&quot;);</div><div class="line">        &#125;</div><div class="line">        sThreadLocal.set(new Looper(quitAllowed));</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public static @Nullable Looper myLooper() &#123;</div><div class="line">        return sThreadLocal.get();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 Looper 中自定义了一个 sThreadLocal 变量，在 prepare 时设置了一个 Looper 对象，调用 myLooper() 时，会返回当前线程对应的 Looper 对象。</p>
<h2 id="ThreadLocal-为避免内存泄漏而做的努力"><a href="#ThreadLocal-为避免内存泄漏而做的努力" class="headerlink" title="ThreadLocal 为避免内存泄漏而做的努力"></a>ThreadLocal 为避免内存泄漏而做的努力</h2><p>前面我们已经提到过，<code>Entry extends WeakReference&lt;ThreadLocal&gt;</code> Entry 继承 WeakReference，那么 ThreadLocal 是以弱引用身份被 Entry 作为key 来引用的，那么如果 ThreadLocal 没有被外部的强引用所使用，那么这个 ThreadLocal 会在下次 GC 的时候被回收。<br>这里就有个问题，虽然 ThreadLocal 被回收了，ThreadLocalMap 就会出现了个 null key 的情况，但是 value 并没有被回收，如果不做处理，就会一直存在这里，如果当前线程生命周期很长的话，就有可能造成内存泄漏。<br>其实 ThreadLocal 已经考虑到了这种情况，并做了一些措施来保证及时清除被回收的 ThreadLocal 对应的value。在 ThreadLocal 的 get set remove 方法调用时，如果发现 key 为null 时，会调用 replaceStaleEntry 或者 expungeStaleEntry 方法类替换或者清除 value。<br>下面来看一下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public T get() &#123;</div><div class="line">    Thread t = Thread.currentThread();</div><div class="line">    ThreadLocalMap map = getMap(t);</div><div class="line">    if (map != null) &#123;</div><div class="line">        ThreadLocalMap.Entry e = map.getEntry(this);</div><div class="line">        if (e != null)</div><div class="line">            return (T)e.value;</div><div class="line">    &#125;</div><div class="line">    return setInitialValue();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">private Entry getEntry(ThreadLocal key) &#123;</div><div class="line">    int i = key.threadLocalHashCode &amp; (table.length - 1);</div><div class="line">    Entry e = table[i];</div><div class="line">    if (e != null &amp;&amp; e.get() == key)</div><div class="line">        return e;</div><div class="line">    else</div><div class="line">        return getEntryAfterMiss(key, i, e);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">private Entry getEntryAfterMiss(ThreadLocal key, int i, Entry e) &#123;</div><div class="line">    Entry[] tab = table;</div><div class="line">    int len = tab.length;</div><div class="line"></div><div class="line">    while (e != null) &#123;</div><div class="line">        ThreadLocal k = e.get();</div><div class="line">        if (k == key)</div><div class="line">            return e;</div><div class="line">        if (k == null)</div><div class="line">            expungeStaleEntry(i);</div><div class="line">        else</div><div class="line">            i = nextIndex(i, len);</div><div class="line">        e = tab[i];</div><div class="line">    &#125;</div><div class="line">    return null;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 get 方法中，会调用 ThreadLocalMap getEntry 方法，如果返现key为null的情况，就调用 expungeStaleEntry 清除 value。并继续循环往下检查是否有null的key，有的话一并删除。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/dde92ec37bd1" target="_blank" rel="external">https://www.jianshu.com/p/dde92ec37bd1</a><br><a href="http://duanqz.github.io/2018-03-15-Java-ThreadLocal" target="_blank" rel="external">http://duanqz.github.io/2018-03-15-Java-ThreadLocal</a></p>
]]></content>
    
    <summary type="html">
    
      介绍 ThreadLocal 的用法
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Gradle 使用指南 -- 一些小技巧</title>
    <link href="http://yoursite.com/2016/11/12/development-tool-gradle-skills/"/>
    <id>http://yoursite.com/2016/11/12/development-tool-gradle-skills/</id>
    <published>2016-11-12T02:00:00.000Z</published>
    <updated>2018-05-29T02:28:46.415Z</updated>
    
    <content type="html"><![CDATA[<h2 id="运行-Linux-命令行"><a href="#运行-Linux-命令行" class="headerlink" title="运行 Linux 命令行"></a>运行 Linux 命令行</h2><p>方法 1:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">task A &lt;&lt; &#123;</div><div class="line">    def content = &quot;ls -al&quot;.execute().text.trim()</div><div class="line">    print content</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过调用 <code>ProcessGroovyMethods</code> 的 <code>execute()</code> 方法来执行命令行。</p>
<p>方法 2:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">task C (type: Exec) &#123;</div><div class="line">    println &apos;Hello from C&apos;</div><div class="line"></div><div class="line">    workingDir &apos;.&apos;</div><div class="line">    commandLine &apos;ls&apos;,&apos;-al&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过 <a href="https://docs.gradle.org/current/dsl/org.gradle.api.tasks.Exec.html" target="_blank" rel="external">Exec Task</a>来实现。</p>
<p>方法 3:<br>通过 Project 的 <code>exec()</code> 方法实现。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">println  exec &#123;</div><div class="line">    commandLine &apos;ls&apos;, &apos;-al&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      介绍在Android开发过程中Gradle的一些常见命令和配置
    
    </summary>
    
      <category term="Gradle" scheme="http://yoursite.com/categories/Gradle/"/>
    
    
      <category term="开发工具" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Gradle" scheme="http://yoursite.com/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>GankTouTiao —— 一个技术干货分享的APP</title>
    <link href="http://yoursite.com/2016/11/08/android-app-ganktoutiao/"/>
    <id>http://yoursite.com/2016/11/08/android-app-ganktoutiao/</id>
    <published>2016-11-08T02:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>每日分享技术干货和妹子图，还有供大家中午休息的休闲视频、美女图片，另外还实现了推荐干货功能。<br>数据来源：<a href="http://gank.io/api" target="_blank" rel="external">http://gank.io/api</a><br>项目源码：<a href="https://github.com/heqiangflytosky/GankTouTiao" target="_blank" rel="external">https://github.com/heqiangflytosky/GankTouTiao</a></p>
<h2 id="用到的开源库"><a href="#用到的开源库" class="headerlink" title="用到的开源库"></a>用到的开源库</h2><p>RxJava、RxAndroid、Retrofit2、okhttp3、glide、iconics、ButterKnife</p>
<h2 id="应用展示"><a href="#应用展示" class="headerlink" title="应用展示"></a>应用展示</h2><p>持续完善中……</p>
<p><img src="https://github.com/heqiangflytosky/GankTouTiao/raw/master/img/GankTouTiao.gif" alt="效果图" title="GankTouTiao"></p>
]]></content>
    
    <summary type="html">
    
      介绍一款分享技术干货、美女图片和休闲视频的App
    
    </summary>
    
      <category term="Android App" scheme="http://yoursite.com/categories/Android-App/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Android App" scheme="http://yoursite.com/tags/Android-App/"/>
    
  </entry>
  
  <entry>
    <title>Java 开发技巧 -- 获取 Java 的调用栈</title>
    <link href="http://yoursite.com/2016/11/01/java-development-skills-get-stacktrace/"/>
    <id>http://yoursite.com/2016/11/01/java-development-skills-get-stacktrace/</id>
    <published>2016-11-01T02:00:00.000Z</published>
    <updated>2018-03-11T13:47:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>StackTrace</code> 存放的就是方法调用栈的信息，异常处理中常用的 <code>printStackTrace()</code> 实质就是打印异常调用的堆栈信息。<br>有时候我们需要获取某个方法的调用栈信息，或者是根据某个方法调用的不同时机做一些不同的处理，那么就需要获取方法的调用栈。<br>本文介绍了一种获取 Java 方法的调用栈的实现。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p><code>StackTraceElement</code> 表示 StackTrace 中的一个方法对象，属性包括方法的类名、方法名、文件名以及调用的行数。<br>该类提供的方法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StackTraceElement</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">    String declaringClass;</div><div class="line">    String methodName;</div><div class="line">    String fileName;</div><div class="line">    <span class="keyword">int</span> lineNumber;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getClassName</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFileName</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLineNumber</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMethodName</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNativeMethod</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>获取 <code>StackTraceElement</code> 的方法有两种，均返回 <code>StackTraceElement</code>数组，也就是这个栈的信息。</p>
<ul>
<li>Thread.currentThread().getStackTrace()</li>
<li>new Throwable().getStackTrace()</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getStackTrace</span><span class="params">()</span> </span>&#123;</div><div class="line">    StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();</div><div class="line">    <span class="keyword">for</span> (StackTraceElement stackTraceElement : stackTrace) &#123;</div><div class="line">        String className = stackTraceElement.getClassName();</div><div class="line">        String methodName = stackTraceElement.getMethodName();</div><div class="line">        Log.e(<span class="string">"Test"</span>,<span class="string">"className = "</span>+className+<span class="string">", methodName = "</span>+methodName);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>获取到调用的类名、方法名和文件名之后我们就可以做一些处理，比如日志打印、或者是在某个特殊类调用的时候做一些特殊设置。<br>我就是通过这中方法对 Android 中 <code>Context</code> 的 <code>getPackageName()</code> 方法做了一些特殊处理。<br><a href="http://blog.csdn.net/lmj623565791/article/details/52506545" target="_blank" rel="external">http://blog.csdn.net/lmj623565791/article/details/52506545</a> 这篇文章通 <code>StackTraceElement</code> 过做了一些对Log的封装。</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://blog.csdn.net/hp910315/article/details/52702199" target="_blank" rel="external">http://blog.csdn.net/hp910315/article/details/52702199</a><br><a href="http://blog.csdn.net/lmj623565791/article/details/52506545" target="_blank" rel="external">http://blog.csdn.net/lmj623565791/article/details/52506545</a></p>
]]></content>
    
    <summary type="html">
    
      本文介绍获取 Java 方法的调用栈的实现
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Android 消息机制 -- IdleHandler 的用法</title>
    <link href="http://yoursite.com/2016/10/12/android-knowledge-message-system-idlehandler-sample/"/>
    <id>http://yoursite.com/2016/10/12/android-knowledge-message-system-idlehandler-sample/</id>
    <published>2016-10-12T02:00:00.000Z</published>
    <updated>2018-07-10T11:07:37.907Z</updated>
    
    <content type="html"><![CDATA[<p>在上一篇博客<a href="http://www.heqiangfly.com/2016/10/10/android-knowledge-message-system-source-code/" target="_blank" rel="external">Android 消息机制 – 源码分析</a>中我们在 <code>MessageQueue.next()</code> 中分析了 <code>IdleHandler</code>，这是一种在只有当消息队列没有消息时或者是队列中的消息还有到执行时间时才会执行的 <code>IdleHandler</code>，它存放在 <code>mPendingIdleHandlers</code> 队列中。</p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Callback interface for discovering when a thread is going to block</div><div class="line"> * waiting for more messages.</div><div class="line"> */</div><div class="line">public static interface IdleHandler &#123;</div><div class="line">    /**</div><div class="line">     * Called when the message queue has run out of messages and will now</div><div class="line">     * wait for more.  Return true to keep your idle handler active, false</div><div class="line">     * to have it removed.  This may be called if there are still messages</div><div class="line">     * pending in the queue, but they are all scheduled to be dispatched</div><div class="line">     * after the current time.</div><div class="line">     */</div><div class="line">    boolean queueIdle();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>queueIdle()</code> 方法如果返回 false，那么这个 <code>IdleHandler</code> 只会执行一次，执行完后会从队列中删除，如果返回 true，那么执行完后不会被删除，只要执行 <code>MessageQueue.next</code> 时消息队列中没有可执行的消息，即为空闲时间，那么 <code>IdleHandler</code> 队列中的 <code>IdleHandler</code> 还会继续被执行。</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">public void clickTestIdleHandler(View view) &#123;</div><div class="line">    // 添加第一个 IdleHandler</div><div class="line">    Looper.myQueue().addIdleHandler(new MessageQueue.IdleHandler() &#123;</div><div class="line">        @Override</div><div class="line">        public boolean queueIdle() &#123;</div><div class="line">            try &#123;</div><div class="line">                Thread.sleep(2000);</div><div class="line">            &#125; catch (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            Log.e(&quot;Test&quot;,&quot;IdleHandler1 queueIdle&quot;);</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    // 添加第二个 IdleHandler</div><div class="line">    Looper.myQueue().addIdleHandler(new MessageQueue.IdleHandler() &#123;</div><div class="line">        @Override</div><div class="line">        public boolean queueIdle() &#123;</div><div class="line">            try &#123;</div><div class="line">                Thread.sleep(2000);</div><div class="line">            &#125; catch (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            Log.e(&quot;Test&quot;,&quot;IdleHandler2 queueIdle&quot;);</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    Handler handler = new Handler();</div><div class="line">    // 添加第一个Message</div><div class="line">    Message message1 = Message.obtain(handler, new Runnable() &#123;</div><div class="line">        @Override</div><div class="line">        public void run() &#123;</div><div class="line">            try &#123;</div><div class="line">                Thread.sleep(2000);</div><div class="line">            &#125; catch (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            Log.e(&quot;Test&quot;,&quot;message1&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    message1.sendToTarget();</div><div class="line"></div><div class="line">    // 添加第二个Message</div><div class="line">    Message message2 = Message.obtain(handler, new Runnable() &#123;</div><div class="line">        @Override</div><div class="line">        public void run() &#123;</div><div class="line">            try &#123;</div><div class="line">                Thread.sleep(2000);</div><div class="line">            &#125; catch (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            Log.e(&quot;Test&quot;,&quot;message2&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    message2.sendToTarget();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的例子中分别向消息队列中添加来两个 <code>IdleHandler</code> 和两个 <code>Message</code>，其中 <code>IdleHandler</code> 的 <code>queueIdle()</code> 方法返回 false，下面来看一下结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">16:23:07.726 E/Test: message1</div><div class="line">16:23:09.727 E/Test: message2</div><div class="line">16:23:11.732 E/Test: IdleHandler1 queueIdle</div><div class="line">16:23:13.733 E/Test: IdleHandler2 queueIdle</div></pre></td></tr></table></figure>
<p>可以看到 <code>IdleHandler</code> 是在消息队列的其它消息执行完后才执行的，而且只执行来一次。<br>再来看一下 <code>queueIdle()</code> 方法返回 true 的情况：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">07-10 16:27:02.083 23560-23560/com.example.heqiang.testsomething E/Test: message1</div><div class="line">07-10 16:27:04.084 23560-23560/com.example.heqiang.testsomething E/Test: message2</div><div class="line"></div><div class="line">07-10 16:27:06.090 23560-23560/com.example.heqiang.testsomething E/Test: IdleHandler1 queueIdle</div><div class="line">07-10 16:27:08.090 23560-23560/com.example.heqiang.testsomething E/Test: IdleHandler2 queueIdle</div><div class="line"></div><div class="line">07-10 16:27:10.095 23560-23560/com.example.heqiang.testsomething E/Test: IdleHandler1 queueIdle</div><div class="line">07-10 16:27:12.096 23560-23560/com.example.heqiang.testsomething E/Test: IdleHandler2 queueIdle</div><div class="line"></div><div class="line">07-10 16:27:14.099 23560-23560/com.example.heqiang.testsomething E/Test: IdleHandler1 queueIdle</div><div class="line">07-10 16:27:16.099 23560-23560/com.example.heqiang.testsomething E/Test: IdleHandler2 queueIdle</div><div class="line"></div><div class="line">07-10 16:27:43.788 23560-23560/com.example.heqiang.testsomething E/Test: IdleHandler1 queueIdle</div><div class="line">07-10 16:27:45.788 23560-23560/com.example.heqiang.testsomething E/Test: IdleHandler2 queueIdle</div><div class="line"></div><div class="line">07-10 16:27:47.792 23560-23560/com.example.heqiang.testsomething E/Test: IdleHandler1 queueIdle</div><div class="line">07-10 16:27:49.793 23560-23560/com.example.heqiang.testsomething E/Test: IdleHandler2 queueIdle</div></pre></td></tr></table></figure>
<p>可以看到，当 <code>queueIdle()</code> 方法返回 true时会多次执行，即 <code>IdleHandler</code> 执行一次后不会从 <code>IdleHandler</code> 的队列中删除，等下次空闲时间到来时还会继续执行。关于这点在上一篇博客<a href="http://www.heqiangfly.com/2016/10/10/android-knowledge-message-system-source-code/" target="_blank" rel="external">Android 消息机制 – 源码分析</a>中有源码分析。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>比如我们想实现一个 Android 绘制完成的回调方法，Android本身提供的 <code>Activity</code> 框架和 <code>Fragment</code> 框架并没有提供绘制完成的回调，如果我们自己实现一个框架，就可以使用 <code>IdleHandler</code> 来实现一个 <code>onRenderFinished</code> 这种回调了。<br>下面链接中实现的『结合HandlerThread, 用于单线程消息通知器』，这个也挺有意思，可以看一下。</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://cloud.tencent.com/developer/article/1006147" target="_blank" rel="external">https://cloud.tencent.com/developer/article/1006147</a></p>
]]></content>
    
    <summary type="html">
    
      本文介绍 IdleHandler 的用法
    
    </summary>
    
      <category term="Android 消息机制" scheme="http://yoursite.com/categories/Android-%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6/"/>
    
    
      <category term="Android 消息机制" scheme="http://yoursite.com/tags/Android-%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android 消息机制 -- 源码分析</title>
    <link href="http://yoursite.com/2016/10/10/android-knowledge-message-system-source-code/"/>
    <id>http://yoursite.com/2016/10/10/android-knowledge-message-system-source-code/</id>
    <published>2016-10-10T02:00:00.000Z</published>
    <updated>2018-10-17T01:38:32.163Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本文介绍的消息机制主要指消息在进程内的传递机制，Android 内的消息传递无处不在，主要涉及到下面的四个类：</p>
<ul>
<li>Handler：用于发送消息 <code>Handler.sendMessage</code> 和处理消息 <code>Handler.handleMessage</code> 的类。</li>
<li>Message：用于传输的消息体的类。</li>
<li>MessageQueue：消息队列，主要用来存放消息 <code>MessageQueue.enqueueMessage</code> 和发出消息 <code>MessageQueue.next()</code> 。<code>MessageQueue</code> 是一个单向链表，<code>Message</code> 对象有个 <code>next</code> 变量保存列表中的下一个，<code>MessageQueue</code> 中的 <code>mMessages</code> 保存链表的第一个元素。</li>
<li>Looper：不断循环执行 <code>Looper.loop</code>，按分发机制将消息分发给目标处理者。</li>
</ul>
<p>看一下它们之间的关系图：</p>
<p><img src="http://www.plantuml.com/plantuml/svg/VP2zIWD1483xUOeXLKJo1XQnKr1GIISMUtV3ShW_nyvk8OS1kxo3leFOf53mRNA-XcFSFQEYrGpVV3i_E-UeGapMmAADXd1ow9hWsmQ7zMguUnmUdZUhzTlJo-R-TG9G6yMCHyerXWBsiCGJxpj9xMSKS4hCIjDveaHejm7sqLTHjIxNfdj2EiznUf6SKvMC3H-8oJL5oH4jwtzBjsMfGdkn9PS7cW86wipDmiDoN5hErHG5ZBDhPKobwkiVlSeDFSpmM9xc1fTNQCzaczRf7SfVbwFD2SFOiNnJ_yS7YGTPEPZDogwmgtuhvBXbMVebvvc5ZsvnO2vN96lU0G00" alt="效果图"></p>
<!-- 
@startuml
Title "Android 消息机制类图"

class Handler {
~ Looper mLooper
~ MessageQueue mQueue
+ obtainMessage()
+ post(Runnable r)
+ sendMessage(Message msg)
+ sendMessage(Message msg)
}

class Message {
+ Messenger replyTo
~ Handler target
~ Runnable callback
}

class MessageQueue {
- IdleHandler[] mPendingIdleHandlers
~ Message mMessages

}
-->
<p>分析过了源码，相信大家会对消息机制有更好的领悟，那么使用起来也就更加的得心应手。</p>
<h2 id="Handler-构造函数"><a href="#Handler-构造函数" class="headerlink" title="Handler 构造函数"></a>Handler 构造函数</h2><p><code>Handler</code> 一共有7个构造方法：</p>
<ul>
<li>Handler()</li>
<li>Handler(Callback callback)</li>
<li>Handler(Looper looper)</li>
<li>Handler(Looper looper, Callback callback)</li>
<li>Handler(boolean async)</li>
<li>Handler(Callback callback, boolean async)</li>
<li>Handler(Looper looper, Callback callback, boolean async)</li>
</ul>
<p>下面对这些参数做一下讲解</p>
<p>前面5个构造方法最终调用最后两个构造方法其中一个来完成初始化工作。<br>下面来分析一下这两个构造方法的源码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public Handler(Callback callback, boolean async) &#123;</div><div class="line">    if (FIND_POTENTIAL_LEAKS) &#123;</div><div class="line">        // 这里如果打开了FIND_POTENTIAL_LEAKS开关</div><div class="line">        // 会判断是否是非静态的匿名内部类、非静态成员内部类或非静态局部内部类</div><div class="line">        // 如果是的话就给出警告</div><div class="line">        // 够体贴了吧？</div><div class="line">        final Class&lt;? extends Handler&gt; klass = getClass();</div><div class="line">        if ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &amp;&amp;</div><div class="line">                (klass.getModifiers() &amp; Modifier.STATIC) == 0) &#123;</div><div class="line">            Log.w(TAG, &quot;The following Handler class should be static or leaks might occur: &quot; +</div><div class="line">                klass.getCanonicalName());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    // 获取当前线程的 Looper 对象</div><div class="line">    mLooper = Looper.myLooper();</div><div class="line">    if (mLooper == null) &#123;</div><div class="line">        throw new RuntimeException(</div><div class="line">            &quot;Can&apos;t create handler inside thread that has not called Looper.prepare()&quot;);</div><div class="line">    &#125;</div><div class="line">    // 从Looper对象中获取消息队列</div><div class="line">    mQueue = mLooper.mQueue;</div><div class="line">    // 设置 handler 的 callback</div><div class="line">    mCallback = callback;</div><div class="line">    // 异步消息，后面详细介绍</div><div class="line">    mAsynchronous = async;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从这里我们可以看出，如果没有为 <code>Handler</code> 指定 <code>Looper</code>，那么就会获取当前创建 <code>Handler</code> 的 <code>Looper</code> 对象，那么后面对消息的处理也就在这个线程来处理了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public Handler(Looper looper, Callback callback, boolean async) &#123;</div><div class="line">    mLooper = looper;//设置Looper</div><div class="line">    mQueue = looper.mQueue;// 从Looper对象中获取消息队列</div><div class="line">    mCallback = callback;// 设置 handler 的 callback</div><div class="line">    mAsynchronous = async;// 异步消息，后面详细介绍</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个构造方法和前面一个不一样的地方就在于指定了 <code>Looper</code> 对象，那么后面对消息的处理也就在该 <code>Looper</code> 对应的线程来处理了。</p>
<h2 id="创建消息"><a href="#创建消息" class="headerlink" title="创建消息"></a>创建消息</h2><p>创建消息一般用下的方法：</p>
<ul>
<li>new Message</li>
<li>Handler.obtainMessage()</li>
<li>Handler.obtainMessage(int what)</li>
<li>Handler.obtainMessage(int what, Object obj)</li>
<li>Handler.obtainMessage(int what, int arg1, int arg2)</li>
<li>Handler.obtainMessage(int what, int arg1, int arg2, Object obj)</li>
<li>Message.obtain()</li>
<li>Message.obtain(Message orig)</li>
<li>Message.obtain(Handler h)</li>
<li>Message.obtain(Handler h, Runnable callback)</li>
<li>Message.obtain(Handler h, int what)</li>
<li>Message.obtain(Handler h, int what, Object obj)</li>
<li>Message.obtain(Handler h, int what, int arg1, int arg2)</li>
<li>Message.obtain(Handler h, int what, int arg1, int arg2, Object obj)</li>
</ul>
<p><code>new Message</code> 这种方式没什么需要解释的，直接调用相关构造函数创建一个 <code>Message</code> 实例出来。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Message message = new Message();</div><div class="line">message.what = result;</div><div class="line">message.obj = obj;</div><div class="line">sendMessage(message);</div></pre></td></tr></table></figure>
<p>再来看一下 <code>obtainMessage</code> 方法：<br>使用方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">obtainMessage(result, obj).sendToTarget();</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public final Message obtainMessage(int what, int arg1, int arg2, Object obj)</div><div class="line">&#123;</div><div class="line">    return Message.obtain(this, what, arg1, arg2, obj);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>obtainMessage</code> 的几个相关方法都调用了 <code>Message.obtain</code> 方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public static Message obtain(Handler h, int what, int arg1, int arg2) &#123;</div><div class="line">    Message m = obtain();</div><div class="line">    m.target = h;</div><div class="line">    m.what = what;</div><div class="line">    m.arg1 = arg1;</div><div class="line">    m.arg2 = arg2;</div><div class="line"></div><div class="line">    return m;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static Message obtain() &#123;</div><div class="line">    synchronized (sPoolSync) &#123;</div><div class="line">        if (sPool != null) &#123;</div><div class="line">            Message m = sPool;</div><div class="line">            sPool = m.next;</div><div class="line">            m.next = null;</div><div class="line">            m.flags = 0; // clear in-use flag</div><div class="line">            sPoolSize--;</div><div class="line">            return m;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return new Message();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>obtainMessage</code> 是从整个 <code>Messge</code> 池中返回一个新的 <code>Message</code> 实例，通过 <code>obtainMessage</code> 能避免重复 <code>Message</code> 创建对象，比 <code>new Message</code> 效率更高。<br>从上面代码可以看到 <code>Handler.obtainMessage</code> 内部还是调用 <code>Message.obtain</code> 来实现的，没什么本质的区别。</p>
<h2 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h2><p>可以使用下面的方法来发送消息：</p>
<ul>
<li>Handler.sendMessage(Message msg)</li>
<li>Handler.sendMessageDelayed(Message msg, long delayMillis)</li>
<li>Handler.sendMessageAtTime(Message msg, long uptimeMillis)</li>
<li>Handler.sendMessageAtFrontOfQueue(Message msg)</li>
<li>Handler.sendEmptyMessage(int what)</li>
<li>Handler.sendEmptyMessageDelayed(int what, long delayMillis)</li>
<li>Handler.sendEmptyMessageAtTime(int what, long uptimeMillis)</li>
<li>Handler.post(Runnable r)</li>
<li>Handler.postAtTime(Runnable r, long uptimeMillis)</li>
<li>Handler.postAtTime(Runnable r, Object token, long uptimeMillis)</li>
<li>Handler.postDelayed(Runnable r, long delayMillis)</li>
<li>Handler.postAtFrontOfQueue(Runnable r)</li>
<li>Message.sendToTarget()</li>
</ul>
<p>我们可以把它们归结为三种方法：<code>sendMessage</code>、<code>sendEmptyMessage</code>、<code>Handler.post</code> 和 <code>Message.sendToTarget()</code>。<br>先来看一下 <code>sendMessage</code> 相关的方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public boolean sendMessageAtTime(Message msg, long uptimeMillis) &#123;</div><div class="line">    MessageQueue queue = mQueue;</div><div class="line">    if (queue == null) &#123;</div><div class="line">        RuntimeException e = new RuntimeException(</div><div class="line">                this + &quot; sendMessageAtTime() called with no mQueue&quot;);</div><div class="line">        Log.w(&quot;Looper&quot;, e.getMessage(), e);</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">    return enqueueMessage(queue, msg, uptimeMillis);</div><div class="line">&#125;</div><div class="line"></div><div class="line">private boolean enqueueMessage(MessageQueue queue, Message msg, long uptimeMillis) &#123;</div><div class="line">    msg.target = this;</div><div class="line">    if (mAsynchronous) &#123;</div><div class="line">        msg.setAsynchronous(true);</div><div class="line">    &#125;</div><div class="line">    return queue.enqueueMessage(msg, uptimeMillis);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里代码比较简单，把 <code>Message</code> 对象放到消息队列中去，等待执行。<br>再来看一下 <code>sendEmptyMessage</code> 相关方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public final boolean sendEmptyMessageDelayed(int what, long delayMillis) &#123;</div><div class="line">    Message msg = Message.obtain();</div><div class="line">    msg.what = what;</div><div class="line">    return sendMessageDelayed(msg, delayMillis);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，<code>sendEmptyMessage</code> 最终是调用了 <code>sendMessage</code> 相关方法，<code>Message</code> 是通过 <code>Message.obtain()</code>，只设置了 <code>what</code> 属性。<br>再来看一下 <code>Handler.post</code> 相关方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public final boolean post(Runnable r)</div><div class="line">&#123;</div><div class="line">   return  sendMessageDelayed(getPostMessage(r), 0);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个方法最终调用的还是 <code>Handler.sendMessage</code> 的相关方法，知识这里要关注一下 <code>Handler.getPostMessage</code> 方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">private static Message getPostMessage(Runnable r, Object token) &#123;</div><div class="line">    Message m = Message.obtain();</div><div class="line">    m.obj = token;</div><div class="line">    m.callback = r;</div><div class="line">    return m;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>同样也是通过 <code>Message.obtain()</code> 获取 <code>Message</code> 对象，并把参数 <code>Runnable</code> 作为 <code>Message</code> 的回调方法，该回调的执行后面会介绍，是优先级最高的。<br>再来看一下 <code>Message.sendToTarget()</code> 的源码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public void sendToTarget() &#123;</div><div class="line">    target.sendMessage(this);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实还是调用 <code>Handler.sendMessage</code> 来完成 <code>Message</code> 的发送。</p>
<h2 id="消息队列-MessageQueue"><a href="#消息队列-MessageQueue" class="headerlink" title="消息队列 MessageQueue"></a>消息队列 MessageQueue</h2><p>上面介绍到消息的发送，其实最终都是通过 <code>MessageQueue.enqueueMessage</code> 来将消息放入消息队列，然后等待消息的分发。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">boolean enqueueMessage(Message msg, long when) &#123;</div><div class="line">    // 一个 message 必须有 target（Handler），否则为无效消息</div><div class="line">    if (msg.target == null) &#123;</div><div class="line">        throw new IllegalArgumentException(&quot;Message must have a target.&quot;);</div><div class="line">    &#125;</div><div class="line">    // 如果该消息正在使用，则抛出异常</div><div class="line">    if (msg.isInUse()) &#123;</div><div class="line">        throw new IllegalStateException(msg + &quot; This message is already in use.&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    synchronized (this) &#123;</div><div class="line">        //正在退出时，回收msg，加入到消息池</div><div class="line">        if (mQuitting) &#123;</div><div class="line">            IllegalStateException e = new IllegalStateException(</div><div class="line">                    msg.target + &quot; sending message to a Handler on a dead thread&quot;);</div><div class="line">            Log.w(TAG, e.getMessage(), e);</div><div class="line">            msg.recycle();</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">        // 标记该消息正在使用   </div><div class="line">        msg.markInUse();</div><div class="line">        msg.when = when;</div><div class="line">        Message p = mMessages;</div><div class="line">        boolean needWake;</div><div class="line">        if (p == null || when == 0 || when &lt; p.when) &#123;</div><div class="line">            // p 为null（队列中没有消息）或者消息执行时间是最早的，就把该消息作为队列的头部</div><div class="line">            // 如果队列再阻塞状态，则唤醒队列</div><div class="line">            msg.next = p;</div><div class="line">            mMessages = msg;</div><div class="line">            needWake = mBlocked;</div><div class="line">        &#125; else &#123;</div><div class="line">            // 将消息按照执行时间顺序插入到消息队列中去</div><div class="line">            // 如果在消息头部是 barrier （p.target == null）或者该消息是执行时间最早的异步消息</div><div class="line">            // 那么就唤醒消息队列</div><div class="line">            needWake = mBlocked &amp;&amp; p.target == null &amp;&amp; msg.isAsynchronous();</div><div class="line">            Message prev;</div><div class="line">            for (;;) &#123;</div><div class="line">                prev = p;</div><div class="line">                p = p.next;</div><div class="line">                if (p == null || when &lt; p.when) &#123;</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">                // 如果不是消息头部的异步消息，不唤醒队列</div><div class="line">                if (needWake &amp;&amp; p.isAsynchronous()) &#123;</div><div class="line">                    needWake = false;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            msg.next = p; // invariant: p == prev.next</div><div class="line">            prev.next = msg;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // We can assume mPtr != 0 because mQuitting is false.</div><div class="line">        if (needWake) &#123;</div><div class="line">            nativeWake(mPtr);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return true;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>消息的提取：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line">Message next() &#123;</div><div class="line">    // ptr == 0 表明当前队列已经销毁</div><div class="line">    final long ptr = mPtr;</div><div class="line">    if (ptr == 0) &#123;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    int pendingIdleHandlerCount = -1; // -1 only during first iteration</div><div class="line">    int nextPollTimeoutMillis = 0;</div><div class="line">    for (;;) &#123;</div><div class="line">        if (nextPollTimeoutMillis != 0) &#123;</div><div class="line">            Binder.flushPendingCommands();</div><div class="line">        &#125;</div><div class="line">        // 调用native方法来阻塞nextPollTimeoutMillis秒的时间</div><div class="line">        nativePollOnce(ptr, nextPollTimeoutMillis);</div><div class="line"></div><div class="line">        synchronized (this) &#123;</div><div class="line">            // Try to retrieve the next message.  Return if found.</div><div class="line">            final long now = SystemClock.uptimeMillis();</div><div class="line">            Message prevMsg = null;</div><div class="line">            Message msg = mMessages;</div><div class="line">            if (msg != null &amp;&amp; msg.target == null) &#123;</div><div class="line">                // 如果当前消息是 SyncBarrier，那么找到下一个异步消息，</div><div class="line">                do &#123;</div><div class="line">                    prevMsg = msg;</div><div class="line">                    msg = msg.next;</div><div class="line">                &#125; while (msg != null &amp;&amp; !msg.isAsynchronous());</div><div class="line">            &#125;</div><div class="line">            if (msg != null) &#123;</div><div class="line">                // 通过前面的一步找到了消息</div><div class="line">                if (now &lt; msg.when) &#123;</div><div class="line">                    // 该消息还没有到达执行时间，则设置下一次轮询的超时时长</div><div class="line">                    nextPollTimeoutMillis = (int) Math.min(msg.when - now, Integer.MAX_VALUE);</div><div class="line">                &#125; else &#123;</div><div class="line">                    // 如果到了执行时间，就取出这条消息返回</div><div class="line">                    mBlocked = false;</div><div class="line">                    if (prevMsg != null) &#123;</div><div class="line">                        prevMsg.next = msg.next;</div><div class="line">                    &#125; else &#123;</div><div class="line">                        mMessages = msg.next;</div><div class="line">                    &#125;</div><div class="line">                    msg.next = null;</div><div class="line">                    if (DEBUG) Log.v(TAG, &quot;Returning message: &quot; + msg);</div><div class="line">                    msg.markInUse();</div><div class="line">                    return msg;</div><div class="line">                &#125;</div><div class="line">            &#125; else &#123;</div><div class="line">                // 通过前面的一步没有找到消息，说明消息队列已经空了</div><div class="line">                // 先设置为-1,如果后面的没有可以执行的 IdleHandler，那么就一直阻塞下去</div><div class="line">                // 直到有新的消息被唤醒</div><div class="line">                // 如果后面有 可以执行的 IdleHandler，nextPollTimeoutMillis被赋值为 0</div><div class="line">                nextPollTimeoutMillis = -1;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            // 消息队列正在退出时返回null</div><div class="line">            if (mQuitting) &#123;</div><div class="line">                dispose();</div><div class="line">                return null;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            // 如果是第一次循环进入空闲时间，那么 pendingIdleHandlerCount 是为-1的，</div><div class="line">            // 这个时候获取一下当前 IdleHandler 的个数</div><div class="line">            // 只有当消息队列么有消息时或者是队列中的消息还有到执行时间是才会执行 IdleHandler</div><div class="line">            if (pendingIdleHandlerCount &lt; 0</div><div class="line">                    &amp;&amp; (mMessages == null || now &lt; mMessages.when)) &#123;</div><div class="line">                pendingIdleHandlerCount = mIdleHandlers.size();</div><div class="line">            &#125;</div><div class="line">            if (pendingIdleHandlerCount &lt;= 0) &#123;</div><div class="line">                // 如果没有 IdleHandler 需要执行，那么就等待下一个消息到来</div><div class="line">                mBlocked = true;</div><div class="line">                continue;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            if (mPendingIdleHandlers == null) &#123;</div><div class="line">                mPendingIdleHandlers = new IdleHandler[Math.max(pendingIdleHandlerCount, 4)];</div><div class="line">            &#125;</div><div class="line">            mPendingIdleHandlers = mIdleHandlers.toArray(mPendingIdleHandlers);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 当有idle handlers时，运行 idle handlers</div><div class="line">        // 执行一次next方法只有第一次轮询能执行这里的操作</div><div class="line">        // 执行后 pendingIdleHandlerCount 会被设置为0</div><div class="line">        for (int i = 0; i &lt; pendingIdleHandlerCount; i++) &#123;</div><div class="line">            final IdleHandler idler = mPendingIdleHandlers[i];</div><div class="line">            mPendingIdleHandlers[i] = null; // release the reference to the handler</div><div class="line"></div><div class="line">            boolean keep = false;</div><div class="line">            try &#123;</div><div class="line">                // 执行 IdleHandler</div><div class="line">                keep = idler.queueIdle();</div><div class="line">            &#125; catch (Throwable t) &#123;</div><div class="line">                Log.wtf(TAG, &quot;IdleHandler threw exception&quot;, t);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            if (!keep) &#123;</div><div class="line">                // 如果不需要保留，那么移除这个 IdleHandler</div><div class="line">                synchronized (this) &#123;</div><div class="line">                    mIdleHandlers.remove(idler);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 设置 pendingIdleHandlerCount 0 保证在再次执行next方法之前不会再执行idle handler</div><div class="line">        pendingIdleHandlerCount = 0;</div><div class="line"></div><div class="line">        // 当调用一个空闲IdleHandler时，相当于分发了一个新message，因此无需等待可以直接查询pending message.</div><div class="line">        nextPollTimeoutMillis = 0;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>关于 <code>nativePollOnce(ptr, nextPollTimeoutMillis)</code> 方法，这里做一下介绍。<br>循环体内首先调用 <code>nativePollOnce(ptr, nextPollTimeoutMillis)</code>，这是一个Native方法，实际作用就是通过Native层的 <code>MessageQueue</code> 阻塞 <code>nextPollTimeoutMillis</code> 毫秒的时间。</p>
<ul>
<li>如果nextPollTimeoutMillis=-1，一直阻塞不会超时。</li>
<li>如果nextPollTimeoutMillis=0，不会阻塞，立即返回。</li>
<li>如果nextPollTimeoutMillis&gt;0，最长阻塞nextPollTimeoutMillis毫秒(超时)，如果期间有程序唤醒会立即返回。</li>
</ul>
<h2 id="同步消息、异步消息和同步栅栏"><a href="#同步消息、异步消息和同步栅栏" class="headerlink" title="同步消息、异步消息和同步栅栏"></a>同步消息、异步消息和同步栅栏</h2><p>我们在构造 <code>Handler</code> 时有个参数是给变量 <code>mAsynchronous</code> 赋值，那这个变量代表什么意义呢？<br>在<code>Handler.enqueueMessage</code> 中通过 <code>Message.setAsynchronous</code> 来设置 <code>flags</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">private boolean enqueueMessage(MessageQueue queue, Message msg, long uptimeMillis) &#123;</div><div class="line">    ...</div><div class="line">    if (mAsynchronous) &#123;</div><div class="line">        msg.setAsynchronous(true);</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>默认情况下如果我们不去设置 <code>Message.setAsynchronous</code> 都是同步消息，那么同步消息和异步消息有什么区别呢？<br>接下来我们就要看一下哪些地方有调用 <code>Message.isAsynchronous</code> 方法。<br>一个是在 <code>MessageQueue.enqueueMessage</code> 方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">boolean enqueueMessage(Message msg, long when) &#123;</div><div class="line">            ......</div><div class="line">            needWake = mBlocked &amp;&amp; p.target == null &amp;&amp; msg.isAsynchronous();</div><div class="line">            ......</div><div class="line">                if (needWake &amp;&amp; p.isAsynchronous()) &#123;</div><div class="line">                    needWake = false;</div><div class="line">                &#125;</div><div class="line">            ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另外一个是在 <code>MessageQueue.next</code> 方法中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Message next() &#123;</div><div class="line">            ......</div><div class="line">            if (msg != null &amp;&amp; msg.target == null) &#123;</div><div class="line">                // Stalled by a barrier.  Find the next asynchronous message in the queue.</div><div class="line">                do &#123;</div><div class="line">                    prevMsg = msg;</div><div class="line">                    msg = msg.next;</div><div class="line">                &#125; while (msg != null &amp;&amp; !msg.isAsynchronous());</div><div class="line">            &#125;</div><div class="line">            ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，使用 <code>Message.isAsynchronous</code> 方法的地方都和 <code>msg.target == null</code> 有关，我们都知道，一般情况下 <code>Message</code> 的属性 <code>target</code> 是不能为空的，但有一种消息是例外的，就是 SyncBarrier，我们暂且管它叫同步栅栏。<br>SyncBarrier 是起什么作用的呢？它就像一个卡子，卡在消息链表中的某个位置，当消息循环不断从消息链表中分发消息并进行处理时，一旦遇到这种 SyncBarrier，那么即使在 SyncBarrier 之后还有若干已经到时的同步 <code>Message</code>，也不会分发这些消息了。请注意，此时只是不会分发同步 <code>Message</code>，如果队列中还有异步 <code>Message</code>，那么还是会分发已到时的异步 <code>Message</code> 的。<br>如果消息队列中根本没有设置 SyncBarrier 的话，那么同步 <code>Message</code> 和异步 <code>Message</code> 的处理就没什么大的不同了。<br>那么如果设置 SyncBarrier 呢？<br>可以通过 <code>MessageQueue.postSyncBarrier</code> 方法实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">private int postSyncBarrier(long when) &#123;</div><div class="line">    // Enqueue a new sync barrier token.</div><div class="line">    // We don&apos;t need to wake the queue because the purpose of a barrier is to stall it.</div><div class="line">    synchronized (this) &#123;</div><div class="line">        final int token = mNextBarrierToken++;</div><div class="line">        final Message msg = Message.obtain();</div><div class="line">        msg.markInUse();</div><div class="line">        msg.when = when;</div><div class="line">        msg.arg1 = token;</div><div class="line"></div><div class="line">        Message prev = null;</div><div class="line">        Message p = mMessages;</div><div class="line">        if (when != 0) &#123;</div><div class="line">            while (p != null &amp;&amp; p.when &lt;= when) &#123;</div><div class="line">                prev = p;</div><div class="line">                p = p.next;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        if (prev != null) &#123; // invariant: p == prev.next</div><div class="line">            msg.next = p;</div><div class="line">            prev.next = msg;</div><div class="line">        &#125; else &#123;</div><div class="line">            msg.next = p;</div><div class="line">            mMessages = msg;</div><div class="line">        &#125;</div><div class="line">        return token;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然，SyncBarrier 也是可以清除的，通过 <code>MessageQueue.removeSyncBarrier</code> 来实现。</p>
<h2 id="消息循环-Looper"><a href="#消息循环-Looper" class="headerlink" title="消息循环 Looper"></a>消息循环 Looper</h2><p>说到消息循环就和 <code>Looper</code> 相关了，在 <code>Looper</code> 中创建了一个 <code>MessageQueue</code> 对象，并通过 <code>loop</code> 方法不断的从当前线程的 <code>MessageQueue</code> 中取消息数据，调用该消息的 <code>Handler</code> 对象 <code>target</code> 的 <code>dispatchMessage()</code> 方法来分发消息。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">public static void loop() &#123;</div><div class="line">    final Looper me = myLooper();//获取ThreadLocal的Looper对象</div><div class="line">    if (me == null) &#123;</div><div class="line">        throw new RuntimeException(&quot;No Looper; Looper.prepare() wasn&apos;t called on this thread.&quot;);</div><div class="line">    &#125;</div><div class="line">    final MessageQueue queue = me.mQueue;</div><div class="line"></div><div class="line">    Binder.clearCallingIdentity();</div><div class="line">    final long ident = Binder.clearCallingIdentity();</div><div class="line">    // 进入循环</div><div class="line">    for (;;) &#123;</div><div class="line">        Message msg = queue.next(); // 获取消息队列中的消息，可能会阻塞</div><div class="line">        if (msg == null) &#123;</div><div class="line">            // 如果没有消息，说明消息队列已经退出</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ......</div><div class="line">        try &#123;</div><div class="line">            // 分发消息</div><div class="line">            msg.target.dispatchMessage(msg);</div><div class="line">        &#125; finally &#123;</div><div class="line">            if (traceTag != 0) &#123;</div><div class="line">                Trace.traceEnd(traceTag);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ......</div><div class="line">        //将Message放入消息池</div><div class="line">        msg.recycleUnchecked();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="消息分发和执行"><a href="#消息分发和执行" class="headerlink" title="消息分发和执行"></a>消息分发和执行</h2><p>再看一下 <code>dispatchMessage</code> 源码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public void dispatchMessage(Message msg) &#123;</div><div class="line">    if (msg.callback != null) &#123;</div><div class="line">        handleCallback(msg);</div><div class="line">    &#125; else &#123;</div><div class="line">        if (mCallback != null) &#123;</div><div class="line">            if (mCallback.handleMessage(msg)) &#123;</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        handleMessage(msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>当 <code>Message</code> 的回调方法不为空的时候，优先执行该回调方法。这种情况是 <code>Message</code> 设置了 callback 时的情况，对应的 <code>Handler.post(Runnable r)</code> 这类发送消息的方法，这是就直接执行 post 的 <code>Runnable</code> 方法。</li>
<li>如果没有设置 <code>Message</code> 的回调方法，再看来 <code>Handler</code> 有没有设置 <code>Callback</code>，如果设置就执行该回调的 <code>handleMessage</code> 方法。对应的 <code>Handler(Callback callback)</code> 构造方法，这是直接执行 <code>Callback.handleMessage</code>。</li>
<li>如果上面两个回调方法都没有设置，那么就执行 <code>Handler.handleMessage</code> 方法。该方法默认为空实现，<code>Handler</code> 子类通过 override 该方法来完成具体的实现逻辑。</li>
</ol>
<p>消息队列中的消息都是同步执行的，一个任务执行完才会去消息队列中获取下一个消息进行执行。</p>
]]></content>
    
    <summary type="html">
    
      本文介绍 Android 消息机制
    
    </summary>
    
      <category term="Android 消息机制" scheme="http://yoursite.com/categories/Android-%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6/"/>
    
    
      <category term="Android 消息机制" scheme="http://yoursite.com/tags/Android-%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android SharedPreferences 源码分析以及跨进程读写问题</title>
    <link href="http://yoursite.com/2016/09/12/android-source-code-analysis-sharedpreferences/"/>
    <id>http://yoursite.com/2016/09/12/android-source-code-analysis-sharedpreferences/</id>
    <published>2016-09-12T02:00:00.000Z</published>
    <updated>2019-03-14T01:38:36.742Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Android SharedPreferences 提供了下面的模式来支持跨进程读写数据问题。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@Deprecated</div><div class="line">public static final int MODE_MULTI_PROCESS = 0x0004;</div></pre></td></tr></table></figure>
<p>这种模式已经被官方标记为 <code>Deprecated</code>，关于废弃的原因，官方有解释：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">* @deprecated MODE_MULTI_PROCESS does not work reliably in</div><div class="line">* some versions of Android, and furthermore does not provide any</div><div class="line">* mechanism for reconciling concurrent modifications across</div><div class="line">* processes.  Applications should not attempt to use it.  Instead,</div><div class="line">* they should use an explicit cross-process data management</div><div class="line">* approach such as &#123;@link android.content.ContentProvider ContentProvider&#125;.</div></pre></td></tr></table></figure>
<p>Google认为多个进程读同一个文件都是不安全的，不建议这么做。Android 不保证该模式总是能正确的工作，建议使用 ContentProvider 替代多进程之间文件的共享。<br>如果在某些条件下必须使用，则要注意下面介绍的几个坑。</p>
<h2 id="测试案例"><a href="#测试案例" class="headerlink" title="测试案例"></a>测试案例</h2><p>在测试的工程中创建一个 <code>Activity</code>，指定在另外一个进程和 Task 中启动：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">android:process=&quot;:second&quot;</div><div class="line">android:launchMode=&quot;singleTask&quot;</div><div class="line">android:taskAffinity=&quot;com.example.heqiang.testsomething.SecondActivity&quot;</div></pre></td></tr></table></figure>
<p>然后在 <code>MainActivity</code> 中启动 <code>SecondActivity</code> 把当前时间写入到 <code>SharedPreferences</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public void startSecondActivity(View v) &#123;</div><div class="line">    SharedPreferences preferences = getSharedPreferences(&quot;TEST_MULTI_PROCESS&quot;,Context.MODE_MULTI_PROCESS);</div><div class="line">    String time = String.valueOf(System.currentTimeMillis());</div><div class="line">    preferences.edit().putString(&quot;time&quot;, time).apply();</div><div class="line">    Toast.makeText(this, time, Toast.LENGTH_SHORT).show();</div><div class="line"></div><div class="line">    Intent intent = new Intent(this, SecondActivity.class);</div><div class="line">    startActivity(intent);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 <code>SecondActivity</code> 中添加一个按钮，点击可以跨进程获取 SharedPreferences 中 time 的值。<br>先看第一种实现方案：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class SecondActivity extends Activity &#123;</div><div class="line">    private SharedPreferences mSharedPreferences;</div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_second);</div><div class="line">        mSharedPreferences = getSharedPreferences(&quot;TEST_MULTI_PROCESS&quot;, Context.MODE_MULTI_PROCESS);</div><div class="line">        Toast.makeText(this,&quot;onCreate&quot;,Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    public void getData(View view) &#123;</div><div class="line">        String time = mSharedPreferences.getString(&quot;time&quot;,&quot;null&quot;);</div><div class="line">        Toast.makeText(this,time,Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种情况下 <code>mSharedPreferences</code> 实例只在 <code>onCreate</code> 中被初始化一次。<br>测试方法，启动 <code>SecondActivity</code> 后获取一次数据，然后将 <code>SecondActivity</code> 切回到后台，再次写入数据然后打开 <code>SecondActivity</code> 再次读取数据，你会发现，每次读取到的数据都是第一次的数据，虽然此时已经写入了新的数据，造成了写入和读取数据不同步的问题。<br>下面来测试一下下面的情况：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class SecondActivity extends Activity &#123;</div><div class="line">    private SharedPreferences mSharedPreferences;</div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_second);</div><div class="line">        Toast.makeText(this,&quot;onCreate&quot;,Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    public void getData(View view) &#123;</div><div class="line">        mSharedPreferences = getSharedPreferences(&quot;TEST_MULTI_PROCESS&quot;, Context.MODE_MULTI_PROCESS);</div><div class="line">        String time = mSharedPreferences.getString(&quot;time&quot;,&quot;null&quot;);</div><div class="line">        Toast.makeText(this,time,Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种情况下 <code>mSharedPreferences</code> 的初始化放在了每次获取数据的时候。这样读取数据是正常的。<br>为什么会是这样的？我们从源码里面找答案。</p>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="获取-SharedPreferences-文件"><a href="#获取-SharedPreferences-文件" class="headerlink" title="获取 SharedPreferences 文件"></a>获取 SharedPreferences 文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">private File getPreferencesDir() &#123;</div><div class="line">    synchronized (mSync) &#123;</div><div class="line">        if (mPreferencesDir == null) &#123;</div><div class="line">            mPreferencesDir = new File(getDataDir(), &quot;shared_prefs&quot;);</div><div class="line">        &#125;</div><div class="line">        return ensurePrivateDirExists(mPreferencesDir);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 <code>ContextImpl.getPreferencesDir</code> 方法中，会固定从 /data/data/&lt;包名&gt;/shared_prefs目录下获取对应名称的xml文件，如果想改变目录路径，则需要通过反射，在构造 <code>SharedPreferencesImpl</code> 时传入File参数来实现。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Class spiClass = Class.forName(&quot;android.app.SharedPreferencesImpl&quot;);</div><div class="line">Constructor constructor = spiClass.getDeclaredConstructor(File.class, int.class);</div><div class="line">constructor.setAccessible(true);</div><div class="line">sp = (SharedPreferences) constructor.newInstance(file, mode);</div></pre></td></tr></table></figure>
<h3 id="获取-SharedPreferences-实例"><a href="#获取-SharedPreferences-实例" class="headerlink" title="获取 SharedPreferences 实例"></a>获取 SharedPreferences 实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public SharedPreferences getSharedPreferences(File file, int mode) &#123;</div><div class="line">    checkMode(mode);</div><div class="line">    SharedPreferencesImpl sp;</div><div class="line">    synchronized (ContextImpl.class) &#123;</div><div class="line">        final ArrayMap&lt;File, SharedPreferencesImpl&gt; cache = getSharedPreferencesCacheLocked();</div><div class="line">        sp = cache.get(file);</div><div class="line">        if (sp == null) &#123;</div><div class="line">            sp = new SharedPreferencesImpl(file, mode);</div><div class="line">            cache.put(file, sp);</div><div class="line">            return sp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    if ((mode &amp; Context.MODE_MULTI_PROCESS) != 0 ||</div><div class="line">        getApplicationInfo().targetSdkVersion &lt; android.os.Build.VERSION_CODES.HONEYCOMB) &#123;</div><div class="line">        // If somebody else (some other process) changed the prefs</div><div class="line">        // file behind our back, we reload it.  This has been the</div><div class="line">        // historical (if undocumented) behavior.</div><div class="line">        sp.startReloadIfChangedUnexpectedly();</div><div class="line">    &#125;</div><div class="line">    return sp;</div><div class="line">&#125;</div><div class="line"></div><div class="line">private ArrayMap&lt;File, SharedPreferencesImpl&gt; getSharedPreferencesCacheLocked() &#123;</div><div class="line">    if (sSharedPrefsCache == null) &#123;</div><div class="line">        sSharedPrefsCache = new ArrayMap&lt;&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    final String packageName = getPackageName();</div><div class="line">    ArrayMap&lt;File, SharedPreferencesImpl&gt; packagePrefs = sSharedPrefsCache.get(packageName);</div><div class="line">    if (packagePrefs == null) &#123;</div><div class="line">        packagePrefs = new ArrayMap&lt;&gt;();</div><div class="line">        sSharedPrefsCache.put(packageName, packagePrefs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return packagePrefs;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过 <code>ContextImpl.getSharedPreferences</code> 方法可以看到，获取的 <code>SharedPreferences</code> 是 <code>SharedPreferencesImpl</code> 实例。这个实例保存在静态变量 <code>SharedPreferencesImpl</code> 中，因此，无论该包名的应用中有多少个 <code>ContextImpl</code>，他们共同使用同一个 <code>SharedPreferencesImpl</code> 实例。<br>在 <code>MODE_MULTI_PROCESS</code> 模式下，会调用 <code>startReloadIfChangedUnexpectedly()</code> 方法，区别也就在这里。<br>我们先来看一下 <code>SharedPreferencesImpl</code> 类。<br>该类就是一个简单的二级缓存，在启动时会将文件里的数据全部都加载到内存里。<br>先来看一下构造方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">SharedPreferencesImpl(File file, int mode) &#123;</div><div class="line">    mFile = file;</div><div class="line">    mBackupFile = makeBackupFile(file);</div><div class="line">    mMode = mode;</div><div class="line">    mLoaded = false;</div><div class="line">    mMap = null;</div><div class="line">    startLoadFromDisk();</div><div class="line">&#125;</div><div class="line">private void startLoadFromDisk() &#123;</div><div class="line">    synchronized (this) &#123;</div><div class="line">        mLoaded = false;</div><div class="line">    &#125;</div><div class="line">    // 开启后台线程进行从磁盘加载数据到内存的操作</div><div class="line">    new Thread(&quot;SharedPreferencesImpl-load&quot;) &#123;</div><div class="line">        public void run() &#123;</div><div class="line">            loadFromDisk();</div><div class="line">        &#125;</div><div class="line">    &#125;.start();</div><div class="line">&#125;</div><div class="line"></div><div class="line">private void loadFromDisk() &#123;</div><div class="line">    synchronized (SharedPreferencesImpl.this) &#123;</div><div class="line">        if (mLoaded) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        if (mBackupFile.exists()) &#123;</div><div class="line">            mFile.delete();</div><div class="line">            mBackupFile.renameTo(mFile);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ......</div><div class="line"></div><div class="line">    Map map = null;</div><div class="line">    StructStat stat = null;</div><div class="line">    try &#123;</div><div class="line">        stat = Os.stat(mFile.getPath());</div><div class="line">        if (mFile.canRead()) &#123;</div><div class="line">            BufferedInputStream str = null;</div><div class="line">            try &#123;</div><div class="line">                str = new BufferedInputStream(</div><div class="line">                        new FileInputStream(mFile), 16*1024);</div><div class="line">                map = XmlUtils.readMapXml(str);</div><div class="line">            &#125; catch (XmlPullParserException | IOException e) &#123;</div><div class="line">                Log.w(TAG, &quot;getSharedPreferences&quot;, e);</div><div class="line">            &#125; finally &#123;</div><div class="line">                IoUtils.closeQuietly(str);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; catch (ErrnoException e) &#123;</div><div class="line">        /* ignore */</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    synchronized (SharedPreferencesImpl.this) &#123;</div><div class="line">        mLoaded = true;</div><div class="line">        if (map != null) &#123;</div><div class="line">            mMap = map;</div><div class="line">            mStatTimestamp = stat.st_mtime;</div><div class="line">            mStatSize = stat.st_size;</div><div class="line">        &#125; else &#123;</div><div class="line">            mMap = new HashMap&lt;&gt;();</div><div class="line">        &#125;</div><div class="line">        // 加载完毕，唤醒其他等待加载完毕的线程</div><div class="line">        notifyAll();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在构造 <code>SharedPreferencesImpl</code> 实例时，会从xml文件中通过 <code>loadFromDisk()</code> 把所有数据读取到  Map 中。</p>
<h3 id="数据读取"><a href="#数据读取" class="headerlink" title="数据读取"></a>数据读取</h3><p>以 <code>getString</code> 为例子介绍：<br>先来看数据的读取：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@Nullable</div><div class="line">public String getString(String key, @Nullable String defValue) &#123;</div><div class="line">    // 同步代码块，保证 mMap 的线程安全</div><div class="line">    synchronized (this) &#123;</div><div class="line">        // 等待加载操作时锁的释放</div><div class="line">        awaitLoadedLocked();</div><div class="line">        String v = (String)mMap.get(key);</div><div class="line">        return v != null ? v : defValue;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，数据的读取直接从内存的 Map 中获取，没有涉及到 xml 文件的读取。<br>这也就不难理解，跨进程读取和写入的时候，为什么会造成数据的不同步了，如果写入是在另外一个进程，写入后，如果读取进程不重新从加载xml文件到内存，那么读取进程的Map是不会更新的，就读取不到另外进程新写入的数据了。<br>get 方法使用了对象的同步锁，说明这个方法是线程安全的。</p>
<h3 id="数据写入"><a href="#数据写入" class="headerlink" title="数据写入"></a>数据写入</h3><p>再来看一下数据写入的情况，以 <code>putString</code> 为例子介绍：：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">public Editor edit() &#123;</div><div class="line">    synchronized (this) &#123;</div><div class="line">        awaitLoadedLocked();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return new EditorImpl();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public final class EditorImpl implements Editor &#123;</div><div class="line">    // 存储提交之前需要修改的数据</div><div class="line">    private final Map&lt;String, Object&gt; mModified = Maps.newHashMap();</div><div class="line">    private boolean mClear = false;</div><div class="line"></div><div class="line">    public Editor putString(String key, @Nullable String value) &#123;</div><div class="line">        //也使用了对象的同步锁，说明这个方法是线程安全的。</div><div class="line">        synchronized (this) &#123;</div><div class="line">            // 暂时存储到 mModified 中</div><div class="line">            mModified.put(key, value);</div><div class="line">            return this;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    ...</div><div class="line">    </div><div class="line">    public boolean commit() &#123;</div><div class="line">        // 写入到内存Map中</div><div class="line">        MemoryCommitResult mcr = commitToMemory();</div><div class="line">        // 写入到本地xml文件</div><div class="line">        SharedPreferencesImpl.this.enqueueDiskWrite(</div><div class="line">            mcr, null /* sync write on this thread okay */);</div><div class="line">        try &#123;</div><div class="line">            // 等待写入到本地xml文件结束</div><div class="line">            mcr.writtenToDiskLatch.await();</div><div class="line">        &#125; catch (InterruptedException e) &#123;</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">        // 通知通过 registerOnSharedPreferenceChangeListener 注册的监听器</div><div class="line">        notifyListeners(mcr);</div><div class="line">        return mcr.writeToDiskResult;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public void apply() &#123;</div><div class="line">        // 写入到内存Map中</div><div class="line">        final MemoryCommitResult mcr = commitToMemory();</div><div class="line">        // awaitCommit 和 postWriteRunnable 用来做一些线程间的同步操作</div><div class="line">        final Runnable awaitCommit = new Runnable() &#123;</div><div class="line">                public void run() &#123;</div><div class="line">                    try &#123;</div><div class="line">                        // 等待写入到本地xml文件结束</div><div class="line">                        mcr.writtenToDiskLatch.await();</div><div class="line">                    &#125; catch (InterruptedException ignored) &#123;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">        QueuedWork.add(awaitCommit);</div><div class="line"></div><div class="line">        Runnable postWriteRunnable = new Runnable() &#123;</div><div class="line">                public void run() &#123;</div><div class="line">                    awaitCommit.run();</div><div class="line">                    QueuedWork.remove(awaitCommit);</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">        // 写入到本地xml文件</div><div class="line">        SharedPreferencesImpl.this.enqueueDiskWrite(mcr, postWriteRunnable);</div><div class="line">        // 通知通过 registerOnSharedPreferenceChangeListener 注册的监听器</div><div class="line">        notifyListeners(mcr);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>写入内存：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">private MemoryCommitResult commitToMemory() &#123;</div><div class="line">    MemoryCommitResult mcr = new MemoryCommitResult();</div><div class="line">    synchronized (SharedPreferencesImpl.this) &#123;</div><div class="line">        // mDiskWritesInFlight &gt; 0说明内存中有未写入磁盘的数据</div><div class="line">        if (mDiskWritesInFlight &gt; 0) &#123;</div><div class="line">            // mMap 做一个 copy，保证写入磁盘过程中用的是不同的 Map 对象。</div><div class="line">            //因为写入磁盘是个异步过程，这样在后一次调用commitToMemory时，</div><div class="line">            //在更新mMap中的值时不会影响前一次的mapToWriteToDisk的写入磁盘。</div><div class="line">            mMap = new HashMap&lt;String, Object&gt;(mMap);</div><div class="line">        &#125;</div><div class="line">        mcr.mapToWriteToDisk = mMap;</div><div class="line">        // mDiskWritesInFlight 加1，表示多了一个写操作。在写入磁盘后减1</div><div class="line">        mDiskWritesInFlight++;</div><div class="line"></div><div class="line">        boolean hasListeners = mListeners.size() &gt; 0;</div><div class="line">        if (hasListeners) &#123;</div><div class="line">            mcr.keysModified = new ArrayList&lt;String&gt;();</div><div class="line">            mcr.listeners =</div><div class="line">                    new HashSet&lt;OnSharedPreferenceChangeListener&gt;(mListeners.keySet());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        synchronized (this) &#123;</div><div class="line">            // 是否需要清空 SharedPreferences 里面的数据</div><div class="line">            if (mClear) &#123;</div><div class="line">                if (!mMap.isEmpty()) &#123;</div><div class="line">                    mcr.changesMade = true;</div><div class="line">                    mMap.clear();</div><div class="line">                &#125;</div><div class="line">                mClear = false;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            for (Map.Entry&lt;String, Object&gt; e : mModified.entrySet()) &#123;</div><div class="line">                String k = e.getKey();</div><div class="line">                Object v = e.getValue();</div><div class="line">                // &quot;this&quot; is the magic value for a removal mutation. In addition,</div><div class="line">                // setting a value to &quot;null&quot; for a given key is specified to be</div><div class="line">                // equivalent to calling remove on that key.</div><div class="line">                if (v == this || v == null) &#123;</div><div class="line">                    if (!mMap.containsKey(k)) &#123;</div><div class="line">                        continue;</div><div class="line">                    &#125;</div><div class="line">                    mMap.remove(k);</div><div class="line">                &#125; else &#123;</div><div class="line">                    if (mMap.containsKey(k)) &#123;</div><div class="line">                        Object existingValue = mMap.get(k);</div><div class="line">                        if (existingValue != null &amp;&amp; existingValue.equals(v)) &#123;</div><div class="line">                            continue;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    mMap.put(k, v);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                mcr.changesMade = true;</div><div class="line">                if (hasListeners) &#123;</div><div class="line">                    mcr.keysModified.add(k);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            // 清空临时缓存</div><div class="line">            mModified.clear();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return mcr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>整个方法用到了 <code>SharedPreferencesImpl</code> 类锁来同步。</p>
<p>写入磁盘：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">private void enqueueDiskWrite(final MemoryCommitResult mcr,</div><div class="line">                              final Runnable postWriteRunnable) &#123;</div><div class="line">    final Runnable writeToDiskRunnable = new Runnable() &#123;</div><div class="line">            public void run() &#123;</div><div class="line">                synchronized (mWritingToDiskLock) &#123;</div><div class="line">                    // 写入数据到磁盘</div><div class="line">                    writeToFile(mcr);</div><div class="line">                &#125;</div><div class="line">                synchronized (SharedPreferencesImpl.this) &#123;</div><div class="line">                    //减1标示完成了一个写磁盘操作</div><div class="line">                    mDiskWritesInFlight--;</div><div class="line">                &#125;</div><div class="line">                if (postWriteRunnable != null) &#123;</div><div class="line">                    postWriteRunnable.run();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    // 如果是 commit 方法，postWriteRunnable为空，为同步操作</div><div class="line">    final boolean isFromSyncCommit = (postWriteRunnable == null);</div><div class="line"></div><div class="line">    if (isFromSyncCommit) &#123;</div><div class="line">        // 如果是同步操作，而且只有一次的内存写入操作</div><div class="line">        // 直接在当前线程执行写入磁盘操作并返回</div><div class="line">        boolean wasEmpty = false;</div><div class="line">        synchronized (SharedPreferencesImpl.this) &#123;</div><div class="line">            wasEmpty = mDiskWritesInFlight == 1;</div><div class="line">        &#125;</div><div class="line">        if (wasEmpty) &#123;</div><div class="line">            writeToDiskRunnable.run();</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    // 如果是apply，或者是在commit的情况下有多个批次的写入等待写入磁盘</div><div class="line">    // 就另起线程异步执行写入操作</div><div class="line">    QueuedWork.singleThreadExecutor().execute(writeToDiskRunnable);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="startReloadIfChangedUnexpectedly"><a href="#startReloadIfChangedUnexpectedly" class="headerlink" title="startReloadIfChangedUnexpectedly"></a>startReloadIfChangedUnexpectedly</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">void startReloadIfChangedUnexpectedly() &#123;</div><div class="line">    synchronized (this) &#123;</div><div class="line">        // 判断是否有意外的修改，比如其他进程的修改，如果没有就不用reload</div><div class="line">        if (!hasFileChangedUnexpectedly()) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        startLoadFromDisk();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个方法主要是从新从磁盘上把数据加到到内存中，保存在前面提到的Map中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">private boolean hasFileChangedUnexpectedly() &#123;</div><div class="line">    synchronized (this) &#123;</div><div class="line">        if (mDiskWritesInFlight &gt; 0) &#123;</div><div class="line">            // 如果 mDiskWritesInFlight 说明是我们自己的修改，是预期的，直接返回，不用reload</div><div class="line">            // 这种情况也避免了同一个线程刚刚调用玩 apply 写数据，后面紧跟读数据时，</div><div class="line">            // 如果数据还没有完全写入xml文件，这时候reload会导致数据出错</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    final StructStat stat;</div><div class="line">    try &#123;</div><div class="line">        BlockGuard.getThreadPolicy().onReadFromDisk();</div><div class="line">        stat = Os.stat(mFile.getPath());</div><div class="line">    &#125; catch (ErrnoException e) &#123;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    synchronized (this) &#123;</div><div class="line">        // 比较文件的更新时间和大小是否和本地的一致，如果不一致就要重新load</div><div class="line">        return mStatTimestamp != stat.st_mtime || mStatSize != stat.st_size;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="apply-和-commit"><a href="#apply-和-commit" class="headerlink" title="apply 和 commit"></a>apply 和 commit</h3><p>前面我们也分析了这两个方法的源码，下面来看一下这两个方法的差异点：</p>
<ul>
<li>apply 是没有返回值的，commit 有返回值</li>
<li>apply 写入文件的操作是异步的，而commit 的写入文件的操作是在当前线程同步执行的</li>
</ul>
<p>综合性能考虑，如果在主线程操作且不需要返回值的情况下，优先使用 apply 来提交修改。</p>
<!--  

https://www.jianshu.com/p/875d13458538

-->
]]></content>
    
    <summary type="html">
    
      SharedPreferences 源码分析以及跨进程读写问题
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android 图形系统 -- 硬件加速渲染</title>
    <link href="http://yoursite.com/2016/09/05/android-graphic-system-hardwareaccelerated/"/>
    <id>http://yoursite.com/2016/09/05/android-graphic-system-hardwareaccelerated/</id>
    <published>2016-09-05T02:00:00.000Z</published>
    <updated>2018-09-25T14:14:52.254Z</updated>
    
    <content type="html"><![CDATA[<p>我们在开发过程中经常会遇到硬件加速这个概念，</p>
<h2 id="硬件加速的设置"><a href="#硬件加速的设置" class="headerlink" title="硬件加速的设置"></a>硬件加速的设置</h2><p>Android 3.0 (API level 11), 开始支持<br>所有的 <code>View</code> 的 canvas 都会使用GPU，但是硬件的加速会占有一定的RAM。<br>在API &gt;= 14上，默认是开启的，如果你的应用只是标准的 <code>View</code> 和 <code>Drawable</code>，全局都打开硬件加速，是不会有任何问题的。<br>然而，硬件加速并不支持所有的2D画图的操作，这时开着它，可能会影响到你的自定义控件或者绘画，出现异常等行为，<br>所以android对于硬件加速提供了可选性<br>硬件加速的级别<br>Application</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;application </div><div class="line">    android:hardwareAccelerated=&quot;false&quot; </div><div class="line">...&gt;</div><div class="line">&lt;/application&gt;</div></pre></td></tr></table></figure>
<p>Activity</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;application </div><div class="line">    android:hardwareAccelerated=&quot;true&quot;&gt;</div><div class="line">    &lt;activity ... /&gt;</div><div class="line">    &lt;activity android:hardwareAccelerated=&quot;false&quot; /&gt;</div><div class="line">&lt;/application&gt;</div></pre></td></tr></table></figure>
<p>Window</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">getWindow().setFlags(</div><div class="line">   WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED,</div><div class="line">   WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);</div></pre></td></tr></table></figure>
<p>View</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">myView.setLayerType(View.LAYER_TYPE_SOFTWARE, null);</div></pre></td></tr></table></figure>
<p>application 和 activity 都可以单独控制硬件加速的打开和关闭。<br>window级别无法关闭硬件加速，可以开启硬件加速。<br>view级别只能关闭硬件加速，无法开启硬件加速。<br>通过window开启硬件加速后，<code>onDraw</code> 的  <code>canvas</code> 是 <code>DisplayListCanvas</code> 实例。<br>另外只要通过 <code>View</code> 的 <code>setLayerType</code> 设置了关闭或者开启（虽然不能成功），<code>onDraw</code> 的  <code>canvas</code> 都变成了 <code>Canvas</code> 实例。也就是说 通过 <code>View</code> 的 <code>setLayerType</code> 可以把 <code>View</code> 中的画布换成  <code>Canvas</code>，具体是不是硬件加速是由 <code>Canvas</code> 类来决定。这部分的源码分析我们后面再介绍。<br>可以在 application 中关闭，activity 中打开；<br>可以在 application 中打开，activity 中关闭；</p>
<h2 id="硬件加速的限制"><a href="#硬件加速的限制" class="headerlink" title="硬件加速的限制"></a>硬件加速的限制</h2><p>目前，Android对硬件加速的支持并非完美，有些绘制操作在开启硬件加速的情况下不能正常工作。<br><a href="https://developer.android.com/guide/topics/graphics/hardware-accel#unsupported" target="_blank" rel="external">硬件加速不支持的操作列表</a></p>
<h2 id="硬件加速之Canvas"><a href="#硬件加速之Canvas" class="headerlink" title="硬件加速之Canvas"></a>硬件加速之Canvas</h2><p>在实际开发中或许你有下面的经历：<br>尽管已经设置了硬件加速，通过 <code>TextureView.lockCanvas()</code> 或者通过 <code>SurfaceView.getHolder().lockCanvas()</code> 得到的 <code>Canvas</code> 通过打印 <code>Canvas.isHardwareAccelerated()</code> 会返回 false。而 <code>TextureView.isHardwareAccelerated()</code> 或者 <code>SurfaceView.isHardwareAccelerated()</code> 是返回true的。<br>这是正确的，通过 <code>lockCanvas()</code> 得到的 <code>Canvas</code> 只能用软件绘制的。<br>如果想通过硬件渲染，只能通过 <code>lockHardwareCanvas</code> 或者调用OpenGL接口实现。<br>具体可以参考：systemui/ImageWallpaper.java，里面提供了用 <code>OpenGL</code> 和 <code>Canvas</code> 来绘制壁纸的两种方法。<br>先来看一下 <code>View</code> 的情况：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class CustomView extends TextView &#123;</div><div class="line">    ......</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        Bitmap bitmap1 = BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher);</div><div class="line">        canvas.drawBitmap(bitmap1,0,0,new Paint());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果开启了硬件加速，在 <code>onDraw</code> 这里打断点，你会发现 <code>canvas</code> 其实是 <code>DisplayListCanvas</code> 实例。<br>通过调试 <code>canvas.isHardwareAccelerated();</code> 的执行结果是返回 true。</p>
<p>如果通过 application 或者 activity 关闭了硬件加速，<code>onDraw</code> 的  <code>canvas</code> 其实是 <code>Surface.CompatibleCanvas</code> 实例。<br>如果通过 view 关闭了硬件加速，<code>onDraw</code> 的  <code>canvas</code> 其实是 <code>Canvas</code> 实例。</p>
<p>使用多种方式(<code>View/SurfaceView/TextureView</code>)实现高效绘制<br>能实现使用GPU绘制的只有 <code>View</code>，因为它使用 <code>SurfaceView/TextureView</code> 实现时并没有使用到 OpenGL 的 API，<code>canvas.drawText(...)</code> 的 <code>Canvas</code> 是使用 CPU 的，所以如果在CPU资源缺少的情况下效率并不高。<br>总结可得，使用 <code>Canvas</code> 要注意是否有硬件加速，一般的 View 是有的，而 SurfaceView 和 TextureView 通过 <code>lockCanvas()</code> 得到的 <code>Canvas</code> 是没有的。</p>
]]></content>
    
    <summary type="html">
    
      介绍 LockCanvas() 方法获取的 Canvas 无法使用硬件加速的原因。
    
    </summary>
    
      <category term="Android 图形系统" scheme="http://yoursite.com/categories/Android-%E5%9B%BE%E5%BD%A2%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Android 图形系统" scheme="http://yoursite.com/tags/Android-%E5%9B%BE%E5%BD%A2%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Android 线程 -- IntentService 使用及源码分析</title>
    <link href="http://yoursite.com/2016/09/02/android-knowledge-intent-service-source-code/"/>
    <id>http://yoursite.com/2016/09/02/android-knowledge-intent-service-source-code/</id>
    <published>2016-09-02T02:00:00.000Z</published>
    <updated>2018-07-14T03:52:56.603Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本文来介绍一下 <code>IntentService</code>，但从名字上看，应该是和 <code>Service</code> 有关，的确是这样，<code>IntentService</code> 是一种特殊的 <code>Service</code>，它继承了 <code>Service</code> 并且是一个抽象类，因此必须是它的子类才能使用 <code>IntentService</code>，<code>IntentService</code> 可用于执行后台耗时的任务，当任务执行完后它会自动停止，同时，由于 <code>IntentService</code> 是服务的原因，它的优先级比单纯的线程要高，因此可以用于执行一些高优先级的后台任务。</p>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>在实现上，<code>IntentService</code> 封装了 <code>HandlerThread</code> 和 <code>Handler</code>。<br>我们先来看一下它的构造函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public IntentService(String name) &#123;</div><div class="line">    super();</div><div class="line">    mName = name;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>构造函数很简单，调用父类的构造函数，name 参数是赋给工作线程的名字。<br>我们再来看一下它的 <code>onCreate()</code> 方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void onCreate() &#123;</div><div class="line">    startService(Context, Intent)</div><div class="line"></div><div class="line">    super.onCreate();</div><div class="line">    HandlerThread thread = new HandlerThread(&quot;IntentService[&quot; + mName + &quot;]&quot;);</div><div class="line">    thread.start();</div><div class="line"></div><div class="line">    mServiceLooper = thread.getLooper();</div><div class="line">    mServiceHandler = new ServiceHandler(mServiceLooper);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>onCreate()</code> 方法会在 <code>IntentService</code> 第一次启动时被调用。<br>首先会构造一个 <code>HandlerThread</code>，并且根据构造函数的 name 参数线程命名。<br>然后获取 <code>HandlerThread</code> 的 <code>Looper</code> 对象构造一个 <code>Handler</code> 对象。<br>再来看一下 <code>onStartCommand</code> 方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public void setIntentRedelivery(boolean enabled) &#123;</div><div class="line">    mRedelivery = enabled;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line">public void onStart(@Nullable Intent intent, int startId) &#123;</div><div class="line">    Message msg = mServiceHandler.obtainMessage();</div><div class="line">    msg.arg1 = startId;</div><div class="line">    msg.obj = intent;</div><div class="line">    mServiceHandler.sendMessage(msg);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line">public int onStartCommand(@Nullable Intent intent, int flags, int startId) &#123;</div><div class="line">    onStart(intent, startId);</div><div class="line">    return mRedelivery ? START_REDELIVER_INTENT : START_NOT_STICKY;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>每次启动 <code>IntentService</code> ，它的 <code>onStartCommand</code> 方法就会被调用一次，<code>onStartCommand</code> 调用 <code>onStart</code> 来处理 <code>Intent</code>，然后根据 <code>mRedelivery</code> 变量来返回 <code>START_REDELIVER_INTENT</code> 或者 <code>START_NOT_STICKY</code>，<code>mRedelivery</code> 变量是通过 <code>setIntentRedelivery</code> 方法来赋值的。<br>下面来温习一下 <code>Service</code> 中 <code>onStartCommand</code> 方法4种返回值所代表的意义：</p>
<ol>
<li>START_STICKY：如果service进程被kill掉，保留service的状态为开始状态，但不保留递送的intent对象。随后系统会尝试重新创建service，由于服务状态为开始状态，所以创建服务后一定会调用onStartCommand(Intent,int,int)方法。如果在此期间没有任何启动命令被传递到service，那么参数Intent将为null。</li>
<li>START_NOT_STICKY：“非粘性的”。使用这个返回值时，如果在执行完onStartCommand后，服务被异常kill掉，系统将会把它置为started状态，系统不会自动重启该服务，直到startService(Intent intent)方法再次被调用。</li>
<li>START_REDELIVER_INTENT：重传Intent。使用这个返回值时，如果在执行完onStartCommand后，服务被异常kill掉，系统会自动重启该服务，并将Intent的值传入。</li>
<li>START_STICKY_COMPATIBILITY：START_STICKY的兼容版本，但不保证服务被kill后一定能重启。</li>
</ol>
<p><code>onStart</code> 方法对 <code>Intent</code> 的处理其实也就是通过 <code>mServiceHandler</code> 发送消息，然后在 <code>Handler</code> 中对消息进行处理。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">private final class ServiceHandler extends Handler &#123;</div><div class="line">    public ServiceHandler(Looper looper) &#123;</div><div class="line">        super(looper);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void handleMessage(Message msg) &#123;</div><div class="line">        onHandleIntent((Intent)msg.obj);</div><div class="line">        stopSelf(msg.arg1);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Handler</code> 首先会在工作线程调用 <code>onHandleIntent</code> 来处理 <code>Intent</code>，这个方法是我们在继承 <code>IntentService</code> 时需要实现的方法。<br>在 <code>onHandleIntent</code> 方法执行结束后，会调用 <code>stopSelf(int startId)</code> 来尝试停止服务。这里之所以调用这个方法而不是 <code>stopSelf()</code> 方法是因为 <code>stopSelf()</code> 会立刻停止服务，而这个时候消息队列中可能还有其它消息未处理完。<code>stopSelf(int startId)</code> 则会等待所有的消息都处理完才会终止服务。<br><code>stopSelf(int startId)</code> 方法会在尝试停止服务的时候判断最近启动服务的次数是否和 <code>startId</code> 相等，如果相等就立即停止，如果不相等则不停止服务。<br>因此，如果目前只存在一个后台任务，那么该任务一旦执行完，<code>IntentService</code> 就会停止，如果存在多个后台任务，那么当 <code>onHandleIntent</code> 执行完最后一个任务时才会停止服务。<br>如果 <code>IntentService</code> 停止后再次发送任务请求，那么就会创建新的 <code>IntentService</code> 对象来执行任务。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">    @Override</div><div class="line">    public void onDestroy() &#123;</div><div class="line">        mServiceLooper.quit();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    @Nullable</div><div class="line">    public IBinder onBind(Intent intent) &#123;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @WorkerThread</div><div class="line">    protected abstract void onHandleIntent(@Nullable Intent intent);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 <code>IntentService</code> 销毁的时候会退出 <code>Looper</code> 循环。</p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>那么下面我们就带着上面分析源码的一些结论来验证一下：<br>因为 <code>IntentService</code> 是一个 <code>Service</code> ，那么就不要忘记在 AndriodManifest 里面添加声明。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line">public void clickTestIntentService1(View view) &#123;</div><div class="line">    Intent intent = new Intent(this, MyIntentService.class);</div><div class="line">    intent.putExtra(&quot;action&quot;,&quot;ACTION_ONE&quot;);</div><div class="line">    startService(intent);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public void clickTestIntentService2(View view) &#123;</div><div class="line">    Intent intent = new Intent(this, MyIntentService.class);</div><div class="line">    intent.putExtra(&quot;action&quot;,&quot;ACTION_TWO&quot;);</div><div class="line">    startService(intent);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public void clickTestStopIntentService(View view) &#123;</div><div class="line">    Intent intent = new Intent(this, MyIntentService.class);</div><div class="line">    stopService(intent);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static class MyIntentService extends IntentService&#123;</div><div class="line"></div><div class="line">    public MyIntentService() &#123;</div><div class="line">        super(&quot;MyIntentService&quot;);</div><div class="line">        Log.e(&quot;Test&quot;,&quot;MyIntentService Constructor &quot; +this);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCreate() &#123;</div><div class="line">        Log.e(&quot;Test&quot;,&quot;MyIntentService onCreate &quot;);</div><div class="line">        super.onCreate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onStart(@Nullable Intent intent, int startId) &#123;</div><div class="line">        Log.e(&quot;Test&quot;,&quot;MyIntentService onStart &quot;);</div><div class="line">        super.onStart(intent, startId);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int onStartCommand(@Nullable Intent intent, int flags, int startId) &#123;</div><div class="line">        Log.e(&quot;Test&quot;,&quot;MyIntentService onStartCommand &quot;);</div><div class="line">        return super.onStartCommand(intent, flags, startId);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onDestroy() &#123;</div><div class="line">        Log.e(&quot;Test&quot;,&quot;MyIntentService onDestroy &quot;);</div><div class="line">        super.onDestroy();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onHandleIntent(@Nullable Intent intent) &#123;</div><div class="line">        Log.e(&quot;Test&quot;,&quot;MyIntentService onHandleIntent &quot; +Thread.currentThread());</div><div class="line">        String action = intent.getStringExtra(&quot;action&quot;);</div><div class="line">        Log.e(&quot;Test&quot;,&quot;MyIntentService onHandleIntent action &quot; +action+&quot; start&quot;);</div><div class="line">        switch (action) &#123;</div><div class="line">            case &quot;ACTION_ONE&quot;:</div><div class="line">                try &#123;</div><div class="line">                    Thread.sleep(5000);</div><div class="line">                &#125; catch (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                break;</div><div class="line">            case &quot;ACTION_TWO&quot;:</div><div class="line">                try &#123;</div><div class="line">                    Thread.sleep(2000);</div><div class="line">                &#125; catch (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Log.e(&quot;Test&quot;,&quot;MyIntentService onHandleIntent action &quot; +action+&quot; end&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="正常执行一个任务"><a href="#正常执行一个任务" class="headerlink" title="正常执行一个任务"></a>正常执行一个任务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Test: MyIntentService Constructor com.example.heqiang.testsomething.MainActivity$MyIntentService@5020dde</div><div class="line">Test: MyIntentService onCreate </div><div class="line">Test: MyIntentService onStartCommand </div><div class="line">Test: MyIntentService onStart </div><div class="line">Test: MyIntentService onHandleIntent Thread[IntentService[MyIntentService],5,main]</div><div class="line">Test: MyIntentService onHandleIntent action ACTION_ONE start</div><div class="line">Test: MyIntentService onHandleIntent action ACTION_ONE end</div><div class="line">Test: MyIntentService onDestroy</div></pre></td></tr></table></figure>
<h3 id="第一个任务执行结束后启动第二个任务"><a href="#第一个任务执行结束后启动第二个任务" class="headerlink" title="第一个任务执行结束后启动第二个任务"></a>第一个任务执行结束后启动第二个任务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Test: MyIntentService Constructor com.example.heqiang.testsomething.MainActivity$MyIntentService@90cfdd5</div><div class="line">Test: MyIntentService onCreate </div><div class="line">Test: MyIntentService onStartCommand </div><div class="line">Test: MyIntentService onStart </div><div class="line">Test: MyIntentService onHandleIntent Thread[IntentService[MyIntentService],5,main]</div><div class="line">Test: MyIntentService onHandleIntent action ACTION_ONE start</div><div class="line">Test: MyIntentService onHandleIntent action ACTION_ONE end</div><div class="line">Test: MyIntentService onDestroy </div><div class="line"></div><div class="line">Test: MyIntentService Constructor com.example.heqiang.testsomething.MainActivity$MyIntentService@89d0b78</div><div class="line">Test: MyIntentService onCreate </div><div class="line">Test: MyIntentService onStartCommand </div><div class="line">Test: MyIntentService onStart </div><div class="line">Test: MyIntentService onHandleIntent Thread[IntentService[MyIntentService],5,main]</div><div class="line">Test: MyIntentService onHandleIntent action ACTION_TWO start</div><div class="line">Test: MyIntentService onHandleIntent action ACTION_TWO end</div><div class="line">Test: MyIntentService onDestroy</div></pre></td></tr></table></figure>
<p>和上面的分析一致，第一个任务执行完后启动第二个任务，会重新创建了一个 <code>IntentService</code> 对象。</p>
<h3 id="第一个任务正在执行时启动第二个任务"><a href="#第一个任务正在执行时启动第二个任务" class="headerlink" title="第一个任务正在执行时启动第二个任务"></a>第一个任务正在执行时启动第二个任务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Test: MyIntentService Constructor com.example.heqiang.testsomething.MainActivity$MyIntentService@c1163b7</div><div class="line">Test: MyIntentService onCreate </div><div class="line">Test: MyIntentService onStartCommand </div><div class="line">Test: MyIntentService onStart </div><div class="line">Test: MyIntentService onHandleIntent Thread[IntentService[MyIntentService],5,main]</div><div class="line">Test: MyIntentService onHandleIntent action ACTION_ONE start</div><div class="line"></div><div class="line">Test: MyIntentService onStartCommand </div><div class="line">Test: MyIntentService onStart </div><div class="line"></div><div class="line">Test: MyIntentService onHandleIntent action ACTION_ONE end</div><div class="line"></div><div class="line">Test: MyIntentService onHandleIntent Thread[IntentService[MyIntentService],5,main]</div><div class="line">Test: MyIntentService onHandleIntent action ACTION_TWO start</div><div class="line">Test: MyIntentService onHandleIntent action ACTION_TWO end</div><div class="line"></div><div class="line">Test: MyIntentService onDestroy</div></pre></td></tr></table></figure>
<p>和上面的分析一致，启动第二个任务时，调用了 <code>IntentService</code> 的 <code>IntentService</code>，两个任务执行完毕后，<code>IntentService</code> 退出。</p>
<h3 id="第一个任务正在执行的时候停止服务"><a href="#第一个任务正在执行的时候停止服务" class="headerlink" title="第一个任务正在执行的时候停止服务"></a>第一个任务正在执行的时候停止服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Test: MyIntentService Constructor com.example.heqiang.testsomething.MainActivity$MyIntentService@90cfdd5</div><div class="line">Test: MyIntentService onCreate </div><div class="line">Test: MyIntentService onStartCommand </div><div class="line">Test: MyIntentService onStart </div><div class="line">Test: MyIntentService onHandleIntent Thread[IntentService[MyIntentService],5,main]</div><div class="line">Test: MyIntentService onHandleIntent action ACTION_ONE start</div><div class="line"></div><div class="line">Test: MyIntentService onDestroy </div><div class="line"></div><div class="line">Test: MyIntentService onHandleIntent action ACTION_ONE end</div></pre></td></tr></table></figure>
<p>任务执行过程中停止服务，正在执行的任务还是可以继续执行完的。</p>
<h3 id="第一个任务正在执行的时候停止服务，再启动第二个任务"><a href="#第一个任务正在执行的时候停止服务，再启动第二个任务" class="headerlink" title="第一个任务正在执行的时候停止服务，再启动第二个任务"></a>第一个任务正在执行的时候停止服务，再启动第二个任务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">Test: MyIntentService Constructor com.example.heqiang.testsomething.MainActivity$MyIntentService@b2ca251</div><div class="line">Test: MyIntentService onCreate </div><div class="line">Test: MyIntentService onStartCommand </div><div class="line">Test: MyIntentService onStart </div><div class="line">Test: MyIntentService onHandleIntent Thread[IntentService[MyIntentService],5,main]</div><div class="line">Test: MyIntentService onHandleIntent action ACTION_ONE start</div><div class="line"></div><div class="line">Test: MyIntentService onDestroy </div><div class="line"></div><div class="line">Test: MyIntentService Constructor com.example.heqiang.testsomething.MainActivity$MyIntentService@4c8128d</div><div class="line">Test: MyIntentService onCreate </div><div class="line">Test: MyIntentService onStartCommand </div><div class="line">Test: MyIntentService onStart </div><div class="line">Test: MyIntentService onHandleIntent Thread[IntentService[MyIntentService],5,main]</div><div class="line">Test: MyIntentService onHandleIntent action ACTION_TWO start</div><div class="line">Test: MyIntentService onHandleIntent action ACTION_TWO end</div><div class="line">Test: MyIntentService onDestroy </div><div class="line"></div><div class="line">Test: MyIntentService onHandleIntent action ACTION_ONE end</div></pre></td></tr></table></figure>
<p>启动第二个任务时，会立即创建一个新的服务，两个任务在两个线程中运行，所以其执行完的先后顺序不确定。</p>
]]></content>
    
    <summary type="html">
    
      介绍 IntentService 使用及源码分析
    
    </summary>
    
      <category term="Android 线程" scheme="http://yoursite.com/categories/Android-%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="Android 线程" scheme="http://yoursite.com/tags/Android-%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Android startActivity 流程分析</title>
    <link href="http://yoursite.com/2016/06/10/android-source-code-analysis-activity-start-process/"/>
    <id>http://yoursite.com/2016/06/10/android-source-code-analysis-activity-start-process/</id>
    <published>2016-06-10T02:00:00.000Z</published>
    <updated>2018-06-16T07:42:49.438Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Activity的启动方式有两种，一种是显式的，一种是隐式的。<br>而且，启动的 <code>Activity</code> 和原 <code>Activity</code> 的进程关系的不同又可以分为两种情况，一种是在同一个进程，另外一种情况是开启一个新的进程来启动 <code>Activity</code>。</p>
<h2 id="相关类介绍"><a href="#相关类介绍" class="headerlink" title="相关类介绍"></a>相关类介绍</h2><p>涉及到的类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">frameworks/base/core/java/android/app/Activity.java</div><div class="line">frameworks/base/core/java/android/app/ActivityThread.java</div><div class="line">frameworks/base/core/java/android/app/Instrumentation.java</div><div class="line">frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java</div><div class="line">frameworks/base/services/core/java/com/android/server/am/ActivityStackSupervisor.java</div><div class="line">frameworks/base/services/core/java/com/android/server/am/ActivityStack.java</div></pre></td></tr></table></figure>
<ul>
<li>ActivityThread：代表了应用的主线程，在Activity.attach()方法中初始化</li>
<li>TaskRecord：Activity的管理者</li>
<li>ActivityStack：Stack的管理者</li>
<li>ActivityStackSupervisor：ActivityStack的管理者，早期的Android版本是没有这个类的，直到Android 6.0才出现。</li>
</ul>
<h2 id="启动流程图"><a href="#启动流程图" class="headerlink" title="启动流程图"></a>启动流程图</h2><p><img src="http://www.plantuml.com/plantuml/svg/pLTDJnin4Btlht13hrL5Zf62590g8WLKiQ5LLLN8U0TYiTWhsqdXrgzJUu1J3-sv4ZTwwQc7_fa6-1draat8ElP-PMbxYPBn-BsPyRDdCg01e0FErJu_yJpzWHghKg5E5A6dWXEGie5MUlHmeDR38NWH5eeI6c6cVOYY8wfEKyOkaqeCZu4fh2XdrWrRcE5341h_v1HXQRNlhNh00dGNLMVBdqMKXRgjUKUGvU63655YT_4L9aV-C8fT91Tkd_HA58MKt2RS7mZ0mMqAHW9D_QjCMGjLgPaTHsgrCKMOhA77A6rukDcOvqaGPaayMfijjQJIkBFpn_4NhE1E4TCloBdf2HSx88UXojbjwAa59q1yExifFUFtV2nffUMbO-ZIRhR0JwJOqeSXC9CQrWcTYDPgjG0d2YuOzrJlTdDH-8xSbI1g836kM9fb2vy-nzHIAFDYEknPH08a3qVWhfV94S1zX97AjyV94GJUlVFiCZA0cAfkmXBff35pJahVspwF4WSAilQuJOwbObz4wp86egPot9ROZu3G0qhAAiV3eK8FY7xB5Mp3wwJxU0XLka4uz2tdZL1k61byBrVY7lXgpT56Mr9BDnY6qCD3hUBPzKM8SKqeuYQgVupFBd___3O-UtVpvltLv-ytlxvUNtoAxUUNuuyNSxkkltou-l5siXWtjnWbbO6zcICq_nmKyN5K0a89gDfvsDxd1C1z4iO3ZL3fFi1cOUu0uI8emMMfn_BnLCoxI2pvFbeoNf7Eu78flx0CQBbkLit5AD0o7iaSv7QOpc1p7kROPzbijNdjTd8DaRw7qx4SjTkfKNTolLl7cBB5jpOPaOsvUd4tLhgAWmhxqxD-WZFt-EJCgatxhDhy5xDgyTWhpwiB5AuUQH1bCTbRqZvbWJqLUsEmcwq49R0NOItQ6s0MXB3k14rBqN9HB2iBWUItnWf_30eVPot_3UoJJNMkYbDDdKegJL58KBtExlR6vbvdezzzrks_gFugJfJf3Auacgxy0HV71U6AwVmltOrwElF_qPgR6MLoB_q1" alt="效果图"></p>
<!-- 
------------------------------------------------------------------------------ FirstActivity 进程
├── Activity.startActivity()
     ├── Activity.startActivityForResult()
          ├── Instrumentation.execStartActivity()
               ├── ActivityManagerNative.ActivityManagerProxy.startActivity()
------------------------------------------------------------------------------ FirstActivity 进程
------------------------------------------------------------------------------ AMS 进程
                    ├── ActivityManagerNative.onTransact()
                         ├── ActivityManagerService.startActivity()
                              ├── ActivityManagerService.startActivityAsUser()
                                   ├── ActivityStackSupervisor.startActivityMayWait()
                                        ├── ActivityStackSupervisor.resolveActivity()
                                        ├── ActivityStackSupervisor.startActivityLocked()
                                             ├── ActivityStackSupervisor.startActivityUncheckedLocked()
                                                  ├── ActivityStack.startActivityLocked()
                                                       ├── ActivityStackSupervisor.resumeTopActivitiesLocked()
                                                            ├── ActivityStack.resumeTopActivityLocked()
                                                                 ├── ActivityStack.resumeTopActivityInnerLocked()
                                                                      ├── ActivityStackSupervisor.startSpecificActivityLocked()
                                                                           ├── ActivityStackSupervisor.realStartActivityLocked() 在本进程启动
                                                                               此方法的分析同新进程启动Activity中的realStartActivityLocked()，下面分析
                                                                                ├── ApplicationThreadNative.ApplicationThreadProxy.scheduleLaunchActivity()
------------------------------------------------------------------------------ AMS 进程
------------------------------------------------------------------------------ FirstActivity 进程
├── ActivityThread.H.handleMessage():LAUNCH_ACTIVITY
     ├── ActivityThread.handleLaunchActivity()
          ├── ActivityThread.performLaunchActivity()
------------------------------------------------------------------------------ FirstActivity 进程
------------------------------------------------------------------------------ AMS 进程
                                                                           ├── ActivityManagerService.startProcessLocked() 启动新的进程
                                                                                ├── ActivityManagerService.newProcessRecordLocked()
                                                                                ├── ActivityManagerService.startProcessLocked()
                                                                                     ├── Process.start()
------------------------------------------------------------------------------ AMS 进程
------------------------------------------------------------------------------ SecondActivity 进程
├── ActivityThread.main()
     ├── ActivityThread.attach()
          ├── ActivityManagerNative.ActivityManagerProxy.attachApplication()
------------------------------------------------------------------------------ SecondActivity 进程
------------------------------------------------------------------------------ AMS 进程
├── ActivityManagerNative.onTransact()
     ├── ActivityManagerService.attachApplication()
          ├── ActivityManagerService.attachApplicationLocked()
               ├── ApplicationThreadNative.ApplicationThreadProxy.bindApplication()
------------------------------------------------------------------------------ AMS 进程
------------------------------------------------------------------------------ SecondActivity 进程
                    ├── ApplicationThread.bindApplication()
                         ├── ActivityThread.handleBindApplication()
------------------------------------------------------------------------------ SecondActivity 进程
------------------------------------------------------------------------------ AMS 进程
               ├── ActivityStackSupervisor.attachApplicationLocked()
                    ├── ActivityStackSupervisor.realStartActivityLocked() 此处同上面的同一进程启动Activity
                         ├── ApplicationThreadNative.ApplicationThreadProxy.scheduleLaunchActivity()
------------------------------------------------------------------------------ AMS 进程
------------------------------------------------------------------------------ SecondActivity 进程
├── ApplicationThread.scheduleLaunchActivity()
   ├── ActivityThread.H.handleMessage():LAUNCH_ACTIVITY
        ├── ActivityThread.handleLaunchActivity()
             ├── ActivityThread.performLaunchActivity()
------------------------------------------------------------------------------ SecondActivity 进程

http://www.plantuml.com/plantuml/png/jLVTYjj65BxNKqnDBsn8qhIzMGmRyCffruuDnZRgPHbBi_OGQKQCHjdrdKCefOKa5oqfj9IIGjbUDIsqjFI7lapjZT-YvqYMFBBbzR9i3AlrdByvSxvlT8wZXro4LD601598Tw9am8XMCREYN1FfgS_WgRYhuy2t9jnZv4HAFP9dbWKschiyf4AJIZyMcWUiuMh-YEjfXT28z1j5c-FfI77FuUoq5OH-OdBij3RYG7Iq8E-GxElRnsaqfsZPZeOJnQW7bjdNbMLxMBHq3XAnSr0Kz-YOTQc0fqhqlMvHNpWBB3OJZJLJBN4Yq-mspk4qfHi7JEXqQrWLzI2mPH1AaPaqxGq3vahLeLFO9jLtBElmaBnxXzXIH13Q8wCfQG_8uQ5bzHlazZseTvr8yO1Dc_9KM1JJfveX3AaUYbqdOtb4tOThBI80Vuc_iws6glSTLBQ7THBAIACwL2oArZPGRu_jM86_iSBDJ6N3ijf3Y9w67vM6JWm0l3fXPyo5eXz9wJCg1gxYeQvMqAk7NeXdjLQfhRq1SUU0tCxYkwl2cIc0YKLzJTxAbGG-gwIm81CgF9zr8Jw6xmu-_FYeOJ_ezUyF1hN4jdZqSebP3aJnlIAA1XCJE1CNICgGtnapRSSA2EUnisgDt2Dt4pFyf03rkca5St6-AH0xa_MwcUbObXfkM685fC0yeCGsr6BCjjtWKCLKCgwa3WwF-CXd2JpIz_3_BN92_OZLjcEj2fQ3aCTAuTxlKA2A8xcNySJTIYQ4HylBSgcKP0Fio6H5pfH8ZKJsIf46cTYNCYHGbnnTm5QmqtoP6vQXqcU1VBGYxMMuR6FJPF1UbrCCKkvjP6uK5zszwxXkml91BC1SYch526TWi0k7tLZihloLDKR5cF1sNuQKsDuLhiAMJqjqAHTflohrtmY0hGDBhgaxiIVSznGJ9KJ51fD9SO6kJNk_8xITJDQqCwT8GoTg21vGH2Wt418S51zFT9qilZfVllnj-Uttyp-Up7-PBMUp-QT_pZ__yUBBl_PlakuYHRx5VU5TCJML41vUdXeQPzeU1_I4-TDB_Gs8tvGqGQ1OAaXK9GHu_Upt-VCNQRsMdpoz-EUd__vzkNZyQfChs9wPHhBWN572ZjRQevNsDGmVRZgOZ6wL4uhgQn9gd-CRHosDYkUcNZ9CLWDZLhf5xjQkS2sRdSjPda27HeiNFviyNtpsnVplsKwUTqfpxrYNlsgCYyTq70vXlXbHrH3UHrnuyXGdhh6IyPuxSYEytTE_RxPVbx-Ir_N7Zh6SVNtntGyuvow--NKDnlDNhyyVBsRdr-xzDz7kzy2wezyROcCmsvOo64foDSoCxnTdnkpN2GwCHVH0Wo_NesmkBkjJ-7EcPEiTujMXafQOF8m9_dy0

@startuml
hide footbox

box "1st App Process" #LightBlue
participant Activity
participant Instrumentation
participant ActivityManagerProxy as ActivityManagerProxy_1
end box

box "AMS Process"
participant ActivityManagerNative
participant ActivityManagerService
participant ActivityStackSupervisor
participant ActivityStack
participant ApplicationThreadProxy
end box

box "2nd App Process" #LightBlue
participant ActivityManagerProxy as ActivityManagerProxy_2
participant ApplicationThread
participant "ActivityThread / ActivityThread$H" as ActivityThread
end box

-> Activity:startActivity
activate Activity
Activity -> Activity:startActivityForResult
activate Activity
Activity -> Instrumentation:execStartActivity
activate Instrumentation
Instrumentation -> ActivityManagerProxy_1:startActivity
activate ActivityManagerProxy_1
ActivityManagerProxy_1 -> ActivityManagerNative:onTransact
activate ActivityManagerNative
ActivityManagerNative -> ActivityManagerService:startActivity
activate ActivityManagerService
ActivityManagerService -> ActivityManagerService:startActivityAsUser
activate ActivityManagerService
ActivityManagerService -> ActivityStackSupervisor:startActivityMayWait
activate ActivityStackSupervisor
ActivityStackSupervisor -> ActivityStackSupervisor:resolveActivity
activate ActivityStackSupervisor
deactivate ActivityStackSupervisor
ActivityStackSupervisor -> ActivityStackSupervisor:startActivityLocked
activate ActivityStackSupervisor
ActivityStackSupervisor -> ActivityStackSupervisor:startActivityUncheckedLocked
activate ActivityStackSupervisor
ActivityStackSupervisor -> ActivityStack:startActivityLocked
activate ActivityStack
ActivityStack -> ActivityStackSupervisor:resumeTopActivitiesLocked
activate ActivityStackSupervisor
ActivityStackSupervisor -> ActivityStack:resumeTopActivityLocked
activate ActivityStack
ActivityStack -> ActivityStack:resumeTopActivityInnerLocked
activate ActivityStack
ActivityStack -> ActivityStackSupervisor:startSpecificActivityLocked
activate ActivityStackSupervisor

alt !createNewProcess
  ActivityStackSupervisor -> ActivityStackSupervisor:realStartActivityLocked
  activate ActivityStackSupervisor
  ActivityStackSupervisor -[#Blue]> ApplicationThreadProxy:scheduleLaunchActivity
  note right
  可以参考新进程
  启动Activity
  的流程
  end note
  activate ApplicationThreadProxy
  deactivate ApplicationThreadProxy
  deactivate ActivityStackSupervisor
else createNewProcess
  ActivityStackSupervisor -> ActivityManagerService:startProcessLocked
  activate ActivityManagerService
  ActivityManagerService -> ActivityManagerService:newProcessRecordLocked
  activate ActivityManagerService
  deactivate ActivityManagerService
  ActivityManagerService -> ActivityManagerService:startProcessLocked
  activate ActivityManagerService
  deactivate ActivityManagerService
  deactivate ActivityManagerService
end

deactivate ActivityStackSupervisor
deactivate ActivityStack
deactivate ActivityStack
deactivate ActivityStackSupervisor
deactivate ActivityStack
deactivate ActivityStackSupervisor
deactivate ActivityStackSupervisor
deactivate ActivityStackSupervisor
deactivate ActivityManagerService
deactivate ActivityManagerService
deactivate ActivityManagerNative
deactivate ActivityManagerProxy_1
deactivate Instrumentation
deactivate Activity
deactivate Activity

== create New Process ==

-> ActivityThread:main
activate ActivityThread
ActivityThread -> ActivityThread:attach
activate ActivityThread
ActivityThread -> ActivityManagerProxy_2:attachApplication
activate ActivityManagerProxy_2
ActivityManagerProxy_2 -> ActivityManagerNative:onTransact
activate ActivityManagerNative
ActivityManagerNative -> ActivityManagerService:attachApplication
activate ActivityManagerService
ActivityManagerService -> ActivityManagerService:attachApplicationLocked
activate ActivityManagerService

ActivityManagerService -> ApplicationThreadProxy:bindApplication
activate ApplicationThreadProxy
ApplicationThreadProxy -> ApplicationThread:bindApplication
activate ApplicationThread
ApplicationThread -> ActivityThread:handleBindApplication
activate ActivityThread
deactivate ActivityThread
deactivate ApplicationThread
deactivate ApplicationThreadProxy

ActivityManagerService -> ActivityStackSupervisor:attachApplicationLocked
activate ActivityStackSupervisor
ActivityStackSupervisor -> ActivityStackSupervisor:realStartActivityLocked
activate ActivityStackSupervisor
ActivityStackSupervisor -[#Blue]> ApplicationThreadProxy:scheduleLaunchActivity
activate ApplicationThreadProxy
ApplicationThreadProxy -> ApplicationThread:scheduleLaunchActivity
activate ApplicationThread
ApplicationThread -> ActivityThread:LAUNCH_ACTIVITY
activate ActivityThread
ActivityThread -> ActivityThread:handleLaunchActivity
activate ActivityThread
ActivityThread -> ActivityThread:performLaunchActivity
activate ActivityThread
deactivate ActivityThread
deactivate ActivityThread
deactivate ActivityThread
deactivate ApplicationThread
deactivate ApplicationThreadProxy
deactivate ActivityStackSupervisor
deactivate ActivityStackSupervisor

deactivate ActivityManagerService
deactivate ActivityManagerService
deactivate ActivityManagerNative
deactivate ActivityManagerProxy_2
deactivate ActivityThread

deactivate ActivityThread
@enduml

-->
<h2 id="进程间的通信"><a href="#进程间的通信" class="headerlink" title="进程间的通信"></a>进程间的通信</h2><h2 id="启动流程"><a href="#启动流程" class="headerlink" title="启动流程"></a>启动流程</h2><h3 id="启动前期，当前进程"><a href="#启动前期，当前进程" class="headerlink" title="启动前期，当前进程"></a>启动前期，当前进程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivityForResult</span><span class="params">(Intent intent, <span class="keyword">int</span> requestCode, @Nullable Bundle options)</span> </span>&#123;</div><div class="line">    <span class="comment">// 一般情况下会走mParent == null分支</span></div><div class="line">    <span class="keyword">if</span> (mParent == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">//调用Instrumentation.execStartActivity()启动新的Activity。mMainThread类型为ActivityThread, 在attach()函数被回调时被赋值。</span></div><div class="line">        Instrumentation.ActivityResult ar =</div><div class="line">            mInstrumentation.execStartActivity(</div><div class="line">                <span class="keyword">this</span>, mMainThread.getApplicationThread(), mToken, <span class="keyword">this</span>,</div><div class="line">                intent, requestCode, options);</div><div class="line">        <span class="keyword">if</span> (ar != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// 如果activity之前已经启动，而且处于阻塞状态，execStartActivity函数直接返回要启动的activity的result或者null。</span></div><div class="line">            <span class="comment">//如果结果不为空，发送结果</span></div><div class="line">            mMainThread.sendActivityResult(</div><div class="line">                mToken, mEmbeddedID, requestCode, ar.getResultCode(),</div><div class="line">                ar.getResultData());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (requestCode &gt;= <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">// 如果需要一个返回结果，那么赋值mStartedActivity为true，在结果返回来之前保持当前Activity不可见</span></div><div class="line">            mStartedActivity = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        cancelInputsAndStartExitTransition(options);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (options != <span class="keyword">null</span>) &#123;</div><div class="line">            mParent.startActivityFromChild(<span class="keyword">this</span>, intent, requestCode, options);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            mParent.startActivityFromChild(<span class="keyword">this</span>, intent, requestCode);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里注意到 <code>mParent</code> 变量，一般情况下这里 <code>mParent</code> 是为空的，除非是启动 <code>ActivityGroup</code> 等可以嵌套 <code>Activity</code> 的内部的 <code>Activity</code> 时才会不为空。</p>
<p>Instrumentation.execStartActivity</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ActivityResult <span class="title">execStartActivity</span><span class="params">(</span></span></div><div class="line">        Context who, IBinder contextThread, IBinder token, Activity target,</div><div class="line">        Intent intent, <span class="keyword">int</span> requestCode, Bundle options) &#123;</div><div class="line">    IApplicationThread whoThread = (IApplicationThread) contextThread;</div><div class="line">    Uri referrer = target != <span class="keyword">null</span> ? target.onProvideReferrer() : <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">if</span> (referrer != <span class="keyword">null</span>) &#123;</div><div class="line">        intent.putExtra(Intent.EXTRA_REFERRER, referrer);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 判断mActivityMonitors是否为空，mActivityMonitors可以通过addMonitor()方法创建，一般在自动化测试时使用</span></div><div class="line">    <span class="comment">// 一般情况下不会走这个分支</span></div><div class="line">    <span class="keyword">if</span> (mActivityMonitors != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">synchronized</span> (mSync) &#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> N = mActivityMonitors.size();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</div><div class="line">                <span class="keyword">final</span> ActivityMonitor am = mActivityMonitors.get(i);</div><div class="line">                <span class="keyword">if</span> (am.match(who, <span class="keyword">null</span>, intent)) &#123;</div><div class="line">                    am.mHits++;</div><div class="line">                    <span class="comment">// 如果处于阻塞状态，直接返回</span></div><div class="line">                    <span class="keyword">if</span> (am.isBlocking()) &#123;</div><div class="line">                        <span class="keyword">return</span> requestCode &gt;= <span class="number">0</span> ? am.getResult() : <span class="keyword">null</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        intent.migrateExtraStreamToClipData();</div><div class="line">        intent.prepareToLeaveProcess();</div><div class="line">        <span class="comment">// 这里的ActivityManagerNative.getDefault返回ActivityManagerService的远程接口，即ActivityManagerProxy接口</span></div><div class="line">        <span class="comment">// 由它通过进程间通信调用 AMS 的 startActivity 方法</span></div><div class="line">        <span class="keyword">int</span> result = ActivityManagerNative.getDefault()</div><div class="line">            .startActivity(whoThread, who.getBasePackageName(), intent,</div><div class="line">                    intent.resolveTypeIfNeeded(who.getContentResolver()),</div><div class="line">                    token, target != <span class="keyword">null</span> ? target.mEmbeddedID : <span class="keyword">null</span>,</div><div class="line">                    requestCode, <span class="number">0</span>, <span class="keyword">null</span>, options);</div><div class="line">        checkStartActivityResult(result, intent);</div><div class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Failure from system"</span>, e);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>mActivityMonitors</code> 是 <code>ActivityMonitor</code> 的一个集合，该类用来监控应用中的单个活动，可监控一些指定的意图。一般在一些测试Case时使用。创建 <code>ActivityMonitor</code> 实例后，通过调用 <code>ActivityInstrumentationTestCase2</code> 的 <code>getInstrumentation()</code> 方法获取 <code>Instrumentation</code> 实例，然后通过 <code>addMonitor</code> 方法添加这个实例，当目标活动启动后，系统会匹配 <code>Instrumentation</code> 中的 <code>ActivityMonitor</code> 实例列表，如果匹配，就会累加计数器。</p>
<h3 id="ActivityManagerService的处理"><a href="#ActivityManagerService的处理" class="headerlink" title="ActivityManagerService的处理"></a>ActivityManagerService的处理</h3><h4 id="ActivityManagerService-startActivityAsUser"><a href="#ActivityManagerService-startActivityAsUser" class="headerlink" title="ActivityManagerService.startActivityAsUser"></a>ActivityManagerService.startActivityAsUser</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">startActivityAsUser</span><span class="params">(IApplicationThread caller, String callingPackage,</span></span></div><div class="line">        Intent intent, String resolvedType, IBinder resultTo, String resultWho, <span class="keyword">int</span> requestCode,</div><div class="line">        <span class="keyword">int</span> startFlags, ProfilerInfo profilerInfo, Bundle options, <span class="keyword">int</span> userId) &#123;</div><div class="line">    enforceNotIsolatedCaller(<span class="string">"startActivity"</span>);</div><div class="line">    userId = handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), userId,</div><div class="line">            <span class="keyword">false</span>, ALLOW_FULL_ONLY, <span class="string">"startActivity"</span>, <span class="keyword">null</span>);</div><div class="line">    <span class="keyword">return</span> mStackSupervisor.startActivityMayWait(caller, -<span class="number">1</span>, callingPackage, intent,</div><div class="line">            resolvedType, <span class="keyword">null</span>, <span class="keyword">null</span>, resultTo, resultWho, requestCode, startFlags,</div><div class="line">            profilerInfo, <span class="keyword">null</span>, <span class="keyword">null</span>, options, <span class="keyword">false</span>, userId, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从这里开始就在AMS进程中执行了，下面简单介绍一下这些参数代表的意义：</p>
<ul>
<li>resultTo： 指调用者Activity的mToken，mToken对象保存它所处的ActivityRecord信息</li>
</ul>
<h4 id="ActivityStackSupervisor-startActivityMayWait"><a href="#ActivityStackSupervisor-startActivityMayWait" class="headerlink" title="ActivityStackSupervisor.startActivityMayWait()"></a>ActivityStackSupervisor.startActivityMayWait()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">startActivityMayWait</span><span class="params">(IApplicationThread caller, <span class="keyword">int</span> callingUid,</span></span></div><div class="line">         String callingPackage, Intent intent, String resolvedType,</div><div class="line">         IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</div><div class="line">         IBinder resultTo, String resultWho, <span class="keyword">int</span> requestCode, <span class="keyword">int</span> startFlags,</div><div class="line">         ProfilerInfo profilerInfo, WaitResult outResult, Configuration config,</div><div class="line">         Bundle options, <span class="keyword">boolean</span> ignoreTargetSecurity, <span class="keyword">int</span> userId,</div><div class="line">         IActivityContainer iContainer, TaskRecord inTask) &#123;</div><div class="line">     <span class="comment">// 不允许传递文件描述符</span></div><div class="line">     <span class="keyword">if</span> (intent != <span class="keyword">null</span> &amp;&amp; intent.hasFileDescriptors()) &#123;</div><div class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"File descriptors passed in Intent"</span>);</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">boolean</span> componentSpecified = intent.getComponent() != <span class="keyword">null</span>;</div><div class="line">     <span class="comment">// 重新实例化一个Intent对象，防止对intent的修改</span></div><div class="line">     intent = <span class="keyword">new</span> Intent(intent);</div><div class="line"></div><div class="line">     <span class="comment">// 通过Intent解析Activity信息，最终会调用PackageManagerService.resolveIntent()来查询和选择相关的Activity</span></div><div class="line">     <span class="comment">// 如果有多个Activity匹配，那么就会弹框让用户来选择，这部分分析此处省略</span></div><div class="line">     ActivityInfo aInfo =</div><div class="line">             resolveActivity(intent, resolvedType, startFlags, profilerInfo, userId);</div><div class="line"></div><div class="line">     ActivityContainer container = (ActivityContainer)iContainer;</div><div class="line">     <span class="keyword">synchronized</span> (mService) &#123;</div><div class="line">         <span class="comment">// 一般情况下container 为null</span></div><div class="line">         <span class="keyword">if</span> (container != <span class="keyword">null</span> &amp;&amp; container.mParentActivity != <span class="keyword">null</span> &amp;&amp;</div><div class="line">                 container.mParentActivity.state != RESUMED) &#123;</div><div class="line">             <span class="keyword">return</span> ActivityManager.START_CANCELED;</div><div class="line">         &#125;</div><div class="line">         <span class="keyword">final</span> <span class="keyword">int</span> realCallingPid = Binder.getCallingPid();</div><div class="line">         <span class="keyword">final</span> <span class="keyword">int</span> realCallingUid = Binder.getCallingUid();</div><div class="line">         <span class="keyword">int</span> callingPid;</div><div class="line">         <span class="keyword">if</span> (callingUid &gt;= <span class="number">0</span>) &#123;</div><div class="line">             callingPid = -<span class="number">1</span>;</div><div class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (caller == <span class="keyword">null</span>) &#123;</div><div class="line">             callingPid = realCallingPid;</div><div class="line">             callingUid = realCallingUid;</div><div class="line">         &#125; <span class="keyword">else</span> &#123;</div><div class="line">             callingPid = callingUid = -<span class="number">1</span>;</div><div class="line">         &#125;</div><div class="line"></div><div class="line">         <span class="keyword">final</span> ActivityStack stack;</div><div class="line">         <span class="keyword">if</span> (container == <span class="keyword">null</span> || container.mStack.isOnHomeDisplay()) &#123;</div><div class="line">             <span class="comment">// 一般会走到这里，将当前的ActivityStack赋值给stack</span></div><div class="line">             stack = mFocusedStack;</div><div class="line">         &#125; <span class="keyword">else</span> &#123;</div><div class="line">             stack = container.mStack;</div><div class="line">         &#125;</div><div class="line">         stack.mConfigWillChange = config != <span class="keyword">null</span> &amp;&amp; mService.mConfiguration.diff(config) != <span class="number">0</span>;</div><div class="line"></div><div class="line">         <span class="keyword">final</span> <span class="keyword">long</span> origId = Binder.clearCallingIdentity();</div><div class="line"></div><div class="line">         <span class="keyword">if</span> (aInfo != <span class="keyword">null</span> &amp;&amp;</div><div class="line">                 (aInfo.applicationInfo.privateFlags</div><div class="line">                         &amp;ApplicationInfo.PRIVATE_FLAG_CANT_SAVE_STATE) != <span class="number">0</span>) &#123;</div><div class="line">             <span class="comment">// 处理heavy-weight process，即重量级进程，这种进程在内存不足时不会被kill掉</span></div><div class="line">             <span class="comment">// 一般不会走这里</span></div><div class="line">             <span class="keyword">if</span> (aInfo.processName.equals(aInfo.applicationInfo.packageName)) &#123;</div><div class="line">                 <span class="keyword">if</span> (mService.mHeavyWeightProcess != <span class="keyword">null</span> &amp;&amp;</div><div class="line">                         (mService.mHeavyWeightProcess.info.uid != aInfo.applicationInfo.uid ||</div><div class="line">                         !mService.mHeavyWeightProcess.processName.equals(aInfo.processName))) &#123;</div><div class="line">                     <span class="keyword">int</span> appCallingUid = callingUid;</div><div class="line">…………<span class="comment">//此处代码省略</span></div><div class="line">                 &#125;</div><div class="line">             &#125;</div><div class="line">         &#125;</div><div class="line"></div><div class="line">         <span class="keyword">int</span> res = startActivityLocked(caller, intent, resolvedType, aInfo,</div><div class="line">                 voiceSession, voiceInteractor, resultTo, resultWho,</div><div class="line">                 requestCode, callingPid, callingUid, callingPackage,</div><div class="line">                 realCallingPid, realCallingUid, startFlags, options, ignoreTargetSecurity,</div><div class="line">                 componentSpecified, <span class="keyword">null</span>, container, inTask);</div><div class="line"></div><div class="line">         Binder.restoreCallingIdentity(origId);</div><div class="line"></div><div class="line">         <span class="keyword">if</span> (stack.mConfigWillChange) &#123;</div><div class="line">             <span class="comment">// 一般不会走这里</span></div><div class="line">             …………</div><div class="line">         &#125;</div><div class="line"></div><div class="line">         <span class="keyword">if</span> (outResult != <span class="keyword">null</span>) &#123;</div><div class="line">             <span class="comment">// 一般不会走这里</span></div><div class="line">             ……</div><div class="line">         &#125;</div><div class="line"></div><div class="line">         <span class="keyword">return</span> res;</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h4 id="ActivityStackSupervisor-startActivityLocked"><a href="#ActivityStackSupervisor-startActivityLocked" class="headerlink" title="ActivityStackSupervisor.startActivityLocked()"></a>ActivityStackSupervisor.startActivityLocked()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">startActivityLocked</span><span class="params">(IApplicationThread caller,</span></span></div><div class="line">        Intent intent, String resolvedType, ActivityInfo aInfo,</div><div class="line">        IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</div><div class="line">        IBinder resultTo, String resultWho, <span class="keyword">int</span> requestCode,</div><div class="line">        <span class="keyword">int</span> callingPid, <span class="keyword">int</span> callingUid, String callingPackage,</div><div class="line">        <span class="keyword">int</span> realCallingPid, <span class="keyword">int</span> realCallingUid, <span class="keyword">int</span> startFlags, Bundle options,</div><div class="line">        <span class="keyword">boolean</span> ignoreTargetSecurity, <span class="keyword">boolean</span> componentSpecified, ActivityRecord[] outActivity,</div><div class="line">        ActivityContainer container, TaskRecord inTask) &#123;</div><div class="line">    <span class="keyword">int</span> err = ActivityManager.START_SUCCESS;</div><div class="line"></div><div class="line">    ProcessRecord callerApp = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">if</span> (caller != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 获取调用者所在的ProcessRecord</span></div><div class="line">        callerApp = mService.getRecordForAppLocked(caller);</div><div class="line">        <span class="keyword">if</span> (callerApp != <span class="keyword">null</span>) &#123;</div><div class="line">            callingPid = callerApp.pid;</div><div class="line">            callingUid = callerApp.info.uid;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            err = ActivityManager.START_PERMISSION_DENIED;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 获取userId，如果是管理员用户该值为0</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> userId = aInfo != <span class="keyword">null</span> ? UserHandle.getUserId(aInfo.applicationInfo.uid) : <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (err == ActivityManager.START_SUCCESS) &#123;</div><div class="line">        <span class="comment">// 打印一些信息</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ActivityRecord sourceRecord = <span class="keyword">null</span>;</div><div class="line">    ActivityRecord resultRecord = <span class="keyword">null</span>;</div><div class="line">    <span class="comment">// resultTo为调用者Activity的mToken，保存了它所处的ActivityRecord信息</span></div><div class="line">    <span class="keyword">if</span> (resultTo != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 获取调用者Activity所对用的ActivityRecord</span></div><div class="line">        sourceRecord = isInAnyStackLocked(resultTo);</div><div class="line">        <span class="keyword">if</span> (sourceRecord != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// 如果需要返回结果，即requestCode不为-1，赋值resultRecord</span></div><div class="line">            <span class="keyword">if</span> (requestCode &gt;= <span class="number">0</span> &amp;&amp; !sourceRecord.finishing) &#123;</div><div class="line">                resultRecord = sourceRecord;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> launchFlags = intent.getFlags();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((launchFlags &amp; Intent.FLAG_ACTIVITY_FORWARD_RESULT) != <span class="number">0</span> &amp;&amp; sourceRecord != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 对Intent.FLAG_ACTIVITY_FORWARD_RESULT处理，如果设置了这个flag，执行结果相当于透传</span></div><div class="line">        <span class="comment">// 比如Activity启动顺序A-&gt;B-&gt;C，那么C的结果将直接返回给A</span></div><div class="line">        …………<span class="comment">//此处代码忽略</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (err == ActivityManager.START_SUCCESS &amp;&amp; intent.getComponent() == <span class="keyword">null</span>) &#123;</div><div class="line">        err = ActivityManager.START_INTENT_NOT_RESOLVED;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (err == ActivityManager.START_SUCCESS &amp;&amp; aInfo == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 如果待启动的Activity没有在Manifestfest中显示声明，就会有这个error</span></div><div class="line">        err = ActivityManager.START_CLASS_NOT_FOUND;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (err == ActivityManager.START_SUCCESS</div><div class="line">            &amp;&amp; !isCurrentProfileLocked(userId)</div><div class="line">            &amp;&amp; (aInfo.flags &amp; FLAG_SHOW_FOR_ALL_USERS) == <span class="number">0</span>) &#123;</div><div class="line">        err = ActivityManager.START_NOT_CURRENT_USER_ACTIVITY;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (err == ActivityManager.START_SUCCESS &amp;&amp; sourceRecord != <span class="keyword">null</span></div><div class="line">            &amp;&amp; sourceRecord.task.voiceSession != <span class="keyword">null</span>) &#123;</div><div class="line">        ……</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (err == ActivityManager.START_SUCCESS &amp;&amp; voiceSession != <span class="keyword">null</span>) &#123;</div><div class="line">        ……</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> ActivityStack resultStack = resultRecord == <span class="keyword">null</span> ? <span class="keyword">null</span> : resultRecord.task.stack;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (err != ActivityManager.START_SUCCESS) &#123;</div><div class="line">        <span class="keyword">if</span> (resultRecord != <span class="keyword">null</span>) &#123;</div><div class="line">            resultStack.sendActivityResultLocked(-<span class="number">1</span>,</div><div class="line">                resultRecord, resultWho, requestCode,</div><div class="line">                Activity.RESULT_CANCELED, <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">        ActivityOptions.abort(options);</div><div class="line">        <span class="keyword">return</span> err;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">boolean</span> abort = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> startAnyPerm = mService.checkPermission(</div><div class="line">            START_ANY_ACTIVITY, callingPid, callingUid);</div><div class="line"></div><div class="line">    执行一系列的权限检查</div><div class="line">    …………</div><div class="line"></div><div class="line">    abort |= !mService.mIntentFirewall.checkStartActivity(intent, callingUid,</div><div class="line">            callingPid, resolvedType, aInfo.applicationInfo);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (mService.mController != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// The Intent we give to the watcher has the extra data</span></div><div class="line">            <span class="comment">// stripped off, since it can contain private information.</span></div><div class="line">            Intent watchIntent = intent.cloneFilter();</div><div class="line">            abort |= !mService.mController.activityStarting(watchIntent,</div><div class="line">                    aInfo.applicationInfo.packageName);</div><div class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">            mService.mController = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (abort) &#123;</div><div class="line">        <span class="comment">// 权限检查不通过就退出</span></div><div class="line">        <span class="keyword">if</span> (resultRecord != <span class="keyword">null</span>) &#123;</div><div class="line">            resultStack.sendActivityResultLocked(-<span class="number">1</span>, resultRecord, resultWho, requestCode,</div><div class="line">                    Activity.RESULT_CANCELED, <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">        ActivityOptions.abort(options);</div><div class="line">        <span class="keyword">return</span> ActivityManager.START_SUCCESS;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 新建一个ActivityRecord，对应将要启动的Activity</span></div><div class="line">    ActivityRecord r = <span class="keyword">new</span> ActivityRecord(mService, callerApp, callingUid, callingPackage,</div><div class="line">            intent, resolvedType, aInfo, mService.mConfiguration, resultRecord, resultWho,</div><div class="line">            requestCode, componentSpecified, voiceSession != <span class="keyword">null</span>, <span class="keyword">this</span>, container, options);</div><div class="line">    <span class="keyword">if</span> (outActivity != <span class="keyword">null</span>) &#123;</div><div class="line">        outActivity[<span class="number">0</span>] = r;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (r.appTimeTracker == <span class="keyword">null</span> &amp;&amp; sourceRecord != <span class="keyword">null</span>) &#123;</div><div class="line">        r.appTimeTracker = sourceRecord.appTimeTracker;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 当前的ActivityStack</span></div><div class="line">    <span class="keyword">final</span> ActivityStack stack = mFocusedStack;</div><div class="line">    <span class="keyword">if</span> (voiceSession == <span class="keyword">null</span> &amp;&amp; (stack.mResumedActivity == <span class="keyword">null</span></div><div class="line">            || stack.mResumedActivity.info.applicationInfo.uid != callingUid)) &#123;</div><div class="line">        <span class="keyword">if</span> (!mService.checkAppSwitchAllowedLocked(callingPid, callingUid,</div><div class="line">                realCallingPid, realCallingUid, <span class="string">"Activity start"</span>)) &#123;</div><div class="line">            PendingActivityLaunch pal =</div><div class="line">                    <span class="keyword">new</span> PendingActivityLaunch(r, sourceRecord, startFlags, stack);</div><div class="line">            mPendingActivityLaunches.add(pal);</div><div class="line">            ActivityOptions.abort(options);</div><div class="line">            <span class="keyword">return</span> ActivityManager.START_SWITCHES_CANCELED;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (mService.mDidAppSwitch) &#123;</div><div class="line">        mService.mAppSwitchesAllowedTime = <span class="number">0</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        mService.mDidAppSwitch = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    doPendingActivityLaunchesLocked(<span class="keyword">false</span>);</div><div class="line"></div><div class="line">    err = startActivityUncheckedLocked(r, sourceRecord, voiceSession, voiceInteractor,</div><div class="line">            startFlags, <span class="keyword">true</span>, options, inTask);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (err &lt; <span class="number">0</span>) &#123;</div><div class="line">        notifyActivityDrawnForKeyguard();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> err;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="ActivityStackSupervisor-startActivityUncheckedLocked"><a href="#ActivityStackSupervisor-startActivityUncheckedLocked" class="headerlink" title="ActivityStackSupervisor.startActivityUncheckedLocked()"></a>ActivityStackSupervisor.startActivityUncheckedLocked()</h4><p>参数中 r 代表即将要启动的 <code>Activity</code> 对应的 <code>ActivityRecord</code>，<code>sourceRecord</code> 代表调用者。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">startActivityUncheckedLocked</span><span class="params">(<span class="keyword">final</span> ActivityRecord r, ActivityRecord sourceRecord,</span></span></div><div class="line">        IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor, <span class="keyword">int</span> startFlags,</div><div class="line">        <span class="keyword">boolean</span> doResume, Bundle options, TaskRecord inTask) &#123;</div><div class="line">    <span class="keyword">final</span> Intent intent = r.intent;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> callingUid = r.launchedFromUid;</div><div class="line"></div><div class="line">    <span class="comment">// 如果指定的inTask不在Recents列表中，认为inTask是无效的</span></div><div class="line">    <span class="comment">// inTask不为空，表示调用者希望在指定的task里面启动activity</span></div><div class="line">    <span class="comment">// 一般情况下为null</span></div><div class="line">    <span class="keyword">if</span> (inTask != <span class="keyword">null</span> &amp;&amp; !inTask.inRecents) &#123;</div><div class="line">        inTask = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 被启动Activity的启动模式</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> launchSingleTop = r.launchMode == ActivityInfo.LAUNCH_SINGLE_TOP;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> launchSingleInstance = r.launchMode == ActivityInfo.LAUNCH_SINGLE_INSTANCE;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> launchSingleTask = r.launchMode == ActivityInfo.LAUNCH_SINGLE_TASK;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> launchFlags = intent.getFlags();</div><div class="line">    <span class="keyword">if</span> ((launchFlags &amp; Intent.FLAG_ACTIVITY_NEW_DOCUMENT) != <span class="number">0</span> &amp;&amp;</div><div class="line">            (launchSingleInstance || launchSingleTask)) &#123;</div><div class="line">        <span class="comment">//当Inent中定义的launch flag和manifest中定义的有冲突的话优先使用manifest中定义的</span></div><div class="line">        launchFlags &amp;=</div><div class="line">                ~(Intent.FLAG_ACTIVITY_NEW_DOCUMENT | Intent.FLAG_ACTIVITY_MULTIPLE_TASK);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">switch</span> (r.info.documentLaunchMode) &#123;</div><div class="line">            <span class="keyword">case</span> ActivityInfo.DOCUMENT_LAUNCH_NONE:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> ActivityInfo.DOCUMENT_LAUNCH_INTO_EXISTING:</div><div class="line">                launchFlags |= Intent.FLAG_ACTIVITY_NEW_DOCUMENT;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> ActivityInfo.DOCUMENT_LAUNCH_ALWAYS:</div><div class="line">                launchFlags |= Intent.FLAG_ACTIVITY_NEW_DOCUMENT;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> ActivityInfo.DOCUMENT_LAUNCH_NEVER:</div><div class="line">                launchFlags &amp;= ~Intent.FLAG_ACTIVITY_MULTIPLE_TASK;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 是否为后台启动任务的标志位</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> launchTaskBehind = r.mLaunchTaskBehind</div><div class="line">            &amp;&amp; !launchSingleTask &amp;&amp; !launchSingleInstance</div><div class="line">            &amp;&amp; (launchFlags &amp; Intent.FLAG_ACTIVITY_NEW_DOCUMENT) != <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (r.resultTo != <span class="keyword">null</span> &amp;&amp; (launchFlags &amp; Intent.FLAG_ACTIVITY_NEW_TASK) != <span class="number">0</span></div><div class="line">            &amp;&amp; r.resultTo.task.stack != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 如果需要返回结果，但是此时的launchFlags有FLAG_ACTIVITY_NEW_TASK，则取消返回结果</span></div><div class="line">        r.resultTo.task.stack.sendActivityResultLocked(-<span class="number">1</span>,</div><div class="line">                r.resultTo, r.resultWho, r.requestCode,</div><div class="line">                Activity.RESULT_CANCELED, <span class="keyword">null</span>);</div><div class="line">        r.resultTo = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((launchFlags &amp; Intent.FLAG_ACTIVITY_NEW_DOCUMENT) != <span class="number">0</span> &amp;&amp; r.resultTo == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 赋予FLAG_ACTIVITY_NEW_TASK标志</span></div><div class="line">        launchFlags |= Intent.FLAG_ACTIVITY_NEW_TASK;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((launchFlags &amp; Intent.FLAG_ACTIVITY_NEW_TASK) != <span class="number">0</span>) &#123;</div><div class="line">        <span class="comment">// 如果设置了android:documentLaunchMode为always，那么设置FLAG_ACTIVITY_MULTIPLE_TASK标志</span></div><div class="line">        <span class="comment">// 即使在其他task里面有该Activity以及启动，仍然新建Task再次启动一个Activity</span></div><div class="line">        <span class="keyword">if</span> (launchTaskBehind</div><div class="line">                || r.info.documentLaunchMode == ActivityInfo.DOCUMENT_LAUNCH_ALWAYS) &#123;</div><div class="line">            launchFlags |= Intent.FLAG_ACTIVITY_MULTIPLE_TASK;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 判断一下是否是用户的行为，比如用户按下Home键等等</span></div><div class="line">    <span class="comment">// 如果是用户的行为的话Activity跳转的时候是要调用onUserLeaveHint()方法的</span></div><div class="line">    mUserLeaving = (launchFlags &amp; Intent.FLAG_ACTIVITY_NO_USER_ACTION) == <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 如果设置了不需要resume，那么设置延迟resume标志</span></div><div class="line">    <span class="keyword">if</span> (!doResume) &#123;</div><div class="line">        r.delayedResume = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// FLAG_ACTIVITY_PREVIOUS_IS_TOP标志来决定待启动Activity会不会被作为栈顶，</span></div><div class="line">    <span class="comment">// 如果调用者希望待启动的Activity马上销毁，就会使用该启动参数。</span></div><div class="line">    <span class="comment">// 通常情况下notTop为null</span></div><div class="line">    ActivityRecord notTop =</div><div class="line">            (launchFlags &amp; Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP) != <span class="number">0</span> ? r : <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((startFlags&amp;ActivityManager.START_FLAG_ONLY_IF_NEEDED) != <span class="number">0</span>) &#123;</div><div class="line">        ActivityRecord checkedCaller = sourceRecord;</div><div class="line">        <span class="keyword">if</span> (checkedCaller == <span class="keyword">null</span>) &#123;</div><div class="line">            checkedCaller = mFocusedStack.topRunningNonDelayedActivityLocked(notTop);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!checkedCaller.realActivity.equals(r.realActivity)) &#123;</div><div class="line">            <span class="comment">// 如果调用者和被调用者不是同一个Activity，去掉这个标志，因为这个时候都需要启动</span></div><div class="line">            startFlags &amp;= ~ActivityManager.START_FLAG_ONLY_IF_NEEDED;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">boolean</span> addingToTask = <span class="keyword">false</span>;<span class="comment">//表示是否需要在inTask中启动activity</span></div><div class="line">    TaskRecord reuseTask = <span class="keyword">null</span>;<span class="comment">//表示可以复用的task</span></div><div class="line">    <span class="comment">//当调用者不是来自activity，而是明确指定task的情况。</span></div><div class="line">    <span class="keyword">if</span> (sourceRecord == <span class="keyword">null</span> &amp;&amp; inTask != <span class="keyword">null</span> &amp;&amp; inTask.stack != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">final</span> Intent baseIntent = inTask.getBaseIntent();</div><div class="line">        <span class="keyword">final</span> ActivityRecord root = inTask.getRootActivity();</div><div class="line">        </div><div class="line">        ……</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// 如果inTask是个空的task，从baseIntent里面挑选出一些flag设置到launchFlags</span></div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> flagsOfInterest = Intent.FLAG_ACTIVITY_NEW_TASK</div><div class="line">                    | Intent.FLAG_ACTIVITY_MULTIPLE_TASK | Intent.FLAG_ACTIVITY_NEW_DOCUMENT</div><div class="line">                    | Intent.FLAG_ACTIVITY_RETAIN_IN_RECENTS;</div><div class="line">            launchFlags = (launchFlags&amp;~flagsOfInterest)</div><div class="line">                    | (baseIntent.getFlags()&amp;flagsOfInterest);</div><div class="line">            intent.setFlags(launchFlags);</div><div class="line">            inTask.setIntent(r);</div><div class="line">            addingToTask = <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((launchFlags &amp; Intent.FLAG_ACTIVITY_NEW_TASK) != <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">// 如果inTask非空，launchFlags要求在新task里面启动那么就不加入到这个task里面去</span></div><div class="line">            addingToTask = <span class="keyword">false</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 其他情况就加入到inTask</span></div><div class="line">            addingToTask = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 如果inTask不为空，就作为复用的task</span></div><div class="line">        reuseTask = inTask;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        inTask = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (inTask == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 当没有指定task</span></div><div class="line">        <span class="keyword">if</span> (sourceRecord == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// 调用者不是一个activity，那么就在一个新的task里面启动activity</span></div><div class="line">            <span class="keyword">if</span> ((launchFlags &amp; Intent.FLAG_ACTIVITY_NEW_TASK) == <span class="number">0</span> &amp;&amp; inTask == <span class="keyword">null</span>) &#123;</div><div class="line">                launchFlags |= Intent.FLAG_ACTIVITY_NEW_TASK;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sourceRecord.launchMode == ActivityInfo.LAUNCH_SINGLE_INSTANCE) &#123;</div><div class="line">            <span class="comment">// 如果调用者是一个activity，而且调用者的启动模式是LAUNCH_SINGLE_INSTANCE，</span></div><div class="line">            <span class="comment">// 那么也需要在新的task里面启动</span></div><div class="line">            launchFlags |= Intent.FLAG_ACTIVITY_NEW_TASK;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (launchSingleInstance || launchSingleTask) &#123;</div><div class="line">            <span class="comment">// 启动标志位里面是SingleInstance或者launchSingleTask，也需要在新task里面启动</span></div><div class="line">            launchFlags |= Intent.FLAG_ACTIVITY_NEW_TASK;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ActivityInfo newTaskInfo = <span class="keyword">null</span>;</div><div class="line">    Intent newTaskIntent = <span class="keyword">null</span>;</div><div class="line">    ActivityStack sourceStack;</div><div class="line">    <span class="keyword">if</span> (sourceRecord != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (sourceRecord.finishing) &#123;</div><div class="line">            <span class="comment">// 如果调用者activity处于正在销毁的状态，那么就需要在新的task里启动</span></div><div class="line">            <span class="comment">// 并且保存一些调用者的信息，并把sourceRecord和sourceStack置空</span></div><div class="line">            <span class="keyword">if</span> ((launchFlags &amp; Intent.FLAG_ACTIVITY_NEW_TASK) == <span class="number">0</span>) &#123;</div><div class="line">                launchFlags |= Intent.FLAG_ACTIVITY_NEW_TASK;</div><div class="line">                newTaskInfo = sourceRecord.info;</div><div class="line">                newTaskIntent = sourceRecord.task.intent;</div><div class="line">            &#125;</div><div class="line">            sourceRecord = <span class="keyword">null</span>;</div><div class="line">            sourceStack = <span class="keyword">null</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 如果不在销毁状态，把其所在的栈赋于sourceStack</span></div><div class="line">            sourceStack = sourceRecord.task.stack;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        sourceStack = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">boolean</span> movedHome = <span class="keyword">false</span>;</div><div class="line">    ActivityStack targetStack;</div><div class="line">    <span class="comment">// 至此，启动参数的修正工作结束，设置给intent</span></div><div class="line">    intent.setFlags(launchFlags);</div><div class="line">    <span class="comment">// 看是否需要动画</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> noAnimation = (launchFlags &amp; Intent.FLAG_ACTIVITY_NO_ANIMATION) != <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">// FLAG_ACTIVITY_NEW_TASK &amp;&amp; FLAG_ACTIVITY_MULTIPLE_TASK 表示不是在当前任务中启动，</span></div><div class="line">    <span class="comment">// 但是要查看是否有目标Activity已经存在的任务，同launchSingleInstance和launchSingleTask</span></div><div class="line">    <span class="keyword">if</span> (((launchFlags &amp; Intent.FLAG_ACTIVITY_NEW_TASK) != <span class="number">0</span> &amp;&amp;</div><div class="line">            (launchFlags &amp; Intent.FLAG_ACTIVITY_MULTIPLE_TASK) == <span class="number">0</span>)</div><div class="line">            || launchSingleInstance || launchSingleTask) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (inTask == <span class="keyword">null</span> &amp;&amp; r.resultTo == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// 在没有指定task且不要返回结果的情况下，去查找是否有匹配的activity</span></div><div class="line">            <span class="comment">// findTaskLocked是找到匹配的目标ActivityRecord所在的任务栈(TaskRecord)，包含taskAffinity的操作</span></div><div class="line">            <span class="comment">// 这个方法后面会详细介绍</span></div><div class="line">            <span class="comment">// 从栈顶至栈底遍历ActivityStack中的所有Activity，根据Intent和ActivityInfo这</span></div><div class="line">            <span class="comment">// 两个参数得到的Activity的包名</span></div><div class="line">            ActivityRecord intentActivity = !launchSingleInstance ?</div><div class="line">                    findTaskLocked(r) : findActivityLocked(intent, r.info);</div><div class="line">            <span class="keyword">if</span> (intentActivity != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">// intentActivity不为空表示找到目标activity，那么目标Activity所在的任务(TaskRecord)</span></div><div class="line">                <span class="comment">// 和任务所在的栈(ActivityRecord)就是宿主任务和宿主栈</span></div><div class="line">                <span class="comment">// 这里通过isLockTaskModeViolation锁定屏幕的那些Task</span></div><div class="line">                <span class="keyword">if</span> (isLockTaskModeViolation(intentActivity.task,</div><div class="line">                        (launchFlags &amp; (FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_CLEAR_TASK))</div><div class="line">                        == (FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_CLEAR_TASK))) &#123;</div><div class="line">                    <span class="comment">// 如果不是锁定的task，就结束启动流程</span></div><div class="line">                    <span class="comment">// lock task mode 是Android 5.0 Lollipop添加的功能</span></div><div class="line">                    showLockTaskToast();</div><div class="line">                    <span class="keyword">return</span> ActivityManager.START_RETURN_LOCK_TASK_MODE_VIOLATION;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (r.task == <span class="keyword">null</span>) &#123;</div><div class="line">                    r.task = intentActivity.task;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (intentActivity.task.intent == <span class="keyword">null</span>) &#123;</div><div class="line">                    intentActivity.task.setIntent(r);</div><div class="line">                &#125;</div><div class="line">                targetStack = intentActivity.task.stack;</div><div class="line">                targetStack.mLastPausedActivity = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">                <span class="comment">// 如果目标task不在前台就需要把它移至前台</span></div><div class="line">                <span class="comment">// 这里首先获取焦点所在的栈</span></div><div class="line">                <span class="keyword">final</span> ActivityStack focusStack = getFocusedStack();</div><div class="line">                <span class="comment">//从焦点栈里面找到当前可见的ActivityRecord</span></div><div class="line">                ActivityRecord curTop = (focusStack == <span class="keyword">null</span>)</div><div class="line">                        ? <span class="keyword">null</span> : focusStack.topRunningNonDelayedActivityLocked(notTop);</div><div class="line">                <span class="keyword">boolean</span> movedToFront = <span class="keyword">false</span>;</div><div class="line">                <span class="keyword">if</span> (curTop != <span class="keyword">null</span> &amp;&amp; (curTop.task != intentActivity.task ||</div><div class="line">                        curTop.task != focusStack.topTask())) &#123;</div><div class="line">                    <span class="comment">// 满足上面的条件表示待启动的activity和当前可见activity不在同一个task</span></div><div class="line">                    <span class="comment">// 那么就需要将待启动的activity所在的栈移动到前台</span></div><div class="line">                    r.intent.addFlags(Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT);</div><div class="line">                    <span class="keyword">if</span> (sourceRecord == <span class="keyword">null</span> || (sourceStack.topActivity() != <span class="keyword">null</span> &amp;&amp;</div><div class="line">                            sourceStack.topActivity().task == sourceRecord.task)) &#123;</div><div class="line">                        <span class="keyword">if</span> (launchTaskBehind &amp;&amp; sourceRecord != <span class="keyword">null</span>) &#123;</div><div class="line">                            intentActivity.setTaskToAffiliateWith(sourceRecord.task);</div><div class="line">                        &#125;</div><div class="line">                        movedHome = <span class="keyword">true</span>;</div><div class="line">                        <span class="comment">// 将目标任务移动到栈顶</span></div><div class="line">                        targetStack.moveTaskToFrontLocked(intentActivity.task, noAnimation,</div><div class="line">                                options, r.appTimeTracker, <span class="string">"bringingFoundTaskToFront"</span>);</div><div class="line">                        movedToFront = <span class="keyword">true</span>;</div><div class="line">                        <span class="keyword">if</span> ((launchFlags &amp;</div><div class="line">                                (FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_TASK_ON_HOME))</div><div class="line">                                == (FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_TASK_ON_HOME)) &#123;</div><div class="line">                            <span class="comment">//将toReturnTo设置为home</span></div><div class="line">                            intentActivity.task.setTaskToReturnTo(HOME_ACTIVITY_TYPE);</div><div class="line">                        &#125;</div><div class="line">                        options = <span class="keyword">null</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (!movedToFront) &#123;</div><div class="line">                    <span class="comment">// 将当前栈移动到前台</span></div><div class="line">                    targetStack.moveToFront(<span class="string">"intentActivityFound"</span>);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">// 根据需要重置activity所在的task</span></div><div class="line">                <span class="keyword">if</span> ((launchFlags&amp;Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED) != <span class="number">0</span>) &#123;</div><div class="line">                    intentActivity = targetStack.resetTaskIfNeededLocked(intentActivity, r);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> ((startFlags &amp; ActivityManager.START_FLAG_ONLY_IF_NEEDED) != <span class="number">0</span>) &#123;</div><div class="line">                    <span class="comment">// 如果不需要启动一个新的activity，结束启动流程</span></div><div class="line">                    <span class="keyword">if</span> (doResume) &#123;</div><div class="line">                        resumeTopActivitiesLocked(targetStack, <span class="keyword">null</span>, options);</div><div class="line">                        <span class="comment">// 如果没有移动到前台，通知Keyguard</span></div><div class="line">                        <span class="keyword">if</span> (!movedToFront) &#123;</div><div class="line">                            notifyActivityDrawnForKeyguard();</div><div class="line">                        &#125;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        ActivityOptions.abort(options);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">return</span> ActivityManager.START_RETURN_INTENT_TO_CALLER;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> ((launchFlags &amp; (FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_CLEAR_TASK))</div><div class="line">                        == (FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_CLEAR_TASK)) &#123;</div><div class="line">                    <span class="comment">// 这里需要移除目标task中所有关联的其他activity，即要完全替代目标task</span></div><div class="line">                    <span class="comment">// 将该启动activity变为task中的根activity</span></div><div class="line">                    reuseTask = intentActivity.task;</div><div class="line">                    reuseTask.performClearTaskLocked();</div><div class="line">                    reuseTask.setIntent(r);</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((launchFlags &amp; FLAG_ACTIVITY_CLEAR_TOP) != <span class="number">0</span></div><div class="line">                        || launchSingleInstance || launchSingleTask) &#123;</div><div class="line">                    <span class="comment">// 清除task中目标activity上面的所有activity，返回目标activity</span></div><div class="line">                    ActivityRecord top =</div><div class="line">                            intentActivity.task.performClearTaskLocked(r, launchFlags);</div><div class="line">                    <span class="keyword">if</span> (top != <span class="keyword">null</span>) &#123;</div><div class="line">                        <span class="keyword">if</span> (top.frontOfTask) &#123;</div><div class="line">                            top.task.setIntent(r);</div><div class="line">                        &#125;</div><div class="line">                        <span class="comment">//触发调用onNewIntent()</span></div><div class="line">                        top.deliverNewIntentLocked(callingUid, r.intent, r.launchedFromPackage);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="comment">// A special case: we need to start the activity because it is not</span></div><div class="line">                        <span class="comment">// currently running, and the caller has asked to clear the current</span></div><div class="line">                        <span class="comment">// task to have this activity at the top.</span></div><div class="line">                        addingToTask = <span class="keyword">true</span>;</div><div class="line">                        <span class="comment">// Now pretend like this activity is being started by the top of its</span></div><div class="line">                        <span class="comment">// task, so it is put in the right place.</span></div><div class="line">                        sourceRecord = intentActivity;</div><div class="line">                        TaskRecord task = sourceRecord.task;</div><div class="line">                        <span class="keyword">if</span> (task != <span class="keyword">null</span> &amp;&amp; task.stack == <span class="keyword">null</span>) &#123;</div><div class="line">                            <span class="comment">// Target stack got cleared when we all activities were removed</span></div><div class="line">                            <span class="comment">// above. Go ahead and reset it.</span></div><div class="line">                            targetStack = computeStackFocus(sourceRecord, <span class="keyword">false</span> <span class="comment">/* newTask */</span>);</div><div class="line">                            targetStack.addTask(</div><div class="line">                                    task, !launchTaskBehind <span class="comment">/* toTop */</span>, <span class="keyword">false</span> <span class="comment">/* moving */</span>);</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (r.realActivity.equals(intentActivity.task.realActivity)) &#123;</div><div class="line">                    <span class="comment">// In this case the top activity on the task is the</span></div><div class="line">                    <span class="comment">// same as the one being launched, so we take that</span></div><div class="line">                    <span class="comment">// as a request to bring the task to the foreground.</span></div><div class="line">                    <span class="comment">// If the top activity in the task is the root</span></div><div class="line">                    <span class="comment">// activity, deliver this new intent to it if it</span></div><div class="line">                    <span class="comment">// desires.</span></div><div class="line">                    <span class="keyword">if</span> (((launchFlags&amp;Intent.FLAG_ACTIVITY_SINGLE_TOP) != <span class="number">0</span> || launchSingleTop)</div><div class="line">                            &amp;&amp; intentActivity.realActivity.equals(r.realActivity)) &#123;</div><div class="line">                        ActivityStack.logStartActivity(EventLogTags.AM_NEW_INTENT, r,</div><div class="line">                                intentActivity.task);</div><div class="line">                        <span class="keyword">if</span> (intentActivity.frontOfTask) &#123;</div><div class="line">                            intentActivity.task.setIntent(r);</div><div class="line">                        &#125;</div><div class="line">                        intentActivity.deliverNewIntentLocked(callingUid, r.intent,</div><div class="line">                                r.launchedFromPackage);</div><div class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!r.intent.filterEquals(intentActivity.task.intent)) &#123;</div><div class="line">                        <span class="comment">// In this case we are launching the root activity</span></div><div class="line">                        <span class="comment">// of the task, but with a different intent.  We</span></div><div class="line">                        <span class="comment">// should start a new instance on top.</span></div><div class="line">                        addingToTask = <span class="keyword">true</span>;</div><div class="line">                        sourceRecord = intentActivity;</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((launchFlags&amp;Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED) == <span class="number">0</span>) &#123;</div><div class="line">                    <span class="comment">// In this case an activity is being launched in to an</span></div><div class="line">                    <span class="comment">// existing task, without resetting that task.  This</span></div><div class="line">                    <span class="comment">// is typically the situation of launching an activity</span></div><div class="line">                    <span class="comment">// from a notification or shortcut.  We want to place</span></div><div class="line">                    <span class="comment">// the new activity on top of the current task.</span></div><div class="line">                    addingToTask = <span class="keyword">true</span>;</div><div class="line">                    sourceRecord = intentActivity;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!intentActivity.task.rootWasReset) &#123;</div><div class="line">                    <span class="comment">// In this case we are launching in to an existing task</span></div><div class="line">                    <span class="comment">// that has not yet been started from its front door.</span></div><div class="line">                    <span class="comment">// The current task has been brought to the front.</span></div><div class="line">                    <span class="comment">// Ideally, we'd probably like to place this new task</span></div><div class="line">                    <span class="comment">// at the bottom of its stack, but that's a little hard</span></div><div class="line">                    <span class="comment">// to do with the current organization of the code so</span></div><div class="line">                    <span class="comment">// for now we'll just drop it.</span></div><div class="line">                    intentActivity.task.setIntent(r);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (!addingToTask &amp;&amp; reuseTask == <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="comment">// 如果不需要加入指定的task，且不用复用task，那么直接把找到的目标activity推到前台</span></div><div class="line">                    <span class="comment">// 并结束启动流程</span></div><div class="line">                    <span class="keyword">if</span> (doResume) &#123;</div><div class="line">                        targetStack.resumeTopActivityLocked(<span class="keyword">null</span>, options);</div><div class="line">                        <span class="keyword">if</span> (!movedToFront) &#123;</div><div class="line">                            notifyActivityDrawnForKeyguard();</div><div class="line">                        &#125;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        ActivityOptions.abort(options);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">return</span> ActivityManager.START_TASK_TO_FRONT;</div><div class="line">                &#125;</div><div class="line">            &#125;<span class="comment">//end of (intentActivity != null)</span></div><div class="line">        &#125;<span class="comment">//end of (inTask == null &amp;&amp; r.resultTo == null)</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (r.packageName != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 待启动activity包名不为空</span></div><div class="line">        ActivityStack topStack = mFocusedStack;</div><div class="line">        ActivityRecord top = topStack.topRunningNonDelayedActivityLocked(notTop);</div><div class="line">        <span class="keyword">if</span> (top != <span class="keyword">null</span> &amp;&amp; r.resultTo == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (top.realActivity.equals(r.realActivity) &amp;&amp; top.userId == r.userId) &#123;</div><div class="line">                <span class="comment">// 待启动的activity和前台显示的activity是同一个activity的情况</span></div><div class="line">                <span class="keyword">if</span> (top.app != <span class="keyword">null</span> &amp;&amp; top.app.thread != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> ((launchFlags &amp; Intent.FLAG_ACTIVITY_SINGLE_TOP) != <span class="number">0</span></div><div class="line">                        || launchSingleTop || launchSingleTask) &#123;</div><div class="line">                        ActivityStack.logStartActivity(EventLogTags.AM_NEW_INTENT, top,</div><div class="line">                                top.task);</div><div class="line">                        topStack.mLastPausedActivity = <span class="keyword">null</span>;</div><div class="line">                        <span class="keyword">if</span> (doResume) &#123;</div><div class="line">                            resumeTopActivitiesLocked();</div><div class="line">                        &#125;</div><div class="line">                        ActivityOptions.abort(options);</div><div class="line">                        <span class="keyword">if</span> ((startFlags&amp;ActivityManager.START_FLAG_ONLY_IF_NEEDED) != <span class="number">0</span>) &#123;</div><div class="line">                            <span class="keyword">return</span> ActivityManager.START_RETURN_INTENT_TO_CALLER;</div><div class="line">                        &#125;</div><div class="line">                        top.deliverNewIntentLocked(callingUid, r.intent, r.launchedFromPackage);</div><div class="line">                        <span class="keyword">return</span> ActivityManager.START_DELIVERED_TO_TOP;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//如果目标activity包名为空，表示找不到待启动的activity，结束启动流程</span></div><div class="line">        <span class="keyword">if</span> (r.resultTo != <span class="keyword">null</span> &amp;&amp; r.resultTo.task.stack != <span class="keyword">null</span>) &#123;</div><div class="line">            r.resultTo.task.stack.sendActivityResultLocked(-<span class="number">1</span>, r.resultTo, r.resultWho,</div><div class="line">                    r.requestCode, Activity.RESULT_CANCELED, <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">        ActivityOptions.abort(options);</div><div class="line">        <span class="keyword">return</span> ActivityManager.START_CLASS_NOT_FOUND;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>目标activity不存在的情况：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">// 接下来处理目标activity不存在的情况</span></div><div class="line"></div><div class="line">    <span class="keyword">boolean</span> newTask = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">boolean</span> keepCurTransition = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    TaskRecord taskToAffiliate = launchTaskBehind &amp;&amp; sourceRecord != <span class="keyword">null</span> ?</div><div class="line">            sourceRecord.task : <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (r.resultTo == <span class="keyword">null</span> &amp;&amp; inTask == <span class="keyword">null</span> &amp;&amp; !addingToTask</div><div class="line">            &amp;&amp; (launchFlags &amp; Intent.FLAG_ACTIVITY_NEW_TASK) != <span class="number">0</span>) &#123;</div><div class="line">        <span class="comment">// 这种情况下要在一个新的task中启动activity</span></div><div class="line">        newTask = <span class="keyword">true</span>;</div><div class="line">        targetStack = computeStackFocus(r, newTask);</div><div class="line">        targetStack.moveToFront(<span class="string">"startingNewTask"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (reuseTask == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// 如果没有可以复用的就新建一个</span></div><div class="line">            r.setTask(targetStack.createTaskRecord(getNextTaskId(),</div><div class="line">                    newTaskInfo != <span class="keyword">null</span> ? newTaskInfo : r.info,</div><div class="line">                    newTaskIntent != <span class="keyword">null</span> ? newTaskIntent : intent,</div><div class="line">                    voiceSession, voiceInteractor, !launchTaskBehind <span class="comment">/* toTop */</span>),</div><div class="line">                    taskToAffiliate);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 复用task</span></div><div class="line">            r.setTask(reuseTask, taskToAffiliate);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (isLockTaskModeViolation(r.task)) &#123;</div><div class="line">            <span class="keyword">return</span> ActivityManager.START_RETURN_LOCK_TASK_MODE_VIOLATION;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!movedHome) &#123;</div><div class="line">            <span class="keyword">if</span> ((launchFlags &amp;</div><div class="line">                    (FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_TASK_ON_HOME))</div><div class="line">                    == (FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_TASK_ON_HOME)) &#123;</div><div class="line">                <span class="comment">// 把当前新启动的任务置于Home任务之上，也就是按back键从这个任务返回的时候</span></div><div class="line">                <span class="comment">// 会回到home，即使这个不是他们最后看见的activity</span></div><div class="line">                r.task.setTaskToReturnTo(HOME_ACTIVITY_TYPE);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sourceRecord != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 不用在新task中启动activity</span></div><div class="line">        <span class="keyword">final</span> TaskRecord sourceTask = sourceRecord.task;</div><div class="line">        <span class="keyword">if</span> (isLockTaskModeViolation(sourceTask)) &#123;</div><div class="line">            <span class="keyword">return</span> ActivityManager.START_RETURN_LOCK_TASK_MODE_VIOLATION;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 那么目标activity的栈也就是调用者所在的栈</span></div><div class="line">        targetStack = sourceTask.stack;</div><div class="line">        targetStack.moveToFront(<span class="string">"sourceStackToFront"</span>);</div><div class="line">        <span class="keyword">final</span> TaskRecord topTask = targetStack.topTask();</div><div class="line">        <span class="keyword">if</span> (topTask != sourceTask) &#123;</div><div class="line">            <span class="comment">// 移动task到前台</span></div><div class="line">            targetStack.moveTaskToFrontLocked(sourceTask, noAnimation, options,</div><div class="line">                    r.appTimeTracker, <span class="string">"sourceTaskToFront"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!addingToTask &amp;&amp; (launchFlags&amp;Intent.FLAG_ACTIVITY_CLEAR_TOP) != <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">// 清除activity</span></div><div class="line">            ActivityRecord top = sourceTask.performClearTaskLocked(r, launchFlags);</div><div class="line">            keepCurTransition = <span class="keyword">true</span>;</div><div class="line">            <span class="keyword">if</span> (top != <span class="keyword">null</span>) &#123;</div><div class="line">                ActivityStack.logStartActivity(EventLogTags.AM_NEW_INTENT, r, top.task);</div><div class="line">                top.deliverNewIntentLocked(callingUid, r.intent, r.launchedFromPackage);</div><div class="line">                targetStack.mLastPausedActivity = <span class="keyword">null</span>;</div><div class="line">                <span class="keyword">if</span> (doResume) &#123;</div><div class="line">                    targetStack.resumeTopActivityLocked(<span class="keyword">null</span>);</div><div class="line">                &#125;</div><div class="line">                ActivityOptions.abort(options);</div><div class="line">                <span class="keyword">return</span> ActivityManager.START_DELIVERED_TO_TOP;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!addingToTask &amp;&amp;</div><div class="line">                (launchFlags&amp;Intent.FLAG_ACTIVITY_REORDER_TO_FRONT) != <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">final</span> ActivityRecord top = sourceTask.findActivityInHistoryLocked(r);</div><div class="line">            <span class="keyword">if</span> (top != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">final</span> TaskRecord task = top.task;</div><div class="line">                task.moveActivityToFrontLocked(top);</div><div class="line">                ActivityStack.logStartActivity(EventLogTags.AM_NEW_INTENT, r, task);</div><div class="line">                top.updateOptionsLocked(options);</div><div class="line">                top.deliverNewIntentLocked(callingUid, r.intent, r.launchedFromPackage);</div><div class="line">                targetStack.mLastPausedActivity = <span class="keyword">null</span>;</div><div class="line">                <span class="keyword">if</span> (doResume) &#123;</div><div class="line">                    targetStack.resumeTopActivityLocked(<span class="keyword">null</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> ActivityManager.START_DELIVERED_TO_TOP;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        r.setTask(sourceTask, <span class="keyword">null</span>);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (inTask != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 在指定的task中启动activity</span></div><div class="line">        <span class="keyword">if</span> (isLockTaskModeViolation(inTask)) &#123;</div><div class="line">            <span class="keyword">return</span> ActivityManager.START_RETURN_LOCK_TASK_MODE_VIOLATION;</div><div class="line">        &#125;</div><div class="line">        targetStack = inTask.stack;</div><div class="line">        targetStack.moveTaskToFrontLocked(inTask, noAnimation, options, r.appTimeTracker,</div><div class="line">                <span class="string">"inTaskToFront"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// check一下是在这个task中启动一个新的activity或者是复用当前栈顶的activity</span></div><div class="line">        ActivityRecord top = inTask.getTopActivity();</div><div class="line">        <span class="keyword">if</span> (top != <span class="keyword">null</span> &amp;&amp; top.realActivity.equals(r.realActivity) &amp;&amp; top.userId == r.userId) &#123;</div><div class="line">            <span class="keyword">if</span> ((launchFlags &amp; Intent.FLAG_ACTIVITY_SINGLE_TOP) != <span class="number">0</span></div><div class="line">                    || launchSingleTop || launchSingleTask) &#123;</div><div class="line">                ActivityStack.logStartActivity(EventLogTags.AM_NEW_INTENT, top, top.task);</div><div class="line">                <span class="keyword">if</span> ((startFlags&amp;ActivityManager.START_FLAG_ONLY_IF_NEEDED) != <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">return</span> ActivityManager.START_RETURN_INTENT_TO_CALLER;</div><div class="line">                &#125;</div><div class="line">                top.deliverNewIntentLocked(callingUid, r.intent, r.launchedFromPackage);</div><div class="line">                <span class="keyword">return</span> ActivityManager.START_DELIVERED_TO_TOP;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!addingToTask) &#123;</div><div class="line">            ActivityOptions.abort(options);</div><div class="line">            <span class="keyword">return</span> ActivityManager.START_TASK_TO_FRONT;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        r.setTask(inTask, <span class="keyword">null</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 既不启动一个新的activity，也不在指定的task中启动</span></div><div class="line">        <span class="comment">// 目前不会走到这个分支中</span></div><div class="line">        targetStack = computeStackFocus(r, newTask);</div><div class="line">        targetStack.moveToFront(<span class="string">"addingToTopTask"</span>);</div><div class="line">        ActivityRecord prev = targetStack.topActivity();</div><div class="line">        r.setTask(prev != <span class="keyword">null</span> ? prev.task : targetStack.createTaskRecord(getNextTaskId(),</div><div class="line">                        r.info, intent, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">true</span>), <span class="keyword">null</span>);</div><div class="line">        mWindowManager.moveTaskToTop(r.task.taskId);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mService.grantUriPermissionFromIntentLocked(callingUid, r.packageName,</div><div class="line">            intent, r.getUriPermissionsLocked(), r.userId);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (sourceRecord != <span class="keyword">null</span> &amp;&amp; sourceRecord.isRecentsActivity()) &#123;</div><div class="line">        r.task.setTaskToReturnTo(RECENTS_ACTIVITY_TYPE);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (newTask) &#123;</div><div class="line">        EventLog.writeEvent(EventLogTags.AM_CREATE_TASK, r.userId, r.task.taskId);</div><div class="line">    &#125;</div><div class="line">    ActivityStack.logStartActivity(EventLogTags.AM_CREATE_ACTIVITY, r, r.task);</div><div class="line">    targetStack.mLastPausedActivity = <span class="keyword">null</span>;</div><div class="line">    <span class="comment">// 进行下一步流程，启动activity</span></div><div class="line">    targetStack.startActivityLocked(r, newTask, doResume, keepCurTransition, options);</div><div class="line">    <span class="keyword">if</span> (!launchTaskBehind) &#123;</div><div class="line">        <span class="comment">// 如果不是在后台启动就把焦点设置在当前activity</span></div><div class="line">        mService.setFocusedActivityLocked(r, <span class="string">"startedActivity"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ActivityManager.START_SUCCESS;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到这个方法首先是修正了一些启动参数，接着根据目标Activity是否存在分别进行了处理，然后启动activity。</p>
<h4 id="ActivityStack-startActivityLocked"><a href="#ActivityStack-startActivityLocked" class="headerlink" title="ActivityStack.startActivityLocked()"></a>ActivityStack.startActivityLocked()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">startActivityLocked</span><span class="params">(ActivityRecord r, <span class="keyword">boolean</span> newTask,</span></span></div><div class="line">        <span class="keyword">boolean</span> doResume, <span class="keyword">boolean</span> keepCurTransition, Bundle options) &#123;</div><div class="line">    TaskRecord rTask = r.task;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> taskId = rTask.taskId;</div><div class="line">    <span class="keyword">if</span> (!r.mLaunchTaskBehind &amp;&amp; (taskForIdLocked(taskId) == <span class="keyword">null</span> || newTask)) &#123;</div><div class="line">        <span class="comment">// 历史activity被清除了或者是明确要求在新的task启动activity</span></div><div class="line">        <span class="comment">// 将task插入stack栈顶</span></div><div class="line">        insertTaskAtTop(rTask, r);</div><div class="line">        <span class="comment">// 调用WindowManagerService </span></div><div class="line">        mWindowManager.moveTaskToTop(taskId);</div><div class="line">    &#125;</div><div class="line">    TaskRecord task = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">if</span> (!newTask) &#123;</div><div class="line">        <span class="comment">// 在一个已经存在的task中启动activity</span></div><div class="line">        <span class="keyword">boolean</span> startIt = <span class="keyword">true</span>;<span class="comment">// 是否需要启动activity的标志位</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> taskNdx = mTaskHistory.size() - <span class="number">1</span>; taskNdx &gt;= <span class="number">0</span>; --taskNdx) &#123;</div><div class="line">            task = mTaskHistory.get(taskNdx);</div><div class="line">            <span class="keyword">if</span> (task.getTopActivity() == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">//  该task中已经没有activity了</span></div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (task == r.task) &#123;</div><div class="line">                <span class="comment">// 匹配到目标task</span></div><div class="line">                <span class="keyword">if</span> (!startIt) &#123;</div><div class="line">                    <span class="comment">// 如果不需要启动，就先添加到栈顶</span></div><div class="line">                    task.addActivityToTop(r);</div><div class="line">                    r.putInHistory();</div><div class="line">                    <span class="comment">// 调用WindowManagerService 添加apptoken</span></div><div class="line">                    mWindowManager.addAppToken(task.mActivities.indexOf(r), r.appToken,</div><div class="line">                            r.task.taskId, mStackId, r.info.screenOrientation, r.fullscreen,</div><div class="line">                            (r.info.flags &amp; ActivityInfo.FLAG_SHOW_FOR_ALL_USERS) != <span class="number">0</span>,</div><div class="line">                            r.userId, r.info.configChanges, task.voiceSession != <span class="keyword">null</span>,</div><div class="line">                            r.mLaunchTaskBehind);</div><div class="line">                    <span class="keyword">if</span> (VALIDATE_TOKENS) &#123;</div><div class="line">                        validateAppTokensLocked();</div><div class="line">                    &#125;</div><div class="line">                    ActivityOptions.abort(options);</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (task.numFullscreen &gt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="comment">// 如果在这个任务中有全屏显示的activity，就先不显示</span></div><div class="line">                startIt = <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 走到这里已经把目标activity所在的task推到了stack的栈顶</span></div><div class="line"></div><div class="line">    <span class="comment">// 如果不需要在新的activity中启动，而且上面查到了目标task，且task在栈顶，就不需要调用onUserLeaving方法</span></div><div class="line">    <span class="keyword">if</span> (task == r.task &amp;&amp; mTaskHistory.indexOf(task) != (mTaskHistory.size() - <span class="number">1</span>)) &#123;</div><div class="line">        mStackSupervisor.mUserLeaving = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    task = r.task;</div><div class="line"></div><div class="line">    <span class="comment">// 将activity放到task的栈顶</span></div><div class="line">    task.addActivityToTop(r);</div><div class="line">    <span class="comment">// activity移动或者销毁之后调用setFrontOfTask方法</span></div><div class="line">    task.setFrontOfTask();</div><div class="line"></div><div class="line">    r.putInHistory();</div><div class="line">    <span class="keyword">if</span> (!isHomeStack() || numActivities() &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="comment">// 进入这个分支的条件当前stack不是桌面stack，也即当前是否是桌面。或者当前stack中已有task</span></div><div class="line"></div><div class="line">        <span class="comment">// 一些切换动画相关的操作</span></div><div class="line">        <span class="keyword">boolean</span> showStartingIcon = newTask;</div><div class="line">        ProcessRecord proc = r.app;</div><div class="line">        <span class="keyword">if</span> (proc == <span class="keyword">null</span>) &#123;</div><div class="line">            proc = mService.mProcessNames.get(r.processName, r.info.applicationInfo.uid);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (proc == <span class="keyword">null</span> || proc.thread == <span class="keyword">null</span>) &#123;</div><div class="line">            showStartingIcon = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> ((r.intent.getFlags() &amp; Intent.FLAG_ACTIVITY_NO_ANIMATION) != <span class="number">0</span>) &#123;</div><div class="line">            mWindowManager.prepareAppTransition(AppTransition.TRANSIT_NONE, keepCurTransition);</div><div class="line">            mNoAnimActivities.add(r);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            mWindowManager.prepareAppTransition(newTask</div><div class="line">                    ? r.mLaunchTaskBehind</div><div class="line">                            ? AppTransition.TRANSIT_TASK_OPEN_BEHIND</div><div class="line">                            : AppTransition.TRANSIT_TASK_OPEN</div><div class="line">                    : AppTransition.TRANSIT_ACTIVITY_OPEN, keepCurTransition);</div><div class="line">            mNoAnimActivities.remove(r);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 调用WindowManagerService 添加apptoken</span></div><div class="line">        mWindowManager.addAppToken(task.mActivities.indexOf(r),</div><div class="line">                r.appToken, r.task.taskId, mStackId, r.info.screenOrientation, r.fullscreen,</div><div class="line">                (r.info.flags &amp; ActivityInfo.FLAG_SHOW_FOR_ALL_USERS) != <span class="number">0</span>, r.userId,</div><div class="line">                r.info.configChanges, task.voiceSession != <span class="keyword">null</span>, r.mLaunchTaskBehind);</div><div class="line">        <span class="keyword">boolean</span> doShow = <span class="keyword">true</span>;</div><div class="line">        <span class="comment">// 一些显示StartingWindow的操作</span></div><div class="line">        <span class="keyword">if</span> (newTask) &#123;</div><div class="line">            <span class="keyword">if</span> ((r.intent.getFlags() &amp; Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED) != <span class="number">0</span>) &#123;</div><div class="line">                resetTaskIfNeededLocked(r, r);</div><div class="line">                doShow = topRunningNonDelayedActivityLocked(<span class="keyword">null</span>) == r;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options != <span class="keyword">null</span> &amp;&amp; <span class="keyword">new</span> ActivityOptions(options).getAnimationType()</div><div class="line">                == ActivityOptions.ANIM_SCENE_TRANSITION) &#123;</div><div class="line">            doShow = <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (r.mLaunchTaskBehind) &#123;</div><div class="line">            mWindowManager.setAppVisibility(r.appToken, <span class="keyword">true</span>);</div><div class="line">            ensureActivitiesVisibleLocked(<span class="keyword">null</span>, <span class="number">0</span>);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (SHOW_APP_STARTING_PREVIEW &amp;&amp; doShow) &#123;</div><div class="line">            ActivityRecord prev = mResumedActivity;</div><div class="line">            <span class="comment">// prev 表示当前在resumed状态的activity</span></div><div class="line">            <span class="keyword">if</span> (prev != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">// 如果它和目标activity不在同一个task</span></div><div class="line">                <span class="keyword">if</span> (prev.task != r.task) &#123;</div><div class="line">                    prev = <span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// 在同一个task且已经显示</span></div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (prev.nowVisible) &#123;</div><div class="line">                    prev = <span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            mWindowManager.setAppStartingWindow(</div><div class="line">                    r.appToken, r.packageName, r.theme,</div><div class="line">                    mService.compatibilityInfoForPackageLocked(</div><div class="line">                            r.info.applicationInfo), r.nonLocalizedLabel,</div><div class="line">                    r.labelRes, r.icon, r.logo, r.windowFlags,</div><div class="line">                    prev != <span class="keyword">null</span> ? prev.appToken : <span class="keyword">null</span>, showStartingIcon);</div><div class="line">            r.mStartingWindowShown = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 进入这个分支条件：目标stack中还没有任何activity，那就不要做任何动画</span></div><div class="line">        <span class="comment">// 调用addAppToken绑定窗口</span></div><div class="line">        mWindowManager.addAppToken(task.mActivities.indexOf(r), r.appToken,</div><div class="line">                r.task.taskId, mStackId, r.info.screenOrientation, r.fullscreen,</div><div class="line">                (r.info.flags &amp; ActivityInfo.FLAG_SHOW_FOR_ALL_USERS) != <span class="number">0</span>, r.userId,</div><div class="line">                r.info.configChanges, task.voiceSession != <span class="keyword">null</span>, r.mLaunchTaskBehind);</div><div class="line">        ActivityOptions.abort(options);</div><div class="line">        options = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (VALIDATE_TOKENS) &#123;</div><div class="line">        validateAppTokensLocked();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 显示activity</span></div><div class="line">    <span class="keyword">if</span> (doResume) &#123;</div><div class="line">        mStackSupervisor.resumeTopActivitiesLocked(<span class="keyword">this</span>, r, options);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="ActivityStackSupervisor-resumeTopActivitiesLocked"><a href="#ActivityStackSupervisor-resumeTopActivitiesLocked" class="headerlink" title="ActivityStackSupervisor.resumeTopActivitiesLocked()"></a>ActivityStackSupervisor.resumeTopActivitiesLocked()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">resumeTopActivitiesLocked</span><span class="params">(ActivityStack targetStack, ActivityRecord target,</span></span></div><div class="line">        Bundle targetOptions) &#123;</div><div class="line">    <span class="keyword">if</span> (targetStack == <span class="keyword">null</span>) &#123;</div><div class="line">        targetStack = mFocusedStack;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// Do targetStack first.</span></div><div class="line">    <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">if</span> (isFrontStack(targetStack)) &#123;</div><div class="line">        result = targetStack.resumeTopActivityLocked(target, targetOptions);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 遍历所有显示设备上的ActivityStack</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> displayNdx = mActivityDisplays.size() - <span class="number">1</span>; displayNdx &gt;= <span class="number">0</span>; --displayNdx) &#123;</div><div class="line">        <span class="keyword">final</span> ArrayList&lt;ActivityStack&gt; stacks = mActivityDisplays.valueAt(displayNdx).mStacks;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> stackNdx = stacks.size() - <span class="number">1</span>; stackNdx &gt;= <span class="number">0</span>; --stackNdx) &#123;</div><div class="line">            <span class="keyword">final</span> ActivityStack stack = stacks.get(stackNdx);</div><div class="line">            <span class="keyword">if</span> (stack == targetStack) &#123;</div><div class="line">                <span class="comment">// 上面已经处理过</span></div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (isFrontStack(stack)) &#123;</div><div class="line">                <span class="comment">// 由其他显示设备进行处理</span></div><div class="line">                stack.resumeTopActivityLocked(<span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="ActivityStack-resumeTopActivityLocked"><a href="#ActivityStack-resumeTopActivityLocked" class="headerlink" title="ActivityStack.resumeTopActivityLocked()"></a>ActivityStack.resumeTopActivityLocked()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">resumeTopActivityLocked</span><span class="params">(ActivityRecord prev, Bundle options)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mStackSupervisor.inResumeTopActivity) &#123;</div><div class="line">        <span class="comment">// Don't even start recursing.</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">// 防止递归调用</span></div><div class="line">        mStackSupervisor.inResumeTopActivity = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">if</span> (mService.mLockScreenShown == ActivityManagerService.LOCK_SCREEN_LEAVING) &#123;</div><div class="line">            mService.mLockScreenShown = ActivityManagerService.LOCK_SCREEN_HIDDEN;</div><div class="line">            mService.updateSleepIfNeededLocked();</div><div class="line">        &#125;</div><div class="line">        result = resumeTopActivityInnerLocked(prev, options);</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        mStackSupervisor.inResumeTopActivity = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="ActivityStack-resumeTopActivityInnerLocked"><a href="#ActivityStack-resumeTopActivityInnerLocked" class="headerlink" title="ActivityStack.resumeTopActivityInnerLocked()"></a>ActivityStack.resumeTopActivityInnerLocked()</h4><p>这里的参数 <code>prev</code> 表示待启动的 <code>ActivityRecord</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">resumeTopActivityInnerLocked</span><span class="params">(ActivityRecord prev, Bundle options)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!mService.mBooting &amp;&amp; !mService.mBooted) &#123;</div><div class="line">        <span class="comment">// 如果系统还没有启动结束，这里结束启动流程</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ActivityRecord parent = mActivityContainer.mParentActivity;</div><div class="line">    <span class="keyword">if</span> ((parent != <span class="keyword">null</span> &amp;&amp; parent.state != ActivityState.RESUMED) ||</div><div class="line">            !mActivityContainer.isAttachedLocked()) &#123;</div><div class="line">        <span class="comment">// 如果存在ParentActivity且ParentActivity还没有resume，那么结束启动流程</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 在当前activity下面的activity如果有处于INITIALIZING而且正在做窗口动画</span></div><div class="line">    <span class="comment">// 那么就取消这些窗口动画</span></div><div class="line">    cancelInitializingActivities();</div><div class="line"></div><div class="line">    <span class="comment">// 找到当前栈顶正在运行的activity，一般表示将要显示的activity</span></div><div class="line">    <span class="keyword">final</span> ActivityRecord next = topRunningActivityLocked(<span class="keyword">null</span>);</div><div class="line"></div><div class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> userLeaving = mStackSupervisor.mUserLeaving;</div><div class="line">    mStackSupervisor.mUserLeaving = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> TaskRecord prevTask = prev != <span class="keyword">null</span> ? prev.task : <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 没有将要显示的activity</span></div><div class="line">        <span class="keyword">final</span> String reason = <span class="string">"noMoreActivities"</span>;</div><div class="line">        <span class="keyword">if</span> (!mFullscreen) &#123;</div><div class="line">            <span class="keyword">final</span> ActivityStack stack = getNextVisibleStackLocked();</div><div class="line">            <span class="keyword">if</span> (adjustFocusToNextVisibleStackLocked(stack, reason)) &#123;</div><div class="line">                <span class="keyword">return</span> mStackSupervisor.resumeTopActivitiesLocked(stack, prev, <span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 显示桌面，结束启动流程</span></div><div class="line">        ActivityOptions.abort(options);</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> returnTaskType = prevTask == <span class="keyword">null</span> || !prevTask.isOverHomeStack() ?</div><div class="line">                HOME_ACTIVITY_TYPE : prevTask.getTaskToReturnTo();</div><div class="line">        <span class="keyword">return</span> isOnHomeDisplay() &amp;&amp;</div><div class="line">                mStackSupervisor.resumeHomeStackTask(returnTaskType, prev, reason);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    next.delayedResume = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (mResumedActivity == next &amp;&amp; next.state == ActivityState.RESUMED &amp;&amp;</div><div class="line">                mStackSupervisor.allResumedActivitiesComplete()) &#123;</div><div class="line">        <span class="comment">// 当前正在显示的activity就是下一个将要显示的activity，那么结束启动流程</span></div><div class="line">        mWindowManager.executeAppTransition();</div><div class="line">        mNoAnimActivities.clear();</div><div class="line">        ActivityOptions.abort(options);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> TaskRecord nextTask = next.task;</div><div class="line">    <span class="keyword">if</span> (prevTask != <span class="keyword">null</span> &amp;&amp; prevTask.stack == <span class="keyword">this</span> &amp;&amp;</div><div class="line">            prevTask.isOverHomeStack() &amp;&amp; prev.finishing &amp;&amp; prev.frontOfTask) &#123;</div><div class="line">        <span class="keyword">if</span> (prevTask == nextTask) &#123;</div><div class="line">            prevTask.setFrontOfTask();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (prevTask != topTask()) &#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> taskNdx = mTaskHistory.indexOf(prevTask) + <span class="number">1</span>;</div><div class="line">            mTaskHistory.get(taskNdx).setTaskToReturnTo(HOME_ACTIVITY_TYPE);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isOnHomeDisplay()) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isHomeStack())&#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> returnTaskType = prevTask == <span class="keyword">null</span> || !prevTask.isOverHomeStack() ?</div><div class="line">                    HOME_ACTIVITY_TYPE : prevTask.getTaskToReturnTo();</div><div class="line">            <span class="keyword">return</span> isOnHomeDisplay() &amp;&amp;</div><div class="line">                    mStackSupervisor.resumeHomeStackTask(returnTaskType, prev, <span class="string">"prevFinished"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 如果系统在休眠状态且栈顶activity在pause状态，结束启动流程</span></div><div class="line">    <span class="keyword">if</span> (mService.isSleepingOrShuttingDown()</div><div class="line">            &amp;&amp; mLastPausedActivity == next</div><div class="line">            &amp;&amp; mStackSupervisor.allPausedActivitiesComplete()) &#123;</div><div class="line">        mWindowManager.executeAppTransition();</div><div class="line">        mNoAnimActivities.clear();</div><div class="line">        ActivityOptions.abort(options);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 找不到待启动activity的user，结束启动流程</span></div><div class="line">    <span class="keyword">if</span> (mService.mStartedUsers.get(next.userId) == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 从Stopping状态进入休眠状态和待显示状态列表中删除待启动activity</span></div><div class="line">    <span class="comment">// 待启动activity有可能处于这些数组中</span></div><div class="line">    mStackSupervisor.mStoppingActivities.remove(next);</div><div class="line">    mStackSupervisor.mGoingToSleepActivities.remove(next);</div><div class="line">    next.sleeping = <span class="keyword">false</span>;</div><div class="line">    mStackSupervisor.mWaitingVisibleActivities.remove(next);</div><div class="line"></div><div class="line">    <span class="comment">// 如果当前正在pause一些activity，那么就要把这些工作做完</span></div><div class="line">    <span class="comment">// 这种情况下也会结束启动流程</span></div><div class="line">    <span class="keyword">if</span> (!mStackSupervisor.allPausedActivitiesComplete()) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>接下来就开始进行一些activity的切换工作，首先要pause当前activity，将待显示的activity进行resume。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">// 设置WakeLock，保证在启动过程中系统不会休眠</span></div><div class="line">    mStackSupervisor.setLaunchSource(next.info.applicationInfo.uid);</div><div class="line"></div><div class="line">    <span class="comment">// 开始把当前activity进入pause状态，这样才能把待显示activity进入resume状态</span></div><div class="line">    <span class="comment">// 如果启动参数里面有FLAG_RESUME_WHILE_PAUSING，表示当前的activity正在pause时，可以执行待显示</span></div><div class="line">    <span class="comment">// activity的resume动作</span></div><div class="line">    <span class="keyword">boolean</span> dontWaitForPause = (next.info.flags&amp;ActivityInfo.FLAG_RESUME_WHILE_PAUSING) != <span class="number">0</span>;</div><div class="line">    <span class="comment">// 开始pause stack里面的activity</span></div><div class="line">    <span class="keyword">boolean</span> pausing = mStackSupervisor.pauseBackStacks(userLeaving, <span class="keyword">true</span>, dontWaitForPause);</div><div class="line">    <span class="keyword">if</span> (mResumedActivity != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 把当前正在显示的activity进入pasue状态</span></div><div class="line">        pausing |= startPausingLocked(userLeaving, <span class="keyword">false</span>, <span class="keyword">true</span>, dontWaitForPause);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (pausing) &#123;</div><div class="line">        <span class="comment">// pausing为true表示当前有正在pause的activity，那么这里先返回，等完全pause再执行后面的操作</span></div><div class="line">        <span class="comment">// 一般第一次会走这里，但是在startPausingLocked中发送的消息执行以后还会再次执行这个函数</span></div><div class="line">        <span class="comment">// ActivityStack.activityPausedLocked-&gt;ActivityStack.completePauseLocked-&gt;</span></div><div class="line">        <span class="comment">// ActivityStackSupervisor.resumeTopActivitiesLocked-&gt;ActivityStack.resumeTopActivityLocked()</span></div><div class="line">        <span class="keyword">if</span> (next.app != <span class="keyword">null</span> &amp;&amp; next.app.thread != <span class="keyword">null</span>) &#123;</div><div class="line">            mService.updateLruProcessLocked(next.app, <span class="keyword">true</span>, <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (mService.isSleeping() &amp;&amp; mLastNoHistoryActivity != <span class="keyword">null</span> &amp;&amp;</div><div class="line">            !mLastNoHistoryActivity.finishing) &#123;</div><div class="line">        requestFinishActivityLocked(mLastNoHistoryActivity.appToken, Activity.RESULT_CANCELED,</div><div class="line">                <span class="keyword">null</span>, <span class="string">"resume-no-history"</span>, <span class="keyword">false</span>);</div><div class="line">        mLastNoHistoryActivity = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (prev != <span class="keyword">null</span> &amp;&amp; prev != next) &#123;</div><div class="line">        <span class="keyword">if</span> (!mStackSupervisor.mWaitingVisibleActivities.contains(prev)</div><div class="line">                &amp;&amp; next != <span class="keyword">null</span> &amp;&amp; !next.nowVisible) &#123;</div><div class="line">            mStackSupervisor.mWaitingVisibleActivities.add(prev);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (prev.finishing) &#123;</div><div class="line">                mWindowManager.setAppVisibility(prev.appToken, <span class="keyword">false</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        AppGlobals.getPackageManager().setPackageStoppedState(</div><div class="line">                next.packageName, <span class="keyword">false</span>, next.userId); <span class="comment">/* <span class="doctag">TODO:</span> Verify if correct userid */</span></div><div class="line">    &#125; <span class="keyword">catch</span> (RemoteException e1) &#123;</div><div class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;&#125;</div><div class="line"></div><div class="line">    <span class="keyword">boolean</span> anim = <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">if</span> (prev != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (prev.finishing) &#123;</div><div class="line">            <span class="keyword">if</span> (mNoAnimActivities.contains(prev)) &#123;</div><div class="line">                anim = <span class="keyword">false</span>;</div><div class="line">                mWindowManager.prepareAppTransition(AppTransition.TRANSIT_NONE, <span class="keyword">false</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                mWindowManager.prepareAppTransition(prev.task == next.task</div><div class="line">                        ? AppTransition.TRANSIT_ACTIVITY_CLOSE</div><div class="line">                        : AppTransition.TRANSIT_TASK_CLOSE, <span class="keyword">false</span>);</div><div class="line">            &#125;</div><div class="line">            mWindowManager.setAppWillBeHidden(prev.appToken);</div><div class="line">            mWindowManager.setAppVisibility(prev.appToken, <span class="keyword">false</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (DEBUG_TRANSITION) Slog.v(TAG_TRANSITION,</div><div class="line">                    <span class="string">"Prepare open transition: prev="</span> + prev);</div><div class="line">            <span class="keyword">if</span> (mNoAnimActivities.contains(next)) &#123;</div><div class="line">                anim = <span class="keyword">false</span>;</div><div class="line">                mWindowManager.prepareAppTransition(AppTransition.TRANSIT_NONE, <span class="keyword">false</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                mWindowManager.prepareAppTransition(prev.task == next.task</div><div class="line">                        ? AppTransition.TRANSIT_ACTIVITY_OPEN</div><div class="line">                        : next.mLaunchTaskBehind</div><div class="line">                                ? AppTransition.TRANSIT_TASK_OPEN_BEHIND</div><div class="line">                                : AppTransition.TRANSIT_TASK_OPEN, <span class="keyword">false</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">false</span>) &#123;</div><div class="line">            mWindowManager.setAppWillBeHidden(prev.appToken);</div><div class="line">            mWindowManager.setAppVisibility(prev.appToken, <span class="keyword">false</span>);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (mNoAnimActivities.contains(next)) &#123;</div><div class="line">            anim = <span class="keyword">false</span>;</div><div class="line">            mWindowManager.prepareAppTransition(AppTransition.TRANSIT_NONE, <span class="keyword">false</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            mWindowManager.prepareAppTransition(AppTransition.TRANSIT_ACTIVITY_OPEN, <span class="keyword">false</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Bundle resumeAnimOptions = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">if</span> (anim) &#123;</div><div class="line">        ActivityOptions opts = next.getOptionsForTargetActivityLocked();</div><div class="line">        <span class="keyword">if</span> (opts != <span class="keyword">null</span>) &#123;</div><div class="line">            resumeAnimOptions = opts.toBundle();</div><div class="line">        &#125;</div><div class="line">        next.applyOptionsLocked();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        next.clearOptionsLocked();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ActivityStack lastStack = mStackSupervisor.getLastStack();</div><div class="line">    <span class="keyword">if</span> (next.app != <span class="keyword">null</span> &amp;&amp; next.app.thread != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 走到这个分支说明待启动activity所在的进程已经存在了？</span></div><div class="line">        mWindowManager.setAppVisibility(next.appToken, <span class="keyword">true</span>);</div><div class="line"></div><div class="line">        <span class="comment">// schedule launch ticks to collect information about slow apps.</span></div><div class="line">        next.startLaunchTickingLocked();</div><div class="line"></div><div class="line">        ActivityRecord lastResumedActivity =</div><div class="line">                lastStack == <span class="keyword">null</span> ? <span class="keyword">null</span> :lastStack.mResumedActivity;</div><div class="line">        ActivityState lastState = next.state;</div><div class="line"></div><div class="line">        mService.updateCpuStats();</div><div class="line">        <span class="comment">// 待启动activity状态已经是RESUMED</span></div><div class="line">        next.state = ActivityState.RESUMED;</div><div class="line">        mResumedActivity = next;</div><div class="line">        next.task.touchActiveTime();</div><div class="line">        mRecentTasks.addLocked(next.task);</div><div class="line">        mService.updateLruProcessLocked(next.app, <span class="keyword">true</span>, <span class="keyword">null</span>);</div><div class="line">        updateLRUListLocked(next);</div><div class="line">        mService.updateOomAdjLocked();</div><div class="line"></div><div class="line">        <span class="keyword">boolean</span> notUpdated = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">if</span> (mStackSupervisor.isFrontStack(<span class="keyword">this</span>)) &#123;</div><div class="line">            Configuration config = mWindowManager.updateOrientationFromAppTokens(</div><div class="line">                    mService.mConfiguration,</div><div class="line">                    next.mayFreezeScreenLocked(next.app) ? next.appToken : <span class="keyword">null</span>);</div><div class="line">            <span class="keyword">if</span> (config != <span class="keyword">null</span>) &#123;</div><div class="line">                next.frozenBeforeDestroy = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            notUpdated = !mService.updateConfigurationLocked(config, next, <span class="keyword">false</span>, <span class="keyword">false</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (notUpdated) &#123;</div><div class="line">            ActivityRecord nextNext = topRunningActivityLocked(<span class="keyword">null</span>);</div><div class="line">            <span class="keyword">if</span> (nextNext != next) &#123;</div><div class="line">                mStackSupervisor.scheduleResumeTopActivities();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (mStackSupervisor.reportResumedActivityLocked(next)) &#123;</div><div class="line">                mNoAnimActivities.clear();</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ArrayList&lt;ResultInfo&gt; a = next.results;</div><div class="line">            <span class="keyword">if</span> (a != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> N = a.size();</div><div class="line">                <span class="keyword">if</span> (!next.finishing &amp;&amp; N &gt; <span class="number">0</span>) &#123;</div><div class="line">                    next.app.thread.scheduleSendResult(next.appToken, a);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (next.newIntents != <span class="keyword">null</span>) &#123;</div><div class="line">                next.app.thread.scheduleNewIntent(next.newIntents, next.appToken);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            EventLog.writeEvent(EventLogTags.AM_RESUME_ACTIVITY, next.userId,</div><div class="line">                    System.identityHashCode(next), next.task.taskId, next.shortComponentName);</div><div class="line"></div><div class="line">            next.sleeping = <span class="keyword">false</span>;</div><div class="line">            mService.showAskCompatModeDialogLocked(next);</div><div class="line">            next.app.pendingUiClean = <span class="keyword">true</span>;</div><div class="line">            next.app.forceProcessStateUpTo(mService.mTopProcessState);</div><div class="line">            next.clearOptionsLocked();</div><div class="line">            next.app.thread.scheduleResumeActivity(next.appToken, next.app.repProcState,</div><div class="line">                    mService.isNextTransitionForward(), resumeAnimOptions);</div><div class="line"></div><div class="line">            mStackSupervisor.checkReadyForSleepLocked();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="comment">// Whoops, need to restart this activity!</span></div><div class="line">            next.state = lastState;</div><div class="line">            <span class="keyword">if</span> (lastStack != <span class="keyword">null</span>) &#123;</div><div class="line">                lastStack.mResumedActivity = lastResumedActivity;</div><div class="line">            &#125;</div><div class="line">            Slog.i(TAG, <span class="string">"Restarting because process died: "</span> + next);</div><div class="line">            <span class="keyword">if</span> (!next.hasBeenLaunched) &#123;</div><div class="line">                next.hasBeenLaunched = <span class="keyword">true</span>;</div><div class="line">            &#125; <span class="keyword">else</span>  <span class="keyword">if</span> (SHOW_APP_STARTING_PREVIEW &amp;&amp; lastStack != <span class="keyword">null</span> &amp;&amp;</div><div class="line">                    mStackSupervisor.isFrontStack(lastStack)) &#123;</div><div class="line">                mWindowManager.setAppStartingWindow(</div><div class="line">                        next.appToken, next.packageName, next.theme,</div><div class="line">                        mService.compatibilityInfoForPackageLocked(next.info.applicationInfo),</div><div class="line">                        next.nonLocalizedLabel, next.labelRes, next.icon, next.logo,</div><div class="line">                        next.windowFlags, <span class="keyword">null</span>, <span class="keyword">true</span>);</div><div class="line">            &#125;</div><div class="line">            mStackSupervisor.startSpecificActivityLocked(next, <span class="keyword">true</span>, <span class="keyword">false</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            next.visible = <span class="keyword">true</span>;</div><div class="line">            completeResumeLocked(next);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            requestFinishActivityLocked(next.appToken, Activity.RESULT_CANCELED, <span class="keyword">null</span>,</div><div class="line">                    <span class="string">"resume-exception"</span>, <span class="keyword">true</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        next.stopped = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 走到这个分支说明待启动activity所在的进程没有指定</span></div><div class="line">        <span class="keyword">if</span> (!next.hasBeenLaunched) &#123;</div><div class="line">            next.hasBeenLaunched = <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (SHOW_APP_STARTING_PREVIEW) &#123;</div><div class="line">                mWindowManager.setAppStartingWindow(</div><div class="line">                        next.appToken, next.packageName, next.theme,</div><div class="line">                        mService.compatibilityInfoForPackageLocked(</div><div class="line">                                next.info.applicationInfo),</div><div class="line">                        next.nonLocalizedLabel,</div><div class="line">                        next.labelRes, next.icon, next.logo, next.windowFlags,</div><div class="line">                        <span class="keyword">null</span>, <span class="keyword">true</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        mStackSupervisor.startSpecificActivityLocked(next, <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此方法中把待启动activity推到栈顶，并把activity的状态置为resume状态。</p>
<h4 id="ActivityStackSupervisor-startSpecificActivityLocked"><a href="#ActivityStackSupervisor-startSpecificActivityLocked" class="headerlink" title="ActivityStackSupervisor.startSpecificActivityLocked()"></a>ActivityStackSupervisor.startSpecificActivityLocked()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">startSpecificActivityLocked</span><span class="params">(ActivityRecord r,</span></span></div><div class="line">        <span class="keyword">boolean</span> andResume, <span class="keyword">boolean</span> checkConfig) &#123;</div><div class="line">    <span class="comment">// 这里获取一下activity所运行的进程</span></div><div class="line">    ProcessRecord app = mService.getProcessRecordLocked(r.processName,</div><div class="line">            r.info.applicationInfo.uid, <span class="keyword">true</span>);</div><div class="line"></div><div class="line">    r.task.stack.setLaunchTime(r);</div><div class="line">    <span class="comment">// 这里会走两个分支，一个是进程已经存在，一个是不存在</span></div><div class="line">    <span class="comment">// 已经存在进程的case下面走的流程已经包含在创建进程case的流程里面</span></div><div class="line">    <span class="comment">// 这里就不再单独介绍</span></div><div class="line">    <span class="keyword">if</span> (app != <span class="keyword">null</span> &amp;&amp; app.thread != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> ((r.info.flags&amp;ActivityInfo.FLAG_MULTIPROCESS) == <span class="number">0</span></div><div class="line">                    || !<span class="string">"android"</span>.equals(r.info.packageName)) &#123;</div><div class="line">                app.addPackage(r.info.packageName, r.info.applicationInfo.versionCode,</div><div class="line">                        mService.mProcessStats);</div><div class="line">            &#125;</div><div class="line">            realStartActivityLocked(r, app, andResume, checkConfig);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;&#125;</div><div class="line"></div><div class="line">        <span class="comment">// 如果抛出异常，那么重启发起启动activity进程</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">//启动一个新进程</span></div><div class="line">    mService.startProcessLocked(r.processName, r.info.applicationInfo, <span class="keyword">true</span>, <span class="number">0</span>,</div><div class="line">            <span class="string">"activity"</span>, r.intent.getComponent(), <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="AMS中启动新进程"><a href="#AMS中启动新进程" class="headerlink" title="AMS中启动新进程"></a>AMS中启动新进程</h3><h4 id="ActivityManagerService-startProcessLocked"><a href="#ActivityManagerService-startProcessLocked" class="headerlink" title="ActivityManagerService.startProcessLocked()"></a>ActivityManagerService.startProcessLocked()</h4><p>这里先介绍一些什么是bad进程：如果一个进程在一分钟内crash两次，那么就会被认为是bad进程而被添加到<code>mBadProcesses</code>列表，<code>BadProcessInfo</code>里面保存了添加的时间。如果如果用户重新启动进程，那么就把该进程重列表中删除，直到下次crash时。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> ProcessRecord <span class="title">startProcessLocked</span><span class="params">(String processName, ApplicationInfo info,</span></span></div><div class="line">        <span class="keyword">boolean</span> knownToBeDead, <span class="keyword">int</span> intentFlags, String hostingType, ComponentName hostingName,</div><div class="line">        <span class="keyword">boolean</span> allowWhileBooting, <span class="keyword">boolean</span> isolated, <span class="keyword">int</span> isolatedUid, <span class="keyword">boolean</span> keepIfLarge,</div><div class="line">        String abiOverride, String entryPoint, String[] entryPointArgs, Runnable crashHandler) &#123;</div><div class="line">    <span class="keyword">long</span> startTime = SystemClock.elapsedRealtime();</div><div class="line">    ProcessRecord app;</div><div class="line">    <span class="comment">// 代表是否是完全隔绝的沙箱进程，完全隔绝的沙箱进程每次启动都是独立的，不能复用已有的进程信息。</span></div><div class="line">    <span class="keyword">if</span> (!isolated) &#123;</div><div class="line">        app = getProcessRecordLocked(processName, info.uid, keepIfLarge);</div><div class="line">        checkTime(startTime, <span class="string">"startProcess: after getProcessRecord"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> ((intentFlags &amp; Intent.FLAG_FROM_BACKGROUND) != <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">// 如果是后台进程要判断一下是否是bad进程，如果是bad进程，直接退出</span></div><div class="line">            <span class="keyword">if</span> (mBadProcesses.get(info.processName, info.uid) != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 如果是前台启动，清除bad进程标志</span></div><div class="line">            mProcessCrashTimes.remove(info.processName, info.uid);</div><div class="line">            <span class="keyword">if</span> (mBadProcesses.get(info.processName, info.uid) != <span class="keyword">null</span>) &#123;</div><div class="line">                EventLog.writeEvent(EventLogTags.AM_PROC_GOOD,</div><div class="line">                        UserHandle.getUserId(info.uid), info.uid,</div><div class="line">                        info.processName);</div><div class="line">                mBadProcesses.remove(info.processName, info.uid);</div><div class="line">                <span class="keyword">if</span> (app != <span class="keyword">null</span>) &#123;</div><div class="line">                    app.bad = <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 如果是完全隔绝的沙箱进程，那么就不能复用一些已经存在的进程的信息。</span></div><div class="line">        app = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">synchronized</span>(ActivityManagerService.<span class="keyword">this</span>) &#123;</div><div class="line">        nativeMigrateToBoost();</div><div class="line">        mIsBoosted = <span class="keyword">true</span>;</div><div class="line">        mBoostStartTime = SystemClock.uptimeMillis();</div><div class="line">        Message msg = mHandler.obtainMessage(APP_BOOST_DEACTIVATE_MSG);</div><div class="line">        mHandler.sendMessageDelayed(msg, APP_BOOST_MESSAGE_DELAY);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// ProcessRecord已经存在，且已经分配了pid</span></div><div class="line">    <span class="keyword">if</span> (app != <span class="keyword">null</span> &amp;&amp; app.pid &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (!knownToBeDead || app.thread == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// 调用者不认为该进程已死亡或者没有thread对象attached到该进程.则不应该清理该进程</span></div><div class="line">            app.addPackage(info.packageName, info.versionCode, mProcessStats);</div><div class="line">            checkTime(startTime, <span class="string">"startProcess: done, added package to proc"</span>);</div><div class="line">            <span class="keyword">return</span> app;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 有thread实例attach到该进程，那么杀死并清理该进程</span></div><div class="line">        checkTime(startTime, <span class="string">"startProcess: bad proc running, killing"</span>);</div><div class="line">        killProcessGroup(app.info.uid, app.pid);</div><div class="line">        handleAppDiedLocked(app, <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">        checkTime(startTime, <span class="string">"startProcess: done killing old proc"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    String hostingNameStr = hostingName != <span class="keyword">null</span></div><div class="line">            ? hostingName.flattenToShortString() : <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (app == <span class="keyword">null</span>) &#123;</div><div class="line">        checkTime(startTime, <span class="string">"startProcess: creating new process record"</span>);</div><div class="line">        <span class="comment">// 创建新的ProcessRecord对象</span></div><div class="line">        app = newProcessRecordLocked(info, processName, isolated, isolatedUid);</div><div class="line">        <span class="keyword">if</span> (app == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// 创建失败</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        app.crashHandler = crashHandler;</div><div class="line">        checkTime(startTime, <span class="string">"startProcess: done creating new process record"</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//如果这是进程中新package，则添加到列表</span></div><div class="line">        app.addPackage(info.packageName, info.versionCode, mProcessStats);</div><div class="line">        checkTime(startTime, <span class="string">"startProcess: added package to existing proc"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//当系统未准备完毕，则将当前进程加入到mProcessesOnHold</span></div><div class="line">    <span class="keyword">if</span> (!mProcessesReady</div><div class="line">            &amp;&amp; !isAllowedWhileBooting(info)</div><div class="line">            &amp;&amp; !allowWhileBooting) &#123;</div><div class="line">        <span class="keyword">if</span> (!mProcessesOnHold.contains(app)) &#123;</div><div class="line">            mProcessesOnHold.add(app);</div><div class="line">        &#125;</div><div class="line">        checkTime(startTime, <span class="string">"startProcess: returning with proc on hold"</span>);</div><div class="line">        <span class="keyword">return</span> app;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    checkTime(startTime, <span class="string">"startProcess: stepping in to startProcess"</span>);</div><div class="line">    <span class="comment">// 启动进程</span></div><div class="line">    startProcessLocked(</div><div class="line">            app, hostingType, hostingNameStr, abiOverride, entryPoint, entryPointArgs);</div><div class="line">    checkTime(startTime, <span class="string">"startProcess: done starting proc!"</span>);</div><div class="line">    <span class="keyword">return</span> (app.pid != <span class="number">0</span>) ? app : <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="ActivityManagerService-newProcessRecordLocked"><a href="#ActivityManagerService-newProcessRecordLocked" class="headerlink" title="ActivityManagerService.newProcessRecordLocked()"></a>ActivityManagerService.newProcessRecordLocked()</h4><p>创建新的ProcessRecord对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> ProcessRecord <span class="title">newProcessRecordLocked</span><span class="params">(ApplicationInfo info, String customProcess,</span></span></div><div class="line">        <span class="keyword">boolean</span> isolated, <span class="keyword">int</span> isolatedUid) &#123;</div><div class="line">    String proc = customProcess != <span class="keyword">null</span> ? customProcess : info.processName;</div><div class="line">    <span class="comment">// 电量统计</span></div><div class="line">    BatteryStatsImpl stats = mBatteryStatsService.getActiveStatistics();</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> userId = UserHandle.getUserId(info.uid);</div><div class="line">    <span class="keyword">int</span> uid = info.uid;</div><div class="line">    <span class="keyword">if</span> (isolated) &#123;</div><div class="line">        <span class="comment">// 隔离进程相关</span></div><div class="line">        ......</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">final</span> ProcessRecord r = <span class="keyword">new</span> ProcessRecord(stats, info, proc, uid);</div><div class="line">    <span class="keyword">if</span> (!mBooted &amp;&amp; !mBooting</div><div class="line">            &amp;&amp; userId == UserHandle.USER_OWNER</div><div class="line">            &amp;&amp; (info.flags &amp; PERSISTENT_MASK) == PERSISTENT_MASK) &#123;</div><div class="line">        r.persistent = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    addProcessNameLocked(r);</div><div class="line">    <span class="keyword">return</span> r;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="ActivityManagerService-startProcessLocked-1"><a href="#ActivityManagerService-startProcessLocked-1" class="headerlink" title="ActivityManagerService.startProcessLocked()"></a>ActivityManagerService.startProcessLocked()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">startProcessLocked</span><span class="params">(ProcessRecord app, String hostingType,</span></span></div><div class="line">        String hostingNameStr, String abiOverride, String entryPoint, String[] entryPointArgs) &#123;</div><div class="line">    <span class="keyword">long</span> startTime = SystemClock.elapsedRealtime();</div><div class="line">    <span class="keyword">if</span> (app.pid &gt; <span class="number">0</span> &amp;&amp; app.pid != MY_PID) &#123;</div><div class="line">        checkTime(startTime, <span class="string">"startProcess: removing from pids map"</span>);</div><div class="line">        <span class="keyword">synchronized</span> (mPidsSelfLocked) &#123;</div><div class="line">            mPidsSelfLocked.remove(app.pid);</div><div class="line">            mHandler.removeMessages(PROC_START_TIMEOUT_MSG, app);</div><div class="line">        &#125;</div><div class="line">        checkTime(startTime, <span class="string">"startProcess: done removing from pids map"</span>);</div><div class="line">        app.setPid(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 从HoldProcesses列表中移除该ProcessRecord</span></div><div class="line">    mProcessesOnHold.remove(app);</div><div class="line"></div><div class="line">    checkTime(startTime, <span class="string">"startProcess: starting to update cpu stats"</span>);</div><div class="line">    updateCpuStats();</div><div class="line">    checkTime(startTime, <span class="string">"startProcess: done updating cpu stats"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (AppGlobals.getPackageManager().isPackageFrozen(app.info.packageName)) &#123;</div><div class="line">                <span class="comment">// This is caught below as if we had failed to fork zygote</span></div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Package "</span> + app.info.packageName + <span class="string">" is frozen!"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">            <span class="keyword">throw</span> e.rethrowAsRuntimeException();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> uid = app.uid;</div><div class="line">        <span class="keyword">int</span>[] gids = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">int</span> mountExternal = Zygote.MOUNT_EXTERNAL_NONE;</div><div class="line">        <span class="keyword">if</span> (!app.isolated) &#123;</div><div class="line">            <span class="keyword">int</span>[] permGids = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                checkTime(startTime, <span class="string">"startProcess: getting gids from package manager"</span>);</div><div class="line">                <span class="keyword">final</span> IPackageManager pm = AppGlobals.getPackageManager();</div><div class="line">                permGids = pm.getPackageGids(app.info.packageName, app.userId);</div><div class="line">                MountServiceInternal mountServiceInternal = LocalServices.getService(</div><div class="line">                        MountServiceInternal.class);</div><div class="line">                mountExternal = mountServiceInternal.getExternalStorageMountMode(uid,</div><div class="line">                        app.info.packageName);</div><div class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                <span class="keyword">throw</span> e.rethrowAsRuntimeException();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (ArrayUtils.isEmpty(permGids)) &#123;</div><div class="line">                gids = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                gids = <span class="keyword">new</span> <span class="keyword">int</span>[permGids.length + <span class="number">2</span>];</div><div class="line">                System.arraycopy(permGids, <span class="number">0</span>, gids, <span class="number">2</span>, permGids.length);</div><div class="line">            &#125;</div><div class="line">            gids[<span class="number">0</span>] = UserHandle.getSharedAppGid(UserHandle.getAppId(uid));</div><div class="line">            gids[<span class="number">1</span>] = UserHandle.getUserGid(UserHandle.getUserId(uid));</div><div class="line">        &#125;</div><div class="line">        checkTime(startTime, <span class="string">"startProcess: building args"</span>);</div><div class="line">        <span class="keyword">if</span> (mFactoryTest != FactoryTest.FACTORY_TEST_OFF) &#123;</div><div class="line">            <span class="keyword">if</span> (mFactoryTest == FactoryTest.FACTORY_TEST_LOW_LEVEL</div><div class="line">                    &amp;&amp; mTopComponent != <span class="keyword">null</span></div><div class="line">                    &amp;&amp; app.processName.equals(mTopComponent.getPackageName())) &#123;</div><div class="line">                uid = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (mFactoryTest == FactoryTest.FACTORY_TEST_HIGH_LEVEL</div><div class="line">                    &amp;&amp; (app.info.flags&amp;ApplicationInfo.FLAG_FACTORY_TEST) != <span class="number">0</span>) &#123;</div><div class="line">                uid = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 设置一些debug参数</span></div><div class="line">        <span class="keyword">int</span> debugFlags = <span class="number">0</span>;</div><div class="line">        ......</div><div class="line"></div><div class="line">        String requiredAbi = (abiOverride != <span class="keyword">null</span>) ? abiOverride : app.info.primaryCpuAbi;</div><div class="line">        <span class="keyword">if</span> (requiredAbi == <span class="keyword">null</span>) &#123;</div><div class="line">            requiredAbi = Build.SUPPORTED_ABIS[<span class="number">0</span>];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        String instructionSet = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (app.info.primaryCpuAbi != <span class="keyword">null</span>) &#123;</div><div class="line">            instructionSet = VMRuntime.getInstructionSet(app.info.primaryCpuAbi);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        app.gids = gids;</div><div class="line">        app.requiredAbi = requiredAbi;</div><div class="line">        app.instructionSet = instructionSet;</div><div class="line"></div><div class="line">        <span class="comment">// 创建一个进程</span></div><div class="line">        <span class="keyword">boolean</span> isActivityProcess = (entryPoint == <span class="keyword">null</span>);</div><div class="line">        <span class="keyword">if</span> (entryPoint == <span class="keyword">null</span>) entryPoint = <span class="string">"android.app.ActivityThread"</span>;</div><div class="line">        Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"Start proc: "</span> +</div><div class="line">                app.processName);</div><div class="line">        checkTime(startTime, <span class="string">"startProcess: asking zygote to start proc"</span>);</div><div class="line">        Process.ProcessStartResult startResult = Process.start(entryPoint,</div><div class="line">                app.processName, uid, uid, gids, debugFlags, mountExternal,</div><div class="line">                app.info.targetSdkVersion, app.info.seinfo, requiredAbi, instructionSet,</div><div class="line">                app.info.dataDir, entryPointArgs);</div><div class="line">        checkTime(startTime, <span class="string">"startProcess: returned from zygote!"</span>);</div><div class="line">        Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (app.isolated) &#123;</div><div class="line">            mBatteryStatsService.addIsolatedUid(app.uid, app.info.uid);</div><div class="line">        &#125;</div><div class="line">        mBatteryStatsService.noteProcessStart(app.processName, app.info.uid);</div><div class="line">        checkTime(startTime, <span class="string">"startProcess: done updating battery stats"</span>);</div><div class="line"></div><div class="line">        EventLog.writeEvent(EventLogTags.AM_PROC_START,</div><div class="line">                UserHandle.getUserId(uid), startResult.pid, uid,</div><div class="line">                app.processName, hostingType,</div><div class="line">                hostingNameStr != <span class="keyword">null</span> ? hostingNameStr : <span class="string">""</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (app.persistent) &#123;</div><div class="line">            Watchdog.getInstance().processStarted(app.processName, startResult.pid);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//设置一些属性变量</span></div><div class="line">        checkTime(startTime, <span class="string">"startProcess: building log message"</span>);</div><div class="line">        app.setPid(startResult.pid);</div><div class="line">        app.usingWrapper = startResult.usingWrapper;</div><div class="line">        app.removed = <span class="keyword">false</span>;</div><div class="line">        app.killed = <span class="keyword">false</span>;</div><div class="line">        app.killedByAm = <span class="keyword">false</span>;</div><div class="line">        checkTime(startTime, <span class="string">"startProcess: starting to update pids map"</span>);</div><div class="line">        <span class="comment">//将新创建的进程加入到mPidsSelfLocked</span></div><div class="line">        <span class="keyword">synchronized</span> (mPidsSelfLocked) &#123;</div><div class="line">            <span class="keyword">this</span>.mPidsSelfLocked.put(startResult.pid, app);</div><div class="line">            <span class="keyword">if</span> (isActivityProcess) &#123;</div><div class="line">                Message msg = mHandler.obtainMessage(PROC_START_TIMEOUT_MSG);</div><div class="line">                msg.obj = app;</div><div class="line">                mHandler.sendMessageDelayed(msg, startResult.usingWrapper</div><div class="line">                        ? PROC_START_TIMEOUT_WITH_WRAPPER : PROC_START_TIMEOUT);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        checkTime(startTime, <span class="string">"startProcess: done updating pids map"</span>);</div><div class="line">    &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</div><div class="line">        app.setPid(<span class="number">0</span>);</div><div class="line">        mBatteryStatsService.noteProcessFinish(app.processName, app.info.uid);</div><div class="line">        <span class="keyword">if</span> (app.isolated) &#123;</div><div class="line">            mBatteryStatsService.removeIsolatedUid(app.uid, app.info.uid);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="新进程"><a href="#新进程" class="headerlink" title="新进程"></a>新进程</h3><p><code>Process.start()</code> 通过socket通信告知Zygote创建fork子进程，创建新进程后将 <code>ActivityThread</code> 类加载到新进程，并调用 <code>ActivityThread.main()</code> 方法。</p>
<h4 id="ActivityThread-main"><a href="#ActivityThread-main" class="headerlink" title="ActivityThread.main()"></a>ActivityThread.main()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"ActivityThreadMain"</span>);</div><div class="line">    <span class="comment">//启动性能统计</span></div><div class="line">    SamplingProfilerIntegration.start();</div><div class="line">    CloseGuard.setEnabled(<span class="keyword">false</span>);</div><div class="line"></div><div class="line">    Environment.initForCurrentUser();</div><div class="line">    EventLogger.setReporter(<span class="keyword">new</span> EventLoggingReporter());</div><div class="line">    AndroidKeyStoreProvider.install();</div><div class="line">    <span class="keyword">final</span> File configDir = Environment.getUserConfigDirectory(UserHandle.myUserId());</div><div class="line">    TrustedCertificateStore.setDefaultUserDirectory(configDir);</div><div class="line"></div><div class="line">    Process.setArgV0(<span class="string">"&lt;pre-initialized&gt;"</span>);</div><div class="line">    <span class="comment">// 初始化主线程消息队列</span></div><div class="line">    Looper.prepareMainLooper();</div><div class="line">    <span class="comment">// 创建ActivityThread对象</span></div><div class="line">    ActivityThread thread = <span class="keyword">new</span> ActivityThread();</div><div class="line">    thread.attach(<span class="keyword">false</span>);</div><div class="line">    <span class="comment">// 主线程Handler对象mH</span></div><div class="line">    <span class="keyword">if</span> (sMainThreadHandler == <span class="keyword">null</span>) &#123;</div><div class="line">        sMainThreadHandler = thread.getHandler();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">    <span class="comment">// 消息循环开始运行</span></div><div class="line">    Looper.loop();</div><div class="line"></div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Main thread loop unexpectedly exited"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="ActivityThread-attach"><a href="#ActivityThread-attach" class="headerlink" title="ActivityThread.attach()"></a>ActivityThread.attach()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(<span class="keyword">boolean</span> system)</span> </span>&#123;</div><div class="line">    sCurrentActivityThread = <span class="keyword">this</span>;</div><div class="line">    <span class="comment">// 是否是系统进程</span></div><div class="line">    mSystemThread = system;</div><div class="line">    <span class="keyword">if</span> (!system) &#123;</div><div class="line">        ViewRootImpl.addFirstDrawHandler(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                ensureJitEnabled();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="comment">// 暂时设置进程的名字为&lt;pre-initialized&gt;</span></div><div class="line">        android.ddm.DdmHandleAppName.setAppName(<span class="string">"&lt;pre-initialized&gt;"</span>,</div><div class="line">                                                UserHandle.myUserId());</div><div class="line">        RuntimeInit.setApplicationObject(mAppThread.asBinder());</div><div class="line">        <span class="comment">// 调用AMS</span></div><div class="line">        <span class="keyword">final</span> IActivityManager mgr = ActivityManagerNative.getDefault();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            mgr.attachApplication(mAppThread);</div><div class="line">        &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;&#125;</div><div class="line">        <span class="comment">// GC检测</span></div><div class="line">        BinderInternal.addGcWatcher(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (!mSomeActivitiesChanged) &#123;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                Runtime runtime = Runtime.getRuntime();</div><div class="line">                <span class="keyword">long</span> dalvikMax = runtime.maxMemory();</div><div class="line">                <span class="keyword">long</span> dalvikUsed = runtime.totalMemory() - runtime.freeMemory();</div><div class="line">                <span class="keyword">if</span> (dalvikUsed &gt; ((<span class="number">3</span>*dalvikMax)/<span class="number">4</span>)) &#123;</div><div class="line">                    <span class="comment">//当已用内存超过最大内存的3/4,则请求释放内存空间</span></div><div class="line">                    mSomeActivitiesChanged = <span class="keyword">false</span>;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        mgr.releaseSomeActivities(mAppThread);</div><div class="line">                    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 如果是系统进程，设置名称为system_process</span></div><div class="line">        android.ddm.DdmHandleAppName.setAppName(<span class="string">"system_process"</span>,</div><div class="line">                UserHandle.myUserId());</div><div class="line">        <span class="comment">// 初始化mInstrumentation和mInitialApplication</span></div><div class="line">        <span class="comment">// 非系统进程这些对象的初始化在handleBindApplication()中进行</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            mInstrumentation = <span class="keyword">new</span> Instrumentation();</div><div class="line">            ContextImpl context = ContextImpl.createAppContext(</div><div class="line">                    <span class="keyword">this</span>, getSystemContext().mPackageInfo);</div><div class="line">            mInitialApplication = context.mPackageInfo.makeApplication(<span class="keyword">true</span>, <span class="keyword">null</span>);</div><div class="line">            mInitialApplication.onCreate();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;...&#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    DropBox.setReporter(<span class="keyword">new</span> DropBoxReporter());</div><div class="line">    <span class="comment">// 这里要快速的设置Config回调</span></div><div class="line">    ViewRootImpl.addConfigCallback(<span class="keyword">new</span> ComponentCallbacks2() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConfigurationChanged</span><span class="params">(Configuration newConfig)</span> </span>&#123;</div><div class="line">            <span class="keyword">synchronized</span> (mResourcesManager) &#123;</div><div class="line">                <span class="comment">// 快速响应onConfigurationChanged</span></div><div class="line">                <span class="keyword">if</span> (mResourcesManager.applyConfigurationToResourcesLocked(newConfig, <span class="keyword">null</span>)) &#123;</div><div class="line">                    <span class="keyword">if</span> (mPendingConfiguration == <span class="keyword">null</span> ||</div><div class="line">                            mPendingConfiguration.isOtherSeqNewer(newConfig)) &#123;</div><div class="line">                        mPendingConfiguration = newConfig;</div><div class="line"></div><div class="line">                        sendMessage(H.CONFIGURATION_CHANGED, newConfig);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLowMemory</span><span class="params">()</span> </span>&#123;</div><div class="line">        &#125;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTrimMemory</span><span class="params">(<span class="keyword">int</span> level)</span> </span>&#123;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来又会转到 <code>ActivityManagerService</code> 进程去执行。</p>
<h4 id="ActivityManagerService-attachApplication"><a href="#ActivityManagerService-attachApplication" class="headerlink" title="ActivityManagerService.attachApplication()"></a>ActivityManagerService.attachApplication()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">attachApplication</span><span class="params">(IApplicationThread thread)</span> </span>&#123;</div><div class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">        <span class="keyword">int</span> callingPid = Binder.getCallingPid();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">long</span> origId = Binder.clearCallingIdentity();</div><div class="line">        <span class="comment">// thread是ApplicationThreadProxy对象，用于和应用进程的ApplicationThread通信</span></div><div class="line">        attachApplicationLocked(thread, callingPid);</div><div class="line">        Binder.restoreCallingIdentity(origId);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="ActivityManagerService-attachApplicationLocked"><a href="#ActivityManagerService-attachApplicationLocked" class="headerlink" title="ActivityManagerService.attachApplicationLocked()"></a>ActivityManagerService.attachApplicationLocked()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">attachApplicationLocked</span><span class="params">(IApplicationThread thread,</span></span></div><div class="line">        <span class="keyword">int</span> pid) &#123;</div><div class="line"></div><div class="line">    <span class="comment">// 根据pid获取应用的ProcessRecord</span></div><div class="line">    ProcessRecord app;</div><div class="line">    <span class="keyword">if</span> (pid != MY_PID &amp;&amp; pid &gt;= <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">synchronized</span> (mPidsSelfLocked) &#123;</div><div class="line">            app = mPidsSelfLocked.get(pid);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        app = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (app == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 获取ProcessRecord失败，退出</span></div><div class="line">        EventLog.writeEvent(EventLogTags.AM_DROP_PROCESS, pid);</div><div class="line">        <span class="keyword">if</span> (pid &gt; <span class="number">0</span> &amp;&amp; pid != MY_PID) &#123;</div><div class="line">            Process.killProcessQuiet(pid);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                thread.scheduleExit();</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;&#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 如果ProcessRecord还和之前的进程绑定，就清除之前绑定的进程信息</span></div><div class="line">    <span class="keyword">if</span> (app.thread != <span class="keyword">null</span>) &#123;</div><div class="line">        handleAppDiedLocked(app, <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 绑定应用进程的DeathRecipient，当应用进程崩溃时，系统进程可以收到通知</span></div><div class="line">    <span class="keyword">final</span> String processName = app.processName;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        AppDeathRecipient adr = <span class="keyword">new</span> AppDeathRecipient(</div><div class="line">                app, pid, thread);</div><div class="line">        thread.asBinder().linkToDeath(adr, <span class="number">0</span>);</div><div class="line">        app.deathRecipient = adr;</div><div class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">        app.resetPackageList(mProcessStats);</div><div class="line">        <span class="comment">// 绑定失败，这里会重启进程</span></div><div class="line">        startProcessLocked(app, <span class="string">"link fail"</span>, processName);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    EventLog.writeEvent(EventLogTags.AM_PROC_BOUND, app.userId, app.pid, app.processName);</div><div class="line">    <span class="comment">// 激活ProcessRecord，设置进程的一些信息</span></div><div class="line">    app.makeActive(thread, mProcessStats);</div><div class="line">    app.curAdj = app.setAdj = -<span class="number">100</span>;</div><div class="line">    app.curSchedGroup = app.setSchedGroup = Process.THREAD_GROUP_DEFAULT;</div><div class="line">    app.forcingToForeground = <span class="keyword">null</span>;</div><div class="line">    updateProcessForegroundLocked(app, <span class="keyword">false</span>, <span class="keyword">false</span>);</div><div class="line">    app.hasShownUi = <span class="keyword">false</span>;</div><div class="line">    app.debugging = <span class="keyword">false</span>;</div><div class="line">    app.cached = <span class="keyword">false</span>;</div><div class="line">    app.killedByAm = <span class="keyword">false</span>;</div><div class="line">    <span class="comment">// 移除超时标志</span></div><div class="line">    mHandler.removeMessages(PROC_START_TIMEOUT_MSG, app);</div><div class="line"></div><div class="line">    <span class="keyword">boolean</span> normalMode = mProcessesReady || isAllowedWhileBooting(app.info);</div><div class="line">    <span class="comment">// 获取应用所有的provider</span></div><div class="line">    List&lt;ProviderInfo&gt; providers = normalMode ? generateApplicationProvidersLocked(app) : <span class="keyword">null</span>;</div><div class="line">    <span class="comment">// 如果有provider在mLaunchingProviders列表中，那么发消息移除它们</span></div><div class="line">    <span class="keyword">if</span> (providers != <span class="keyword">null</span> &amp;&amp; checkAppInLaunchingProvidersLocked(app)) &#123;</div><div class="line">        Message msg = mHandler.obtainMessage(CONTENT_PROVIDER_PUBLISH_TIMEOUT_MSG);</div><div class="line">        msg.obj = app;</div><div class="line">        mHandler.sendMessageDelayed(msg, CONTENT_PROVIDER_PUBLISH_TIMEOUT);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">int</span> testMode = IApplicationThread.DEBUG_OFF;</div><div class="line">        <span class="keyword">if</span> (mDebugApp != <span class="keyword">null</span> &amp;&amp; mDebugApp.equals(processName)) &#123;</div><div class="line">            testMode = mWaitForDebugger</div><div class="line">                ? IApplicationThread.DEBUG_WAIT</div><div class="line">                : IApplicationThread.DEBUG_ON;</div><div class="line">            app.debugging = <span class="keyword">true</span>;</div><div class="line">            <span class="keyword">if</span> (mDebugTransient) &#123;</div><div class="line">                mDebugApp = mOrigDebugApp;</div><div class="line">                mWaitForDebugger = mOrigWaitForDebugger;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        String profileFile = app.instrumentationProfileFile;</div><div class="line">        ParcelFileDescriptor profileFd = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">int</span> samplingInterval = <span class="number">0</span>;</div><div class="line">        <span class="keyword">boolean</span> profileAutoStop = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span> (mProfileApp != <span class="keyword">null</span> &amp;&amp; mProfileApp.equals(processName)) &#123;</div><div class="line">            mProfileProc = app;</div><div class="line">            profileFile = mProfileFile;</div><div class="line">            profileFd = mProfileFd;</div><div class="line">            samplingInterval = mSamplingInterval;</div><div class="line">            profileAutoStop = mAutoStopProfiler;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">boolean</span> enableOpenGlTrace = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span> (mOpenGlTraceApp != <span class="keyword">null</span> &amp;&amp; mOpenGlTraceApp.equals(processName)) &#123;</div><div class="line">            enableOpenGlTrace = <span class="keyword">true</span>;</div><div class="line">            mOpenGlTraceApp = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">boolean</span> isRestrictedBackupMode = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span> (mBackupTarget != <span class="keyword">null</span> &amp;&amp; mBackupAppName.equals(processName)) &#123;</div><div class="line">            isRestrictedBackupMode = (mBackupTarget.backupMode == BackupRecord.RESTORE)</div><div class="line">                    || (mBackupTarget.backupMode == BackupRecord.RESTORE_FULL)</div><div class="line">                    || (mBackupTarget.backupMode == BackupRecord.BACKUP_FULL);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ensurePackageDexOpt(app.instrumentationInfo != <span class="keyword">null</span></div><div class="line">                ? app.instrumentationInfo.packageName</div><div class="line">                : app.info.packageName);</div><div class="line">        <span class="keyword">if</span> (app.instrumentationClass != <span class="keyword">null</span>) &#123;</div><div class="line">            ensurePackageDexOpt(app.instrumentationClass.getPackageName());</div><div class="line">        &#125;</div><div class="line">        ApplicationInfo appInfo = app.instrumentationInfo != <span class="keyword">null</span></div><div class="line">                ? app.instrumentationInfo : app.info;</div><div class="line">        app.compat = compatibilityInfoForPackageLocked(appInfo);</div><div class="line">        <span class="keyword">if</span> (profileFd != <span class="keyword">null</span>) &#123;</div><div class="line">            profileFd = profileFd.dup();</div><div class="line">        &#125;</div><div class="line">        ProfilerInfo profilerInfo = profileFile == <span class="keyword">null</span> ? <span class="keyword">null</span></div><div class="line">                : <span class="keyword">new</span> ProfilerInfo(profileFile, profileFd, samplingInterval, profileAutoStop);</div><div class="line">        <span class="comment">// 发起跨进程调用。绑定应用进程，发送一些参数给应用进程</span></div><div class="line">        thread.bindApplication(processName, appInfo, providers, app.instrumentationClass,</div><div class="line">                profilerInfo, app.instrumentationArguments, app.instrumentationWatcher,</div><div class="line">                app.instrumentationUiAutomationConnection, testMode, enableOpenGlTrace,</div><div class="line">                isRestrictedBackupMode || !normalMode, app.persistent,</div><div class="line">                <span class="keyword">new</span> Configuration(mConfiguration), app.compat,</div><div class="line">                getCommonServicesLocked(app.isolated),</div><div class="line">                mCoreSettingsObserver.getCoreSettingsLocked());</div><div class="line">        updateLruProcessLocked(app, <span class="keyword">false</span>, <span class="keyword">null</span>);</div><div class="line">        app.lastRequestedGc = app.lastLowMemory = SystemClock.uptimeMillis();</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        <span class="comment">// 绑定失败这里会重启进程</span></div><div class="line">        app.resetPackageList(mProcessStats);</div><div class="line">        app.unlinkDeathRecipient();</div><div class="line">        startProcessLocked(app, <span class="string">"bind fail"</span>, processName);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 把进程从待启动进程列表中移除</span></div><div class="line">    mPersistentStartingProcesses.remove(app);</div><div class="line">    mProcessesOnHold.remove(app);</div><div class="line"></div><div class="line">    <span class="keyword">boolean</span> badApp = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">boolean</span> didSomething = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 处理Activity</span></div><div class="line">    <span class="keyword">if</span> (normalMode) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (mStackSupervisor.attachApplicationLocked(app)) &#123;</div><div class="line">                didSomething = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            badApp = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 处理Service</span></div><div class="line">    <span class="keyword">if</span> (!badApp) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            didSomething |= mServices.attachApplicationLocked(app, processName);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            badApp = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 处理Broadcast</span></div><div class="line">    <span class="keyword">if</span> (!badApp &amp;&amp; isPendingBroadcastProcessLocked(pid)) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            didSomething |= sendPendingBroadcastsLocked(app);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            badApp = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!badApp &amp;&amp; mBackupTarget != <span class="keyword">null</span> &amp;&amp; mBackupTarget.appInfo.uid == app.uid) &#123;</div><div class="line">        ensurePackageDexOpt(mBackupTarget.appInfo.packageName);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            thread.scheduleCreateBackupAgent(mBackupTarget.appInfo,</div><div class="line">                    compatibilityInfoForPackageLocked(mBackupTarget.appInfo),</div><div class="line">                    mBackupTarget.backupMode);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            badApp = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 杀掉坏的进程</span></div><div class="line">    <span class="keyword">if</span> (badApp) &#123;</div><div class="line">        app.kill(<span class="string">"error during init"</span>, <span class="keyword">true</span>);</div><div class="line">        handleAppDiedLocked(app, <span class="keyword">false</span>, <span class="keyword">true</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!didSomething) &#123;</div><div class="line">        updateOomAdjLocked();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="ActivityThread-handleBindApplication"><a href="#ActivityThread-handleBindApplication" class="headerlink" title="ActivityThread.handleBindApplication()"></a>ActivityThread.handleBindApplication()</h4><p>这里又转到应用进程来处理进程绑定的工作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleBindApplication</span><span class="params">(AppBindData data)</span> </span>&#123;</div><div class="line">    mBoundApplication = data;</div><div class="line">    mConfiguration = <span class="keyword">new</span> Configuration(data.config);</div><div class="line">    mCompatConfiguration = <span class="keyword">new</span> Configuration(data.config);</div><div class="line"></div><div class="line">    mProfiler = <span class="keyword">new</span> Profiler();</div><div class="line">    <span class="keyword">if</span> (data.initProfilerInfo != <span class="keyword">null</span>) &#123;</div><div class="line">        mProfiler.profileFile = data.initProfilerInfo.profileFile;</div><div class="line">        mProfiler.profileFd = data.initProfilerInfo.profileFd;</div><div class="line">        mProfiler.samplingInterval = data.initProfilerInfo.samplingInterval;</div><div class="line">        mProfiler.autoStopProfiler = data.initProfilerInfo.autoStopProfiler;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 设置进程的名字</span></div><div class="line">    Process.setArgV0(data.processName);</div><div class="line">    android.ddm.DdmHandleAppName.setAppName(data.processName,</div><div class="line">                                            UserHandle.myUserId());</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (data.persistent) &#123;</div><div class="line">        <span class="comment">// 对persistent进程的处理，在低内存设备上不用硬件加速</span></div><div class="line">        <span class="keyword">if</span> (!ActivityManager.isHighEndGfx()) &#123;</div><div class="line">            HardwareRenderer.disable(<span class="keyword">false</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (mProfiler.profileFd != <span class="keyword">null</span>) &#123;</div><div class="line">        mProfiler.startProfiling();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (data.appInfo.targetSdkVersion &lt;= android.os.Build.VERSION_CODES.HONEYCOMB_MR1) &#123;</div><div class="line">        AsyncTask.setDefaultExecutor(AsyncTask.THREAD_POOL_EXECUTOR);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Message.updateCheckRecycle(data.appInfo.targetSdkVersion);</div><div class="line"></div><div class="line">    <span class="comment">//设置时区</span></div><div class="line">    TimeZone.setDefault(<span class="keyword">null</span>);</div><div class="line">    Locale.setDefault(data.config.locale);</div><div class="line"></div><div class="line">    <span class="comment">// 更新系统配置</span></div><div class="line">    mResourcesManager.applyConfigurationToResourcesLocked(data.config, data.compatInfo);</div><div class="line">    mCurDefaultDisplayDpi = data.config.densityDpi;</div><div class="line">    applyCompatConfiguration(mCurDefaultDisplayDpi);</div><div class="line"></div><div class="line">    data.info = getPackageInfoNoCheck(data.appInfo, data.compatInfo);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((data.appInfo.flags&amp;ApplicationInfo.FLAG_SUPPORTS_SCREEN_DENSITIES)</div><div class="line">            == <span class="number">0</span>) &#123;</div><div class="line">        mDensityCompatMode = <span class="keyword">true</span>;</div><div class="line">        Bitmap.setDefaultDensity(DisplayMetrics.DENSITY_DEFAULT);</div><div class="line">    &#125;</div><div class="line">    updateDefaultDensity();</div><div class="line"></div><div class="line">    <span class="comment">// 创建Context上下文</span></div><div class="line">    <span class="keyword">final</span> ContextImpl appContext = ContextImpl.createAppContext(<span class="keyword">this</span>, data.info);</div><div class="line">    <span class="keyword">if</span> (!Process.isIsolated()) &#123;</div><div class="line">        ......</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 设置时区，debug模式，StrictMode</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> is24Hr = <span class="string">"24"</span>.equals(mCoreSettings.getString(Settings.System.TIME_12_24));</div><div class="line">    DateFormat.set24HourTimePref(is24Hr);</div><div class="line"></div><div class="line">    View.mDebugViewAttributes =</div><div class="line">            mCoreSettings.getInt(Settings.Global.DEBUG_VIEW_ATTRIBUTES, <span class="number">0</span>) != <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> ((data.appInfo.flags &amp;</div><div class="line">         (ApplicationInfo.FLAG_SYSTEM |</div><div class="line">          ApplicationInfo.FLAG_UPDATED_SYSTEM_APP)) != <span class="number">0</span>) &#123;</div><div class="line">        StrictMode.conditionallyEnableDebugLogging();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (data.appInfo.targetSdkVersion &gt; <span class="number">9</span>) &#123;</div><div class="line">        StrictMode.enableDeathOnNetwork();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    NetworkSecurityPolicy.getInstance().setCleartextTrafficPermitted(</div><div class="line">            (data.appInfo.flags &amp; ApplicationInfo.FLAG_USES_CLEARTEXT_TRAFFIC) != <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (data.debugMode != IApplicationThread.DEBUG_OFF) &#123;</div><div class="line">        Debug.changeDebugPort(<span class="number">8100</span>);</div><div class="line">        <span class="keyword">if</span> (data.debugMode == IApplicationThread.DEBUG_WAIT) &#123;</div><div class="line">            IActivityManager mgr = ActivityManagerNative.getDefault();</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                mgr.showWaitingForDebugger(mAppThread, <span class="keyword">true</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;&#125;</div><div class="line"></div><div class="line">            Debug.waitForDebugger();</div><div class="line"></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                mgr.showWaitingForDebugger(mAppThread, <span class="keyword">false</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;&#125;</div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> &#123; &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (data.enableOpenGlTrace) &#123;</div><div class="line">        GLUtils.setTracingLevel(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 如果是调试模式生成systrace 信息</span></div><div class="line">    <span class="keyword">boolean</span> appTracingAllowed = (data.appInfo.flags&amp;ApplicationInfo.FLAG_DEBUGGABLE) != <span class="number">0</span>;</div><div class="line">    Trace.setAppTracingAllowed(appTracingAllowed);</div><div class="line"></div><div class="line">    <span class="comment">// 初始化默认http代理</span></div><div class="line">    IBinder b = ServiceManager.getService(Context.CONNECTIVITY_SERVICE);</div><div class="line">    <span class="keyword">if</span> (b != <span class="keyword">null</span>) &#123;</div><div class="line">        IConnectivityManager service = IConnectivityManager.Stub.asInterface(b);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">final</span> ProxyInfo proxyInfo = service.getProxyForNetwork(<span class="keyword">null</span>);</div><div class="line">            Proxy.setHttpProxySystemProperty(proxyInfo);</div><div class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;&#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (data.instrumentationName != <span class="keyword">null</span>) &#123;</div><div class="line">        InstrumentationInfo ii = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ii = appContext.getPackageManager().</div><div class="line">                getInstrumentationInfo(data.instrumentationName, <span class="number">0</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (ii == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">                <span class="string">"Unable to find instrumentation info for: "</span></div><div class="line">                + data.instrumentationName);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        mInstrumentationPackageName = ii.packageName;</div><div class="line">        mInstrumentationAppDir = ii.sourceDir;</div><div class="line">        mInstrumentationSplitAppDirs = ii.splitSourceDirs;</div><div class="line">        mInstrumentationLibDir = ii.nativeLibraryDir;</div><div class="line">        mInstrumentedAppDir = data.info.getAppDir();</div><div class="line">        mInstrumentedSplitAppDirs = data.info.getSplitAppDirs();</div><div class="line">        mInstrumentedLibDir = data.info.getLibDir();</div><div class="line"></div><div class="line">        ApplicationInfo instrApp = <span class="keyword">new</span> ApplicationInfo();</div><div class="line">        instrApp.packageName = ii.packageName;</div><div class="line">        instrApp.sourceDir = ii.sourceDir;</div><div class="line">        instrApp.publicSourceDir = ii.publicSourceDir;</div><div class="line">        instrApp.splitSourceDirs = ii.splitSourceDirs;</div><div class="line">        instrApp.splitPublicSourceDirs = ii.splitPublicSourceDirs;</div><div class="line">        instrApp.dataDir = ii.dataDir;</div><div class="line">        instrApp.nativeLibraryDir = ii.nativeLibraryDir;</div><div class="line">        LoadedApk pi = getPackageInfo(instrApp, data.compatInfo,</div><div class="line">                appContext.getClassLoader(), <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</div><div class="line">        ContextImpl instrContext = ContextImpl.createAppContext(<span class="keyword">this</span>, pi);</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            java.lang.ClassLoader cl = instrContext.getClassLoader();</div><div class="line">            mInstrumentation = (Instrumentation)</div><div class="line">                cl.loadClass(data.instrumentationName.getClassName()).newInstance();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">                <span class="string">"Unable to instantiate instrumentation "</span></div><div class="line">                + data.instrumentationName + <span class="string">": "</span> + e.toString(), e);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        mInstrumentation.init(<span class="keyword">this</span>, instrContext, appContext,</div><div class="line">               <span class="keyword">new</span> ComponentName(ii.packageName, ii.name), data.instrumentationWatcher,</div><div class="line">               data.instrumentationUiAutomationConnection);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mProfiler.profileFile != <span class="keyword">null</span> &amp;&amp; !ii.handleProfiling</div><div class="line">                &amp;&amp; mProfiler.profileFd == <span class="keyword">null</span>) &#123;</div><div class="line">            mProfiler.handlingProfiling = <span class="keyword">true</span>;</div><div class="line">            File file = <span class="keyword">new</span> File(mProfiler.profileFile);</div><div class="line">            file.getParentFile().mkdirs();</div><div class="line">            Debug.startMethodTracing(file.toString(), <span class="number">8</span> * <span class="number">1024</span> * <span class="number">1024</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 初始化mInstrumentation</span></div><div class="line">        mInstrumentation = <span class="keyword">new</span> Instrumentation();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((data.appInfo.flags&amp;ApplicationInfo.FLAG_LARGE_HEAP) != <span class="number">0</span>) &#123;</div><div class="line">        <span class="comment">// 如果设置了largeHeap，清楚内存上限</span></div><div class="line">        dalvik.system.VMRuntime.getRuntime().clearGrowthLimit();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 设置内存上限</span></div><div class="line">        dalvik.system.VMRuntime.getRuntime().clampGrowthLimit();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> StrictMode.ThreadPolicy savedPolicy = StrictMode.allowThreadDiskWrites();</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">// 创建Application对象</span></div><div class="line">        Application app = data.info.makeApplication(data.restrictedBackupMode, <span class="keyword">null</span>);</div><div class="line">        mInitialApplication = app;</div><div class="line"></div><div class="line">        <span class="comment">// 装载Providers</span></div><div class="line">        <span class="keyword">if</span> (!data.restrictedBackupMode) &#123;</div><div class="line">            List&lt;ProviderInfo&gt; providers = data.providers;</div><div class="line">            <span class="keyword">if</span> (providers != <span class="keyword">null</span>) &#123;</div><div class="line">                installContentProviders(app, providers);</div><div class="line">                mH.sendEmptyMessageDelayed(H.ENABLE_JIT, <span class="number">10</span>*<span class="number">1000</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            mInstrumentation.onCreate(data.instrumentationArgs);</div><div class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">                <span class="string">"Exception thrown in onCreate() of "</span></div><div class="line">                + data.instrumentationName + <span class="string">": "</span> + e.toString(), e);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//调用Application.onCreate()</span></div><div class="line">            mInstrumentation.callApplicationOnCreate(app);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="keyword">if</span> (!mInstrumentation.onException(app, e)) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">                    <span class="string">"Unable to create application "</span> + app.getClass().getName()</div><div class="line">                    + <span class="string">": "</span> + e.toString(), e);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        StrictMode.setThreadPolicy(savedPolicy);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="ActivityStackSupervisor-attachApplicationLocked"><a href="#ActivityStackSupervisor-attachApplicationLocked" class="headerlink" title="ActivityStackSupervisor.attachApplicationLocked()"></a>ActivityStackSupervisor.attachApplicationLocked()</h4><p>接下来会继续处理 <code>ActivityManagerService.attachApplication()</code> 中的 <code>ActivityStackSupervisor.attachApplicationLocked()</code> 方法。将 <code>ActivityStackSupervisor</code> 绑定到应用进程。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">attachApplicationLocked</span><span class="params">(ProcessRecord app)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">    <span class="keyword">final</span> String processName = app.processName;</div><div class="line">    <span class="keyword">boolean</span> didSomething = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> displayNdx = mActivityDisplays.size() - <span class="number">1</span>; displayNdx &gt;= <span class="number">0</span>; --displayNdx) &#123;</div><div class="line">        ArrayList&lt;ActivityStack&gt; stacks = mActivityDisplays.valueAt(displayNdx).mStacks;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> stackNdx = stacks.size() - <span class="number">1</span>; stackNdx &gt;= <span class="number">0</span>; --stackNdx) &#123;</div><div class="line">            <span class="keyword">final</span> ActivityStack stack = stacks.get(stackNdx);</div><div class="line">            <span class="keyword">if</span> (!isFrontStack(stack)) &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            ActivityRecord hr = stack.topRunningActivityLocked(<span class="keyword">null</span>);</div><div class="line">            <span class="keyword">if</span> (hr != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (hr.app == <span class="keyword">null</span> &amp;&amp; app.uid == hr.info.applicationInfo.uid</div><div class="line">                        &amp;&amp; processName.equals(hr.processName)) &#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        <span class="comment">// 真正的启动activity，调用Activity.onCreate，从这里开始的流程</span></div><div class="line">                        <span class="comment">// 就和进程已经存在时启动activity流程一样的了</span></div><div class="line">                        <span class="keyword">if</span> (realStartActivityLocked(hr, app, <span class="keyword">true</span>, <span class="keyword">true</span>)) &#123;</div><div class="line">                            didSomething = <span class="keyword">true</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                        <span class="keyword">throw</span> e;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (!didSomething) &#123;</div><div class="line">        ensureActivitiesVisibleLocked(<span class="keyword">null</span>, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> didSomething;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="ActivityStackSupervisor-realStartActivityLocked"><a href="#ActivityStackSupervisor-realStartActivityLocked" class="headerlink" title="ActivityStackSupervisor.realStartActivityLocked()"></a>ActivityStackSupervisor.realStartActivityLocked()</h4><p>开始执行真正的Activity启动操作，从这里开始的流程就和进程已经存在时启动activity流程一样的了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">realStartActivityLocked</span><span class="params">(ActivityRecord r,</span></span></div><div class="line">        ProcessRecord app, <span class="keyword">boolean</span> andResume, <span class="keyword">boolean</span> checkConfig)</div><div class="line">        <span class="keyword">throws</span> RemoteException &#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (andResume) &#123;</div><div class="line">        <span class="comment">// 开始冻屏</span></div><div class="line">        r.startFreezingScreenLocked(app, <span class="number">0</span>);</div><div class="line">        mWindowManager.setAppVisibility(r.appToken, <span class="keyword">true</span>);</div><div class="line"></div><div class="line">        r.startLaunchTickingLocked();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (checkConfig) &#123;</div><div class="line">        Configuration config = mWindowManager.updateOrientationFromAppTokens(</div><div class="line">                mService.mConfiguration,</div><div class="line">                r.mayFreezeScreenLocked(app) ? r.appToken : <span class="keyword">null</span>);</div><div class="line">        mService.updateConfigurationLocked(config, r, <span class="keyword">false</span>, <span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    r.app = app;</div><div class="line">    app.waitingToKill = <span class="keyword">null</span>;</div><div class="line">    r.launchCount++;</div><div class="line">    r.lastLaunchTime = SystemClock.uptimeMillis();</div><div class="line"></div><div class="line">    <span class="keyword">int</span> idx = app.activities.indexOf(r);</div><div class="line">    <span class="keyword">if</span> (idx &lt; <span class="number">0</span>) &#123;</div><div class="line">        app.activities.add(r);</div><div class="line">    &#125;</div><div class="line">    mService.updateLruProcessLocked(app, <span class="keyword">true</span>, <span class="keyword">null</span>);</div><div class="line">    mService.updateOomAdjLocked();</div><div class="line"></div><div class="line">    <span class="keyword">final</span> TaskRecord task = r.task;</div><div class="line">    <span class="keyword">if</span> (task.mLockTaskAuth == LOCK_TASK_AUTH_LAUNCHABLE ||</div><div class="line">            task.mLockTaskAuth == LOCK_TASK_AUTH_LAUNCHABLE_PRIV) &#123;</div><div class="line">        setLockTaskModeLocked(task, LOCK_TASK_MODE_LOCKED, <span class="string">"mLockTaskAuth==LAUNCHABLE"</span>, <span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> ActivityStack stack = task.stack;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">if</span> (app.thread == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RemoteException();</div><div class="line">        &#125;</div><div class="line">        List&lt;ResultInfo&gt; results = <span class="keyword">null</span>;</div><div class="line">        List&lt;ReferrerIntent&gt; newIntents = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (andResume) &#123;</div><div class="line">            results = r.results;</div><div class="line">            newIntents = r.newIntents;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (andResume) &#123;</div><div class="line">            EventLog.writeEvent(EventLogTags.AM_RESTART_ACTIVITY,</div><div class="line">                    r.userId, System.identityHashCode(r),</div><div class="line">                    task.taskId, r.shortComponentName);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (r.isHomeActivity() &amp;&amp; r.isNotResolverActivity()) &#123;</div><div class="line">            <span class="comment">// Home process 是task中的第一个进程</span></div><div class="line">            mService.mHomeProcess = task.mActivities.get(<span class="number">0</span>).app;</div><div class="line">        &#125;</div><div class="line">        mService.ensurePackageDexOpt(r.intent.getComponent().getPackageName());</div><div class="line">        r.sleeping = <span class="keyword">false</span>;</div><div class="line">        r.forceNewConfig = <span class="keyword">false</span>;</div><div class="line">        mService.showAskCompatModeDialogLocked(r);</div><div class="line">        r.compat = mService.compatibilityInfoForPackageLocked(r.info.applicationInfo);</div><div class="line">        ProfilerInfo profilerInfo = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (mService.mProfileApp != <span class="keyword">null</span> &amp;&amp; mService.mProfileApp.equals(app.processName)) &#123;</div><div class="line">            <span class="keyword">if</span> (mService.mProfileProc == <span class="keyword">null</span> || mService.mProfileProc == app) &#123;</div><div class="line">                mService.mProfileProc = app;</div><div class="line">                <span class="keyword">final</span> String profileFile = mService.mProfileFile;</div><div class="line">                <span class="keyword">if</span> (profileFile != <span class="keyword">null</span>) &#123;</div><div class="line">                    ParcelFileDescriptor profileFd = mService.mProfileFd;</div><div class="line">                    <span class="keyword">if</span> (profileFd != <span class="keyword">null</span>) &#123;</div><div class="line">                        <span class="keyword">try</span> &#123;</div><div class="line">                            profileFd = profileFd.dup();</div><div class="line">                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                            <span class="keyword">if</span> (profileFd != <span class="keyword">null</span>) &#123;</div><div class="line">                                <span class="keyword">try</span> &#123;</div><div class="line">                                    profileFd.close();</div><div class="line">                                &#125; <span class="keyword">catch</span> (IOException o) &#123;</div><div class="line">                                &#125;</div><div class="line">                                profileFd = <span class="keyword">null</span>;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    profilerInfo = <span class="keyword">new</span> ProfilerInfo(profileFile, profileFd,</div><div class="line">                            mService.mSamplingInterval, mService.mAutoStopProfiler);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (andResume) &#123;</div><div class="line">            app.hasShownUi = <span class="keyword">true</span>;</div><div class="line">            app.pendingUiClean = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        app.forceProcessStateUpTo(mService.mTopProcessState);</div><div class="line">        <span class="comment">// 调用ApplicationThreadNative.ApplicationThreadProxy.scheduleLaunchActivity()，跳到应用进程</span></div><div class="line">        app.thread.scheduleLaunchActivity(<span class="keyword">new</span> Intent(r.intent), r.appToken,</div><div class="line">                System.identityHashCode(r), r.info, <span class="keyword">new</span> Configuration(mService.mConfiguration),</div><div class="line">                <span class="keyword">new</span> Configuration(stack.mOverrideConfig), r.compat, r.launchedFromPackage,</div><div class="line">                task.voiceInteractor, app.repProcState, r.icicle, r.persistentState, results,</div><div class="line">                newIntents, !andResume, mService.isNextTransitionForward(), profilerInfo);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> ((app.info.privateFlags&amp;ApplicationInfo.PRIVATE_FLAG_CANT_SAVE_STATE) != <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (app.processName.equals(app.info.packageName)) &#123;</div><div class="line">                <span class="keyword">if</span> (mService.mHeavyWeightProcess != <span class="keyword">null</span></div><div class="line">                        &amp;&amp; mService.mHeavyWeightProcess != app) &#123;</div><div class="line">                    ...</div><div class="line">                &#125;</div><div class="line">                mService.mHeavyWeightProcess = app;</div><div class="line">                Message msg = mService.mHandler.obtainMessage(</div><div class="line">                        ActivityManagerService.POST_HEAVY_NOTIFICATION_MSG);</div><div class="line">                msg.obj = r;</div><div class="line">                mService.mHandler.sendMessage(msg);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">        <span class="keyword">if</span> (r.launchFailed) &#123;</div><div class="line">            mService.appDiedLocked(app);</div><div class="line">            stack.requestFinishActivityLocked(r.appToken, Activity.RESULT_CANCELED, <span class="keyword">null</span>,</div><div class="line">                    <span class="string">"2nd-crash"</span>, <span class="keyword">false</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        app.activities.remove(r);</div><div class="line">        <span class="keyword">throw</span> e;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    r.launchFailed = <span class="keyword">false</span>;</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (andResume) &#123;</div><div class="line">        stack.minimalResumeActivityLocked(r);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        r.state = STOPPED;</div><div class="line">        r.stopped = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (isFrontStack(stack)) &#123;</div><div class="line">        mService.startSetupActivityLocked();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mService.mServices.updateServiceConnectionActivitiesLocked(r.app);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="ActivityThread-H-handleMessage-LAUNCH-ACTIVITY"><a href="#ActivityThread-H-handleMessage-LAUNCH-ACTIVITY" class="headerlink" title="ActivityThread.H.handleMessage():LAUNCH_ACTIVITY"></a>ActivityThread.H.handleMessage():LAUNCH_ACTIVITY</h4><p>跳转到应用进程来处理，从这里开始就开始Activity的生命周期的运转了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">        <span class="keyword">case</span> LAUNCH_ACTIVITY: &#123;</div><div class="line">            Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"activityStart"</span>);</div><div class="line">            <span class="keyword">final</span> ActivityClientRecord r = (ActivityClientRecord) msg.obj;</div><div class="line"></div><div class="line">            r.packageInfo = getPackageInfoNoCheck(</div><div class="line">                    r.activityInfo.applicationInfo, r.compatInfo);</div><div class="line">            handleLaunchActivity(r, <span class="keyword">null</span>);</div><div class="line">            Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">        &#125; <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="ActivityThread-handleLaunchActivity"><a href="#ActivityThread-handleLaunchActivity" class="headerlink" title="ActivityThread.handleLaunchActivity()"></a>ActivityThread.handleLaunchActivity()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleLaunchActivity</span><span class="params">(ActivityClientRecord r, Intent customIntent)</span> </span>&#123;</div><div class="line">    unscheduleGcIdler();</div><div class="line">    mSomeActivitiesChanged = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (r.profilerInfo != <span class="keyword">null</span>) &#123;</div><div class="line">        mProfiler.setProfiler(r.profilerInfo);</div><div class="line">        mProfiler.startProfiling();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    handleConfigurationChanged(<span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 初始化WMS</span></div><div class="line">    WindowManagerGlobal.initialize();</div><div class="line">    <span class="comment">// 创建activity并调用onCreate，onStart等生命周期函数</span></div><div class="line">    Activity a = performLaunchActivity(r, customIntent);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (a != <span class="keyword">null</span>) &#123;</div><div class="line">        r.createdConfig = <span class="keyword">new</span> Configuration(mConfiguration);</div><div class="line">        Bundle oldState = r.state;</div><div class="line">        <span class="comment">// 调用onResume方法</span></div><div class="line">        handleResumeActivity(r.token, <span class="keyword">false</span>, r.isForward,</div><div class="line">                !r.activity.mFinished &amp;&amp; !r.startsNotResumed);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!r.activity.mFinished &amp;&amp; r.startsNotResumed) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                r.activity.mCalled = <span class="keyword">false</span>;</div><div class="line">                mInstrumentation.callActivityOnPause(r.activity);</div><div class="line">                <span class="keyword">if</span> (r.isPreHoneycomb()) &#123;</div><div class="line">                    r.state = oldState;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (!r.activity.mCalled) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> SuperNotCalledException(</div><div class="line">                        <span class="string">"Activity "</span> + r.intent.getComponent().toShortString() +</div><div class="line">                        <span class="string">" did not call through to super.onPause()"</span>);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125; <span class="keyword">catch</span> (SuperNotCalledException e) &#123;</div><div class="line">                <span class="keyword">throw</span> e;</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                <span class="keyword">if</span> (!mInstrumentation.onException(r.activity, e)) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">                            <span class="string">"Unable to pause activity "</span></div><div class="line">                            + r.intent.getComponent().toShortString()</div><div class="line">                            + <span class="string">": "</span> + e.toString(), e);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            r.paused = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ActivityManagerNative.getDefault()</div><div class="line">                .finishActivity(r.token, Activity.RESULT_CANCELED, <span class="keyword">null</span>, <span class="keyword">false</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;&#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="ActivityThread-performLaunchActivity"><a href="#ActivityThread-performLaunchActivity" class="headerlink" title="ActivityThread.performLaunchActivity()"></a>ActivityThread.performLaunchActivity()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Activity <span class="title">performLaunchActivity</span><span class="params">(ActivityClientRecord r, Intent customIntent)</span> </span>&#123;</div><div class="line">    <span class="comment">// 收集要启动的Activity的package信息</span></div><div class="line">    ActivityInfo aInfo = r.activityInfo;</div><div class="line">    <span class="keyword">if</span> (r.packageInfo == <span class="keyword">null</span>) &#123;</div><div class="line">        r.packageInfo = getPackageInfo(aInfo.applicationInfo, r.compatInfo,</div><div class="line">                Context.CONTEXT_INCLUDE_CODE);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 收集要启动的Activity的component信息</span></div><div class="line">    ComponentName component = r.intent.getComponent();</div><div class="line">    <span class="keyword">if</span> (component == <span class="keyword">null</span>) &#123;</div><div class="line">        component = r.intent.resolveActivity(</div><div class="line">            mInitialApplication.getPackageManager());</div><div class="line">        r.intent.setComponent(component);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (r.activityInfo.targetActivity != <span class="keyword">null</span>) &#123;</div><div class="line">        component = <span class="keyword">new</span> ComponentName(r.activityInfo.packageName,</div><div class="line">                r.activityInfo.targetActivity);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 新建一个Activity对象，通过ClassLoader将要启动的Activity类加载进来</span></div><div class="line">    Activity activity = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        java.lang.ClassLoader cl = r.packageInfo.getClassLoader();</div><div class="line">        activity = mInstrumentation.newActivity(</div><div class="line">                cl, component.getClassName(), r.intent);</div><div class="line">        StrictMode.incrementExpectedActivityCount(activity.getClass());</div><div class="line">        r.intent.setExtrasClassLoader(cl);</div><div class="line">        r.intent.prepareToEnterProcess();</div><div class="line">        <span class="keyword">if</span> (r.state != <span class="keyword">null</span>) &#123;</div><div class="line">            r.state.setClassLoader(cl);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        <span class="keyword">if</span> (!mInstrumentation.onException(activity, e)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">                <span class="string">"Unable to instantiate activity "</span> + component</div><div class="line">                + <span class="string">": "</span> + e.toString(), e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">// 获取Application对象</span></div><div class="line">        <span class="comment">// 不知道大家有没有印象，在ActivityThread.handleBindApplication方法中已经调用过makeApplication</span></div><div class="line">        <span class="comment">// 为什么还要make呢？追踪源码会发现，如果已经创建就返回以前创建的对象</span></div><div class="line">        Application app = r.packageInfo.makeApplication(<span class="keyword">false</span>, mInstrumentation);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// 创建Context对象，并绑定到Activity</span></div><div class="line">            Context appContext = createBaseContextForActivity(r, activity);</div><div class="line">            CharSequence title = r.activityInfo.loadLabel(appContext.getPackageManager());</div><div class="line">            Configuration config = <span class="keyword">new</span> Configuration(mCompatConfiguration);</div><div class="line">            activity.attach(appContext, <span class="keyword">this</span>, getInstrumentation(), r.token,</div><div class="line">                    r.ident, app, r.intent, r.activityInfo, title, r.parent,</div><div class="line">                    r.embeddedID, r.lastNonConfigurationInstances, config,</div><div class="line">                    r.referrer, r.voiceInteractor);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (customIntent != <span class="keyword">null</span>) &#123;</div><div class="line">                activity.mIntent = customIntent;</div><div class="line">            &#125;</div><div class="line">            r.lastNonConfigurationInstances = <span class="keyword">null</span>;</div><div class="line">            activity.mStartedActivity = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">int</span> theme = r.activityInfo.getThemeResource();</div><div class="line">            <span class="keyword">if</span> (theme != <span class="number">0</span>) &#123;</div><div class="line">                activity.setTheme(theme);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            activity.mCalled = <span class="keyword">false</span>;</div><div class="line">            <span class="comment">// 调用Activity.onCreate方法</span></div><div class="line">            <span class="keyword">if</span> (r.isPersistable()) &#123;</div><div class="line">                mInstrumentation.callActivityOnCreate(activity, r.state, r.persistentState);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                mInstrumentation.callActivityOnCreate(activity, r.state);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (!activity.mCalled) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> SuperNotCalledException(</div><div class="line">                    <span class="string">"Activity "</span> + r.intent.getComponent().toShortString() +</div><div class="line">                    <span class="string">" did not call through to super.onCreate()"</span>);</div><div class="line">            &#125;</div><div class="line">            r.activity = activity;</div><div class="line">            r.stopped = <span class="keyword">true</span>;</div><div class="line">            <span class="keyword">if</span> (!r.activity.mFinished) &#123;</div><div class="line">                <span class="comment">// 调用Activity.onStart方法</span></div><div class="line">                activity.performStart();</div><div class="line">                r.stopped = <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (!r.activity.mFinished) &#123;</div><div class="line">                <span class="comment">// 调用Activity.onRestoreInstanceState方法</span></div><div class="line">                <span class="keyword">if</span> (r.isPersistable()) &#123;</div><div class="line">                    <span class="keyword">if</span> (r.state != <span class="keyword">null</span> || r.persistentState != <span class="keyword">null</span>) &#123;</div><div class="line">                        mInstrumentation.callActivityOnRestoreInstanceState(activity, r.state,</div><div class="line">                                r.persistentState);</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (r.state != <span class="keyword">null</span>) &#123;</div><div class="line">                    mInstrumentation.callActivityOnRestoreInstanceState(activity, r.state);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (!r.activity.mFinished) &#123;</div><div class="line">                activity.mCalled = <span class="keyword">false</span>;</div><div class="line">                <span class="comment">// 调用Activity.onPostCreate方法</span></div><div class="line">                <span class="keyword">if</span> (r.isPersistable()) &#123;</div><div class="line">                    mInstrumentation.callActivityOnPostCreate(activity, r.state,</div><div class="line">                            r.persistentState);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    mInstrumentation.callActivityOnPostCreate(activity, r.state);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (!activity.mCalled) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> SuperNotCalledException(</div><div class="line">                        <span class="string">"Activity "</span> + r.intent.getComponent().toShortString() +</div><div class="line">                        <span class="string">" did not call through to super.onPostCreate()"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        r.paused = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">        mActivities.put(r.token, r);</div><div class="line"></div><div class="line">    &#125; <span class="keyword">catch</span> (SuperNotCalledException e) &#123;</div><div class="line">        <span class="keyword">throw</span> e;</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        <span class="keyword">if</span> (!mInstrumentation.onException(activity, e)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">                <span class="string">"Unable to start activity "</span> + component</div><div class="line">                + <span class="string">": "</span> + e.toString(), e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> activity;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从 <code>performLaunchActivity</code> 方法开始，正式进入了 <code>Activity</code> 的 <code>onCreate()</code>、<code>onStart()</code>、<code>onResume()</code>等生命周期过程。<br>至此，<code>Activity</code> 的启动流程基本介绍完了。</p>
<h2 id="方法详解"><a href="#方法详解" class="headerlink" title="方法详解"></a>方法详解</h2><h3 id="findTaskLocked"><a href="#findTaskLocked" class="headerlink" title="findTaskLocked()"></a>findTaskLocked()</h3><h3 id="findActivityLocked"><a href="#findActivityLocked" class="headerlink" title="findActivityLocked()"></a>findActivityLocked()</h3><h3 id="resolveActivity"><a href="#resolveActivity" class="headerlink" title="resolveActivity()"></a>resolveActivity()</h3><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><!--     
http://duanqz.github.io/2016-07-29-Activity-LaunchProcess-Part1#10-amsnewprocessrecordlocked
http://duanqz.github.io/2016-10-23-Activity-LaunchProcess-Part2#3-amsattachapplicationlocked
http://gityuan.com/2016/03/12/start-activity/

http://blog.csdn.net/luoshengyang/article/details/6689748
http://blog.csdn.net/Luoshengyang/article/details/6703247
http://duanqz.github.io/2016-02-01-Activity-Maintenance
http://duanqz.github.io/2016-07-29-Activity-LaunchProcess-Part1
http://gityuan.com/2016/03/12/start-activity/
http://gityuan.com/2016/10/09/app-process-create-2/
http://www.cnblogs.com/franksunny/archive/2012/04/17/2453403.html
http://blog.csdn.net/shan987/article/details/50511439
http://blog.csdn.net/yunbin_7/article/details/46003509
http://www.jianshu.com/p/2d52fa0bce90
-->
]]></content>
    
    <summary type="html">
    
      基于Android6.0来分析 Activity 的启动过程
    
    </summary>
    
      <category term="Android源码分析" scheme="http://yoursite.com/categories/Android%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Android源码分析" scheme="http://yoursite.com/tags/Android%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="startActivity" scheme="http://yoursite.com/tags/startActivity/"/>
    
  </entry>
  
  <entry>
    <title>Android AMS 与 APP 进程通信</title>
    <link href="http://yoursite.com/2016/06/08/android-source-code-analysis-ams-app-ipc/"/>
    <id>http://yoursite.com/2016/06/08/android-source-code-analysis-ams-app-ipc/</id>
    <published>2016-06-08T02:00:00.000Z</published>
    <updated>2018-05-06T07:27:21.829Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在 Android 中，APK 运行在 App 进程，而 AMS 运行在 system_server 进程，AMS 承担着对 Activity 的生命周期的管理等工作，而 Activity 生命周期函数的回调又是在 App 进程中进行的，App 进程需要频繁的和 AMS 进程进行通信。那么理解 AMS 进程和 App 进程之间的通信就对 Activity 的启动流程的理解有很好的铺垫作用。因此在介绍 Activity 的启动流程之前我们先来学习一下 AMS 进程和 App 进程之间是如何通信的。<br>提起到 Android 进程间通信，我们自然就想到了 Binder。是的，AMS 和 APP 之间肯定也是通过 Binder 进行通信的。下面进行详细的介绍。<br>本文涉及到的类包含：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">frameworks/base/core/java/android/app/ActivityManagerNative.java</div><div class="line">frameworks/base/core/java/android/app/ActivityManagerNative$ActivityManagerProxy.java</div><div class="line">frameworks/base/core/java/android/app/ApplicationThreadNative.java</div><div class="line">frameworks/base/core/java/android/app/ApplicationThreadNative$ApplicationThreadProxy.java</div><div class="line">frameworks/base/core/java/android/app/ActivityThread.java</div><div class="line">frameworks/base/core/java/android/app/ActivityThread$ApplicationThread.java</div></pre></td></tr></table></figure>
<h2 id="相关类关系图"><a href="#相关类关系图" class="headerlink" title="相关类关系图"></a>相关类关系图</h2><p><img src="http://www.plantuml.com/plantuml/svg/jLHDRzD04BtlhnZrn8TIn9LQbb8EA1Af8j9xDRQtpGfxrzhTM4HGn8KJFI3K4wc4UiiLzOA8rFmPB8T_mHhRn8ut7nTkA-VDUs_UpEIKwP32GRS_XFJB5NG70_ZzuUklnMqs_P5-lCk-pzFf_G5HhncFKM84VeXAmLi2S2naGELp4GhfE6gYD8tE59K9bQuBGuel9ALy7OTnV1PBuLEb3AgF5vHh99T021UQ0YeuUKeSptNy7F-ieW4NbelFozkhz6QMtSsp-RVbOfhDFe7pv2yGt5fHoLglINzUPzUpLWtb0UIwX32kgJn7dqAlLpr9qUinuyP_7T7rDKkOdlIH6wdcJt4SCXyr4_nq92a613sb9VgwJAu5E37lX0AiPvD7_1ZYiMVWu0aHKkHWYYHoPUWUF3mYbsG3vq2ADnDeJoNdx40iMO8cx7F6COHUqHz4hsXaeZYgonQ8HB00F8EgwUJoTg3oHpGOX_GbZha_ggBQQdT7y__9HNE8GvCHCnEqXxOcOGOEIgFKTMAx4TGQZO6cvmqUobNOOM77BZGfgqrenxlQWsqRiAlJ_NlSDkhtbfs8pAVYcNDL7frtXuVLHVxxrEdOasmYx8T7oEhW2_RMURS1hICdwqK5qZQC_Q2bkRPKYRPU_FxmglSD2sX9jBmFikd_ovxnIg6qyyY6-WC0" alt="效果图"></p>
<!--   
@startuml
Title "AMS 和 APP 通信相关类图"
skinparam class {
  BorderColor<<system_server>> SeaGreen
  BorderColor<<app_process>> Magenta
} 

note as N1
<b><color:SeaGreen > 运行在系统进程 </color >
<b><color:Magenta > 运行在应用进程 </color >
end note

interface IInterface
class Binder
interface IActivityManager
interface IApplicationThread
abstract class ApplicationThreadNative  <<app_process>> {
  + public boolean onTransact();
}
class ApplicationThreadProxy <<system_server>> {
  - private final IBinder mRemote;
  + public final void bindApplication();
  + public final void scheduleLaunchActivity();
}
class ApplicationThread  <<app_process>> {
  + public final void bindApplication();
  + public final void scheduleLaunchActivity();
}
class ActivityManagerService <<system_server>> {
  + public final int startActivity();
  + public final void attachApplication();
}
class ActivityManagerNative <<system_server>> {
  + public boolean onTransact();
}
class ActivityManagerProxy <<app_process>> {
  - private IBinder mRemote;
  + public int startActivity();
  + public void attachApplication();
}
class ActivityThread  <<app_process>> {
  ~ ApplicationThread mAppThread;
}
IBinder <|.. Binder
Binder <|-- ActivityManagerNative
Binder <|-- ApplicationThreadNative

IInterface <|.. IActivityManager
IInterface <|.. IApplicationThread

IActivityManager <|.. ActivityManagerProxy
IActivityManager <|.. ActivityManagerNative
IApplicationThread <|.. ApplicationThreadProxy
IApplicationThread <|.. ApplicationThreadNative

ActivityManagerNative <|-- ActivityManagerService
ApplicationThreadNative <|-- ApplicationThread

ActivityThread *-- ApplicationThread
@enduml
-->
<h2 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h2><p>下面通过一个图来表示一下 AMS 和 APP 的通信，该图片摘自<a href="http://weishu.me/2016/01/12/binder-index-for-newer/" target="_blank" rel="external">Weishu Note</a>，描述的很好，直接拿来用来。</p>
<p><img src="/images/android-source-code-analysis-ams-app-ipc/ams-ipc-app.png" alt="效果图"></p>
<p>在 App 进程侧，App 进程作为Binder的客户端当发起启动 <code>Activity</code> 时，通过作为服务端的代理对象的 <code>ActivityManagerProxy</code> 来发起远程调用，此时 system 进程作为服务端，<code>ActivityManagerNative</code> 作为 <code>Binder</code> 本地对象收到远程调用后，由它的实现类 <code>ActivityManagerService</code> 完成相应的生命周期管理以及任务栈管理后，会把控制权交给App进程，让App进程完成Activity类对象的创建，以及生命周期回调。<br>接下来的调用 system 进程作为客户端，App 进程作为服务端，通过system进程作为服务端的代理对象的 <code>ApplicationThreadProxy</code> 发起调用，<code>ApplicationThread</code> 作为服务端的 <code>Binder</code> 本地对象收到远程调用后，通过 <code>Handler</code> 发送消息由 <code>ActivityThread</code> 进程处理。<br>了解了这些知识后再看<a href="http://www.heqiangfly.com/2016/04/10/android-source-code-analysis-activity-start-process/" target="_blank" rel="external">Android startActivity 流程分析</a>的流程图，会有助于理解。</p>
<!--   
http://duanqz.github.io/2016-01-29-Activity-IPC
http://weishu.me/2016/03/21/understand-plugin-framework-activity-management/
http://weishu.me/2016/01/12/binder-index-for-newer/
-->
]]></content>
    
    <summary type="html">
    
      基于Android6.0来分析 AMS 与 APP 进程通信
    
    </summary>
    
      <category term="Android源码分析" scheme="http://yoursite.com/categories/Android%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Android源码分析" scheme="http://yoursite.com/tags/Android%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="进程通信" scheme="http://yoursite.com/tags/%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>Android PackageManager相关源码分析之installd进程</title>
    <link href="http://yoursite.com/2016/05/18/android-source-code-analysis-package-manager-installd/"/>
    <id>http://yoursite.com/2016/05/18/android-source-code-analysis-package-manager-installd/</id>
    <published>2016-05-18T02:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>通过前面的介绍我们知道，PMS 里面有个成员变量<code>mInstaller</code>，PMS的很多工作比如dex优化，删除目录等工作都是由它来完成的。<code>Installer</code>类也比较简单，它也有个<code>mInstaller</code>的成员变量，它是<code>InstallerConnection</code>的一个对象，它通过 socket 和 Deamon 进程 installd 进行通信。<code>Installer</code>类所承担的工作实际是由 installd 进程来完成的。<br>installd进程在init.rc中定义如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">service installd /system/bin/installd</div><div class="line">    class main</div><div class="line">    socket installd stream 600 system system</div></pre></td></tr></table></figure>
<p>我们可能有这样的疑问，为什么要创建这样一个进程出来呢？它的工作由PMS来完成不是更好吗？这是因为PMS所在的进程 SystemServer 属于 system 用户组，没有 root 权限。像一些操作文件系统的工作比如移动和删除文件都需要 root 权限才是可以的。<br>相关代码位置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">frameworks/base/core/java/com/android/internal/os/InstallerConnection.java</div><div class="line">frameworks/base/services/core/java/com/android/server/pm/Installer.java</div><div class="line">frameworks/native/cmds/installd/installd.cpp</div></pre></td></tr></table></figure>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> argc __unused, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> buf[BUFFER_MAX];</div><div class="line">    <span class="keyword">struct</span> sockaddr addr;</div><div class="line">    <span class="keyword">socklen_t</span> alen;</div><div class="line">    <span class="keyword">int</span> lsocket, s;</div><div class="line">    <span class="keyword">int</span> selinux_enabled = (is_selinux_enabled() &gt; <span class="number">0</span>);</div><div class="line"></div><div class="line">    setenv(<span class="string">"ANDROID_LOG_TAGS"</span>, <span class="string">"*:v"</span>, <span class="number">1</span>);</div><div class="line">    android::base::InitLogging(argv);</div><div class="line"></div><div class="line">    ALOGI(<span class="string">"installd firing up\n"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">union</span> selinux_callback cb;</div><div class="line">    cb.func_log = log_callback;</div><div class="line">    selinux_set_callback(SELINUX_CB_LOG, cb);</div><div class="line">    <span class="comment">// 初始化一些全局变量</span></div><div class="line">    <span class="keyword">if</span> (initialize_globals() &lt; <span class="number">0</span>) &#123;</div><div class="line">        ALOGE(<span class="string">"Could not initialize globals; exiting.\n"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 初始化系统目录</span></div><div class="line">    <span class="keyword">if</span> (initialize_directories() &lt; <span class="number">0</span>) &#123;</div><div class="line">        ALOGE(<span class="string">"Could not create directories; exiting.\n"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (selinux_enabled &amp;&amp; selinux_status_open(<span class="literal">true</span>) &lt; <span class="number">0</span>) &#123;</div><div class="line">        ALOGE(<span class="string">"Could not open selinux status; exiting.\n"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 从环境变量 ANDROID_SOCKET_installd 中获取用于监听的本地 socket</span></div><div class="line">    lsocket = android_get_control_socket(SOCKET_PATH);</div><div class="line">    <span class="keyword">if</span> (lsocket &lt; <span class="number">0</span>) &#123;</div><div class="line">        ALOGE(<span class="string">"Failed to get socket from environment: %s\n"</span>, strerror(errno));</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (listen(lsocket, <span class="number">5</span>)) &#123;</div><div class="line">        ALOGE(<span class="string">"Listen on socket failed: %s\n"</span>, strerror(errno));</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    fcntl(lsocket, F_SETFD, FD_CLOEXEC);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        alen = <span class="keyword">sizeof</span>(addr);</div><div class="line">        <span class="comment">// 接收命令</span></div><div class="line">        s = accept(lsocket, &amp;addr, &amp;alen);</div><div class="line">        <span class="keyword">if</span> (s &lt; <span class="number">0</span>) &#123;</div><div class="line">            ALOGE(<span class="string">"Accept failed: %s\n"</span>, strerror(errno));</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        fcntl(s, F_SETFD, FD_CLOEXEC);</div><div class="line">        <span class="comment">// 处理请求的命令</span></div><div class="line">        ALOGI(<span class="string">"new connection\n"</span>);</div><div class="line">        <span class="keyword">for</span> (;;) &#123;</div><div class="line">            <span class="keyword">unsigned</span> <span class="keyword">short</span> count;</div><div class="line">            <span class="comment">// 读取命令的长度</span></div><div class="line">            <span class="keyword">if</span> (readx(s, &amp;count, <span class="keyword">sizeof</span>(count))) &#123;</div><div class="line">                ALOGE(<span class="string">"failed to read size\n"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 如果长度&lt; 1或者是&gt;= BUFFER_MAX，按出错处理</span></div><div class="line">            <span class="keyword">if</span> ((count &lt; <span class="number">1</span>) || (count &gt;= BUFFER_MAX)) &#123;</div><div class="line">                ALOGE(<span class="string">"invalid size %d\n"</span>, count);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 读取命令</span></div><div class="line">            <span class="keyword">if</span> (readx(s, buf, count)) &#123;</div><div class="line">                ALOGE(<span class="string">"failed to read command\n"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            buf[count] = <span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span> (selinux_enabled &amp;&amp; selinux_status_updated() &gt; <span class="number">0</span>) &#123;</div><div class="line">                selinux_android_seapp_context_reload();</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 执行命令</span></div><div class="line">            <span class="keyword">if</span> (execute(s, buf)) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        ALOGI(<span class="string">"closing connection\n"</span>);</div><div class="line">        close(s);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="支持的命令"><a href="#支持的命令" class="headerlink" title="支持的命令"></a>支持的命令</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> cmdinfo cmds[] = &#123;</div><div class="line">    &#123; <span class="string">"ping"</span>,                 <span class="number">0</span>, do_ping &#125;,</div><div class="line">    &#123; <span class="string">"install"</span>,              <span class="number">5</span>, do_install &#125;,</div><div class="line">    &#123; <span class="string">"dexopt"</span>,               <span class="number">10</span>, do_dexopt &#125;,</div><div class="line">    &#123; <span class="string">"markbootcomplete"</span>,     <span class="number">1</span>, do_mark_boot_complete &#125;,</div><div class="line">    &#123; <span class="string">"movedex"</span>,              <span class="number">3</span>, do_move_dex &#125;,</div><div class="line">    &#123; <span class="string">"rmdex"</span>,                <span class="number">2</span>, do_rm_dex &#125;,</div><div class="line">    &#123; <span class="string">"remove"</span>,               <span class="number">3</span>, do_remove &#125;,</div><div class="line">    &#123; <span class="string">"rename"</span>,               <span class="number">2</span>, do_rename &#125;,</div><div class="line">    &#123; <span class="string">"fixuid"</span>,               <span class="number">4</span>, do_fixuid &#125;,</div><div class="line">    &#123; <span class="string">"freecache"</span>,            <span class="number">2</span>, do_free_cache &#125;,</div><div class="line">    &#123; <span class="string">"rmcache"</span>,              <span class="number">3</span>, do_rm_cache &#125;,</div><div class="line">    &#123; <span class="string">"rmcodecache"</span>,          <span class="number">3</span>, do_rm_code_cache &#125;,</div><div class="line">    &#123; <span class="string">"getsize"</span>,              <span class="number">8</span>, do_get_size &#125;,</div><div class="line">    &#123; <span class="string">"rmuserdata"</span>,           <span class="number">3</span>, do_rm_user_data &#125;,</div><div class="line">    &#123; <span class="string">"cpcompleteapp"</span>,        <span class="number">6</span>, do_cp_complete_app &#125;,</div><div class="line">    &#123; <span class="string">"movefiles"</span>,            <span class="number">0</span>, do_movefiles &#125;,</div><div class="line">    &#123; <span class="string">"linklib"</span>,              <span class="number">4</span>, do_linklib &#125;,</div><div class="line">    &#123; <span class="string">"mkuserdata"</span>,           <span class="number">5</span>, do_mk_user_data &#125;,</div><div class="line">    &#123; <span class="string">"mkuserconfig"</span>,         <span class="number">1</span>, do_mk_user_config &#125;,</div><div class="line">    &#123; <span class="string">"rmuser"</span>,               <span class="number">2</span>, do_rm_user &#125;,</div><div class="line">    &#123; <span class="string">"idmap"</span>,                <span class="number">3</span>, do_idmap &#125;,</div><div class="line">    &#123; <span class="string">"restorecondata"</span>,       <span class="number">4</span>, do_restorecon_data &#125;,</div><div class="line">    &#123; <span class="string">"createoatdir"</span>,         <span class="number">2</span>, do_create_oat_dir &#125;,</div><div class="line">    &#123; <span class="string">"rmpackagedir"</span>,         <span class="number">1</span>, do_rm_package_dir &#125;,</div><div class="line">    &#123; <span class="string">"linkfile"</span>,             <span class="number">3</span>, do_link_file &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>中间的数字表示需要的参数个数，后面表示各个命令对应的执行函数。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> cmdinfo &#123;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name;</div><div class="line">    <span class="keyword">unsigned</span> numargs;</div><div class="line">    <span class="keyword">int</span> (*func)(<span class="keyword">char</span> **arg, <span class="keyword">char</span> reply[REPLY_MAX]);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>下面简单介绍一下这些命令的作用：</p>
<ul>
<li>ping：用于测试的空操作</li>
<li>install：安装应用</li>
<li>dexopt：dex优化操作，6.0之前的生成dex，6.0包括之后的生成dex和oat</li>
<li>markbootcomplete： 通知启动完成</li>
<li>movedex：移动apk文件</li>
<li>rmdex：删除/data/dalvik-cache下面相关文件</li>
<li>remove：卸载应用</li>
<li>rename：更改应用数据目录的名称</li>
<li>fixuid：更改应用数据目录的uid</li>
<li>freecache：清除/cache目录下的文件</li>
<li>rmcache：删除/cache目录下面某个应用的目录</li>
<li>rmcodecache：清除代码缓存文件</li>
<li>getsize：计算一个应用占用空间的大小，包括apk、数据目录、cache目录等</li>
<li>rmuserdata：删除一个user的所有安装的应用</li>
<li>cpcompleteapp：复制整个app</li>
<li>movefiles：执行/system/etc/updatecmds目录下的移动目录的脚本</li>
<li>linklib：为动态库建立符号链接</li>
<li>mkuserdata：为一个用户创建目录</li>
<li>mkuserconfig：为一个用户建立配置文件</li>
<li>rmuser：删除一个用户的所有文件</li>
<li>idmap：对两个apk进程执行idmap操作</li>
<li>restorecondata：恢复目录的SELinux安全上下文</li>
<li>createoatdir：创建OAT的目录</li>
<li>rmpackagedir：删除包的目录</li>
<li>linkfile：对文件建立符号链接</li>
</ul>
]]></content>
    
    <summary type="html">
    
      基于Android6.0来分析Android的installd进程
    
    </summary>
    
      <category term="Android源码分析" scheme="http://yoursite.com/categories/Android%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Android源码分析" scheme="http://yoursite.com/tags/Android%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="PackageManager" scheme="http://yoursite.com/tags/PackageManager/"/>
    
  </entry>
  
  <entry>
    <title>Android PackageManager相关源码分析之卸载应用</title>
    <link href="http://yoursite.com/2016/05/16/android-source-code-analysis-package-manager-uninstallation/"/>
    <id>http://yoursite.com/2016/05/16/android-source-code-analysis-package-manager-uninstallation/</id>
    <published>2016-05-16T02:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="卸载应用"><a href="#卸载应用" class="headerlink" title="卸载应用"></a>卸载应用</h2><p>我们可以通过下面的代码执行一个应用的卸载工作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getPackageManager().deletePackage(mAppInfo.packageName, observer,  mAllUsers ? PackageManager.DELETE_ALL_USERS : <span class="number">0</span>);</div></pre></td></tr></table></figure>
<p>它最后会调用到 <code>ApplicantPackageManger</code> 的<code>deletePackage()</code>方法，通过Binder调用，会调用 PMS 中的<code>deletePackageAsUser()</code>方法。<br>那么接下来我们就从 PMS 的 <code>deletePackageAsUser()</code> 方法来开始分析应用的卸载流程。<br>Android的应用卸载有下面几个阶段的工作：</p>
<ul>
<li>删除和该包相关的 acitivity、service、provider 等信息</li>
<li>删除 code、library和resource 等信息</li>
<li>调用 installd 删除 /data/data/ 以及 /data/dalvik-cache 下面的文件(经过dexopt过的文件)</li>
<li>更新 <code>Settings</code> 中的 package 信息</li>
</ul>
<p>代码调用流程如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">├── PMS.deletePackageAsUser()</div><div class="line">    └── PMS.deletePackage()</div><div class="line">         ├── deletePackageX()</div><div class="line">         │    ├── deletePackageLI()</div><div class="line">         │    │    ├── Installer.clearUserData()</div><div class="line">         │    │    ├── removeKeystoreDataIfNeeded()</div><div class="line">         │    │    ├── schedulePackageCleaning()</div><div class="line">         │    │    ├── clearPackagePreferredActivitiesLPw()</div><div class="line">         │    │    ├── scheduleWritePackageRestrictionsLocked()</div><div class="line">         │    │    ├── resetUserChangesToRuntimePermissionsAndFlagsLPw()</div><div class="line">         │    │    ├── removePackageDataLI()</div><div class="line">         │    │    ├── <span class="number">1</span> deleteSystemPackageLI()</div><div class="line">         │    │    │      ├── deleteInstalledPackageLI</div><div class="line">         │    │    │      ├── Settings.enableSystemPackageLPw()</div><div class="line">         │    │    │      ├── NativeLibraryHelper.removeNativeBinariesLI()</div><div class="line">         │    │    │      ├── scanPackageLI()</div><div class="line">         │    │    │      ├── updatePermissionsLPw()</div><div class="line">         │    │    │      └── Settings.writeLPr()</div><div class="line">         │    │    ├── <span class="number">2</span> killApplication()</div><div class="line">         │    │    └── <span class="number">2</span> deleteInstalledPackageLI()</div><div class="line">         │    │           ├── removePackageDataLI()</div><div class="line">         │    │           │    ├── removePackageLI()</div><div class="line">         │    │           │    │    ├── PackageSetting.remove()</div><div class="line">         │    │           │    │    └── cleanPackageDataStructuresLILPw()</div><div class="line">         │    │           │    ├── removeDataDirsLI()</div><div class="line">         │    │           │    ├── schedulePackageCleaning()</div><div class="line">         │    │           │    │    │ post Message START_CLEANING_PACKAGE</div><div class="line">         │    │           │    │    └── startCleaningPackages()</div><div class="line">         │    │           │    ├── clearIntentFilterVerificationsLPw()</div><div class="line">         │    │           │    ├── clearDefaultBrowserIfNeeded()</div><div class="line">         │    │           │    ├── Settings.removePackageLPw()</div><div class="line">         │    │           │    ├── updatePermissionsLPw()</div><div class="line">         │    │           │    ├── clearPackagePreferredActivitiesLPw()</div><div class="line">         │    │           │    ├── PackageSetting.setInstalled()</div><div class="line">         │    │           │    ├── Settings.writeLPr()</div><div class="line">         │    │           │    └── removeKeystoreDataIfNeeded()</div><div class="line">         │    │           └── createInstallArgsForExisting()</div><div class="line">         │    ├── PackageRemovedInfo.sendBroadcast()</div><div class="line">         │    └── FileInstallArgs.doPostDeleteLI()</div><div class="line">         │         └── FileInstallArgs.cleanUpResourcesLI()</div><div class="line">         │              ├── PackageParser.parsePackageLite()</div><div class="line">         │              ├── FileInstallArgs.cleanUp()</div><div class="line">         │              └── removeDexFiles()</div><div class="line">         └── IPackageDeleteObserver.onPackageDeleted()</div></pre></td></tr></table></figure>
<h3 id="deletePackage"><a href="#deletePackage" class="headerlink" title="deletePackage()"></a>deletePackage()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deletePackage</span><span class="params">(<span class="keyword">final</span> String packageName,</span></span></div><div class="line">        <span class="keyword">final</span> IPackageDeleteObserver2 observer, <span class="keyword">final</span> <span class="keyword">int</span> userId, <span class="keyword">final</span> <span class="keyword">int</span> flags) &#123;</div><div class="line">    <span class="comment">// 执行 DELETE_PACKAGES 权限检查</span></div><div class="line">    mContext.enforceCallingOrSelfPermission(</div><div class="line">            android.Manifest.permission.DELETE_PACKAGES, <span class="keyword">null</span>);</div><div class="line">    Preconditions.checkNotNull(packageName);</div><div class="line">    Preconditions.checkNotNull(observer);</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> uid = Binder.getCallingUid();</div><div class="line">    <span class="keyword">if</span> (UserHandle.getUserId(uid) != userId) &#123;</div><div class="line">        mContext.enforceCallingPermission(</div><div class="line">                android.Manifest.permission.INTERACT_ACROSS_USERS_FULL,</div><div class="line">                <span class="string">"deletePackage for user "</span> + userId);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 如果该用户不允许卸载应用，则执行回调函数并返回</span></div><div class="line">    <span class="keyword">if</span> (isUserRestricted(userId, UserManager.DISALLOW_UNINSTALL_APPS)) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            observer.onPackageDeleted(packageName,</div><div class="line">                    PackageManager.DELETE_FAILED_USER_RESTRICTED, <span class="keyword">null</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (RemoteException re) &#123;&#125;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 查看是否禁止有某用户卸载该应用，可以通过PMS.setBlockUninstallForUser()来修改该标记</span></div><div class="line">    <span class="keyword">boolean</span> uninstallBlocked = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">if</span> ((flags &amp; PackageManager.DELETE_ALL_USERS) != <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">int</span>[] users = sUserManager.getUserIds();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; users.length; ++i) &#123;</div><div class="line">            <span class="keyword">if</span> (getBlockUninstallForUser(packageName, users[i])) &#123;</div><div class="line">                uninstallBlocked = <span class="keyword">true</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        uninstallBlocked = getBlockUninstallForUser(packageName, userId);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (uninstallBlocked) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            observer.onPackageDeleted(packageName, PackageManager.DELETE_FAILED_OWNER_BLOCKED,</div><div class="line">                    <span class="keyword">null</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (RemoteException re) &#123;&#125;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 由于卸载应用可能耗时较长，因此通过异步来执行卸载工作</span></div><div class="line">    mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            mHandler.removeCallbacks(<span class="keyword">this</span>);</div><div class="line">            <span class="comment">// 调用deletePackageX()来执行卸载工作</span></div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> returnCode = deletePackageX(packageName, userId, flags);</div><div class="line">            <span class="keyword">if</span> (observer != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="comment">// 卸载完成，调用回调函数</span></div><div class="line">                    observer.onPackageDeleted(packageName, returnCode, <span class="keyword">null</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (RemoteException e) &#123;&#125; <span class="comment">//end catch</span></div><div class="line">            &#125; <span class="comment">//end if</span></div><div class="line">        &#125; <span class="comment">//end run</span></div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="deletePackageX"><a href="#deletePackageX" class="headerlink" title="deletePackageX()"></a>deletePackageX()</h3><p>实际的卸载工作是由 <code>deletePackageX()</code> 方法来完成的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">deletePackageX</span><span class="params">(String packageName, <span class="keyword">int</span> userId, <span class="keyword">int</span> flags)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> PackageRemovedInfo info = <span class="keyword">new</span> PackageRemovedInfo();</div><div class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> res;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> UserHandle removeForUser = (flags &amp; PackageManager.DELETE_ALL_USERS) != <span class="number">0</span></div><div class="line">            ? UserHandle.ALL : <span class="keyword">new</span> UserHandle(userId);</div><div class="line">    <span class="comment">// 检查userId代表的用户是否有权限删除该应用</span></div><div class="line">    <span class="keyword">if</span> (isPackageDeviceAdmin(packageName, removeForUser.getIdentifier())) &#123;</div><div class="line">        <span class="keyword">return</span> PackageManager.DELETE_FAILED_DEVICE_POLICY_MANAGER;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">boolean</span> removedForAllUsers = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">boolean</span> systemUpdate = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span>[] allUsers;</div><div class="line">    <span class="keyword">boolean</span>[] perUserInstalled;</div><div class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</div><div class="line">        <span class="comment">// 获取Settings保存的该应用的信息</span></div><div class="line">        PackageSetting ps = mSettings.mPackages.get(packageName);</div><div class="line">        <span class="comment">// 检查一下是否系统中的所有用户都安装了这个应用</span></div><div class="line">        allUsers = sUserManager.getUserIds();</div><div class="line">        perUserInstalled = <span class="keyword">new</span> <span class="keyword">boolean</span>[allUsers.length];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; allUsers.length; i++) &#123;</div><div class="line">            perUserInstalled[i] = ps != <span class="keyword">null</span> ? ps.getInstalled(allUsers[i]) : <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">synchronized</span> (mInstallLock) &#123;</div><div class="line">        <span class="comment">// 调用deletePackageLI()来卸载应用</span></div><div class="line">        res = deletePackageLI(packageName, removeForUser,</div><div class="line">                <span class="keyword">true</span>, allUsers, perUserInstalled,</div><div class="line">                flags | REMOVE_CHATTY, info, <span class="keyword">true</span>);</div><div class="line">        systemUpdate = info.isRemovedPackageSystemUpdate;</div><div class="line">        <span class="keyword">if</span> (res &amp;&amp; !systemUpdate &amp;&amp; mPackages.get(packageName) == <span class="keyword">null</span>) &#123;</div><div class="line">            removedForAllUsers = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (res) &#123;</div><div class="line">        info.sendBroadcast(<span class="keyword">true</span>, systemUpdate, removedForAllUsers);</div><div class="line"></div><div class="line">        <span class="comment">// 如果被卸载的是系统应用，那么它的低版本的应用将被重新使用</span></div><div class="line">        <span class="comment">// 因此下面通过广播来通知这种变化</span></div><div class="line">        <span class="keyword">if</span> (systemUpdate) &#123;</div><div class="line">            Bundle extras = <span class="keyword">new</span> Bundle(<span class="number">1</span>);</div><div class="line">            extras.putInt(Intent.EXTRA_UID, info.removedAppId &gt;= <span class="number">0</span></div><div class="line">                    ? info.removedAppId : info.uid);</div><div class="line">            extras.putBoolean(Intent.EXTRA_REPLACING, <span class="keyword">true</span>);</div><div class="line"></div><div class="line">            sendPackageBroadcast(Intent.ACTION_PACKAGE_ADDED, packageName,</div><div class="line">                    extras, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">            sendPackageBroadcast(Intent.ACTION_PACKAGE_REPLACED, packageName,</div><div class="line">                    extras, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">            sendPackageBroadcast(Intent.ACTION_MY_PACKAGE_REPLACED, <span class="keyword">null</span>,</div><div class="line">                    <span class="keyword">null</span>, packageName, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 卸载完成后执行一次GC操作</span></div><div class="line">    Runtime.getRuntime().gc();</div><div class="line">    <span class="comment">// Delete the resources here after sending the broadcast to let</span></div><div class="line">    <span class="comment">// other processes clean up before deleting resources.</span></div><div class="line">    <span class="comment">// 调用FileInstallArgs.doPostDeleteLI()方法来执行一些资源文件的清理工作，后面会详细介绍该方法</span></div><div class="line">    <span class="keyword">if</span> (info.args != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">synchronized</span> (mInstallLock) &#123;</div><div class="line">            info.args.doPostDeleteLI(<span class="keyword">true</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> res ? PackageManager.DELETE_SUCCEEDED : PackageManager.DELETE_FAILED_INTERNAL_ERROR;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="deletePackageLI"><a href="#deletePackageLI" class="headerlink" title="deletePackageLI()"></a>deletePackageLI()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">deletePackageLI</span><span class="params">(String packageName, UserHandle user,</span></span></div><div class="line">        <span class="keyword">boolean</span> deleteCodeAndResources, <span class="keyword">int</span>[] allUserHandles, <span class="keyword">boolean</span>[] perUserInstalled,</div><div class="line">        <span class="keyword">int</span> flags, PackageRemovedInfo outInfo,</div><div class="line">        <span class="keyword">boolean</span> writeSettings) &#123;</div><div class="line">    <span class="keyword">if</span> (packageName == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    PackageSetting ps;</div><div class="line">    <span class="keyword">boolean</span> dataOnly = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">int</span> removeUser = -<span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> appId = -<span class="number">1</span>;</div><div class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</div><div class="line">        ps = mSettings.mPackages.get(packageName);</div><div class="line">        <span class="comment">// 判断该应用是否存在</span></div><div class="line">        <span class="keyword">if</span> (ps == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> ((!isSystemApp(ps) || (flags&amp;PackageManager.DELETE_SYSTEM_APP) != <span class="number">0</span>) &amp;&amp; user != <span class="keyword">null</span></div><div class="line">                &amp;&amp; user.getIdentifier() != UserHandle.USER_ALL) &#123;</div><div class="line">            <span class="comment">// 如果是只卸载某个用户下的应用</span></div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> userId = user.getIdentifier();</div><div class="line">            ps.setUserState(userId,</div><div class="line">                    COMPONENT_ENABLED_STATE_DEFAULT,</div><div class="line">                    <span class="keyword">false</span>, <span class="comment">//installed</span></div><div class="line">                    <span class="keyword">true</span>,  <span class="comment">//stopped</span></div><div class="line">                    <span class="keyword">true</span>,  <span class="comment">//notLaunched</span></div><div class="line">                    <span class="keyword">false</span>, <span class="comment">//hidden</span></div><div class="line">                    <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>,</div><div class="line">                    <span class="keyword">false</span>, <span class="comment">// blockUninstall</span></div><div class="line">                    ps.readUserState(userId).domainVerificationStatus, <span class="number">0</span>);</div><div class="line">            <span class="keyword">if</span> (!isSystemApp(ps)) &#123;</div><div class="line">                <span class="comment">// 非系统应用的卸载</span></div><div class="line">                <span class="keyword">if</span> (ps.isAnyInstalled(sUserManager.getUserIds())) &#123;</div><div class="line">                    <span class="comment">// 如果有其他用户还在使用这个应用，删除应用在这个用户下面的数据</span></div><div class="line">                    removeUser = user.getIdentifier();</div><div class="line">                    appId = ps.appId;</div><div class="line">                    scheduleWritePackageRestrictionsLocked(removeUser);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">// 如果没有其他用户在使用了，设置一下PackageUserState.installed，这样可以完全删除这个应用</span></div><div class="line">                    ps.setInstalled(<span class="keyword">true</span>, user.getIdentifier());</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// 如果卸载的是系统应用，可能别的用户还在使用它，因此这里只需要清除需要卸载的应用目录下的数据即可</span></div><div class="line">                removeUser = user.getIdentifier();</div><div class="line">                appId = ps.appId;</div><div class="line">                scheduleWritePackageRestrictionsLocked(removeUser);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (removeUser &gt;= <span class="number">0</span>) &#123;</div><div class="line">        <span class="comment">// 如果是单个用户应用卸载，继续执行这里</span></div><div class="line">        <span class="keyword">if</span> (outInfo != <span class="keyword">null</span>) &#123;</div><div class="line">            outInfo.removedPackage = packageName;</div><div class="line">            outInfo.removedAppId = appId;</div><div class="line">            outInfo.removedUsers = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;removeUser&#125;;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 调用installd执行rmuserdata，清除应用的该用户的数据</span></div><div class="line">        mInstaller.clearUserData(ps.volumeUuid, packageName, removeUser);</div><div class="line">        removeKeystoreDataIfNeeded(removeUser, appId);</div><div class="line">        schedulePackageCleaning(packageName, removeUser, <span class="keyword">false</span>);</div><div class="line">        <span class="keyword">synchronized</span> (mPackages) &#123;</div><div class="line">            <span class="keyword">if</span> (clearPackagePreferredActivitiesLPw(packageName, removeUser)) &#123;</div><div class="line">                scheduleWritePackageRestrictionsLocked(removeUser);</div><div class="line">            &#125;</div><div class="line">            resetUserChangesToRuntimePermissionsAndFlagsLPw(ps, removeUser);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (dataOnly) &#123;</div><div class="line">        <span class="comment">// 先删除应用的数据</span></div><div class="line">        removePackageDataLI(ps, <span class="keyword">null</span>, <span class="keyword">null</span>, outInfo, flags, writeSettings);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">boolean</span> ret = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">if</span> (isSystemApp(ps)) &#123;</div><div class="line">        <span class="comment">// 删除系统应用，这里会把当前版本的资源删除然后恢复旧版本</span></div><div class="line">        ret = deleteSystemPackageLI(ps, allUserHandles, perUserInstalled,</div><div class="line">                flags, outInfo, writeSettings);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 如果不是系统应用，停止该进程，然后删除文件</span></div><div class="line">        killApplication(packageName, ps.appId, <span class="string">"uninstall pkg"</span>);</div><div class="line">        ret = deleteInstalledPackageLI(ps, deleteCodeAndResources, flags,</div><div class="line">                allUserHandles, perUserInstalled,</div><div class="line">                outInfo, writeSettings);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>deletePackageLI()</code>的主要工作就是根据不同用户的安装情况来删除应用的APK文件和数据。</p>
<h3 id="deleteSystemPackageLI"><a href="#deleteSystemPackageLI" class="headerlink" title="deleteSystemPackageLI()"></a>deleteSystemPackageLI()</h3><p>顾名思义，<code>deleteSystemPackageLI()</code>就是用来删除系统应用的方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">deleteSystemPackageLI</span><span class="params">(PackageSetting newPs,</span></span></div><div class="line">        <span class="keyword">int</span>[] allUserHandles, <span class="keyword">boolean</span>[] perUserInstalled,</div><div class="line">        <span class="keyword">int</span> flags, PackageRemovedInfo outInfo, <span class="keyword">boolean</span> writeSettings) &#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> applyUserRestrictions</div><div class="line">            = (allUserHandles != <span class="keyword">null</span>) &amp;&amp; (perUserInstalled != <span class="keyword">null</span>);</div><div class="line">    PackageSetting disabledPs = <span class="keyword">null</span>;</div><div class="line">    <span class="comment">// 首先从Settings里面看该应用是否是已经升级过的应用</span></div><div class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</div><div class="line">        disabledPs = mSettings.getDisabledSystemPkgLPr(newPs.name);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (disabledPs == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 如果是没有升级过的应用，就直接返回，因为系统应用是无法完全卸载的，只能卸载更新</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">    <span class="comment">// 开始卸载更新</span></div><div class="line">    outInfo.isRemovedPackageSystemUpdate = <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">if</span> (disabledPs.versionCode &lt; newPs.versionCode) &#123;</div><div class="line">        <span class="comment">// 当前应用版本小于被升级应用，不需要保留数据</span></div><div class="line">        flags &amp;= ~PackageManager.DELETE_KEEP_DATA;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 保留数据</span></div><div class="line">        flags |= PackageManager.DELETE_KEEP_DATA;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 调用deleteInstalledPackageLI删除应用数据，下面有详细介绍</span></div><div class="line">    <span class="keyword">boolean</span> ret = deleteInstalledPackageLI(newPs, <span class="keyword">true</span>, flags,</div><div class="line">            allUserHandles, perUserInstalled, outInfo, writeSettings);</div><div class="line">    <span class="keyword">if</span> (!ret) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// writer</span></div><div class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</div><div class="line">        <span class="comment">// 继续使用旧的系统应用</span></div><div class="line">        mSettings.enableSystemPackageLPw(newPs.name);</div><div class="line">        <span class="comment">// 删除更新包的native依赖库</span></div><div class="line">        NativeLibraryHelper.removeNativeBinariesLI(newPs.legacyNativeLibraryPathString);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 开始安装旧的系统应用包</span></div><div class="line">    <span class="keyword">int</span> parseFlags = PackageParser.PARSE_MUST_BE_APK | PackageParser.PARSE_IS_SYSTEM;</div><div class="line">    <span class="keyword">if</span> (locationIsPrivileged(disabledPs.codePath)) &#123;</div><div class="line">        parseFlags |= PackageParser.PARSE_IS_PRIVILEGED;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 扫描</span></div><div class="line">    <span class="keyword">final</span> PackageParser.Package newPkg;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        newPkg = scanPackageLI(disabledPs.codePath, parseFlags, SCAN_NO_PATHS, <span class="number">0</span>, <span class="keyword">null</span>);</div><div class="line">    &#125; <span class="keyword">catch</span> (PackageManagerException e) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</div><div class="line">        PackageSetting ps = mSettings.mPackages.get(newPkg.packageName);</div><div class="line">        ps.getPermissionsState().copyFrom(newPs.getPermissionsState());</div><div class="line">        updatePermissionsLPw(newPkg.packageName, newPkg,</div><div class="line">                UPDATE_PERMISSIONS_ALL | UPDATE_PERMISSIONS_REPLACE_PKG);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (applyUserRestrictions) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; allUserHandles.length; i++) &#123;</div><div class="line">                ps.setInstalled(perUserInstalled[i], allUserHandles[i]);</div><div class="line">                mSettings.writeRuntimePermissionsForUserLPr(allUserHandles[i], <span class="keyword">false</span>);</div><div class="line">            &#125;</div><div class="line">            mSettings.writeAllUsersPackageRestrictionsLPr();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (writeSettings) &#123;</div><div class="line">            mSettings.writeLPr();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="deleteInstalledPackageLI"><a href="#deleteInstalledPackageLI" class="headerlink" title="deleteInstalledPackageLI()"></a>deleteInstalledPackageLI()</h3><p>卸载非系统应用，包括删除和该包相关的数据结构以及数据目录，以及创建一个<code>FileInstallArgs</code>来删除 code 和 resources 文件。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">deleteInstalledPackageLI</span><span class="params">(PackageSetting ps,</span></span></div><div class="line">        <span class="keyword">boolean</span> deleteCodeAndResources, <span class="keyword">int</span> flags,</div><div class="line">        <span class="keyword">int</span>[] allUserHandles, <span class="keyword">boolean</span>[] perUserInstalled,</div><div class="line">        PackageRemovedInfo outInfo, <span class="keyword">boolean</span> writeSettings) &#123;</div><div class="line">    <span class="keyword">if</span> (outInfo != <span class="keyword">null</span>) &#123;</div><div class="line">        outInfo.uid = ps.appId;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 删除和该包相关的数据结构以及数据目录，下面有详细介绍</span></div><div class="line">    removePackageDataLI(ps, allUserHandles, perUserInstalled, outInfo, flags, writeSettings);</div><div class="line">    <span class="comment">// 删除 code 和 resources，在deletePackageX()的info.args.doPostDeleteLI(true)执行</span></div><div class="line">    <span class="keyword">if</span> (deleteCodeAndResources &amp;&amp; (outInfo != <span class="keyword">null</span>)) &#123;</div><div class="line">        outInfo.args = createInstallArgsForExisting(packageFlagsToInstallFlags(ps),</div><div class="line">                ps.codePathString, ps.resourcePathString, getAppDexInstructionSets(ps));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="removePackageDataLI"><a href="#removePackageDataLI" class="headerlink" title="removePackageDataLI()"></a>removePackageDataLI()</h3><p>删除和该包相关的数据，包括activity、provider、service等数据，如果没有设置 <code>PackageManager.DELETE_KEEP_DATA</code>，还会删除/data/data下面的目录。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removePackageDataLI</span><span class="params">(PackageSetting ps,</span></span></div><div class="line">        <span class="keyword">int</span>[] allUserHandles, <span class="keyword">boolean</span>[] perUserInstalled,</div><div class="line">        PackageRemovedInfo outInfo, <span class="keyword">int</span> flags, <span class="keyword">boolean</span> writeSettings) &#123;</div><div class="line">    String packageName = ps.name;</div><div class="line">    <span class="comment">// 删除和该包相关的数据，包括activity、provider、service等数据</span></div><div class="line">    removePackageLI(ps, (flags&amp;REMOVE_CHATTY) != <span class="number">0</span>);</div><div class="line">    <span class="keyword">final</span> PackageSetting deletedPs;</div><div class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</div><div class="line">        deletedPs = mSettings.mPackages.get(packageName);</div><div class="line">        <span class="keyword">if</span> (outInfo != <span class="keyword">null</span>) &#123;</div><div class="line">            outInfo.removedPackage = packageName;</div><div class="line">            outInfo.removedUsers = deletedPs != <span class="keyword">null</span></div><div class="line">                    ? deletedPs.queryInstalledUsers(sUserManager.getUserIds(), <span class="keyword">true</span>)</div><div class="line">                    : <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ((flags&amp;PackageManager.DELETE_KEEP_DATA) == <span class="number">0</span>) &#123;</div><div class="line">        <span class="comment">// 调用installd去删除/data/data下面的目录</span></div><div class="line">        removeDataDirsLI(ps.volumeUuid, packageName);</div><div class="line">        <span class="comment">// 调用startCleaningPackages()，调用DefaultContainerService与该package相关的文件去删除</span></div><div class="line">        schedulePackageCleaning(packageName, UserHandle.USER_ALL, <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// writer</span></div><div class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</div><div class="line">        <span class="keyword">if</span> (deletedPs != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> ((flags&amp;PackageManager.DELETE_KEEP_DATA) == <span class="number">0</span>) &#123;</div><div class="line">                clearIntentFilterVerificationsLPw(deletedPs.name, UserHandle.USER_ALL);</div><div class="line">                clearDefaultBrowserIfNeeded(packageName);</div><div class="line">                <span class="keyword">if</span> (outInfo != <span class="keyword">null</span>) &#123;</div><div class="line">                    mSettings.mKeySetManagerService.removeAppKeySetDataLPw(packageName);</div><div class="line">                    <span class="comment">// 从Settings中删除该包的信息</span></div><div class="line">                    outInfo.removedAppId = mSettings.removePackageLPw(packageName);</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// 检查mPermissionTrees和mPermissions两个数组中的权限是否是被删除的Package提供，如果有就删除。</span></div><div class="line">                updatePermissionsLPw(deletedPs.name, <span class="keyword">null</span>, <span class="number">0</span>);</div><div class="line">                <span class="keyword">if</span> (deletedPs.sharedUser != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="comment">// Remove permissions associated with package. Since runtime</span></div><div class="line">                    <span class="comment">// permissions are per user we have to kill the removed package</span></div><div class="line">                    <span class="comment">// or packages running under the shared user of the removed</span></div><div class="line">                    <span class="comment">// package if revoking the permissions requested only by the removed</span></div><div class="line">                    <span class="comment">// package is successful and this causes a change in gids.</span></div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> userId : UserManagerService.getInstance().getUserIds()) &#123;</div><div class="line">                        <span class="keyword">final</span> <span class="keyword">int</span> userIdToKill = mSettings.updateSharedUserPermsLPw(deletedPs,</div><div class="line">                                userId);</div><div class="line">                        <span class="keyword">if</span> (userIdToKill == UserHandle.USER_ALL</div><div class="line">                                || userIdToKill &gt;= UserHandle.USER_OWNER) &#123;</div><div class="line">                            <span class="comment">// If gids changed for this user, kill all affected packages.</span></div><div class="line">                            mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                                <span class="meta">@Override</span></div><div class="line">                                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                                    killApplication(deletedPs.name, deletedPs.appId,</div><div class="line">                                            KILL_APP_REASON_GIDS_CHANGED);</div><div class="line">                                &#125;</div><div class="line">                            &#125;);</div><div class="line">                            <span class="keyword">break</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// 从Settings.mPreferredActivities中删除相关的PreferredActivity</span></div><div class="line">                clearPackagePreferredActivitiesLPw(deletedPs.name, UserHandle.USER_ALL);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 设置PackageUserState.installed状态，因为还有可能此次执行的是系统应用降级到初始版本</span></div><div class="line">            <span class="keyword">if</span> (allUserHandles != <span class="keyword">null</span> &amp;&amp; perUserInstalled != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; allUserHandles.length; i++) &#123;</div><div class="line">                    ps.setInstalled(perUserInstalled[i], allUserHandles[i]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (writeSettings) &#123;</div><div class="line">            <span class="comment">// 将改动的信息写到package.xml中</span></div><div class="line">            mSettings.writeLPr();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (outInfo != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// A user ID was deleted here. Go through all users and remove it</span></div><div class="line">        <span class="comment">// from KeyStore.</span></div><div class="line">        removeKeystoreDataIfNeeded(UserHandle.USER_ALL, outInfo.removedAppId);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="FileInstallArgs-cleanUpResourcesLI"><a href="#FileInstallArgs-cleanUpResourcesLI" class="headerlink" title="FileInstallArgs.cleanUpResourcesLI()"></a>FileInstallArgs.cleanUpResourcesLI()</h3><p>删除 code、resource、library 文件以及 /data/dalvik-cache 下面相关文件，/data/dalvik-cache 放的是经过 installd dexop t过的文件，可以看一下<a href="http://blog.csdn.net/cnzx219/article/details/48714121" target="_blank" rel="external">这篇文章</a>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cleanUpResourcesLI</span><span class="params">()</span> </span>&#123;</div><div class="line">    List&lt;String&gt; allCodePaths = Collections.EMPTY_LIST;</div><div class="line">    <span class="keyword">if</span> (codeFile != <span class="keyword">null</span> &amp;&amp; codeFile.exists()) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">final</span> PackageLite pkg = PackageParser.parsePackageLite(codeFile, <span class="number">0</span>);</div><div class="line">            allCodePaths = pkg.getAllCodePaths();</div><div class="line">        &#125; <span class="keyword">catch</span> (PackageParserException e) &#123;&#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 删除code、resource、library文件</span></div><div class="line">    cleanUp();</div><div class="line">    <span class="comment">//删除apk文件</span></div><div class="line">    removeDexFiles(allCodePaths, instructionSets);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">cleanUp</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (codeFile == <span class="keyword">null</span> || !codeFile.exists()) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (codeFile.isDirectory()) &#123;</div><div class="line">        mInstaller.rmPackageDir(codeFile.getAbsolutePath());</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        codeFile.delete();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (resourceFile != <span class="keyword">null</span> &amp;&amp; !FileUtils.contains(codeFile, resourceFile)) &#123;</div><div class="line">        resourceFile.delete();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeDexFiles</span><span class="params">(List&lt;String&gt; allCodePaths, String[] instructionSets)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!allCodePaths.isEmpty()) &#123;</div><div class="line">        <span class="keyword">if</span> (instructionSets == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"instructionSet == null"</span>);</div><div class="line">        &#125;</div><div class="line">        String[] dexCodeInstructionSets = getDexCodeInstructionSets(instructionSets);</div><div class="line">        <span class="keyword">for</span> (String codePath : allCodePaths) &#123;</div><div class="line">            <span class="keyword">for</span> (String dexCodeInstructionSet : dexCodeInstructionSets) &#123;</div><div class="line">                <span class="comment">// 调用 installd 删除 /data/dalvik-cache 下面相关文件</span></div><div class="line">                <span class="keyword">int</span> retCode = mInstaller.rmdex(codePath, dexCodeInstructionSet);</div><div class="line">                <span class="keyword">if</span> (retCode &lt; <span class="number">0</span>) &#123;...&#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="adb-uninstall"><a href="#adb-uninstall" class="headerlink" title="adb uninstall"></a>adb uninstall</h2><p>可以通过下面的命令来执行一个应用的卸载工作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">adb uninstall [-k] &lt;package&gt; - remove this app package from the device</div><div class="line">                               (&apos;-k&apos; means keep the data and cache directories)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      基于Android6.0来分析Android的应用卸载流程
    
    </summary>
    
      <category term="Android源码分析" scheme="http://yoursite.com/categories/Android%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Android源码分析" scheme="http://yoursite.com/tags/Android%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="PackageManager" scheme="http://yoursite.com/tags/PackageManager/"/>
    
  </entry>
  
  <entry>
    <title>Android PackageManager相关源码分析之安装应用</title>
    <link href="http://yoursite.com/2016/05/12/android-source-code-analysis-package-manager-installation/"/>
    <id>http://yoursite.com/2016/05/12/android-source-code-analysis-package-manager-installation/</id>
    <published>2016-05-12T02:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Android中应用的安装方式有多种：</p>
<ul>
<li>系统应用安装，这种方式在第一次开机时完成。这部分在上一篇博客<a href=""></a>中已经讲到。</li>
<li>通过系统安装器安装，这种方式有UI界面交互。</li>
<li>通过<code>adb install</code>命令安装。</li>
<li>通过应用市场安装。<br>虽然有这么多的安装方式，但在PMS内部，后面三种的流程却是大同小异的。</li>
</ul>
<p>我们先来看一下<code>ApplicationPackageManager</code>给我们开发的安装应用的接口：</p>
<p><img src="/images/android-source-code-analysis-package-manager-installation/packagemanager_install_function.png" alt="效果图"></p>
<p>除了<code>ApplicationPackageManager.installExistingPackage()</code>之外，其他的几个方法都会通过<code>mPM.installPackage()</code>通过跨进程调用到PMS的<code>installPackage()</code>方法，因此，Android应用安装部分的介绍我们就从这个方法来说起。<br>Android的应用安装有下面几个阶段的工作：</p>
<ol>
<li>复制文件阶段<ol>
<li>将文件复制到/data/app/目录</li>
</ol>
</li>
<li>解析应用阶段<ol>
<li>解析apk信息</li>
<li>dexopt操作</li>
<li>更新权限信息</li>
<li>完成安装,发送<code>Intent.ACTION_PACKAGE_ADDED</code>广播</li>
</ol>
</li>
</ol>
<p>代码调用流程如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">├── PMS.installPackage()</div><div class="line">    └── PMS.installPackageAsUser()</div><div class="line">         |传递 InstallParams 参数</div><div class="line">        PackageHandler.doHandleMessage().INIT_COPY</div><div class="line">         |</div><div class="line">        PackageHandler.doHandleMessage().MCS_BOUND</div><div class="line">         ├── HandlerParams.startCopy()</div><div class="line">         │    ├── InstallParams.handleStartCopy()</div><div class="line">         │    │    └──InstallArgs.copyApk()</div><div class="line">         │    └── InstallParams.handleReturnCode()</div><div class="line">         │         └── PMS.processPendingInstall()</div><div class="line">         │              ├── InstallArgs.doPreInstall()</div><div class="line">         │              ├── PMS.installPackageLI()</div><div class="line">         │              │    ├── PackageParser.parsePackage()</div><div class="line">         │              │    ├── PackageParser.collectCertificates()</div><div class="line">         │              │    ├── PackageParser.collectManifestDigest()</div><div class="line">         │              │    ├── PackageDexOptimizer.performDexOpt()</div><div class="line">         │              │    ├── InstallArgs.doRename()</div><div class="line">         │              │    │    └── InstallArgs.getNextCodePath()</div><div class="line">         │              │    ├── replacePackageLI()</div><div class="line">         │              │    │    ├── shouldCheckUpgradeKeySetLP()</div><div class="line">         │              │    │    ├── compareSignatures()</div><div class="line">         │              │    │    ├── replaceSystemPackageLI()</div><div class="line">         │              │    │    │    ├── killApplication()</div><div class="line">         │              │    │    │    ├── removePackageLI()</div><div class="line">         │              │    │    │    ├── Settings.disableSystemPackageLPw()</div><div class="line">         │              │    │    │    ├── createInstallArgsForExisting()</div><div class="line">         │              │    │    │    ├── deleteCodeCacheDirsLI()</div><div class="line">         │              │    │    │    ├── scanPackageLI()</div><div class="line">         │              │    │    │    └── updateSettingsLI()</div><div class="line">         │              │    │    └── replaceNonSystemPackageLI()</div><div class="line">         │              │    │         ├── deletePackageLI()</div><div class="line">         │              │    │         ├── deleteCodeCacheDirsLI()</div><div class="line">         │              │    │         ├── scanPackageLI()</div><div class="line">         │              │    │         └── updateSettingsLI()</div><div class="line">         │              │    └── installNewPackageLI()</div><div class="line">         │              │         ├── scanPackageLI()</div><div class="line">         │              │         └── updateSettingsLI()</div><div class="line">         │              ├── InstallArgs.doPostInstall()</div><div class="line">         │              ├── BackupManager.restoreAtInstall()</div><div class="line">         │              └── sendMessage(POST_INSTALL)</div><div class="line">         │                   |</div><div class="line">         │                  PackageHandler.doHandleMessage().POST_INSTALL</div><div class="line">         │                   ├── grantRequestedRuntimePermissions()</div><div class="line">         │                   ├── sendPackageBroadcast()</div><div class="line">         │                   └── IPackageInstallObserver.onPackageInstalled()</div><div class="line">         └── PackageHandler.doHandleMessage().MCS_UNBIND</div><div class="line">              └── PackageHandler.disconnectService()</div></pre></td></tr></table></figure>
<h2 id="adb-install"><a href="#adb-install" class="headerlink" title="adb install"></a>adb install</h2><p>安装 APK 命令可以用<code>adb install [-lrtsd] &lt;file&gt;</code>或者<code>adb install-multiple [-lrtsdp] &lt;file...&gt;</code>，<code>adb install-multiple</code>表示批量安装。<br>参数介绍：</p>
<ul>
<li>-l：锁定该程序</li>
<li>-r：可以覆盖已有的应用，保留数据和缓存文件</li>
<li>-t：允许测试该应用</li>
<li>-s：安装在SD卡中</li>
<li>-d：允许降低版本安装</li>
<li>-p：部分应用程序安装</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="复制文件阶段"><a href="#复制文件阶段" class="headerlink" title="复制文件阶段"></a>复制文件阶段</h3><p>这个阶段的主要工作就是把要安装的应用复制到/data/app目录下，这里主要针对安装第三方应用以及升级系统应用而言，系统应用的安装在初始化部分完成的，前面博客<a href=""></a>已经做过介绍。<br>下面开始分析复制文件过程的源码，首先是从<code>PMS.installPackageAsUser()</code>开始。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installPackageAsUser</span><span class="params">(String originPath, IPackageInstallObserver2 observer,</span></span></div><div class="line">        <span class="keyword">int</span> installFlags, String installerPackageName, VerificationParams verificationParams,</div><div class="line">        String packageAbiOverride, <span class="keyword">int</span> userId) &#123;</div><div class="line">    <span class="comment">// 检查调用者或者自己有没有安装应用的权限</span></div><div class="line">    mContext.enforceCallingOrSelfPermission(android.Manifest.permission.INSTALL_PACKAGES, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> callingUid = Binder.getCallingUid();</div><div class="line">    enforceCrossUserPermission(callingUid, userId, <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="string">"installPackageAsUser"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (isUserRestricted(userId, UserManager.DISALLOW_INSTALL_APPS)) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (observer != <span class="keyword">null</span>) &#123;</div><div class="line">                observer.onPackageInstalled(<span class="string">""</span>, INSTALL_FAILED_USER_RESTRICTED, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (RemoteException re) &#123;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((callingUid == Process.SHELL_UID) || (callingUid == Process.ROOT_UID)) &#123;</div><div class="line">        installFlags |= PackageManager.INSTALL_FROM_ADB;</div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// Caller holds INSTALL_PACKAGES permission, so we're less strict</span></div><div class="line">        <span class="comment">// about installerPackageName.</span></div><div class="line"></div><div class="line">        installFlags &amp;= ~PackageManager.INSTALL_FROM_ADB;</div><div class="line">        installFlags &amp;= ~PackageManager.INSTALL_ALL_USERS;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    UserHandle user;</div><div class="line">    <span class="keyword">if</span> ((installFlags &amp; PackageManager.INSTALL_ALL_USERS) != <span class="number">0</span>) &#123;</div><div class="line">        <span class="comment">// 可以操作所有用户，意思是可以给所有用户安装应用</span></div><div class="line">        user = UserHandle.ALL;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 只允许给userId安装</span></div><div class="line">        user = <span class="keyword">new</span> UserHandle(userId);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Only system components can circumvent runtime permissions when installing.</span></div><div class="line">    <span class="keyword">if</span> ((installFlags &amp; PackageManager.INSTALL_GRANT_RUNTIME_PERMISSIONS) != <span class="number">0</span></div><div class="line">            &amp;&amp; mContext.checkCallingOrSelfPermission(Manifest.permission</div><div class="line">            .INSTALL_GRANT_RUNTIME_PERMISSIONS) == PackageManager.PERMISSION_DENIED) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(<span class="string">"You need the "</span></div><div class="line">                + <span class="string">"android.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS permission "</span></div><div class="line">                + <span class="string">"to use the PackageManager.INSTALL_GRANT_RUNTIME_PERMISSIONS flag"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    verificationParams.setInstallerUid(callingUid);</div><div class="line"></div><div class="line">    <span class="keyword">final</span> File originFile = <span class="keyword">new</span> File(originPath);</div><div class="line">    <span class="keyword">final</span> OriginInfo origin = OriginInfo.fromUntrustedFile(originFile);</div><div class="line"></div><div class="line">    <span class="keyword">final</span> Message msg = mHandler.obtainMessage(INIT_COPY);</div><div class="line">    msg.obj = <span class="keyword">new</span> InstallParams(origin, <span class="keyword">null</span>, observer, installFlags, installerPackageName,</div><div class="line">            <span class="keyword">null</span>, verificationParams, user, packageAbiOverride, <span class="keyword">null</span>);</div><div class="line">    mHandler.sendMessage(msg);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>installPackageAsUser()</code>主要工作就是进行一系列权限的验证，然后发送 <code>INIT_COPY</code> 消息。<br>发送消息时会传递一个<code>InstallParams</code>参数，<code>InstallParams</code>是继承自<code>HandlerParams</code>抽象类的，用来记录安装应用的参数。<br>下面再来看一下对<code>INIT_COPY</code>消息的处理，该消息的处理在<code>PackageHandler.doHandleMessage()</code>中进行的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> INIT_COPY: &#123;</div><div class="line">    HandlerParams params = (HandlerParams) msg.obj;</div><div class="line">    <span class="keyword">int</span> idx = mPendingInstalls.size();</div><div class="line">    <span class="keyword">if</span> (!mBound) &#123;</div><div class="line">        <span class="comment">// 如果还没有进行绑定工作，要先绑定到DefaultContainerService</span></div><div class="line">        <span class="keyword">if</span> (!connectToService()) &#123;</div><div class="line">            params.serviceError();</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 添加到等待列表中去，在`onServiceConnected()`发送`MCS_BOUND`消息</span></div><div class="line">            mPendingInstalls.add(idx, params);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 添加到等待列表中去</span></div><div class="line">        mPendingInstalls.add(idx, params);</div><div class="line">        <span class="comment">// 如果列表中没有其他等待的消息，发送MCS_BOUND</span></div><div class="line">        <span class="keyword">if</span> (idx == <span class="number">0</span>) &#123;</div><div class="line">            mHandler.sendEmptyMessage(MCS_BOUND);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对<code>INIT_COPY</code>消息的处理就是要绑定<code>DefaultContainerService</code>服务，这个服务执行一些针对的文件 copy 等相关工作，然后把消息传递过来的<code>InstallParams</code>参数保存到<code>mPendingInstalls</code>列表。如果原来没有进行过绑定服务工作，那么就等待服务绑定好后在<code>onServiceConnected()</code>发送<code>MCS_BOUND</code>消息，并且传递<code>onServiceConnected()</code>参数中的<code>Binder</code>对象。如果已经连接好服务，当前只有一个安装请求那么就直接发送该消息，如果还有其他的请求，就需要进行排队处理，等待其他请求的<code>MCS_BOUND</code>消息处理完之后再往下接着处理。<br>下面来看一下对<code>MCS_BOUND</code>消息的处理：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> MCS_BOUND: &#123;</div><div class="line">    <span class="keyword">if</span> (msg.obj != <span class="keyword">null</span>) &#123;</div><div class="line">        mContainerService = (IMediaContainerService) msg.obj;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (mContainerService == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">//如果mContainerService没有初始化，而且`DefaultContainerService`服务也没有连接，抛出错误信息</span></div><div class="line">        <span class="keyword">if</span> (!mBound) &#123;</div><div class="line">            <span class="keyword">for</span> (HandlerParams params : mPendingInstalls) &#123;</div><div class="line">                params.serviceError();</div><div class="line">            &#125;</div><div class="line">            mPendingInstalls.clear();</div><div class="line">        <span class="comment">//如果已经连接，那么就等待服务绑定成功回调函数onServiceConnected()，会再次发送`MCS_BOUND`消息</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;&#125;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mPendingInstalls.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">        HandlerParams params = mPendingInstalls.get(<span class="number">0</span>);</div><div class="line">        <span class="keyword">if</span> (params != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// 开始执行安装的第一步：文件复制</span></div><div class="line">            <span class="keyword">if</span> (params.startCopy()) &#123;</div><div class="line">                <span class="comment">// 如果复制成功，把这个请求从队列中移除</span></div><div class="line">                <span class="keyword">if</span> (mPendingInstalls.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">                    mPendingInstalls.remove(<span class="number">0</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (mPendingInstalls.size() == <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (mBound) &#123;</div><div class="line">                        <span class="comment">// 如果队列中没有其他的请求，延迟10妙发送MCS_UNBIND消息</span></div><div class="line">                        removeMessages(MCS_UNBIND);</div><div class="line">                        Message ubmsg = obtainMessage(MCS_UNBIND);</div><div class="line">                        sendMessageDelayed(ubmsg, <span class="number">10000</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">// 如果队列中还有其他的安装请求，继续发送MCS_BOUND消息</span></div><div class="line">                    mHandler.sendEmptyMessage(MCS_BOUND);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;&#125;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对<code>MCS_BOUND</code>消息的处理主要就是调用<code>HandlerParams</code>的<code>startCopy()</code>方法开始执行安装任务，并判断安装队列中是否有其他任务，如果有就重复发送<code>MCS_BOUND</code>消息，没有的话就发送<code>MCS_UNBIND</code>消息。<br>对于<code>mContainerService</code>，上面我们知道，它是作为参数在<code>onServiceConnected()</code>发送过来的，它的实现在<code>DefaultContainerService</code>的<code>mBinder</code>。</p>
<p>下面来看一下对<code>MCS_UNBIND</code>消息的处理：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> MCS_UNBIND: &#123;</div><div class="line">    <span class="comment">// 再对请求队列进行判断，如果确实为空，那么断开`DefaultContainerService`服务，安装过程结束</span></div><div class="line">    <span class="keyword">if</span> (mPendingInstalls.size() == <span class="number">0</span> &amp;&amp; mPendingVerification.size() == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (mBound) &#123;</div><div class="line">            disconnectService();</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mPendingInstalls.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="comment">// 如果列表中又收到安装请求，继续发送MCS_BOUND消息</span></div><div class="line">        mHandler.sendEmptyMessage(MCS_BOUND);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面来开始分析<code>HandlerParams</code>的<code>startCopy()</code>方法的处理过程：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">startCopy</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> res;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">// 如果重试超过4次，放弃此次安装，发送MCS_GIVE_UP消息</span></div><div class="line">        <span class="keyword">if</span> (++mRetries &gt; MAX_RETRIES) &#123;</div><div class="line">            mHandler.sendEmptyMessage(MCS_GIVE_UP);</div><div class="line">            handleServiceError();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 开始执行复制安装</span></div><div class="line">            handleStartCopy();</div><div class="line">            res = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">        <span class="comment">// 安装出错，发送MCS_RECONNECT重新连接</span></div><div class="line">        mHandler.sendEmptyMessage(MCS_RECONNECT);</div><div class="line">        res = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 对handleStartCopy()的执行结果进行处理</span></div><div class="line">    handleReturnCode();</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面来开发分析<code>InstallParams</code>的<code>handleStartCopy()</code>方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleStartCopy</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">    <span class="comment">// 首先对安装的标志位进行判断，如果既有内部安装标志，又有外部安装标志，那么就设置</span></div><div class="line">    <span class="comment">//PackageManager.INSTALL_FAILED_INVALID_INSTALL_LOCATION返回值</span></div><div class="line">    ......</div><div class="line">    <span class="comment">//否则就调用mContainerService.getMinimalPackageInfo()来获取一些安装包的信息包括包大小，包名等等</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        pkgLite = mContainerService.getMinimalPackageInfo(origin.resolvedPath, installFlags,</div><div class="line">                packageAbiOverride);</div><div class="line"></div><div class="line">        <span class="comment">//如果空间不足，先释放部分缓存，如果还是不够，放弃此次安装</span></div><div class="line">        <span class="keyword">if</span> (!origin.staged &amp;&amp; pkgLite.recommendedInstallLocation</div><div class="line">                == PackageHelper.RECOMMEND_FAILED_INSUFFICIENT_STORAGE) &#123;</div><div class="line">            <span class="keyword">final</span> StorageManager storage = StorageManager.from(mContext);</div><div class="line">            <span class="keyword">final</span> <span class="keyword">long</span> lowThreshold = storage.getStorageLowBytes(</div><div class="line">                    Environment.getDataDirectory());</div><div class="line"></div><div class="line">            ......</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (ret == PackageManager.INSTALL_SUCCEEDED) &#123;</div><div class="line">        <span class="keyword">int</span> loc = pkgLite.recommendedInstallLocation;</div><div class="line">        ...</div><div class="line">        <span class="comment">// 这里处理一些对安装位置的校验</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 这里会根据`InstallParams`生成一个`InstallArgs`对象</span></div><div class="line">    <span class="keyword">final</span> InstallArgs args = createInstallArgs(<span class="keyword">this</span>);</div><div class="line">    mArgs = args;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (ret == PackageManager.INSTALL_SUCCEEDED) &#123;</div><div class="line">        ......</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> requiredUid = mRequiredVerifierPackage == <span class="keyword">null</span> ? -<span class="number">1</span></div><div class="line">                : getPackageUid(mRequiredVerifierPackage, userIdentifier);</div><div class="line">        <span class="keyword">if</span> (!origin.existing &amp;&amp; requiredUid != -<span class="number">1</span></div><div class="line">                &amp;&amp; isVerificationEnabled(userIdentifier, installFlags)) &#123;</div><div class="line">            <span class="keyword">final</span> Intent verification = <span class="keyword">new</span> Intent(</div><div class="line">                    Intent.ACTION_PACKAGE_NEEDS_VERIFICATION);</div><div class="line">            ...</div><div class="line">            <span class="comment">// 执行一些校验工作，校验成功之后在CHECK_PENDING_VERIFICATION消息处理方法中执行InstallArgs.copyApk()</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 如果无需校验，执行InstallArgs.copyApk()方法继续</span></div><div class="line">            ret = args.copyApk(mContainerService, <span class="keyword">true</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mRet = ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>handleStartCopy()</code>执行的工作如下：</p>
<ol>
<li>判断安装标志位是否合法</li>
<li>获取安装包的一些信息</li>
<li>判断安装空间是否足够</li>
<li>对安装位置的校验</li>
<li>判断是否需要对应用进行校验工作</li>
<li>如果校验成功，执行<code>InstallArgs.copyApk()</code></li>
<li>如果无需校验，直接执行<code>InstallArgs.copyApk()</code></li>
</ol>
<p><code>InstallArgs</code>是个抽象类，一共有三个实现类<code>MoveInstallArgs</code>（针对已有文件的Move）、<code>AsecInstallArgs</code>（针对SD卡）和<code>FileInstallArgs</code>（针对内部存储），会在<code>createInstallArgs()</code>方法中根据不同的参数返回不同的实现类。<br>接下来分析<code>FileInstallArgs.copyApk()</code>方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">copyApk</span><span class="params">(IMediaContainerService imcs, <span class="keyword">boolean</span> temp)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">    <span class="comment">// 已经执行过copy了</span></div><div class="line">    <span class="keyword">if</span> (origin.staged) &#123;</div><div class="line">        codeFile = origin.file;</div><div class="line">        resourceFile = origin.file;</div><div class="line">        <span class="keyword">return</span> PackageManager.INSTALL_SUCCEEDED;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">// 在/data/app/下面生成一个类似vmdl1354353418.tmp的临时文件</span></div><div class="line">        <span class="keyword">final</span> File tempDir = mInstallerService.allocateStageDirLegacy(volumeUuid);</div><div class="line">        codeFile = tempDir;</div><div class="line">        resourceFile = tempDir;</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">        <span class="keyword">return</span> PackageManager.INSTALL_FAILED_INSUFFICIENT_STORAGE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 在imcs.copyPackage()中会调用target.open()，返回一个文件描述符</span></div><div class="line">    <span class="keyword">final</span> IParcelFileDescriptorFactory target = <span class="keyword">new</span> IParcelFileDescriptorFactory.Stub() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> ParcelFileDescriptor <span class="title">open</span><span class="params">(String name, <span class="keyword">int</span> mode)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">            <span class="keyword">if</span> (!FileUtils.isValidExtFilename(name)) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid filename: "</span> + name);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">final</span> File file = <span class="keyword">new</span> File(codeFile, name);</div><div class="line">                <span class="keyword">final</span> FileDescriptor fd = Os.open(file.getAbsolutePath(),</div><div class="line">                        O_RDWR | O_CREAT, <span class="number">0644</span>);</div><div class="line">                Os.chmod(file.getAbsolutePath(), <span class="number">0644</span>);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ParcelFileDescriptor(fd);</div><div class="line">            &#125; <span class="keyword">catch</span> (ErrnoException e) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RemoteException(<span class="string">"Failed to open: "</span> + e.getMessage());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> ret = PackageManager.INSTALL_SUCCEEDED;</div><div class="line">    <span class="comment">// 调用DefaultContainerService.mBinder.copyPackage()方法复制文件到target.open()方法指定的文件中，也即是上面产生的临时文件</span></div><div class="line">    ret = imcs.copyPackage(origin.file.getAbsolutePath(), target);</div><div class="line">    <span class="keyword">if</span> (ret != PackageManager.INSTALL_SUCCEEDED) &#123;</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> File libraryRoot = <span class="keyword">new</span> File(codeFile, LIB_DIR_NAME);</div><div class="line">    NativeLibraryHelper.Handle handle = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        handle = NativeLibraryHelper.Handle.create(codeFile);</div><div class="line">        ret = NativeLibraryHelper.copyNativeBinariesWithOverride(handle, libraryRoot,</div><div class="line">                abiOverride);</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">        ret = PackageManager.INSTALL_FAILED_INTERNAL_ERROR;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        IoUtils.closeQuietly(handle);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>复制完成后，apk会被复制到/data/app/目录下面。</p>
<h3 id="解析应用阶段"><a href="#解析应用阶段" class="headerlink" title="解析应用阶段"></a>解析应用阶段</h3><p>这个阶段的工作是对安装包进行扫描优化，把应用转换成oat格式，然后装载到内存中去。<br>在<code>handleStartCopy()</code>执行完之后，文件复制工作阶段的工作已经完成了，接下来会在<code>startCopy()</code>中调用<code>handleReturnCode()</code>-&gt;<code>processPendingInstall()</code>来进行应用的解析和装载。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processPendingInstall</span><span class="params">(<span class="keyword">final</span> InstallArgs args, <span class="keyword">final</span> <span class="keyword">int</span> currentStatus)</span> </span>&#123;</div><div class="line">    <span class="comment">// 以异步的方式执行安装，因为安装工作可能持续时间比较长</span></div><div class="line">    mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="comment">// 防止重复调用</span></div><div class="line">            mHandler.removeCallbacks(<span class="keyword">this</span>);</div><div class="line">            PackageInstalledInfo res = <span class="keyword">new</span> PackageInstalledInfo();</div><div class="line">            res.returnCode = currentStatus;</div><div class="line">            res.uid = -<span class="number">1</span>;</div><div class="line">            res.pkg = <span class="keyword">null</span>;</div><div class="line">            res.removedInfo = <span class="keyword">new</span> PackageRemovedInfo();</div><div class="line">            <span class="keyword">if</span> (res.returnCode == PackageManager.INSTALL_SUCCEEDED) &#123;</div><div class="line">                <span class="comment">// 如果前面返回的是执行成功的返回值</span></div><div class="line">                args.doPreInstall(res.returnCode);</div><div class="line">                <span class="keyword">synchronized</span> (mInstallLock) &#123;</div><div class="line">                    <span class="comment">// 开始安装应用，带LI后缀的函数执行时要带mInstallLock锁</span></div><div class="line">                    installPackageLI(args, res);</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// 执行doPostInstall()，这里主要分析一下FileInstallArgs.doPostInstall()</span></div><div class="line">                <span class="comment">// 如果没有安装成功，这里会清除前面生成的临时文件</span></div><div class="line">                args.doPostInstall(res.returnCode, res.uid);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 执行备份，在下面的情况下会执行备份：1.安装成功，2.是一个新的安装而不是一个升级的操作，3.新的安装包还没有执行过备份操作</span></div><div class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> update = res.removedInfo.removedPackage != <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> flags = (res.pkg == <span class="keyword">null</span>) ? <span class="number">0</span> : res.pkg.applicationInfo.flags;</div><div class="line">            <span class="keyword">boolean</span> doRestore = !update</div><div class="line">                    &amp;&amp; ((flags &amp; ApplicationInfo.FLAG_ALLOW_BACKUP) != <span class="number">0</span>);</div><div class="line"></div><div class="line">            <span class="comment">// Set up the post-install work request bookkeeping.  This will be used</span></div><div class="line">            <span class="comment">// and cleaned up by the post-install event handling regardless of whether</span></div><div class="line">            <span class="comment">// there's a restore pass performed.  Token values are &gt;= 1.</span></div><div class="line">            <span class="keyword">int</span> token;</div><div class="line">            <span class="keyword">if</span> (mNextInstallToken &lt; <span class="number">0</span>) mNextInstallToken = <span class="number">1</span>;</div><div class="line">            token = mNextInstallToken++;</div><div class="line"></div><div class="line">            PostInstallData data = <span class="keyword">new</span> PostInstallData(args, res);</div><div class="line">            mRunningInstalls.put(token, data);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (res.returnCode == PackageManager.INSTALL_SUCCEEDED &amp;&amp; doRestore) &#123;</div><div class="line">                IBackupManager bm = IBackupManager.Stub.asInterface(</div><div class="line">                        ServiceManager.getService(Context.BACKUP_SERVICE));</div><div class="line">                <span class="keyword">if</span> (bm != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        <span class="keyword">if</span> (bm.isBackupServiceActive(UserHandle.USER_OWNER)) &#123;</div><div class="line">                            bm.restoreAtInstall(res.pkg.applicationInfo.packageName, token);</div><div class="line">                        &#125; <span class="keyword">else</span> &#123;</div><div class="line">                            doRestore = <span class="keyword">false</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                        doRestore = <span class="keyword">false</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    doRestore = <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (!doRestore) &#123;</div><div class="line">                <span class="comment">// 发送POST_INSTALL消息</span></div><div class="line">                Message msg = mHandler.obtainMessage(POST_INSTALL, token, <span class="number">0</span>);</div><div class="line">                mHandler.sendMessage(msg);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>processPendingInstall()</code>方法内部是以异步的方式继续执行安装工作的，首先来调用<code>installPackageLI()</code>执行安装工作，然后调用<code>doPostInstall()</code>对前面的工作的返回结果进行处理，如果没有安装成功，执行清除的工作。然后再执行备份操作。<br>下面来看一下<code>installPackageLI()</code>方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">installPackageLI</span><span class="params">(InstallArgs args, PackageInstalledInfo res)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> installFlags = args.installFlags;</div><div class="line">    <span class="keyword">final</span> String installerPackageName = args.installerPackageName;</div><div class="line">    <span class="keyword">final</span> String volumeUuid = args.volumeUuid;</div><div class="line">    <span class="keyword">final</span> File tmpPackageFile = <span class="keyword">new</span> File(args.getCodePath());</div><div class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> forwardLocked = ((installFlags &amp; PackageManager.INSTALL_FORWARD_LOCK) != <span class="number">0</span>);</div><div class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> onExternal = (((installFlags &amp; PackageManager.INSTALL_EXTERNAL) != <span class="number">0</span>)</div><div class="line">            || (args.volumeUuid != <span class="keyword">null</span>));</div><div class="line">    <span class="keyword">boolean</span> replace = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">int</span> scanFlags = SCAN_NEW_INSTALL | SCAN_UPDATE_SIGNATURE;</div><div class="line">    <span class="keyword">if</span> (args.move != <span class="keyword">null</span>) &#123;</div><div class="line">        scanFlags |= SCAN_INITIAL;</div><div class="line">    &#125;</div><div class="line">    res.returnCode = PackageManager.INSTALL_SUCCEEDED;</div><div class="line"></div><div class="line">    <span class="comment">// 创建apk解析器</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> parseFlags = mDefParseFlags | PackageParser.PARSE_CHATTY</div><div class="line">            | (forwardLocked ? PackageParser.PARSE_FORWARD_LOCK : <span class="number">0</span>)</div><div class="line">            | (onExternal ? PackageParser.PARSE_EXTERNAL_STORAGE : <span class="number">0</span>);</div><div class="line">    PackageParser pp = <span class="keyword">new</span> PackageParser();</div><div class="line">    pp.setSeparateProcesses(mSeparateProcesses);</div><div class="line">    pp.setDisplayMetrics(mMetrics);</div><div class="line"></div><div class="line">    <span class="keyword">final</span> PackageParser.Package pkg;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">// 开始解析文件，解析apk的信息存储在PackageParser.Package中</span></div><div class="line">        pkg = pp.parsePackage(tmpPackageFile, parseFlags);</div><div class="line">    &#125; <span class="keyword">catch</span> (PackageParserException e) &#123;</div><div class="line">        res.setError(<span class="string">"Failed parse during installPackageLI"</span>, e);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ......</div><div class="line"></div><div class="line">    <span class="comment">// 获取安装包的签名和AndroidManifest摘要</span></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        pp.collectCertificates(pkg, parseFlags);</div><div class="line">        pp.collectManifestDigest(pkg);</div><div class="line">    &#125; <span class="keyword">catch</span> (PackageParserException e) &#123;</div><div class="line">        res.setError(<span class="string">"Failed collect during installPackageLI"</span>, e);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (args.manifestDigest != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 与installPackage()方法传递过来的VerificationParams获取的AndroidManifest摘要进行对比</span></div><div class="line">        <span class="keyword">if</span> (!args.manifestDigest.equals(pkg.manifestDigest)) &#123;</div><div class="line">            res.setError(INSTALL_FAILED_PACKAGE_CHANGED, <span class="string">"Manifest digest changed"</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (DEBUG_INSTALL) &#123;...&#125;</div><div class="line"></div><div class="line">    <span class="comment">// Get rid of all references to package scan path via parser.</span></div><div class="line">    pp = <span class="keyword">null</span>;</div><div class="line">    String oldCodePath = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">boolean</span> systemApp = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</div><div class="line">        <span class="comment">// 判断是否是升级当前已有应用</span></div><div class="line">        <span class="keyword">if</span> ((installFlags &amp; PackageManager.INSTALL_REPLACE_EXISTING) != <span class="number">0</span>) &#123;</div><div class="line">            String oldName = mSettings.mRenamedPackages.get(pkgName);</div><div class="line">            <span class="keyword">if</span> (pkg.mOriginalPackages != <span class="keyword">null</span></div><div class="line">                    &amp;&amp; pkg.mOriginalPackages.contains(oldName)</div><div class="line">                    &amp;&amp; mPackages.containsKey(oldName)) &#123;</div><div class="line">                <span class="comment">// 如果当前应用已经被升级过</span></div><div class="line">                pkg.setPackageName(oldName);</div><div class="line">                pkgName = pkg.packageName;</div><div class="line">                replace = <span class="keyword">true</span>;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mPackages.containsKey(pkgName)) &#123;</div><div class="line">                <span class="comment">// 当前应用没有被升级过</span></div><div class="line">                replace = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 如果已有应用oldTargetSdk大于LOLLIPOP_MR1(22)，新升级应用小于LOLLIPOP_MR1，则不允许降级安装</span></div><div class="line">            <span class="comment">// 因为AndroidM(23)引入了全新的权限管理方式：动态权限管理</span></div><div class="line">            <span class="keyword">if</span> (replace) &#123;</div><div class="line">                PackageParser.Package oldPackage = mPackages.get(pkgName);</div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> oldTargetSdk = oldPackage.applicationInfo.targetSdkVersion;</div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> newTargetSdk = pkg.applicationInfo.targetSdkVersion;</div><div class="line">                <span class="keyword">if</span> (oldTargetSdk &gt; Build.VERSION_CODES.LOLLIPOP_MR1</div><div class="line">                        &amp;&amp; newTargetSdk &lt;= Build.VERSION_CODES.LOLLIPOP_MR1) &#123;</div><div class="line">                    ...</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        PackageSetting ps = mSettings.mPackages.get(pkgName);</div><div class="line">        <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (shouldCheckUpgradeKeySetLP(ps, scanFlags)) &#123;</div><div class="line">                <span class="comment">// 判断签名是否一致</span></div><div class="line">                <span class="keyword">if</span> (!checkUpgradeKeySetLP(ps, pkg)) &#123;</div><div class="line">                    ...</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    verifySignaturesLP(ps, pkg);</div><div class="line">                &#125; <span class="keyword">catch</span> (PackageManagerException e) &#123;</div><div class="line">                    ...</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            oldCodePath = mSettings.mPackages.get(pkgName).codePathString;</div><div class="line">            <span class="keyword">if</span> (ps.pkg != <span class="keyword">null</span> &amp;&amp; ps.pkg.applicationInfo != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">// 判断是否是系统应用</span></div><div class="line">                systemApp = (ps.pkg.applicationInfo.flags &amp;</div><div class="line">              </div><div class="line">            <span class="comment">// 给origUsers赋值，此变量代表哪些用户以前已经安装过该应用</span></div><div class="line">            res.origUsers = ps.queryInstalledUsers(sUserManager.getUserIds(), <span class="keyword">true</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Check whether the newly-scanned package wants to define an already-defined perm</span></div><div class="line">        <span class="keyword">int</span> N = pkg.permissions.size();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = N-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">            PackageParser.Permission perm = pkg.permissions.get(i);</div><div class="line">            BasePermission bp = mSettings.mPermissions.get(perm.info.name);</div><div class="line">            <span class="keyword">if</span> (bp != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">// If the defining package is signed with our cert, it's okay.  This</span></div><div class="line">                <span class="comment">// also includes the "updating the same package" case, of course.</span></div><div class="line">                <span class="comment">// "updating same package" could also involve key-rotation.</span></div><div class="line">                <span class="keyword">final</span> <span class="keyword">boolean</span> sigsOk;</div><div class="line">                <span class="keyword">if</span> (bp.sourcePackage.equals(pkg.packageName)</div><div class="line">                        &amp;&amp; (bp.packageSetting <span class="keyword">instanceof</span> PackageSetting)</div><div class="line">                        &amp;&amp; (shouldCheckUpgradeKeySetLP((PackageSetting) bp.packageSetting,</div><div class="line">                                scanFlags))) &#123;</div><div class="line">                    sigsOk = checkUpgradeKeySetLP((PackageSetting) bp.packageSetting, pkg);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    sigsOk = compareSignatures(bp.packageSetting.signatures.mSignatures,</div><div class="line">                            pkg.mSignatures) == PackageManager.SIGNATURE_MATCH;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (!sigsOk) &#123;</div><div class="line">                    <span class="comment">// If the owning package is the system itself, we log but allow</span></div><div class="line">                    <span class="comment">// install to proceed; we fail the install on all other permission</span></div><div class="line">                    <span class="comment">// redefinitions.</span></div><div class="line">                    <span class="keyword">if</span> (!bp.sourcePackage.equals(<span class="string">"android"</span>)) &#123;</div><div class="line">                        res.setError(INSTALL_FAILED_DUPLICATE_PERMISSION, <span class="string">"Package "</span></div><div class="line">                                + pkg.packageName + <span class="string">" attempting to redeclare permission "</span></div><div class="line">                                + perm.info.name + <span class="string">" already owned by "</span> + bp.sourcePackage);</div><div class="line">                        res.origPermission = perm.info.name;</div><div class="line">                        res.origPackage = bp.sourcePackage;</div><div class="line">                        <span class="keyword">return</span>;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        pkg.permissions.remove(i);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 系统应用不允许安装在SDCard上</span></div><div class="line">    <span class="keyword">if</span> (systemApp &amp;&amp; onExternal) &#123;</div><div class="line">        res.setError(INSTALL_FAILED_INVALID_INSTALL_LOCATION,</div><div class="line">                <span class="string">"Cannot install updates to system apps on sdcard"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 下面将会进行Dex优化操作</span></div><div class="line">    <span class="keyword">if</span> (args.move != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 如果是针对已有文件的Move，就不用在进行Dex优化了</span></div><div class="line">        scanFlags |= SCAN_NO_DEX;</div><div class="line">        scanFlags |= SCAN_MOVE;</div><div class="line"></div><div class="line">        <span class="keyword">synchronized</span> (mPackages) &#123;</div><div class="line">            <span class="keyword">final</span> PackageSetting ps = mSettings.mPackages.get(pkgName);</div><div class="line">            <span class="keyword">if</span> (ps == <span class="keyword">null</span>) &#123;</div><div class="line">                res.setError(INSTALL_FAILED_INTERNAL_ERROR,</div><div class="line">                        <span class="string">"Missing settings for moved package "</span> + pkgName);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            pkg.applicationInfo.primaryCpuAbi = ps.primaryCpuAbiString;</div><div class="line">            pkg.applicationInfo.secondaryCpuAbi = ps.secondaryCpuAbiString;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!forwardLocked &amp;&amp; !pkg.applicationInfo.isExternalAsec()) &#123;</div><div class="line">        <span class="comment">// 没有设置了PRIVATE_FLAG_FORWARD_LOCK标志且不是安装在外部SD卡</span></div><div class="line">        <span class="comment">// 使能 SCAN_NO_DEX 标志位，在后面的操作中会跳过 dexopt</span></div><div class="line">        scanFlags |= SCAN_NO_DEX;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            derivePackageAbi(pkg, <span class="keyword">new</span> File(pkg.codePath), args.abiOverride,</div><div class="line">                    <span class="keyword">true</span> <span class="comment">/* extract libs */</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (PackageManagerException pme) &#123;</div><div class="line">            res.setError(INSTALL_FAILED_INTERNAL_ERROR, <span class="string">"Error deriving application ABI"</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 进行DexOpt操作，会调用install 的dexopt命令，优化后的文件放在 /data/dalvik-cache/ 下面</span></div><div class="line">        <span class="keyword">int</span> result = mPackageDexOptimizer</div><div class="line">                .performDexOpt(pkg, <span class="keyword">null</span> <span class="comment">/* instruction sets */</span>, <span class="keyword">false</span> <span class="comment">/* forceDex */</span>,</div><div class="line">                        <span class="keyword">false</span> <span class="comment">/* defer */</span>, <span class="keyword">false</span> <span class="comment">/* inclDependencies */</span>,</div><div class="line">                        <span class="keyword">true</span> <span class="comment">/* boot complete */</span>);</div><div class="line">        <span class="keyword">if</span> (result == PackageDexOptimizer.DEX_OPT_FAILED) &#123;</div><div class="line">            res.setError(INSTALL_FAILED_DEXOPT, <span class="string">"Dexopt failed for "</span> + pkg.codePath);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 重命名/data/app/下面应用的目录名字，调用getNextCodePath()来获取目录名称，类似com.android.browser-1</span></div><div class="line">    <span class="keyword">if</span> (!args.doRename(res.returnCode, pkg, oldCodePath)) &#123;</div><div class="line">        res.setError(INSTALL_FAILED_INSUFFICIENT_STORAGE, <span class="string">"Failed rename"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    startIntentFilterVerifications(args.user.getIdentifier(), replace, pkg);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (replace) &#123;</div><div class="line">        <span class="comment">// 如果是安装升级包，调用replacePackageLI</span></div><div class="line">        replacePackageLI(pkg, parseFlags, scanFlags | SCAN_REPLACING, args.user,</div><div class="line">                installerPackageName, volumeUuid, res);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 如果安装的新应用，调用installNewPackageLI</span></div><div class="line">        installNewPackageLI(pkg, parseFlags, scanFlags | SCAN_DELETE_DATA_ON_FAILURES,</div><div class="line">                args.user, installerPackageName, volumeUuid, res);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</div><div class="line">        <span class="keyword">final</span> PackageSetting ps = mSettings.mPackages.get(pkgName);</div><div class="line">        <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// 安装完成后，给newUsers赋值，此变量代表哪些用户刚刚安装过该应用</span></div><div class="line">            res.newUsers = ps.queryInstalledUsers(sUserManager.getUserIds(), <span class="keyword">true</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>installPackageLI()</code>方法首先解析apk安装包，然后判断当前是否有安装该应用，然后根据不同的情况进行不同的处理，然后进行Dex优化操作。如果是升级安装，调用<code>replacePackageLI()</code>。如果是新安装，调用<code>installNewPackageLI()</code>。这两个方法会在下面详细介绍。</p>
<p><code>processPendingInstall()</code>方法中执行安装的最后是发送<code>POST_INSTALL</code>消息，现在来看一下这个消息需要处理的事情：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> POST_INSTALL: &#123;</div><div class="line">    <span class="comment">//从正在安装队列中将当前正在安装的任务删除</span></div><div class="line">    PostInstallData data = mRunningInstalls.get(msg.arg1);</div><div class="line">    mRunningInstalls.delete(msg.arg1);</div><div class="line">    <span class="keyword">boolean</span> deleteOld = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (data != <span class="keyword">null</span>) &#123;</div><div class="line">        InstallArgs args = data.args;</div><div class="line">        PackageInstalledInfo res = data.res;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (res.returnCode == PackageManager.INSTALL_SUCCEEDED) &#123;</div><div class="line">            <span class="keyword">final</span> String packageName = res.pkg.applicationInfo.packageName;</div><div class="line">            res.removedInfo.sendBroadcast(<span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</div><div class="line">            Bundle extras = <span class="keyword">new</span> Bundle(<span class="number">1</span>);</div><div class="line">            extras.putInt(Intent.EXTRA_UID, res.uid);</div><div class="line"></div><div class="line">            <span class="comment">// 现在已经成功的安装了应用，在发送广播之前先授予一些必要的权限</span></div><div class="line">            <span class="comment">// 这些权限在 installPackageAsUser 中创建 InstallParams 时传递的，为null</span></div><div class="line">            <span class="keyword">if</span> ((args.installFlags</div><div class="line">                    &amp; PackageManager.INSTALL_GRANT_RUNTIME_PERMISSIONS) != <span class="number">0</span>) &#123;</div><div class="line">                grantRequestedRuntimePermissions(res.pkg, args.user.getIdentifier(),</div><div class="line">                        args.installGrantPermissions);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 看一下当前应用对于哪些用户是第一次安装，哪些用户是升级安装</span></div><div class="line">            <span class="keyword">int</span>[] firstUsers;</div><div class="line">            <span class="keyword">int</span>[] updateUsers = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</div><div class="line">            <span class="keyword">if</span> (res.origUsers == <span class="keyword">null</span> || res.origUsers.length == <span class="number">0</span>) &#123;</div><div class="line">                <span class="comment">// 所有用户都是第一次安装</span></div><div class="line">                firstUsers = res.newUsers;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                firstUsers = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</div><div class="line">                <span class="comment">// 这里再从刚刚已经安装该包的用户中选出哪些是以前已经安装过该包的用户</span></div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;res.newUsers.length; i++) &#123;</div><div class="line">                    <span class="keyword">int</span> user = res.newUsers[i];</div><div class="line">                    <span class="keyword">boolean</span> isNew = <span class="keyword">true</span>;</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;res.origUsers.length; j++) &#123;</div><div class="line">                        <span class="keyword">if</span> (res.origUsers[j] == user) &#123;</div><div class="line">                            <span class="comment">// 找到以前安装过该包的用户</span></div><div class="line">                            isNew = <span class="keyword">false</span>;</div><div class="line">                            <span class="keyword">break</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (isNew) &#123;</div><div class="line">                        <span class="keyword">int</span>[] newFirst = <span class="keyword">new</span> <span class="keyword">int</span>[firstUsers.length+<span class="number">1</span>];</div><div class="line">                        System.arraycopy(firstUsers, <span class="number">0</span>, newFirst, <span class="number">0</span>,</div><div class="line">                                firstUsers.length);</div><div class="line">                        newFirst[firstUsers.length] = user;</div><div class="line">                        firstUsers = newFirst;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="keyword">int</span>[] newUpdate = <span class="keyword">new</span> <span class="keyword">int</span>[updateUsers.length+<span class="number">1</span>];</div><div class="line">                        System.arraycopy(updateUsers, <span class="number">0</span>, newUpdate, <span class="number">0</span>,</div><div class="line">                                updateUsers.length);</div><div class="line">                        newUpdate[updateUsers.length] = user;</div><div class="line">                        updateUsers = newUpdate;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//为新安装用户发送广播ACTION_PACKAGE_ADDED</span></div><div class="line">            sendPackageBroadcast(Intent.ACTION_PACKAGE_ADDED,</div><div class="line">                    packageName, extras, <span class="keyword">null</span>, <span class="keyword">null</span>, firstUsers);</div><div class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> update = res.removedInfo.removedPackage != <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">if</span> (update) &#123;</div><div class="line">                extras.putBoolean(Intent.EXTRA_REPLACING, <span class="keyword">true</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//为升级安装用户发送广播ACTION_PACKAGE_ADDED</span></div><div class="line">            sendPackageBroadcast(Intent.ACTION_PACKAGE_ADDED,</div><div class="line">                    packageName, extras, <span class="keyword">null</span>, <span class="keyword">null</span>, updateUsers);</div><div class="line">            <span class="keyword">if</span> (update) &#123;</div><div class="line">                <span class="comment">// 如果是升级安装，还会发送ACTION_PACKAGE_REPLACED和ACTION_MY_PACKAGE_REPLACED广播</span></div><div class="line">                sendPackageBroadcast(Intent.ACTION_PACKAGE_REPLACED,</div><div class="line">                        packageName, extras, <span class="keyword">null</span>, <span class="keyword">null</span>, updateUsers);</div><div class="line">                sendPackageBroadcast(Intent.ACTION_MY_PACKAGE_REPLACED,</div><div class="line">                        <span class="keyword">null</span>, <span class="keyword">null</span>, packageName, <span class="keyword">null</span>, updateUsers);</div><div class="line"></div><div class="line">                <span class="comment">// 判断该包是否是设置了PRIVATE_FLAG_FORWARD_LOCK标志或者是安装在外部SD卡</span></div><div class="line">                <span class="keyword">if</span> (res.pkg.isForwardLocked() || isExternal(res.pkg)) &#123;</div><div class="line">                    <span class="keyword">int</span>[] uidArray = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; res.pkg.applicationInfo.uid &#125;;</div><div class="line">                    ArrayList&lt;String&gt; pkgList = <span class="keyword">new</span> ArrayList&lt;String&gt;(<span class="number">1</span>);</div><div class="line">                    pkgList.add(packageName);</div><div class="line">                    sendResourcesChangedBroadcast(<span class="keyword">true</span>, <span class="keyword">true</span>,</div><div class="line">                            pkgList,uidArray, <span class="keyword">null</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (res.removedInfo.args != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">// 删除被替换应用的资源目录标记位</span></div><div class="line">                deleteOld = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 针对Browser的一些处理</span></div><div class="line">            <span class="keyword">if</span> (firstUsers.length &gt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (packageIsBrowser(packageName, firstUsers[<span class="number">0</span>])) &#123;</div><div class="line">                    <span class="keyword">synchronized</span> (mPackages) &#123;</div><div class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> userId : firstUsers) &#123;</div><div class="line">                            mSettings.setDefaultBrowserPackageNameLPw(<span class="keyword">null</span>, userId);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 执行一次GC操作</span></div><div class="line">        Runtime.getRuntime().gc();</div><div class="line">        <span class="comment">// 执行删除操作</span></div><div class="line">        <span class="keyword">if</span> (deleteOld) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (mInstallLock) &#123;</div><div class="line">                res.removedInfo.args.doPostDeleteLI(<span class="keyword">true</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (args.observer != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">// 调用回调函数通知安装者此次安装的结果</span></div><div class="line">                Bundle extras = extrasForInstallResult(res);</div><div class="line">                args.observer.onPackageInstalled(res.name, res.returnCode,</div><div class="line">                        res.returnMsg, extras);</div><div class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;...&#125;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;...&#125;</div><div class="line">&#125; <span class="keyword">break</span>;</div></pre></td></tr></table></figure>
<p>对<code>POST_INSTALL</code>消息消息的处理主要就是一些权限处理、发送广播、通知相关应用处理安装结果，然后调用回调函数onPackageInstalled()，这个回调函数是调用installPackage()方法时作为参数传递进来的。</p>
<p><em>总结一下解析应用阶段的工作</em>：</p>
<ol>
<li>解析apk信息</li>
<li>dexopt操作</li>
<li>更新权限信息</li>
<li>完成安装,发送<code>Intent.ACTION_PACKAGE_ADDED</code>广播</li>
</ol>
<h2 id="其他相关方法分析"><a href="#其他相关方法分析" class="headerlink" title="其他相关方法分析"></a>其他相关方法分析</h2><h3 id="PackageManagerService获取新的apk目录名字"><a href="#PackageManagerService获取新的apk目录名字" class="headerlink" title="PackageManagerService获取新的apk目录名字"></a>PackageManagerService获取新的apk目录名字</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> File <span class="title">getNextCodePath</span><span class="params">(File targetDir, String packageName)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> suffix = <span class="number">1</span>;</div><div class="line">    File result;</div><div class="line">    <span class="keyword">do</span> &#123;</div><div class="line">        result = <span class="keyword">new</span> File(targetDir, packageName + <span class="string">"-"</span> + suffix);</div><div class="line">        suffix++;</div><div class="line">    &#125; <span class="keyword">while</span> (result.exists());</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>类似com.android.browser-1</p>
<h3 id="replacePackageLI"><a href="#replacePackageLI" class="headerlink" title="replacePackageLI()"></a>replacePackageLI()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">replacePackageLI</span><span class="params">(PackageParser.Package pkg, <span class="keyword">int</span> parseFlags, <span class="keyword">int</span> scanFlags,</span></span></div><div class="line">        UserHandle user, String installerPackageName, String volumeUuid,</div><div class="line">        PackageInstalledInfo res) &#123;</div><div class="line">    <span class="keyword">final</span> PackageParser.Package oldPackage;</div><div class="line">    <span class="keyword">final</span> String pkgName = pkg.packageName;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span>[] allUsers;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span>[] perUserInstalled;</div><div class="line"></div><div class="line">    <span class="comment">// First find the old package info and check signatures</span></div><div class="line">    <span class="comment">// 获取老版本应用的信息并对比签名是否匹配</span></div><div class="line">    <span class="keyword">synchronized</span>(mPackages) &#123;</div><div class="line">        oldPackage = mPackages.get(pkgName);</div><div class="line">        <span class="keyword">final</span> PackageSetting ps = mSettings.mPackages.get(pkgName);</div><div class="line">        <span class="keyword">if</span> (shouldCheckUpgradeKeySetLP(ps, scanFlags)) &#123;</div><div class="line">            <span class="comment">// 如果是自定义的签名 defined-keyset</span></div><div class="line">            <span class="keyword">if</span>(!checkUpgradeKeySetLP(ps, pkg)) &#123;</div><div class="line">                res.setError(INSTALL_FAILED_UPDATE_INCOMPATIBLE,</div><div class="line">                        <span class="string">"New package not signed by keys specified by upgrade-keysets: "</span></div><div class="line">                        + pkgName);</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 判断签名是否匹配</span></div><div class="line">            <span class="keyword">if</span> (compareSignatures(oldPackage.mSignatures, pkg.mSignatures)</div><div class="line">                != PackageManager.SIGNATURE_MATCH) &#123;</div><div class="line">                res.setError(INSTALL_FAILED_UPDATE_INCOMPATIBLE,</div><div class="line">                        <span class="string">"New package has a different signature: "</span> + pkgName);</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        allUsers = sUserManager.getUserIds();</div><div class="line">        perUserInstalled = <span class="keyword">new</span> <span class="keyword">boolean</span>[allUsers.length];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; allUsers.length; i++) &#123;</div><div class="line">            perUserInstalled[i] = ps != <span class="keyword">null</span> ? ps.getInstalled(allUsers[i]) : <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">boolean</span> sysPkg = (isSystemApp(oldPackage));</div><div class="line">    <span class="keyword">if</span> (sysPkg) &#123;</div><div class="line">        <span class="comment">// 如果是系统应用，调用replaceSystemPackageLI()方法，下面会详细介绍</span></div><div class="line">        replaceSystemPackageLI(oldPackage, pkg, parseFlags, scanFlags,</div><div class="line">                user, allUsers, perUserInstalled, installerPackageName, volumeUuid, res);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 如果不是系统应用，调用replaceNonSystemPackageLI()方法，下面会详细介绍</span></div><div class="line">        replaceNonSystemPackageLI(oldPackage, pkg, parseFlags, scanFlags,</div><div class="line">                user, allUsers, perUserInstalled, installerPackageName, volumeUuid, res);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="replaceSystemPackageLI"><a href="#replaceSystemPackageLI" class="headerlink" title="replaceSystemPackageLI()"></a>replaceSystemPackageLI()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">replaceSystemPackageLI</span><span class="params">(PackageParser.Package deletedPackage,</span></span></div><div class="line">        PackageParser.Package pkg, <span class="keyword">int</span> parseFlags, <span class="keyword">int</span> scanFlags, UserHandle user,</div><div class="line">        <span class="keyword">int</span>[] allUsers, <span class="keyword">boolean</span>[] perUserInstalled, String installerPackageName,</div><div class="line">        String volumeUuid, PackageInstalledInfo res) &#123;</div><div class="line">    <span class="keyword">boolean</span> disabledSystem = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">boolean</span> updatedSettings = <span class="keyword">false</span>;</div><div class="line">    parseFlags |= PackageParser.PARSE_IS_SYSTEM;</div><div class="line">    <span class="keyword">if</span> ((deletedPackage.applicationInfo.privateFlags&amp;ApplicationInfo.PRIVATE_FLAG_PRIVILEGED)</div><div class="line">            != <span class="number">0</span>) &#123;</div><div class="line">        parseFlags |= PackageParser.PARSE_IS_PRIVILEGED;</div><div class="line">    &#125;</div><div class="line">    String packageName = deletedPackage.packageName;</div><div class="line">    <span class="keyword">if</span> (packageName == <span class="keyword">null</span>) &#123;</div><div class="line">        res.setError(INSTALL_FAILED_REPLACE_COULDNT_DELETE,</div><div class="line">                <span class="string">"Attempt to delete null packageName."</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    PackageParser.Package oldPkg;</div><div class="line">    PackageSetting oldPkgSetting;</div><div class="line">    <span class="comment">// 读取原来应用的信息</span></div><div class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</div><div class="line">        oldPkg = mPackages.get(packageName);</div><div class="line">        oldPkgSetting = mSettings.mPackages.get(packageName);</div><div class="line">        <span class="keyword">if</span>((oldPkg == <span class="keyword">null</span>) || (oldPkg.applicationInfo == <span class="keyword">null</span>) ||</div><div class="line">                (oldPkgSetting == <span class="keyword">null</span>)) &#123;</div><div class="line">            res.setError(INSTALL_FAILED_REPLACE_COULDNT_DELETE,</div><div class="line">                    <span class="string">"Couldn't find package:"</span> + packageName + <span class="string">" information"</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 先杀掉原来应用的进程</span></div><div class="line">    killApplication(packageName, oldPkg.applicationInfo.uid, <span class="string">"replace sys pkg"</span>);</div><div class="line"></div><div class="line">    res.removedInfo.uid = oldPkg.applicationInfo.uid;</div><div class="line">    res.removedInfo.removedPackage = packageName;</div><div class="line">    <span class="comment">// 删除原有应用包，这个方法后面博客会详细介绍</span></div><div class="line">    removePackageLI(oldPkgSetting, <span class="keyword">true</span>);</div><div class="line">    <span class="comment">// writer</span></div><div class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</div><div class="line">        <span class="comment">//把这个结果保存到mSettings中，即在xml文件中用&lt;updated-package&gt;标签标记</span></div><div class="line">        disabledSystem = mSettings.disableSystemPackageLPw(packageName);</div><div class="line">        <span class="keyword">if</span> (!disabledSystem &amp;&amp; deletedPackage != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// 如果包名和资源路径没有变化，分别构造FileInstallArgs和AsecInstallArgs来完成code和resource资源的清除。</span></div><div class="line">            res.removedInfo.args = createInstallArgsForExisting(<span class="number">0</span>,</div><div class="line">                    deletedPackage.applicationInfo.getCodePath(),</div><div class="line">                    deletedPackage.applicationInfo.getResourcePath(),</div><div class="line">                    getAppDexInstructionSets(deletedPackage.applicationInfo));</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            res.removedInfo.args = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 调用installd 的 rmcodecache 命令清除代码缓存文件</span></div><div class="line">    deleteCodeCacheDirsLI(pkg.volumeUuid, packageName);</div><div class="line"></div><div class="line">    res.returnCode = PackageManager.INSTALL_SUCCEEDED;</div><div class="line">    pkg.applicationInfo.flags |= ApplicationInfo.FLAG_UPDATED_SYSTEM_APP;</div><div class="line"></div><div class="line">    PackageParser.Package newPackage = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">// 开始扫描文件，scanPackageLI在上一篇博客中有详细介绍，这里会解析文件，设置apk路径以及资源路径</span></div><div class="line">        newPackage = scanPackageLI(pkg, parseFlags, scanFlags, <span class="number">0</span>, user);</div><div class="line">        <span class="keyword">if</span> (newPackage.mExtras != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// 更新安装时间与升级时间</span></div><div class="line">            <span class="keyword">final</span> PackageSetting newPkgSetting = (PackageSetting) newPackage.mExtras;</div><div class="line">            newPkgSetting.firstInstallTime = oldPkgSetting.firstInstallTime;</div><div class="line">            newPkgSetting.lastUpdateTime = System.currentTimeMillis();</div><div class="line"></div><div class="line">            <span class="comment">// is the update attempting to change shared user? that isn't going to work...</span></div><div class="line">            <span class="keyword">if</span> (oldPkgSetting.sharedUser != newPkgSetting.sharedUser) &#123;</div><div class="line">                res.setError(INSTALL_FAILED_SHARED_USER_INCOMPATIBLE,</div><div class="line">                        <span class="string">"Forbidding shared user change from "</span> + oldPkgSetting.sharedUser</div><div class="line">                        + <span class="string">" to "</span> + newPkgSetting.sharedUser);</div><div class="line">                updatedSettings = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (res.returnCode == PackageManager.INSTALL_SUCCEEDED) &#123;</div><div class="line">            <span class="comment">// 扫描成功，更新配置文件</span></div><div class="line">            updateSettingsLI(newPackage, installerPackageName, volumeUuid, allUsers,</div><div class="line">                    perUserInstalled, res, user);</div><div class="line">            updatedSettings = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125; <span class="keyword">catch</span> (PackageManagerException e) &#123;</div><div class="line">        res.setError(<span class="string">"Package couldn't be installed in "</span> + pkg.codePath, e);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (res.returnCode != PackageManager.INSTALL_SUCCEEDED) &#123;</div><div class="line">        <span class="comment">// 如果安装失败，删除新安装的包，恢复以前的应用包</span></div><div class="line">        <span class="keyword">if</span> (newPackage != <span class="keyword">null</span>) &#123;</div><div class="line">            removeInstalledPackageLI(newPackage, <span class="keyword">true</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            scanPackageLI(oldPkg, parseFlags, SCAN_UPDATE_SIGNATURE, <span class="number">0</span>, user);</div><div class="line">        &#125; <span class="keyword">catch</span> (PackageManagerException e) &#123;...&#125;</div><div class="line">        <span class="keyword">synchronized</span> (mPackages) &#123;</div><div class="line">            <span class="keyword">if</span> (disabledSystem) &#123;</div><div class="line">                mSettings.enableSystemPackageLPw(packageName);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (updatedSettings) &#123;</div><div class="line">                mSettings.setInstallerPackageName(packageName,</div><div class="line">                        oldPkgSetting.installerPackageName);</div><div class="line">            &#125;</div><div class="line">            mSettings.writeLPr();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="replaceNonSystemPackageLI"><a href="#replaceNonSystemPackageLI" class="headerlink" title="replaceNonSystemPackageLI()"></a>replaceNonSystemPackageLI()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">replaceNonSystemPackageLI</span><span class="params">(PackageParser.Package deletedPackage,</span></span></div><div class="line">        PackageParser.Package pkg, <span class="keyword">int</span> parseFlags, <span class="keyword">int</span> scanFlags, UserHandle user,</div><div class="line">        <span class="keyword">int</span>[] allUsers, <span class="keyword">boolean</span>[] perUserInstalled, String installerPackageName,</div><div class="line">        String volumeUuid, PackageInstalledInfo res) &#123;</div><div class="line">    String pkgName = deletedPackage.packageName;</div><div class="line">    <span class="keyword">boolean</span> deletedPkg = <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">boolean</span> updatedSettings = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="keyword">long</span> origUpdateTime;</div><div class="line">    <span class="keyword">if</span> (pkg.mExtras != <span class="keyword">null</span>) &#123;</div><div class="line">        origUpdateTime = ((PackageSetting)pkg.mExtras).lastUpdateTime;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        origUpdateTime = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 删除原有的包，这个方法后面博客会详细介绍</span></div><div class="line">    <span class="keyword">if</span> (!deletePackageLI(pkgName, <span class="keyword">null</span>, <span class="keyword">true</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, PackageManager.DELETE_KEEP_DATA,</div><div class="line">            res.removedInfo, <span class="keyword">true</span>)) &#123;</div><div class="line">        <span class="comment">// 删除失败</span></div><div class="line">        res.setError(INSTALL_FAILED_REPLACE_COULDNT_DELETE, <span class="string">"replaceNonSystemPackageLI"</span>);</div><div class="line">        deletedPkg = <span class="keyword">false</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 删除成功</span></div><div class="line">        <span class="keyword">if</span> (deletedPackage.isForwardLocked() || isExternal(deletedPackage)) &#123;</div><div class="line">            <span class="comment">// 如果设置PRIVATE_FLAG_FORWARD_LOCK标志或者是安装在外部SD卡，需要发送广播</span></div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span>[] uidArray = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; deletedPackage.applicationInfo.uid &#125;;</div><div class="line">            <span class="keyword">final</span> ArrayList&lt;String&gt; pkgList = <span class="keyword">new</span> ArrayList&lt;String&gt;(<span class="number">1</span>);</div><div class="line">            pkgList.add(deletedPackage.applicationInfo.packageName);</div><div class="line">            sendResourcesChangedBroadcast(<span class="keyword">false</span>, <span class="keyword">true</span>, pkgList, uidArray, <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 调用installd 的 rmcodecache 命令清除代码缓存文件</span></div><div class="line">        deleteCodeCacheDirsLI(pkg.volumeUuid, pkgName);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//扫描文件，更新配置文件</span></div><div class="line">            <span class="keyword">final</span> PackageParser.Package newPackage = scanPackageLI(pkg, parseFlags,</div><div class="line">                    scanFlags | SCAN_UPDATE_TIME, System.currentTimeMillis(), user);</div><div class="line">            updateSettingsLI(newPackage, installerPackageName, volumeUuid, allUsers,</div><div class="line">                    perUserInstalled, res, user);</div><div class="line">            updatedSettings = <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">catch</span> (PackageManagerException e) &#123;</div><div class="line">            res.setError(<span class="string">"Package couldn't be installed in "</span> + pkg.codePath, e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (res.returnCode != PackageManager.INSTALL_SUCCEEDED) &#123;</div><div class="line">        <span class="comment">// 如果安装失败，执行恢复原来的应用的工作</span></div><div class="line">        <span class="keyword">if</span>(updatedSettings) &#123;</div><div class="line">            deletePackageLI(</div><div class="line">                    pkgName, <span class="keyword">null</span>, <span class="keyword">true</span>, allUsers, perUserInstalled,</div><div class="line">                    PackageManager.DELETE_KEEP_DATA,</div><div class="line">                            res.removedInfo, <span class="keyword">true</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (deletedPkg) &#123;</div><div class="line">            File restoreFile = <span class="keyword">new</span> File(deletedPackage.codePath);</div><div class="line">            <span class="keyword">boolean</span> oldExternal = isExternal(deletedPackage);</div><div class="line">            <span class="keyword">int</span> oldParseFlags  = mDefParseFlags | PackageParser.PARSE_CHATTY |</div><div class="line">                    (deletedPackage.isForwardLocked() ? PackageParser.PARSE_FORWARD_LOCK : <span class="number">0</span>) |</div><div class="line">                    (oldExternal ? PackageParser.PARSE_EXTERNAL_STORAGE : <span class="number">0</span>);</div><div class="line">            <span class="keyword">int</span> oldScanFlags = SCAN_UPDATE_SIGNATURE | SCAN_UPDATE_TIME;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                scanPackageLI(restoreFile, oldParseFlags, oldScanFlags, origUpdateTime, <span class="keyword">null</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (PackageManagerException e) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">synchronized</span> (mPackages) &#123;</div><div class="line">                updatePermissionsLPw(deletedPackage.packageName, deletedPackage,</div><div class="line">                        UPDATE_PERMISSIONS_ALL);</div><div class="line">                mSettings.writeLPr();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="installNewPackageLI"><a href="#installNewPackageLI" class="headerlink" title="installNewPackageLI()"></a>installNewPackageLI()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">installNewPackageLI</span><span class="params">(PackageParser.Package pkg, <span class="keyword">int</span> parseFlags, <span class="keyword">int</span> scanFlags,</span></span></div><div class="line">        UserHandle user, String installerPackageName, String volumeUuid,</div><div class="line">        PackageInstalledInfo res) &#123;</div><div class="line">    String pkgName = pkg.packageName;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> dataDirExists = Environment</div><div class="line">            .getDataUserPackageDirectory(volumeUuid, UserHandle.USER_OWNER, pkgName).exists();</div><div class="line">    <span class="keyword">synchronized</span>(mPackages) &#123;</div><div class="line">        <span class="keyword">if</span> (mSettings.mRenamedPackages.containsKey(pkgName)) &#123;</div><div class="line">            <span class="comment">// 和某个应用更改过包名前的名称相同，安装失败</span></div><div class="line">            res.setError(INSTALL_FAILED_ALREADY_EXISTS, <span class="string">"Attempt to re-install "</span> + pkgName</div><div class="line">                    + <span class="string">" without first uninstalling package running as "</span></div><div class="line">                    + mSettings.mRenamedPackages.get(pkgName));</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (mPackages.containsKey(pkgName)) &#123;</div><div class="line">            <span class="comment">// 已经有同名的应用，安装失败</span></div><div class="line">            res.setError(INSTALL_FAILED_ALREADY_EXISTS, <span class="string">"Attempt to re-install "</span> + pkgName</div><div class="line">                    + <span class="string">" without first uninstalling."</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">//扫描文件</span></div><div class="line">        PackageParser.Package newPackage = scanPackageLI(pkg, parseFlags, scanFlags,</div><div class="line">                System.currentTimeMillis(), user);</div><div class="line">        <span class="comment">//更新配置文件</span></div><div class="line">        updateSettingsLI(newPackage, installerPackageName, volumeUuid, <span class="keyword">null</span>, <span class="keyword">null</span>, res, user);</div><div class="line">        <span class="keyword">if</span> (res.returnCode != PackageManager.INSTALL_SUCCEEDED) &#123;</div><div class="line">            <span class="comment">// 如果安装失败，删除已经安装的数据</span></div><div class="line">            deletePackageLI(pkgName, UserHandle.ALL, <span class="keyword">false</span>, <span class="keyword">null</span>, <span class="keyword">null</span>,</div><div class="line">                    dataDirExists ? PackageManager.DELETE_KEEP_DATA : <span class="number">0</span>,</div><div class="line">                            res.removedInfo, <span class="keyword">true</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125; <span class="keyword">catch</span> (PackageManagerException e) &#123;</div><div class="line">        res.setError(<span class="string">"Package couldn't be installed in "</span> + pkg.codePath, e);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      基于Android6.0来分析Android的应用安装源码
    
    </summary>
    
      <category term="Android源码分析" scheme="http://yoursite.com/categories/Android%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Android源码分析" scheme="http://yoursite.com/tags/Android%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="PackageManager" scheme="http://yoursite.com/tags/PackageManager/"/>
    
  </entry>
  
  <entry>
    <title>Android PackageManager相关源码分析之PMS初始化</title>
    <link href="http://yoursite.com/2016/05/06/android-source-code-analysis-package-manager-init/"/>
    <id>http://yoursite.com/2016/05/06/android-source-code-analysis-package-manager-init/</id>
    <published>2016-05-06T02:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>PackageManagerService</code> 作为Android系统中最常用的服务之一，是我们经常要与之打交道的。应用的安装、卸载、优化以及系统已安装应用信息的扫描和查询等应用管理工作都是 PMS 来完成的。<br>与其它系统服务的实现类似，应用管理也采用了经由 <code>Binder</code> 调用的远程服务机制。<code>PackageManager</code>为暴露给用户的接口，<code>PackageManagerService</code>为接口的底层实现。<br>PMS（下文会以此来代替<code>PackageManagerService</code>）在启动时会扫描所有的 APK 文件和 Jar 包，然后把他们的信息读取出来，保存在内存中，这样系统运行时就能迅速找到各种应用和组建的信息。扫描中如果遇到没有优化过的文件还要进行优化工作（dex格式转换成oat格式（Android5.0以前是odex）），优化后的文件放在 /data/dalvik-cache/ 下面，可以看一下<a href="http://blog.csdn.net/cnzx219/article/details/48714121" target="_blank" rel="external">这篇文章</a>。<br>PMS要扫描的应用分为系统应用和普通应用通常都在下面的三个目录中：/system/app，/system/priv-app，/data/app。</p>
<ul>
<li>系统应用：安装在/system/app，/system/priv-app，/vendor/app或者/oem/app中。/system/app存放的是一些系统级的应用，比如电话和联系人等，/system/priv-app存放的是系统底层的应用，比如SystemUI，Setting和Laucher等。通常情况下这些应用是不能卸载的，可以升级的，升级的安装包放在/data/app下面</li>
<li>普通应用：一般指用户安装的第三方应用，位于/data/app中。</li>
</ul>
<p><code>/data/dalvik-cache</code>目录下面保存的就是被优化过的APK文件和Jar文件。<br><code>/data/data/&lt;包名&gt;/</code>保存的是应用的一些数据，包括数据库和一些设置文件。</p>
<p>本文的代码是基于Android6.0来进行介绍。<br><strong>Android应用管理系统</strong>相关代码位置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">frameworks/base/core/java/android/content/pm/</div><div class="line">frameworks/base/services/core/java/com/android/server/pm/</div><div class="line">frameworks/base/services/core/java/android/content/pm/PackageParser.java</div><div class="line">frameworks/base/services/core/java/com/android/server/SystemConfig.java</div><div class="line">frameworks/base/packages/DefaultContainerService/src/com/android/defcontainer/DefaultContainerService.java</div></pre></td></tr></table></figure>
<h2 id="PackageManagerService及相关类介绍"><a href="#PackageManagerService及相关类介绍" class="headerlink" title="PackageManagerService及相关类介绍"></a>PackageManagerService及相关类介绍</h2><p>下图列出了 PMS 及客户端的类关系：</p>
<p><img src="/images/android-source-code-analysis-package-manager-init/packagemanagerservice_relations.png" alt="效果图"></p>
<h3 id="ApplicationPackageManager"><a href="#ApplicationPackageManager" class="headerlink" title="ApplicationPackageManager"></a>ApplicationPackageManager</h3><p>为什么首先介绍<code>ApplicationPackageManager</code>呢？因为我们客户端和 PMS 打交道全靠它了。<br>不管我们是想安装还是卸载应用，都要首先调用的是<code>Context</code>的<code>getPackageManager()</code>来获取<code>PackageManager</code>，这便是我们的主角<code>ApplicationPackageManager</code>。<br>当我们通过如下代码来获取系统安装应用的信息：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> PackageManager packageManager = getPackageManager();</div><div class="line"><span class="keyword">final</span> Intent mainIntent = <span class="keyword">new</span> Intent(Intent.ACTION_MAIN, <span class="keyword">null</span>);</div><div class="line">mainIntent.addCategory(Intent.CATEGORY_LAUNCHER);</div><div class="line"></div><div class="line">List&lt;ResolveInfo&gt; apps = packageManager.queryIntentActivities(mainIntent, <span class="number">0</span>);</div></pre></td></tr></table></figure>
<p>便会调用到<code>ApplicationPackageManager.queryIntentActivities(Intent intent,Intent intent,)</code>方法。<br><code>ApplicationPackageManager</code> 继承自 <code>PackageManager</code>，它的初始化是在<code>ContextImpl</code>中进行的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> PackageManager <span class="title">getPackageManager</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mPackageManager != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> mPackageManager;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    IPackageManager pm = ActivityThread.getPackageManager();</div><div class="line">    <span class="keyword">if</span> (pm != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// Doesn't matter if we make more than one instance.</span></div><div class="line">        <span class="keyword">return</span> (mPackageManager = <span class="keyword">new</span> ApplicationPackageManager(<span class="keyword">this</span>, pm));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>PackageManager</code>类定义了应用可以操作PMS的接口。<br><code>ApplicationPackageManager</code>可以称为PMS的代理对象，它通过它的成员变量<code>mPM</code>来与<code>PackageManagerService</code>进行进程间的通信，<code>mPM</code>指向一个<code>IPackageManager.Stub.Proxy</code>类型的对象。我们调用<code>ApplicationPackageManager</code>的方法，方法内都是通过调用<code>mPM</code>的相应方法来实现的。</p>
<h3 id="IPackageManager"><a href="#IPackageManager" class="headerlink" title="IPackageManager"></a>IPackageManager</h3><p><code>IPackageManager.java</code>是通过<code>IPackageManager.aidl</code>来生成的，源文件在<code>out/target/common/obj/JAVA_LIBRARIES/framework_intermediates/src/core/java/android/content/pm/IPackageManager.java</code>，如果没有编译过代码的话，也可使用aidl工具单独处理<code>IPackageManager.aidl</code>。<br><code>IPackageManager</code>接口类中定义了服务端和客户端通信的业务函数，还定义了内部类<code>Stub</code>，该类继承自<code>Binder</code>并实现了<code>IPackageManager</code>接口。<br><code>Stub</code>类中定义了一个内部类<code>Proxy</code>，该类有一个<code>IBinder</code>类型（实际类型为<code>BinderProxy</code>）的成员变量<code>mRemote</code>，它用于和服务端<code>PackageManagerService</code>通信。</p>
<h3 id="PackageManagerService"><a href="#PackageManagerService" class="headerlink" title="PackageManagerService"></a>PackageManagerService</h3><p>PMS 继承自<code>IPackageManager.Stub</code>，<code>Stub</code>类从<code>Binder</code>派生，因此 PMS 将作为服务端参与<code>Binder</code>通信。<br>先来看几个重要的成员变量：</p>
<ul>
<li>mInstallerService：<code>PackageInstallerService</code>的实例，一个应用的安装时间比较长，Android就用<code>PackageInstallerService</code>来管理应用的安装过程。在构造函数的最后创建。</li>
<li>mInstaller：被<code>@GuardedBy</code>注解标记，它是<code>Installer</code>的实例，用于和<code>Deamon</code>进程<code>installd</code>交互。实际上系统中进行APK格式转换、建立数据目录等工作都是由<code>installd</code>进程来完成的，后面会有介绍。</li>
<li>mSettings：<code>Settings</code>类的实例，保存一些PMS动态设置信息，后面会详细介绍；</li>
<li>mPackages：是被<code>@GuardedBy</code>注解标记的，代表系统中已经安装的package；</li>
<li>mExpectingBetter：被升级过的应用列表</li>
<li>mOnlyCore：用于判断是否只扫描系统库</li>
</ul>
<p>PMS的创建是在<code>SystemServer</code>中的<code>SystemServer().run()</code>-&gt;<code>startBootstrapServices()</code>方法中进行的，它通过调用<code>PackageManagerService.main</code>来实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mPackageManagerService = PackageManagerService.main(mSystemContext, installer,</div><div class="line">        mFactoryTestMode != FactoryTest.FACTORY_TEST_OFF, mOnlyCore);</div><div class="line"><span class="comment">//判断是不是第一次开机启动</span></div><div class="line">mFirstBoot = mPackageManagerService.isFirstBoot();</div></pre></td></tr></table></figure>
<p>在<code>startCoreServices()</code>和<code>startOtherServices()</code>中调用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">mPackageManagerService.getUsageStatsIfNoPackageUsageInfo();</div><div class="line"></div><div class="line">……</div><div class="line"></div><div class="line"><span class="comment">//做dex优化，dex是Android上针对Java字节码的一种优化技术，可提高运行效率</span></div><div class="line">mPackageManagerService.performBootDexOpt();</div><div class="line"></div><div class="line">……</div><div class="line"></div><div class="line"><span class="comment">//通知系统进入就绪状态</span></div><div class="line">mPackageManagerService.systemReady();</div></pre></td></tr></table></figure>
<h3 id="DefaultContainerService"><a href="#DefaultContainerService" class="headerlink" title="DefaultContainerService"></a>DefaultContainerService</h3><p><code>DefaultContainerService</code>服务，这个服务执行一些针对的文件复制和删除等相关工作</p>
<h2 id="相关adb命令"><a href="#相关adb命令" class="headerlink" title="相关adb命令"></a>相关adb命令</h2><h3 id="adb-shell-pm"><a href="#adb-shell-pm" class="headerlink" title="adb shell pm"></a>adb shell pm</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">adb shell pm</div><div class="line"></div><div class="line">usage: pm list packages [-f] [-d] [-e] [-s] [-3] [-i] [-u] [--user USER_ID] [FILTER]</div><div class="line">       pm list permission-groups</div><div class="line">       pm list permissions [-g] [-f] [-d] [-u] [GROUP]</div><div class="line">       pm list instrumentation [-f] [TARGET-PACKAGE]</div><div class="line">       pm list features</div><div class="line">       pm list libraries</div><div class="line">       pm list users</div><div class="line">       pm path PACKAGE</div><div class="line">       pm dump PACKAGE</div><div class="line">       pm install [-lrtsfd] [-i PACKAGE] [--user USER_ID] [PATH]</div><div class="line">       pm install-create [-lrtsfdp] [-i PACKAGE] [-S BYTES]</div><div class="line">               [--install-location 0/1/2]</div><div class="line">               [--force-uuid internal|UUID]</div><div class="line">       pm install-write [-S BYTES] SESSION_ID SPLIT_NAME [PATH]</div><div class="line">       pm install-commit SESSION_ID</div><div class="line">       pm install-abandon SESSION_ID</div><div class="line">       pm uninstall [-k] [--user USER_ID] PACKAGE</div><div class="line">       pm set-installer PACKAGE INSTALLER</div><div class="line">       pm move-package PACKAGE [internal|UUID]</div><div class="line">       pm move-primary-storage [internal|UUID]</div><div class="line">       pm clear [--user USER_ID] PACKAGE</div><div class="line">       pm enable [--user USER_ID] PACKAGE_OR_COMPONENT</div><div class="line">       pm disable [--user USER_ID] PACKAGE_OR_COMPONENT</div><div class="line">       pm disable-user [--user USER_ID] PACKAGE_OR_COMPONENT</div><div class="line">       pm disable-until-used [--user USER_ID] PACKAGE_OR_COMPONENT</div><div class="line">       pm hide [--user USER_ID] PACKAGE_OR_COMPONENT</div><div class="line">       pm unhide [--user USER_ID] PACKAGE_OR_COMPONENT</div><div class="line">       pm grant [--user USER_ID] PACKAGE PERMISSION</div><div class="line">       pm revoke [--user USER_ID] PACKAGE PERMISSION</div><div class="line">       pm reset-permissions</div><div class="line">       pm set-app-link [--user USER_ID] PACKAGE &#123;always|ask|never|undefined&#125;</div><div class="line">       pm get-app-link [--user USER_ID] PACKAGE</div><div class="line">       pm set-install-location [0/auto] [1/internal] [2/external]</div><div class="line">       pm get-install-location</div><div class="line">       pm set-permission-enforced PERMISSION [true|false]</div><div class="line">       pm trim-caches DESIRED_FREE_SPACE [internal|UUID]</div><div class="line">       pm create-user [--profileOf USER_ID] [--managed] USER_NAME</div><div class="line">       pm remove-user USER_ID</div><div class="line">       pm get-max-users</div></pre></td></tr></table></figure>
<h3 id="adb-shell-dumpsys-package"><a href="#adb-shell-dumpsys-package" class="headerlink" title="adb shell dumpsys package"></a>adb shell dumpsys package</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">$ adb shell dumpsys package com.android.hq.ganktoutiao</div><div class="line"></div><div class="line">Activity Resolver Table:</div><div class="line">  Non-Data Actions:</div><div class="line">      android.intent.action.MAIN:</div><div class="line">        c51a490 com.android.hq.ganktoutiao/.ui.activity.MainActivity</div><div class="line"></div><div class="line">Registered ContentProviders:</div><div class="line">  com.android.hq.ganktoutiao/.provider.GankContentProvider:</div><div class="line">    Provider&#123;6472189 com.android.hq.ganktoutiao/.provider.GankContentProvider&#125;</div><div class="line"></div><div class="line">ContentProvider Authorities:</div><div class="line">  [gank]:</div><div class="line">    Provider&#123;6472189 com.android.hq.ganktoutiao/.provider.GankContentProvider&#125;</div><div class="line">      applicationInfo=ApplicationInfo&#123;177358e com.android.hq.ganktoutiao&#125;</div><div class="line"></div><div class="line">Key Set Manager:</div><div class="line">  [com.android.hq.ganktoutiao]</div><div class="line">      Signing KeySets: 11</div><div class="line"></div><div class="line">Packages:</div><div class="line">  Package [com.android.hq.ganktoutiao] (be741af):</div><div class="line">    userId=10082</div><div class="line">    pkg=Package&#123;3d479bc com.android.hq.ganktoutiao&#125;</div><div class="line">    codePath=/data/app/com.android.hq.ganktoutiao-1</div><div class="line">    resourcePath=/data/app/com.android.hq.ganktoutiao-1</div><div class="line">    legacyNativeLibraryDir=/data/app/com.android.hq.ganktoutiao-1/lib</div><div class="line">    primaryCpuAbi=null</div><div class="line">    secondaryCpuAbi=null</div><div class="line">    versionCode=1 targetSdk=23</div><div class="line">    versionName=1.0.0</div><div class="line">    splits=[base]</div><div class="line">    applicationInfo=ApplicationInfo&#123;177358e com.android.hq.ganktoutiao&#125;</div><div class="line">    flags=[ DEBUGGABLE HAS_CODE ALLOW_CLEAR_USER_DATA ALLOW_BACKUP ]</div><div class="line">    dataDir=/data/user/0/com.android.hq.ganktoutiao</div><div class="line">    supportsScreens=[small, medium, large, xlarge, resizeable, anyDensity]</div><div class="line">    timeStamp=2017-06-01 17:22:26</div><div class="line">    firstInstallTime=2017-06-01 17:22:28</div><div class="line">    lastUpdateTime=2017-06-01 17:22:28</div><div class="line">    signatures=PackageSignatures&#123;1f74d45 [8351c9a]&#125;</div><div class="line">    installPermissionsFixed=true installStatus=1</div><div class="line">    pkgFlags=[ DEBUGGABLE HAS_CODE ALLOW_CLEAR_USER_DATA ALLOW_BACKUP ]</div><div class="line">    requested permissions:</div><div class="line">      android.permission.INTERNET</div><div class="line">      android.permission.WRITE_EXTERNAL_STORAGE</div><div class="line">      android.permission.READ_EXTERNAL_STORAGE</div><div class="line">      android.permission.ACCESS_NETWORK_STATE</div><div class="line">    install permissions:</div><div class="line">      android.permission.INTERNET: granted=true</div><div class="line">      android.permission.ACCESS_NETWORK_STATE: granted=true</div><div class="line">    User 0:  installed=true hidden=false stopped=false notLaunched=false enabled=0</div><div class="line">      gids=[3003, 1028, 1015]</div><div class="line">      runtime permissions:</div><div class="line">        android.permission.READ_EXTERNAL_STORAGE: granted=true</div><div class="line">        android.permission.WRITE_EXTERNAL_STORAGE: granted=true</div></pre></td></tr></table></figure>
<h2 id="PackageManagerService-初始化"><a href="#PackageManagerService-初始化" class="headerlink" title="PackageManagerService 初始化"></a>PackageManagerService 初始化</h2><h3 id="PMS-方法名LI、LP的含义"><a href="#PMS-方法名LI、LP的含义" class="headerlink" title="PMS 方法名LI、LP的含义"></a>PMS 方法名LI、LP的含义</h3><p>PMS中很多的方法都带有LI、LP、Lpr、LPw这样的后缀，它们代表着什么意思呢？首先进行一下这个释疑，以助于理解这些方法。<br>先看一下代码注释的解释：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Lock for state used when installing and doing other long running</span></div><div class="line"><span class="comment">// operations.  Methods that must be called with this lock held have</span></div><div class="line"><span class="comment">// the suffix "LI".</span></div><div class="line"><span class="keyword">final</span> Object mInstallLock = <span class="keyword">new</span> Object();</div><div class="line"></div><div class="line"><span class="comment">// Keys are String (package name), values are Package.  This also serves</span></div><div class="line"><span class="comment">// as the lock for the global state.  Methods that must be called with</span></div><div class="line"><span class="comment">// this lock held have the prefix "LP".</span></div><div class="line"><span class="meta">@GuardedBy</span>(<span class="string">"mPackages"</span>)</div><div class="line"><span class="keyword">final</span> ArrayMap&lt;String, PackageParser.Package&gt; mPackages =</div><div class="line">        <span class="keyword">new</span> ArrayMap&lt;String, PackageParser.Package&gt;();</div></pre></td></tr></table></figure>
<p>这下就比较容易理解了：</p>
<ul>
<li>LI：带LI后缀的方法名表示该函数被调用时需要持有<code>mInstallLock</code>锁</li>
<li>LP：带LP后缀的方法名表示该函数被调用时需要持有<code>mPackages</code>锁</li>
<li>LPr：表示读</li>
<li>LPw：表示写</li>
</ul>
<h3 id="main函数和构造函数分析"><a href="#main函数和构造函数分析" class="headerlink" title="main函数和构造函数分析"></a>main函数和构造函数分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PackageManagerService <span class="title">main</span><span class="params">(Context context, Installer installer,</span></span></div><div class="line">        <span class="keyword">boolean</span> factoryTest, <span class="keyword">boolean</span> onlyCore) &#123;</div><div class="line">    <span class="comment">//调用构造函数</span></div><div class="line">    PackageManagerService m = <span class="keyword">new</span> PackageManagerService(context, installer,</div><div class="line">            factoryTest, onlyCore);</div><div class="line">    <span class="comment">//向ServiceManager注册package服务</span></div><div class="line">    ServiceManager.addService(<span class="string">"package"</span>, m);</div><div class="line">    <span class="keyword">return</span> m;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以看到<code>main</code>函数其实很简单，就是调用了一下PMS的构造函数以及注册了 PMS，但是 PMS 的构造函数却做了很多工作，代码有将近500行之多，下面就详细分析一下 PMS 的构造函数。</p>
<p>构造函数的主要工作：包括读取配置文件、优化APK文件和Jar包、扫描系统中所有安装的应用以及提取这些应用的信息并保存起来。<br>下面就分析一些PMS的构造函数，主要做了以下的工作：</p>
<ul>
<li>变量的初始化工作，包括mSettings，mInstaller，mPackageDexOptimizer等等</li>
<li>读取配制文件</li>
<li>扫描系统Package，包含Dex优化，</li>
<li>保存扫描信息</li>
<li>扫描非系统应用</li>
<li>更新数据</li>
</ul>
<h4 id="一些初始化工作"><a href="#一些初始化工作" class="headerlink" title="一些初始化工作"></a>一些初始化工作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">PackageManagerService</span><span class="params">(Context context, Installer installer,</span></span></div><div class="line">        <span class="keyword">boolean</span> factoryTest, <span class="keyword">boolean</span> onlyCore) &#123;</div><div class="line">    ……</div><div class="line">    mContext = context;</div><div class="line">    <span class="comment">//是否是工厂测试模式</span></div><div class="line">    mFactoryTest = factoryTest;</div><div class="line">    <span class="comment">//是否需要扫描系统库，默认为false，需要扫描</span></div><div class="line">    mOnlyCore = onlyCore;</div><div class="line">    <span class="comment">//是否要做dex优化，eng或者标记了lazydexopt则不优化</span></div><div class="line">    mLazyDexOpt = <span class="string">"eng"</span>.equals(SystemProperties.get(<span class="string">"ro.build.type"</span>)) ||</div><div class="line">            SystemProperties.getBoolean(<span class="string">"persist.sys.perf.lazydexopt"</span>, <span class="keyword">false</span>);</div><div class="line">    <span class="comment">//初始化mMetrics，存储与显示屏相关的一些属性，例如屏幕的宽/高尺寸，分辨率等信息</span></div><div class="line">    mMetrics = <span class="keyword">new</span> DisplayMetrics();</div><div class="line">    <span class="comment">//创建mSettings对象</span></div><div class="line">    mSettings = <span class="keyword">new</span> Settings(mPackages);</div><div class="line">    <span class="comment">//设置UID，添加SharedUserSetting对象到Settings中，UID相同的包可以运行在同一个进程中，或者可以相互读取资源。这里添加了6中系统UID：system、radio、log、nfc、bluetooth和shell</span></div><div class="line">    mSettings.addSharedUserLPw(<span class="string">"android.uid.system"</span>, Process.SYSTEM_UID,</div><div class="line">            ApplicationInfo.FLAG_SYSTEM, ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);</div><div class="line">    mSettings.addSharedUserLPw(<span class="string">"android.uid.phone"</span>, RADIO_UID,</div><div class="line">            ApplicationInfo.FLAG_SYSTEM, ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);</div><div class="line">    mSettings.addSharedUserLPw(<span class="string">"android.uid.log"</span>, LOG_UID,</div><div class="line">            ApplicationInfo.FLAG_SYSTEM, ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);</div><div class="line">    mSettings.addSharedUserLPw(<span class="string">"android.uid.nfc"</span>, NFC_UID,</div><div class="line">            ApplicationInfo.FLAG_SYSTEM, ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);</div><div class="line">    mSettings.addSharedUserLPw(<span class="string">"android.uid.bluetooth"</span>, BLUETOOTH_UID,</div><div class="line">            ApplicationInfo.FLAG_SYSTEM, ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);</div><div class="line">    mSettings.addSharedUserLPw(<span class="string">"android.uid.shell"</span>, SHELL_UID,</div><div class="line">            ApplicationInfo.FLAG_SYSTEM, ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);</div><div class="line">    ……</div><div class="line">    <span class="comment">//创建一个Installer对象</span></div><div class="line">    mInstaller = installer;</div><div class="line">    ……</div></pre></td></tr></table></figure>
<h4 id="读取配制文件"><a href="#读取配制文件" class="headerlink" title="读取配制文件"></a>读取配制文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">……</div><div class="line">mPackageDexOptimizer = <span class="keyword">new</span> PackageDexOptimizer(<span class="keyword">this</span>);</div><div class="line">mMoveCallbacks = <span class="keyword">new</span> MoveCallbacks(FgThread.get().getLooper());</div><div class="line"></div><div class="line">mOnPermissionChangeListeners = <span class="keyword">new</span> OnPermissionChangeListeners(</div><div class="line">        FgThread.get().getLooper());</div><div class="line"><span class="comment">//获取设备屏幕信息</span></div><div class="line">getDefaultDisplayMetrics(context, mMetrics);</div><div class="line"></div><div class="line"><span class="comment">//SystemConfig用于获取系统的全局配置信息，初始化mGlobalGids、mSystemPermissions和mAvailableFeatures</span></div><div class="line">SystemConfig systemConfig = SystemConfig.getInstance();</div><div class="line">mGlobalGids = systemConfig.getGlobalGids();</div><div class="line">mSystemPermissions = systemConfig.getSystemPermissions();</div><div class="line">mAvailableFeatures = systemConfig.getAvailableFeatures();</div><div class="line"></div><div class="line"><span class="keyword">synchronized</span> (mInstallLock) &#123;</div><div class="line"><span class="comment">// writer</span></div><div class="line"><span class="keyword">synchronized</span> (mPackages) &#123;</div><div class="line">    <span class="comment">// 创建用来处理消息的线程，并加入到Watchdog的监控中</span></div><div class="line">    mHandlerThread = <span class="keyword">new</span> ServiceThread(TAG,</div><div class="line">            Process.THREAD_PRIORITY_BACKGROUND, <span class="keyword">true</span> <span class="comment">/*allowIo*/</span>);</div><div class="line">    mHandlerThread.start();</div><div class="line">    mHandler = <span class="keyword">new</span> PackageHandler(mHandlerThread.getLooper());</div><div class="line">    Watchdog.getInstance().addThread(mHandler, WATCHDOG_TIMEOUT);</div><div class="line"></div><div class="line">    <span class="comment">//在/data目录下面创建子目录</span></div><div class="line">    File dataDir = Environment.getDataDirectory();</div><div class="line">    mAppDataDir = <span class="keyword">new</span> File(dataDir, <span class="string">"data"</span>);      <span class="comment">// /data/data存放应用数据的目录</span></div><div class="line">    mAppInstallDir = <span class="keyword">new</span> File(dataDir, <span class="string">"app"</span>);      <span class="comment">// /data/app存放安装的应用</span></div><div class="line">    mAppLib32InstallDir = <span class="keyword">new</span> File(dataDir, <span class="string">"app-lib"</span>);      <span class="comment">// /data/app-lib 存放应用自动的native库</span></div><div class="line">    mAsecInternalPath = <span class="keyword">new</span> File(dataDir, <span class="string">"app-asec"</span>).getPath();</div><div class="line">    mUserAppDataDir = <span class="keyword">new</span> File(dataDir, <span class="string">"user"</span>);      <span class="comment">// /data/user 存放用户的数据文件</span></div><div class="line">    mDrmAppPrivateInstallDir = <span class="keyword">new</span> File(dataDir, <span class="string">"app-private"</span>);      <span class="comment">// /data/app-private 存放drm保护的应用</span></div><div class="line"></div><div class="line">    <span class="comment">//实例化sUserManager，管理多用户</span></div><div class="line">    sUserManager = <span class="keyword">new</span> UserManagerService(context, <span class="keyword">this</span>,</div><div class="line">            mInstallLock, mPackages);</div><div class="line"></div><div class="line">    <span class="comment">// Propagate permission configuration in to package manager.</span></div><div class="line">    <span class="comment">//获取系统中定义的permissions，这些permissions从/etc/permissions目录下面读取的</span></div><div class="line">    ArrayMap&lt;String, SystemConfig.PermissionEntry&gt; permConfig</div><div class="line">            = systemConfig.getPermissions();</div><div class="line">    ……</div><div class="line">    <span class="comment">//保存到mSettings.mPermissions中</span></div><div class="line">    mSettings.mPermissions.put(perm.name, bp);</div><div class="line">    ……</div><div class="line"></div><div class="line">    <span class="comment">// 通过SystemConfig得到系统中的共享库列表</span></div><div class="line">    ArrayMap&lt;String, String&gt; libConfig = systemConfig.getSharedLibraries();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;libConfig.size(); i++) &#123;</div><div class="line">        mSharedLibraries.put(libConfig.keyAt(i),</div><div class="line">                <span class="keyword">new</span> SharedLibraryEntry(libConfig.valueAt(i), <span class="keyword">null</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 打开SELinux的policy文件/security/current/mac_permissions.xml 或者 etc/security/mac_permissions.xml</span></div><div class="line">    mFoundPolicyFile = SELinuxMMAC.readInstallPolicy();</div><div class="line"></div><div class="line">    <span class="comment">// 读取packages.xml的内容，保存到Settings的几个成员变量中去</span></div><div class="line">    mRestoredSettings = mSettings.readLPw(<span class="keyword">this</span>, sUserManager.getUsers(<span class="keyword">false</span>),</div><div class="line">            mSdkVersion, mOnlyCore);</div></pre></td></tr></table></figure>
<h4 id="扫描系统Package"><a href="#扫描系统Package" class="headerlink" title="扫描系统Package"></a>扫描系统Package</h4><p>这部分工作主要是扫描系统应用以及Jar包</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 设置模块来代替framework-res.apk中缺省的ResolverActivity</span></div><div class="line">String customResolverActivity = Resources.getSystem().getString(</div><div class="line">        R.string.config_customResolverActivity);</div><div class="line"><span class="keyword">if</span> (TextUtils.isEmpty(customResolverActivity)) &#123;</div><div class="line">    customResolverActivity = <span class="keyword">null</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    mCustomResolverComponentName = ComponentName.unflattenFromString(</div><div class="line">            customResolverActivity);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 记录开始扫描的时间</span></div><div class="line"><span class="keyword">long</span> startTime = SystemClock.uptimeMillis();</div><div class="line"></div><div class="line"><span class="comment">//配置扫描的参数</span></div><div class="line"><span class="keyword">final</span> <span class="keyword">int</span> scanFlags = SCAN_NO_PATHS | SCAN_DEFER_DEX | SCAN_BOOTING | SCAN_INITIAL;</div><div class="line"><span class="comment">//保存一些已经进行dex优化过的apk，比如“framework-res.apk”、Java启动类库、framework所有核心库，这部分不需要在优化</span></div><div class="line"><span class="keyword">final</span> ArraySet&lt;String&gt; alreadyDexOpted = <span class="keyword">new</span> ArraySet&lt;String&gt;();</div><div class="line"></div><div class="line"><span class="comment">//获取Java启动类库、framework所有核心库，在init.rc文件配置</span></div><div class="line"><span class="keyword">final</span> String bootClassPath = System.getenv(<span class="string">"BOOTCLASSPATH"</span>);</div><div class="line"><span class="keyword">final</span> String systemServerClassPath = System.getenv(<span class="string">"SYSTEMSERVERCLASSPATH"</span>);</div><div class="line"></div><div class="line"><span class="comment">//把它们加入到已经优化集合中去</span></div><div class="line"><span class="keyword">if</span> (bootClassPath != <span class="keyword">null</span>) &#123;</div><div class="line">    String[] bootClassPathElements = splitString(bootClassPath, <span class="string">':'</span>);</div><div class="line">    <span class="keyword">for</span> (String element : bootClassPathElements) &#123;</div><div class="line">        alreadyDexOpted.add(element);</div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;...&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (systemServerClassPath != <span class="keyword">null</span>) &#123;</div><div class="line">    String[] systemServerClassPathElements = splitString(systemServerClassPath, <span class="string">':'</span>);</div><div class="line">    <span class="keyword">for</span> (String element : systemServerClassPathElements) &#123;</div><div class="line">        alreadyDexOpted.add(element);</div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;...&#125;</div><div class="line"></div><div class="line"><span class="keyword">final</span> List&lt;String&gt; allInstructionSets = InstructionSets.getAllInstructionSets();</div><div class="line"><span class="keyword">final</span> String[] dexCodeInstructionSets =</div><div class="line">        getDexCodeInstructionSets(</div><div class="line">                allInstructionSets.toArray(<span class="keyword">new</span> String[allInstructionSets.size()]));</div><div class="line"></div><div class="line"><span class="comment">// 对比当前系统的指令集，检查mSharedLibraries中记录的jar包是否需要转换成odex格式</span></div><div class="line"><span class="comment">// mSharedLibraries变量中的动态库是通过SystemConfig.getSharedLibraries()从etc/permissions/platform.xml中读取出来的</span></div><div class="line"><span class="keyword">if</span> (mSharedLibraries.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">for</span> (String dexCodeInstructionSet : dexCodeInstructionSets) &#123;</div><div class="line">        <span class="keyword">for</span> (SharedLibraryEntry libEntry : mSharedLibraries.values()) &#123;</div><div class="line">            <span class="keyword">final</span> String lib = libEntry.path;</div><div class="line">            <span class="keyword">if</span> (lib == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">int</span> dexoptNeeded = DexFile.getDexOptNeeded(lib, <span class="keyword">null</span>, dexCodeInstructionSet, <span class="keyword">false</span>);</div><div class="line">                <span class="keyword">if</span> (dexoptNeeded != DexFile.NO_DEXOPT_NEEDED) &#123;</div><div class="line">                    alreadyDexOpted.add(lib);</div><div class="line">                    <span class="comment">//调用install 的dexopt命令，优化后的文件放在 /data/dalvik-cache/ 下面</span></div><div class="line">                    mInstaller.dexopt(lib, Process.SYSTEM_UID, <span class="keyword">true</span>, dexCodeInstructionSet, dexoptNeeded);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;&#125; <span class="keyword">catch</span> (IOException e) &#123;&#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">File frameworkDir = <span class="keyword">new</span> File(Environment.getRootDirectory(), <span class="string">"framework"</span>);</div><div class="line"></div><div class="line"><span class="comment">//把framework-res.apk加入到已优化列表中</span></div><div class="line">alreadyDexOpted.add(frameworkDir.getPath() + <span class="string">"/framework-res.apk"</span>);</div><div class="line"></div><div class="line"><span class="comment">//把core-libart.jar加入到已优化列表中</span></div><div class="line">alreadyDexOpted.add(frameworkDir.getPath() + <span class="string">"/core-libart.jar"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 对framework目录下面的文件执行dex优化</span></div><div class="line">String[] frameworkFiles = frameworkDir.list();</div><div class="line"><span class="keyword">if</span> (frameworkFiles != <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="keyword">for</span> (String dexCodeInstructionSet : dexCodeInstructionSets) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;frameworkFiles.length; i++) &#123;</div><div class="line">            File libPath = <span class="keyword">new</span> File(frameworkDir, frameworkFiles[i]);</div><div class="line">            String path = libPath.getPath();</div><div class="line">            <span class="keyword">if</span> (alreadyDexOpted.contains(path)) &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 只转化.apk和.jar文件</span></div><div class="line">            <span class="keyword">if</span> (!path.endsWith(<span class="string">".apk"</span>) &amp;&amp; !path.endsWith(<span class="string">".jar"</span>)) &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">int</span> dexoptNeeded = DexFile.getDexOptNeeded(path, <span class="keyword">null</span>, dexCodeInstructionSet, <span class="keyword">false</span>);</div><div class="line">                <span class="keyword">if</span> (dexoptNeeded != DexFile.NO_DEXOPT_NEEDED) &#123;</div><div class="line">                    <span class="comment">//调用install 的dexopt命令，优化后的文件放在 /data/dalvik-cache/ 下面</span></div><div class="line">                    mInstaller.dexopt(path, Process.SYSTEM_UID, <span class="keyword">true</span>, dexCodeInstructionSet, dexoptNeeded);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;...&#125; <span class="keyword">catch</span> (IOException e) &#123;...&#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">……</div><div class="line"></div><div class="line"><span class="comment">// 扫描/vendor/overlay目录</span></div><div class="line">File vendorOverlayDir = <span class="keyword">new</span> File(VENDOR_OVERLAY_DIR);</div><div class="line">scanDirLI(vendorOverlayDir, PackageParser.PARSE_IS_SYSTEM</div><div class="line">        | PackageParser.PARSE_IS_SYSTEM_DIR, scanFlags | SCAN_TRUSTED_OVERLAY, <span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="comment">// 扫描/system/framework目录</span></div><div class="line">scanDirLI(frameworkDir, PackageParser.PARSE_IS_SYSTEM</div><div class="line">        | PackageParser.PARSE_IS_SYSTEM_DIR</div><div class="line">        | PackageParser.PARSE_IS_PRIVILEGED,</div><div class="line">        scanFlags | SCAN_NO_DEX, <span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="comment">//扫描/system/priv-app目录</span></div><div class="line"><span class="keyword">final</span> File privilegedAppDir = <span class="keyword">new</span> File(Environment.getRootDirectory(), <span class="string">"priv-app"</span>);</div><div class="line">scanDirLI(privilegedAppDir, PackageParser.PARSE_IS_SYSTEM</div><div class="line">        | PackageParser.PARSE_IS_SYSTEM_DIR</div><div class="line">        | PackageParser.PARSE_IS_PRIVILEGED, scanFlags, <span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="comment">//扫描/system/app目录</span></div><div class="line"><span class="keyword">final</span> File systemAppDir = <span class="keyword">new</span> File(Environment.getRootDirectory(), <span class="string">"app"</span>);</div><div class="line">scanDirLI(systemAppDir, PackageParser.PARSE_IS_SYSTEM</div><div class="line">        | PackageParser.PARSE_IS_SYSTEM_DIR, scanFlags, <span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="comment">//扫描/vendor/app目录下面的应用</span></div><div class="line">File vendorAppDir = <span class="keyword">new</span> File(<span class="string">"/vendor/app"</span>);</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    vendorAppDir = vendorAppDir.getCanonicalFile();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;...&#125;</div><div class="line">scanDirLI(vendorAppDir, PackageParser.PARSE_IS_SYSTEM</div><div class="line">        | PackageParser.PARSE_IS_SYSTEM_DIR, scanFlags, <span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="comment">// 扫描/oem/app目录下面的应用</span></div><div class="line"><span class="keyword">final</span> File oemAppDir = <span class="keyword">new</span> File(Environment.getOemDirectory(), <span class="string">"app"</span>);</div><div class="line">scanDirLI(oemAppDir, PackageParser.PARSE_IS_SYSTEM</div><div class="line">        | PackageParser.PARSE_IS_SYSTEM_DIR, scanFlags, <span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="comment">//调用installd执行movefiles命令，执行/system/etc/updatecmds下的命令脚本</span></div><div class="line">mInstaller.moveFiles();</div></pre></td></tr></table></figure>
<h4 id="保存扫描信息"><a href="#保存扫描信息" class="headerlink" title="保存扫描信息"></a>保存扫描信息</h4><p>将上面扫描得到的信息进行整理，并保存到相对应的配置文件中去。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 这个列表记录的是可能有升级包的系统应用</span></div><div class="line"><span class="keyword">final</span> List&lt;String&gt; possiblyDeletedUpdatedSystemApps = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line"><span class="keyword">if</span> (!mOnlyCore) &#123;</div><div class="line">    Iterator&lt;PackageSetting&gt; psit = mSettings.mPackages.values().iterator();</div><div class="line">    <span class="comment">//遍历mSettings.mPackages中保存的应用</span></div><div class="line">    <span class="keyword">while</span> (psit.hasNext()) &#123;</div><div class="line">        PackageSetting ps = psit.next();</div><div class="line"></div><div class="line">        <span class="comment">//忽略掉非系统应用</span></div><div class="line">        <span class="keyword">if</span> ((ps.pkgFlags &amp; ApplicationInfo.FLAG_SYSTEM) == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 从mPackages中取到该应用，注意此处的mPackages不是mSettings.mPackages，而是通过scanDirLI得来的。</span></div><div class="line">        <span class="keyword">final</span> PackageParser.Package scannedPkg = mPackages.get(ps.name);</div><div class="line">        <span class="keyword">if</span> (scannedPkg != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">//如果这个应用是升级过的应用，那么从mPackages中移除出去</span></div><div class="line">            <span class="keyword">if</span> (mSettings.isDisabledSystemPackageLPr(ps.name)) &#123;</div><div class="line">                ...</div><div class="line">                removePackageLI(ps, <span class="keyword">true</span>);</div><div class="line">                <span class="comment">// 放入mExpectingBetter列表，后面会进行处理的</span></div><div class="line">                mExpectingBetter.put(ps.name, ps.codePath);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//这里表示的是mPackages中不存在的应用，也即系统中不存在</span></div><div class="line">        <span class="keyword">if</span> (!mSettings.isDisabledSystemPackageLPr(ps.name)) &#123;</div><div class="line">            <span class="comment">// 如果不在升级过的应用列表中，说明这个应用是残留在packages.xml中的，可能还有数据目录，因此要从删掉</span></div><div class="line">            psit.remove();</div><div class="line">            logCriticalInfo(Log.WARN, <span class="string">"System package "</span> + ps.name</div><div class="line">                    + <span class="string">" no longer exists; wiping its data"</span>);</div><div class="line">            <span class="comment">// 删除数据目录，内部也是通过installd来执行</span></div><div class="line">            removeDataDirsLI(<span class="keyword">null</span>, ps.name);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 这个应用不再系统中，但是被标记了&lt;update-package&gt;，则加入到possiblyDeletedUpdatedSystemApps列表</span></div><div class="line">            <span class="keyword">final</span> PackageSetting disabledPs = mSettings.getDisabledSystemPkgLPr(ps.name);</div><div class="line">            <span class="keyword">if</span> (disabledPs.codePath == <span class="keyword">null</span> || !disabledPs.codePath.exists()) &#123;</div><div class="line">                possiblyDeletedUpdatedSystemApps.add(ps.name);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 扫描并删除未安装成功的apk包</span></div><div class="line">ArrayList&lt;PackageSetting&gt; deletePkgsList = mSettings.getListOfIncompleteInstallPackagesLPr();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; deletePkgsList.size(); i++) &#123;</div><div class="line">    cleanupInstallFailedPackage(deletePkgsList.get(i));</div><div class="line">&#125;</div><div class="line"><span class="comment">// 删除临时文件</span></div><div class="line">deleteTempPackageFiles();</div><div class="line"></div><div class="line"><span class="comment">// 删除掉Settings中的没有关联任何应用的SharedUserSetting对象</span></div><div class="line">mSettings.pruneSharedUsersLPw();</div></pre></td></tr></table></figure>
<h4 id="扫描非系统应用"><a href="#扫描非系统应用" class="headerlink" title="扫描非系统应用"></a>扫描非系统应用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 开始处理非系统应用</span></div><div class="line"><span class="keyword">if</span> (!mOnlyCore) &#123;</div><div class="line">    ...</div><div class="line">    <span class="comment">// 扫描/data/app目录，保存到mPackages中</span></div><div class="line">    scanDirLI(mAppInstallDir, <span class="number">0</span>, scanFlags | SCAN_REQUIRE_KNOWN, <span class="number">0</span>);</div><div class="line">    <span class="comment">// 扫描/data/app-private目录</span></div><div class="line">    scanDirLI(mDrmAppPrivateInstallDir, PackageParser.PARSE_FORWARD_LOCK,</div><div class="line">            scanFlags | SCAN_REQUIRE_KNOWN, <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="comment">// possiblyDeletedUpdatedSystemApps表示packages.xml中被标记了&lt;update-package&gt;，但系统中没有这个文件，一次这里检查用户安装目录下有没有升级包</span></div><div class="line">    <span class="keyword">for</span> (String deletedAppName : possiblyDeletedUpdatedSystemApps) &#123;</div><div class="line">        PackageParser.Package deletedPkg = mPackages.get(deletedAppName);</div><div class="line">        <span class="comment">//从mSettings.mDisabledSysPackages变量中移除出去</span></div><div class="line">        mSettings.removeDisabledSystemPackageLPw(deletedAppName);</div><div class="line"></div><div class="line">        String msg;</div><div class="line">        <span class="keyword">if</span> (deletedPkg == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">//用户目录中也没有升级包，则肯定是残留的应用信息，则把它的数据目录删除掉</span></div><div class="line">            msg = <span class="string">"Updated system package "</span> + deletedAppName</div><div class="line">                    + <span class="string">" no longer exists; wiping its data"</span>;</div><div class="line">            removeDataDirsLI(<span class="keyword">null</span>, deletedAppName);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//如果/data/app下面有升级包，说明系统目录下的文件可能被删除掉了，因此把应用的系统属性去掉，以普通应用来看待</span></div><div class="line">            msg = <span class="string">"Updated system app + "</span> + deletedAppName</div><div class="line">                    + <span class="string">" no longer present; removing system privileges for "</span></div><div class="line">                    + deletedAppName;</div><div class="line"></div><div class="line">            deletedPkg.applicationInfo.flags &amp;= ~ApplicationInfo.FLAG_SYSTEM;</div><div class="line"></div><div class="line">            PackageSetting deletedPs = mSettings.mPackages.get(deletedAppName);</div><div class="line">            deletedPs.pkgFlags &amp;= ~ApplicationInfo.FLAG_SYSTEM;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 报告系统发生了不一致的情况</span></div><div class="line">        logCriticalInfo(Log.WARN, msg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 现在来处理mExpectingBetter列表，这个列表的应用是带有升级包的系统应用，前面把他们从mPackages去掉了</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mExpectingBetter.size(); i++) &#123;</div><div class="line">        <span class="keyword">final</span> String packageName = mExpectingBetter.keyAt(i);</div><div class="line">        <span class="keyword">if</span> (!mPackages.containsKey(packageName)) &#123;</div><div class="line">            <span class="keyword">final</span> File scanFile = mExpectingBetter.valueAt(i);</div><div class="line"></div><div class="line">            logCriticalInfo(Log.WARN, <span class="string">"Expected better "</span> + packageName</div><div class="line">                    + <span class="string">" but never showed up; reverting to system"</span>);</div><div class="line"></div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> reparseFlags;</div><div class="line">            <span class="comment">// 确保应用位于下面的4个系统应用目录，如果不再，不需要处理</span></div><div class="line">            <span class="keyword">if</span> (FileUtils.contains(privilegedAppDir, scanFile)) &#123;</div><div class="line">                reparseFlags = PackageParser.PARSE_IS_SYSTEM</div><div class="line">                        | PackageParser.PARSE_IS_SYSTEM_DIR</div><div class="line">                        | PackageParser.PARSE_IS_PRIVILEGED;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (FileUtils.contains(systemAppDir, scanFile)) &#123;</div><div class="line">                reparseFlags = PackageParser.PARSE_IS_SYSTEM</div><div class="line">                        | PackageParser.PARSE_IS_SYSTEM_DIR;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (FileUtils.contains(vendorAppDir, scanFile)) &#123;</div><div class="line">                reparseFlags = PackageParser.PARSE_IS_SYSTEM</div><div class="line">                        | PackageParser.PARSE_IS_SYSTEM_DIR;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (FileUtils.contains(oemAppDir, scanFile)) &#123;</div><div class="line">                reparseFlags = PackageParser.PARSE_IS_SYSTEM</div><div class="line">                        | PackageParser.PARSE_IS_SYSTEM_DIR;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                Slog.e(TAG, <span class="string">"Ignoring unexpected fallback path "</span> + scanFile);</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 现在把这个apk标识为系统应用，从mSettings.mDisabledSysPackages中删除，</span></div><div class="line">            <span class="comment">// 这里大家可能会有点疑惑，为什么删除呢？因为在scanDirLI-&gt;scanPackageLI中会执行mSettings.disableSystemPackageLPw，因此，此时该包名的标签是只有&lt;update-package&gt;</span></div><div class="line">            <span class="comment">// 执行这步之后变成&lt;package&gt;标签，在下面的scanPackageLI中又会添加一个&lt;update-package&gt;标签的</span></div><div class="line">            mSettings.enableSystemPackageLPw(packageName);</div><div class="line"></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">// 重新扫描一下这个文件，会再添加一个&lt;update-package&gt;标签</span></div><div class="line">                scanPackageLI(scanFile, reparseFlags, scanFlags, <span class="number">0</span>, <span class="keyword">null</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (PackageManagerException e) &#123;...&#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 清空目录</span></div><div class="line">mExpectingBetter.clear();</div></pre></td></tr></table></figure>
<h4 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h4><p>将 <code>Settings</code> 的数据写入 packages.xml 中，实例化 <code>mInstallerService</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">// 更新所有应用的动态库路径</span></div><div class="line">    updateAllSharedLibrariesLPw();</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (SharedUserSetting setting : mSettings.getAllSharedUsersLPw()) &#123;</div><div class="line">        adjustCpuAbisForSharedUserLPw(setting.packages, <span class="keyword">null</span> <span class="comment">/* scanned package */</span>,</div><div class="line">                <span class="keyword">false</span> <span class="comment">/* force dexopt */</span>, <span class="keyword">false</span> <span class="comment">/* defer dexopt */</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mPackageUsage.readLP();</div><div class="line"></div><div class="line">    EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_SCAN_END,</div><div class="line">            SystemClock.uptimeMillis());</div><div class="line"></div><div class="line">    <span class="comment">// 如果平台的SDK版本和上次启动时发生了变化，可能permission的定义也发生了变化，因此需要重新赋予应用权限</span></div><div class="line">    <span class="keyword">int</span> updateFlags = UPDATE_PERMISSIONS_ALL;</div><div class="line">    <span class="keyword">if</span> (ver.sdkVersion != mSdkVersion) &#123;</div><div class="line">        updateFlags |= UPDATE_PERMISSIONS_REPLACE_PKG | UPDATE_PERMISSIONS_REPLACE_ALL;</div><div class="line">    &#125;</div><div class="line">    updatePermissionsLPw(<span class="keyword">null</span>, <span class="keyword">null</span>, updateFlags);</div><div class="line">    ver.sdkVersion = mSdkVersion;</div><div class="line"></div><div class="line">    <span class="comment">// 如果是第一次启动或者是从AndroidM升级后的第一次启动，需要执行一些初始化工作</span></div><div class="line">    <span class="keyword">if</span> (!onlyCore &amp;&amp; (mPromoteSystemApps || !mRestoredSettings)) &#123;</div><div class="line">        <span class="keyword">for</span> (UserInfo user : sUserManager.getUsers(<span class="keyword">true</span>)) &#123;</div><div class="line">            mSettings.applyDefaultPreferredAppsLPw(<span class="keyword">this</span>, user.id);</div><div class="line">            applyFactoryDefaultBrowserLPw(user.id);</div><div class="line">            primeDomainVerificationsLPw(user.id);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 如果是执行OTA后的第一次启动，需要清除cache</span></div><div class="line">    <span class="keyword">if</span> (mIsUpgrade &amp;&amp; !onlyCore) &#123;</div><div class="line">        ...</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mSettings.mPackages.size(); i++) &#123;</div><div class="line">            <span class="keyword">final</span> PackageSetting ps = mSettings.mPackages.valueAt(i);</div><div class="line">            <span class="keyword">if</span> (Objects.equals(StorageManager.UUID_PRIVATE_INTERNAL, ps.volumeUuid)) &#123;</div><div class="line">                deleteCodeCacheDirsLI(ps.volumeUuid, ps.name);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        ver.fingerprint = Build.FINGERPRINT;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mExistingSystemPackages.clear();</div><div class="line">    mPromoteSystemApps = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    ver.databaseVersion = Settings.CURRENT_DATABASE_VERSION;</div><div class="line"></div><div class="line">    <span class="comment">// 把Settings的内容保存到packages.xml中去</span></div><div class="line">    mSettings.writeLPr();</div><div class="line"></div><div class="line">    EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_READY,</div><div class="line">            SystemClock.uptimeMillis());</div><div class="line"></div><div class="line">    mRequiredVerifierPackage = getRequiredVerifierLPr();</div><div class="line">    mRequiredInstallerPackage = getRequiredInstallerLPr();</div><div class="line"></div><div class="line">    <span class="comment">// 创建PackageInstallerService</span></div><div class="line">    mInstallerService = <span class="keyword">new</span> PackageInstallerService(context, <span class="keyword">this</span>);</div><div class="line"></div><div class="line">    mIntentFilterVerifierComponent = getIntentFilterVerifierComponentNameLPr();</div><div class="line">    mIntentFilterVerifier = <span class="keyword">new</span> IntentVerifierProxy(mContext,</div><div class="line">            mIntentFilterVerifierComponent);</div><div class="line"></div><div class="line">&#125; <span class="comment">// synchronized (mPackages)</span></div><div class="line">&#125; <span class="comment">// synchronized (mInstallLock)</span></div><div class="line"></div><div class="line"><span class="comment">// 启动一次内存垃圾回收</span></div><div class="line">Runtime.getRuntime().gc();</div><div class="line"></div><div class="line">LocalServices.addService(PackageManagerInternal.class, <span class="keyword">new</span> PackageManagerInternalImpl());</div></pre></td></tr></table></figure>
<p>至此，构造函数分析结束，构造函数的执行过程就是先读取保存在packages.xml文件的扫描结果，保存在Settings中，然后扫描几个目录下的文件，并对比上次扫描结果更新packages.xml文件。</p>
]]></content>
    
    <summary type="html">
    
      基于Android6.0来分析Android的应用管理系统，本文简单介绍PackageManagerService相关类以及相关adb shell命令，重点讲解PackageManagerService的初始化。
    
    </summary>
    
      <category term="Android源码分析" scheme="http://yoursite.com/categories/Android%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Android源码分析" scheme="http://yoursite.com/tags/Android%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="PackageManager" scheme="http://yoursite.com/tags/PackageManager/"/>
    
  </entry>
  
  <entry>
    <title>Gradle 使用指南 -- 玩转命令行</title>
    <link href="http://yoursite.com/2016/04/26/development-tool-gradle-command-line/"/>
    <id>http://yoursite.com/2016/04/26/development-tool-gradle-command-line/</id>
    <published>2016-04-26T02:00:00.000Z</published>
    <updated>2019-02-27T10:59:42.267Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Gradle 的命令行是用户了解可用选项、检查项目配置和控制执行的有力工具。它可以分为三类：探索和帮助相关 task、构建设置相关 task 和配置输入。<br>Gradle 命令的用法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle [options...] [tasks...]</div></pre></td></tr></table></figure>
<h2 id="获取构建信息类任务"><a href="#获取构建信息类任务" class="headerlink" title="获取构建信息类任务"></a>获取构建信息类任务</h2><p>很多探索类的任务都提供了构建信息，它们是你了解项目配置最好的地方。</p>
<table>
<thead>
<tr>
<th style="text-align:left">名字</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">详细</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">help</td>
<td style="text-align:left">gradle的帮助命令，显示gradle的基本用法。如果你运行 gradle 而没有指定任何 task，那么 help task 就会被自动执行，比如运行 <code>gradle</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">tasks</td>
<td style="text-align:left">显示项目中所有可以运行的 task，包括它们的描述信息。应用于项目的插件提供了一些额外的 task。显示可用 task 的附加信息，可以使用 –all 选项。</td>
<td style="text-align:left">下面详细介绍</td>
</tr>
<tr>
<td style="text-align:left">dependencies</td>
<td style="text-align:left">列出项目依赖，包括传递性依赖。</td>
<td style="text-align:left">下面详细介绍</td>
</tr>
<tr>
<td style="text-align:left">dependencyInsight</td>
<td style="text-align:left">解释依赖树中的一个依赖如何被选择，为什么被选择。</td>
<td style="text-align:left">下面详细介绍</td>
</tr>
<tr>
<td style="text-align:left">projects</td>
<td style="text-align:left">显示多项目构建中的所有子项目，单项目构建没有子项目。</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">properties</td>
<td style="text-align:left">列出项目中所有可以属性。有些属性是 gradle 的 project 对象提供的，有的是用户自定义属性，可能来自于属性文件、属性命令行选项，或者直接在构建脚本中定义的。</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">buildEnvironment</td>
<td style="text-align:left">列出所有 build 脚本的依赖关系</td>
</tr>
</tbody>
</table>
<!--
<table>
  <tr>
    <th width=20%, bgcolor=yellow>名字</th>
    <th width=60%, bgcolor=yellow>描述</th>
    <th width="20%", bgcolor=yellow>详细</th>
  </tr>
  <tr>
    <td bgcolor=#eeeeee> help </td>
    <td> gradle的帮助命令，显示gradle的基本用法。如果你运行 gradle 而没有指定任何 task，那么 help task 就会被自动执行，比如运行 `gradle`  </td>
    <td> </td>
  </tr>
  <tr>
    <td bgcolor=#00FF00> tasks </td>
    <td> 显示项目中所有可以运行的 task，包括它们的描述信息。应用于项目的插件提供了一些额外的 task。显示可用 task 的附加信息，可以使用 --all 选项。 </td>
    <td> 下面详细介绍 </td>
  </tr>
  <tr>
    <td bgcolor=rgb(0,10,0)> dependencies </td>
    <td> 列出项目依赖，包括传递性依赖。 </td>
    <td>  下面详细介绍 </td>
  </tr>
  <tr>
    <td bgcolor=rgb(0,10,0)> dependencyInsight </td>
    <td> 解释依赖树中的一个依赖如何被选择，为什么被选择。 </td>
    <td>  下面详细介绍 </td>
  </tr>
  <tr>
    <td bgcolor=rgb(0,10,0)> projects </td>
    <td> 显示多项目构建中的所有子项目，单项目构建没有子项目。 </td>
    <td>   </td>
  </tr>
  <tr>
    <td bgcolor=rgb(0,10,0)> properties </td>
    <td> 列出项目中所有可以属性。有些属性是 gradle 的 project 对象提供的，有的是用户自定义属性，可能来自于属性文件、属性命令行选项，或者直接在构建脚本中定义的。 </td>
    <td>   </td>
  </tr>
  <tr>
    <td bgcolor=rgb(0,10,0)> buildEnvironment </td>
    <td> 列出所有 build 脚本的依赖关 </td>
    <td>   </td>
  </tr>
</table>
-->
<p>下面对与一些常用的 task 进行详细的介绍。</p>
<h3 id="获取任务列表"><a href="#获取任务列表" class="headerlink" title="获取任务列表"></a>获取任务列表</h3><p>运行命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle tasks</div></pre></td></tr></table></figure>
<p>就可以列出项目中所有可以运行的 task：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">Android tasks</div><div class="line">-------------</div><div class="line">androidDependencies - Displays the Android dependencies of the project.</div><div class="line">signingReport - Displays the signing info for each variant.</div><div class="line">sourceSets - Prints out all the source sets defined in this project.</div><div class="line"></div><div class="line">Build tasks</div><div class="line">-----------</div><div class="line">assemble - Assembles all variants of all applications and secondary packages.</div><div class="line">assembleAndroidTest - Assembles all the Test applications.</div><div class="line">assembleDdd - Assembles all Ddd builds.</div><div class="line">assembleDebug - Assembles all Debug builds.</div><div class="line">assembleRelease - Assembles all Release builds.</div><div class="line">build - Assembles and tests this project.</div><div class="line">......</div><div class="line">jar - Assembles a jar archive containing the main classes.</div><div class="line">mockableAndroidJar - Creates a version of android.jar that&apos;s suitable for unit tests.</div><div class="line">testClasses - Assembles test classes.</div><div class="line"></div><div class="line">Build Setup tasks</div><div class="line">-----------------</div><div class="line">init - Initializes a new Gradle build. [incubating]</div><div class="line">wrapper - Generates Gradle wrapper files. [incubating]</div><div class="line"></div><div class="line">Documentation tasks</div><div class="line">-------------------</div><div class="line">groovydoc - Generates Groovydoc API documentation for the main source code.</div><div class="line">javadoc - Generates Javadoc API documentation for the main source code.</div><div class="line"></div><div class="line">Help tasks</div><div class="line">----------</div><div class="line">buildEnvironment - Displays all buildscript dependencies declared in root project &apos;TestSomeThing&apos;.</div><div class="line">components - Displays the components produced by root project &apos;TestSomeThing&apos;. [incubating]</div><div class="line">......</div><div class="line">tasks - Displays the tasks runnable from root project &apos;TestSomeThing&apos; (some of the displayed tasks may belong to subprojects).</div><div class="line"></div><div class="line">Install tasks</div><div class="line">-------------</div><div class="line">installDebug - Installs the Debug build.</div><div class="line">installDebugAndroidTest - Installs the android (on device) tests for the Debug build.</div><div class="line">......</div><div class="line">uninstallRelease - Uninstalls the Release build.</div><div class="line"></div><div class="line">Verification tasks</div><div class="line">------------------</div><div class="line">check - Runs all checks.</div><div class="line">connectedAndroidTest - Installs and runs instrumentation tests for all flavors on connected devices.</div><div class="line">connectedCheck - Runs all device checks on currently connected devices.</div><div class="line">......</div><div class="line">testDebugUnitTest - Run unit tests for the debug build.</div><div class="line">testReleaseUnitTest - Run unit tests for the release build.</div><div class="line"></div><div class="line">Other tasks</div><div class="line">-----------</div><div class="line">assembleDefault</div><div class="line">......</div><div class="line">transformResourcesWithMergeJavaResForReleaseUnitTest</div></pre></td></tr></table></figure>
<p>上面是运行 <code>gradle tasks</code> 的执行结果，可以发现，这里的 task 列表也有个分类：Android tasks、Build tasks 和 Help tasks 等，对与感兴趣的 task 你可以一一去尝试。<br>显示所有可用 task 以及一些附加信息，可以使用 –all 选项。</p>
<h3 id="获取依赖关系"><a href="#获取依赖关系" class="headerlink" title="获取依赖关系"></a>获取依赖关系</h3><h4 id="dependencies"><a href="#dependencies" class="headerlink" title="dependencies"></a>dependencies</h4><p>使用 <code>gradle dependencies</code> 可以所有项目依赖。<br><code>gradle &lt;project&gt;:dependencies --configuration &lt;configuration&gt;</code> 可以列出指定项目指定 Configuration 的依赖关系，project 为 settings.gradle 里面配置的各个 project ，如果没有配置就不加。<br>比如：<code>gradle app:dependencies --configuration compile</code> 就只列出了 app 项目的 compile 任务的依赖关系，这个命令也是我们经常使用的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">+--- com.android.support:support-annotations:22.0.0</div><div class="line">+--- com.squareup.retrofit2:retrofit:2.3.0</div><div class="line">|    \--- com.squareup.okhttp3:okhttp:3.8.0</div><div class="line">|         \--- com.squareup.okio:okio:1.13.0</div><div class="line">+--- com.squareup.retrofit2:converter-gson:2.3.0</div><div class="line">|    +--- com.squareup.retrofit2:retrofit:2.3.0 (*)</div><div class="line">|    \--- com.google.code.gson:gson:2.7</div><div class="line">+--- com.squareup.retrofit2:adapter-rxjava2:2.3.0</div><div class="line">|    +--- com.squareup.retrofit2:retrofit:2.3.0 (*)</div><div class="line">|    \--- io.reactivex.rxjava2:rxjava:2.0.0 -&gt; 2.1.5</div><div class="line">|         \--- org.reactivestreams:reactive-streams:1.0.1</div><div class="line">+--- org.jooq:joor:0.9.5</div><div class="line">+--- com.github.heqiangflytosky:FastScrollWebView:v1.0.0</div><div class="line">+--- com.eclipsesource.j2v8:j2v8:4.5.0</div><div class="line">+--- org.apache.bcel:bcel:6.0</div><div class="line">+--- org.javassist:javassist:3.20.0-GA</div><div class="line">+--- io.reactivex.rxjava2:rxjava:2.1.5 (*)</div><div class="line">+--- io.reactivex.rxjava2:rxandroid:2.0.1</div><div class="line">|    \--- io.reactivex.rxjava2:rxjava:2.0.1 -&gt; 2.1.5 (*)</div><div class="line">\--- com.squareup.okhttp3:okhttp:3.5.0 -&gt; 3.8.0 (*)</div></pre></td></tr></table></figure>
<p>上面为一个依赖关系树，仔细观察你会发现有些传递依赖标注了 * 号，表示这个依赖被忽略了，这是因为其他顶级依赖中也依赖了这个传递的依赖，Gradle 会自动分析下载最合适的依赖。</p>
<h4 id="dependencyInsight"><a href="#dependencyInsight" class="headerlink" title="dependencyInsight"></a>dependencyInsight</h4><p><code>dependencyInsight</code> 的用法和 <code>dependencies</code> 类似，检查一个特定的依赖需要使用 <code>--dependency</code> 参数，用 <code>--configuration</code> 来指定一个特定的 Configuration。<br><code>--dependency</code> 可以不写全称，gradle 会过滤包含参数字段的所有依赖库。<br>比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gradlew -q app:dependencyInsight --dependency rxjava --configuration compile</div></pre></td></tr></table></figure></p>
<h2 id="构建设置类任务"><a href="#构建设置类任务" class="headerlink" title="构建设置类任务"></a>构建设置类任务</h2><p>每个 Gradle 项目都至少需要一个 build.gradle 文件来定义构建逻辑，这个文件可以通过手动创建或者是通过构建设置插件的 task 方便的生成。</p>
<table>
<thead>
<tr>
<th style="text-align:center">名字</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">详细</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">init</td>
<td style="text-align:center">初始化一个新的 build.gradle 文件</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">wrapper</td>
<td style="text-align:center">在 Gradle 项目目录下生成 Gradle Wrapper 文件，使用与 Gradle 运行时相同的版本</td>
</tr>
</tbody>
</table>
<p><code>./gradlew wrapper -v</code> 查看当前 Gradle 的版本<br><code>./gradlew wrapper --gradle-version 4.2</code> 切换 Gradle 到 4.2 版本</p>
<h2 id="配置输入"><a href="#配置输入" class="headerlink" title="配置输入"></a>配置输入</h2><h3 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h3><table>
<thead>
<tr>
<th style="text-align:center">名字</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">详细</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-? -h –help</td>
<td style="text-align:center">打印出所有可用的命令行选项，包含描述信息。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">-a, –no-rebuild</td>
<td style="text-align:center">避免重新构建多项目构建中的所有子项目（也叫部分构建）。通过部分构建，可以节约检查子项目模型的开销，降低构建执行时间</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">-b, –build-file</td>
<td style="text-align:center">Gradle 构建脚本默认的命名约定是 build.gradle。使用这个选项执行其他名字的构建脚本（比如：gradle -b test.gradle build）</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">-c, –settings-file</td>
<td style="text-align:center">Gradle 设置文件默认的命名约定是 settings.gradle，使用这个选项执行非标准设置文件名的构建（比如：gradle -c mySettings.gradle build）</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">–configure-on-demand</td>
<td style="text-align:center">这个选项的目的是优化初始化多项目构建的配置时间。这种模式尝试只配置跟正在请求的 task 相关的项目。这个选项可以通过在 gradle.properties 文件中设置 org.gradle.on-demand 属性来激活。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">–continue</td>
<td style="text-align:center">在一个 task 执行失败后 Gradle 会继续执行。在多项目构建中这个选项及其有用。它让你在构建时发现所有可能的问题，并一起修复他们，而不是一一修复。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">-g, –gradle-user-home</td>
<td style="text-align:center">Gradle 的默认 home 目录位于 home 目录下的 .gradle 目录中。如果你想要指向不同的目录，则使用这个选项。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">–gui</td>
<td style="text-align:center">运行一个基于 Swing 的图形化用户界面。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">-I, –init-script</td>
<td style="text-align:center">设置一个初始化脚本用于构建。这个脚本会在所有构建 task 执行前被执行。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">-m, –dry-run</td>
<td style="text-align:center">打印 task 的执行顺序，而不必真的执行它们。如果你想要快速地确定 task 的执行顺序，这个选项会很方便。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">-p, –project-dir</td>
<td style="text-align:center">Gradle 默认会在当前目录下执行构建。通过这个选项，可以指定不同的目录来执行构建</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">–parallel</td>
<td style="text-align:center">这个选项可以通过在 gradle.properties 文件中设置 org.gradle.parallel=true</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">–parallel-threads</td>
<td style="text-align:center">当并行构建多项目的时候，这个选项可以被用来重写线程数（比如：–parallel-threads=5）。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">–profile</td>
<td style="text-align:center">除了每次构建时输出总的构建时间，你可以将构建时间拆分的更小。profile 选项在 build/reports/profile 目录下生成了详细的 HTML 报告，其中列出了所有 task 的执行时间和在配置阶段所有的时间。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">–rerun-tasks</td>
<td style="text-align:center">重新运行 task 执行图中所有确定的 task。这个选项会忽略前面 task 执行的任何 UP-TO-DATE 状态。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">-u, –no-search-upward</td>
<td style="text-align:center">告诉 Gradle 不要在父目录中寻找设置文件。在有深层次嵌套的项目结构中，这个选项被用来避免在父目录中搜索，从而节约时间。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">-v, –version</td>
<td style="text-align:center">打印出 Gradle 运行时的版本信息。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">-x, –exclude-task</td>
<td style="text-align:center">指定某个 task 在构建的时候不执行。一个比较典型的例子就是如果你想执行一个完整的构建，但是不执行所有的单元测试（比如：gradle -x test build）</td>
</tr>
</tbody>
</table>
<h3 id="属性选项"><a href="#属性选项" class="headerlink" title="属性选项"></a>属性选项</h3><p>属性提供了一种在命令行配置构建的方式。</p>
<table>
<thead>
<tr>
<th style="text-align:center">名字</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">详细</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-D, –system-prop</td>
<td style="text-align:center">Gradle 以 JVM 进程的形式运行。与所有的 java 进程一样，你可以指定系统属性如：-Dmyprop=myvalue</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">-P, –project-prop</td>
<td style="text-align:center">项目属性是在构建脚本中能够被使用的变量。你可以使用这个选项从命令行直接将一个参数传递到构建脚本中。比如： -Pmyprop=myvalue</td>
</tr>
</tbody>
</table>
<p>-P 参数的使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gradlew assembleDebug -Pcustom=true</div></pre></td></tr></table></figure>
<p>就可以在build.gradle中使用下面代码来判断：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if (project.hasProperty(&apos;custom&apos;))&#123;</div><div class="line">    // do something</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="日志选项"><a href="#日志选项" class="headerlink" title="日志选项"></a>日志选项</h3><p>Gradle 允许访问构建产生的所有日志信息。根据情况，你可以提供日志选项来过滤相关的重要消息。</p>
<table>
<thead>
<tr>
<th style="text-align:center">名字</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">详细</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-i,–info</td>
<td style="text-align:center">在默认设置下 Gradle 构建并不会输出大量的日志信息。通过这个选项将日志级别设置成 INFO 来获取更多的日志信息。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">-d,–debug</td>
<td style="text-align:center">以 DEBUG 日志级别运行 Gradle 构建，将会产生大量的日志信息，包括堆栈跟踪信息，这在查错的时候特别有用。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">-q,–quiet</td>
<td style="text-align:center">减少构建输出只剩下错误信息。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">-s,–stacktrace</td>
<td style="text-align:center">如果构建出错了，你会希望知道哪里出错了。如果有异常抛出，这个 -s 选项会打印一个简单的堆栈跟踪信息，这个调试失败构建的时候非常有用。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">-S,–full-stacktrace</td>
<td style="text-align:center">打印完整的异常堆栈跟踪信息。</td>
</tr>
</tbody>
</table>
<h3 id="缓存选项"><a href="#缓存选项" class="headerlink" title="缓存选项"></a>缓存选项</h3><p>Gradle 利用多级别的缓存机制来提高构建性能。利用一些选项可以改变默认的缓存行为。</p>
<table>
<thead>
<tr>
<th style="text-align:center">名字</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">详细</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">–offline</td>
<td style="text-align:center">通常你的构建定义了一些依赖，如果这些依赖在本地没有存储，并且进行构建的时候没有网络连接就会引起构建失败。使用这个选项，可以让构建采用离线模式运行，并且只检查本地存储的依赖。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">–project-cache-dir</td>
<td style="text-align:center">默认的依赖缓存目录位于用户的 .gradle 目录下。这个选项可以被用来指定一个不同的目录。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">–recompile-scripts</td>
<td style="text-align:center">Gradle 默认编译所有的脚本并存储在本地缓存中以提高构建性能。使用这个选项来清空这些缓存。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">–refresh-dependencies</td>
<td style="text-align:center">手动刷新缓存中的依赖。这个标志强制检查依赖的版本。</td>
</tr>
</tbody>
</table>
<h3 id="后台守护进程选项"><a href="#后台守护进程选项" class="headerlink" title="后台守护进程选项"></a>后台守护进程选项</h3><p>守护进程以后台进程的形式运行 Gradle。一旦开始，gradle 命令会重用已经获得的后台进程执行后续构建，从而避免每次启动时的开销。</p>
<table>
<thead>
<tr>
<th style="text-align:center">名字</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">详细</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">–daemon</td>
<td style="text-align:center">使用后台守护进程模式执行构建可以提高构建性能。如果后台进程已经存在，则会重用它，如果不存在，则会启动一个新的后台进程。后台守护进程可以通过在 gradle.properties 文件中设置 org.gradle.deamon=true 来激活。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">–foreground</td>
<td style="text-align:center">在终端中运行 Gradle 后台守护进程，用于调试和监控目的。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">–no-daemon</td>
<td style="text-align:center">不使用已有的 Gradle 后台守护进程执行构建。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">–stop</td>
<td style="text-align:center">终止一个已经存在的 Gradle 后台守护进程。</td>
</tr>
</tbody>
</table>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>《实战 Gradle》</p>
<!--  
http://blog.csdn.net/jjwwmlp456/article/details/41512289

http://wiki.jikexueyuan.com/project/gradle-2-user-guide/using-the-gradle-command-line.html
http://wiki.jikexueyuan.com/project/gradle-2-user-guide/using-the-gradle-graphical-user-interface.html
http://www.yiibai.com/gradle/gradle_running_a_build.html
http://blog.csdn.net/jjwwmlp456/article/details/41512289
-->
]]></content>
    
    <summary type="html">
    
      介绍 Gradle 常用命令的使用
    
    </summary>
    
      <category term="Gradle" scheme="http://yoursite.com/categories/Gradle/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Gradle" scheme="http://yoursite.com/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>Groovy 教程系列（一）-- Groovy 入门</title>
    <link href="http://yoursite.com/2016/04/20/development-tool-gradle-groovy-basic/"/>
    <id>http://yoursite.com/2016/04/20/development-tool-gradle-groovy-basic/</id>
    <published>2016-04-20T02:00:00.000Z</published>
    <updated>2018-05-06T07:29:26.133Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Groovy 是一种基于Java平台的面向对象语言。Groovy 的语法和 Java 非常的相似，可以使用现有的 Java 库来进行 Groovy 开发。可以将它想像成 Java 语言的一种更加简单、表达能力更强的变体。<br>用 Groovy 编写的任何内容都可以编译成标准的 Java 类文件并在 Java 代码中重用。类似地，用标准 Java 代码编写的内容也可以在 Groovy 中重用。所以，可以轻易地使用 Groovy 为 Java 代码编写单元测试。而且，如果用 Groovy 编写一个方便的小工具，那么也可以在 Java 程序中使用这个小工具。<br>我们为什么要学习 Groovy 语言呢？<br>Groovy 是一种更有生产力的语言。它具有松散的语法和一些特殊功能，能够加快编码速度。<br>在 Android 开发中，我们会经常接触 Gradle，而前面博客中我们说过，Gradle 是一个使用 Groovy 语言实现的用于构建项目的框架，如果不懂 Groovy，你就不能说精通了 Gradle。<br>前面介绍的几篇关于 Gradle 的博客中都有涉及到 Groovy，比如 Gradle 的配置和插件开发，那么现在再读 Grovvy 的介绍的文章，会有一种豁然开朗的感觉。<br>Groovy 语言的一些特点：</p>
<ul>
<li>Groovy 的松散的 Java 语法允许省略分号和 return 关键字。</li>
<li>变量的类型和方法的返回值也是可以省略的。</li>
<li>方法调用时，括号也是可以省略的。</li>
<li>除非另行指定，Groovy 的所有内容都为 public。</li>
<li>Groovy 允许定义简单脚本，同时无需定义正规的 class 对象。</li>
<li>Groovy 在普通的常用 Java 对象上增加了一些独特的方法和快捷方式，使得它们更容易使用。</li>
<li>Groovy 语法还允许省略变量类型。</li>
</ul>
<p><a href="http://groovy-lang.org/" target="_blank" rel="external">官方网站</a><br><a href="http://www.groovy-lang.org/api.html" target="_blank" rel="external">Groovy API 文档</a>：遇到不懂的类或者方法，这个是好帮手。</p>
<h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><p>我们可以安装 Groovy SDK 来设置运行环境，如果你不想麻烦，也可以在Android工程中运行 Groovy。</p>
<h3 id="在-build-gradle-中编写代码"><a href="#在-build-gradle-中编写代码" class="headerlink" title="在 build.gradle 中编写代码"></a>在 build.gradle 中编写代码</h3><p>这一点在前面的博客 <a href="http://www.heqiangfly.com/2016/03/13/development-tool-gradle-task/" target="_blank" rel="external">Gradle 使用指南 – Gradle Task </a> 其实已经有所运用，即在里面创建一个 Task，然后在 Task 中编写 Groovy 代码即可。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">task hello &#123;</div><div class="line">    doFirst &#123;</div><div class="line">        println <span class="string">'task hello doFirst'</span></div><div class="line">        Student st = <span class="keyword">new</span> Student()</div><div class="line">        st.setStudentName(<span class="string">"Joe"</span>)</div><div class="line"></div><div class="line">        println(st.getStudentName());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line">    String StudentName;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后运行 <code>./gradlew hello</code> 命令即可。</p>
<h3 id="以插件的方式"><a href="#以插件的方式" class="headerlink" title="以插件的方式"></a>以插件的方式</h3><p>参考博客 <a href="http://www.heqiangfly.com/2016/03/15/development-tool-gradle-customized-plugin/" target="_blank" rel="external">Gradle 使用指南 – 创建Plugin</a></p>
<h3 id="在-build-gradle-中直接调用-Groovy-方法"><a href="#在-build-gradle-中直接调用-Groovy-方法" class="headerlink" title="在 build.gradle 中直接调用 Groovy 方法"></a>在 build.gradle 中直接调用 Groovy 方法</h3><p>这一种方式是前面两种方式的结合，但是不用创建 gradle 插件。<br>在 buildSrc 中创建 TestGroovy.groovy 文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">package com.android.hq.myfirstplugin</div><div class="line"></div><div class="line">public class TestGroovy &#123;</div><div class="line"></div><div class="line">    public static void testGroovy() &#123;</div><div class="line">        Student st = new Student()</div><div class="line">        st.setStudentName(&quot;James&quot;);</div><div class="line"></div><div class="line">        println(st.getStudentName())</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static class Student &#123;</div><div class="line">        String StudentName;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 Task 中调用方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">task hello &#123;</div><div class="line">    doFirst &#123;</div><div class="line">        println &apos;task hello doFirst&apos;</div><div class="line">        TestGroovy.testGroovy()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后运行 <code>./gradlew hello</code> 命令即可；</p>
<h2 id="Groovy-入门"><a href="#Groovy-入门" class="headerlink" title="Groovy 入门"></a>Groovy 入门</h2><p>由于 Groovy 和 Java 极其的类似，因此，基本的语法规范就参考<a href="https://www.w3cschool.cn/groovy/" target="_blank" rel="external">W3C school Groovy教程</a>即可，下面只来介绍一下 Groovy 的一些新特性。</p>
<h3 id="变量类型定义和方法声明"><a href="#变量类型定义和方法声明" class="headerlink" title="变量类型定义和方法声明"></a>变量类型定义和方法声明</h3><p>在 Java 中，变量是必须指定类型的，但是在 Groovy 中，所有的变量类型都可以用 <code>def</code> 去指定，Groovy 会根据对象的值来判断它的类型。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">def helloStr = &quot;Hello World&quot;;</div><div class="line">def a = 1, b = 2</div><div class="line">println helloStr</div><div class="line">println a + b</div></pre></td></tr></table></figure>
<p>函数的的返回值的类型当然也可以用 <code>def</code> 来声明：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">def getStr() &#123;</div><div class="line">    return &quot;Hello World&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在声明函数时，参数变量的类型是可以省略的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">def add(arg1, arg2) &#123;</div><div class="line">    return arg1+arg2</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>前面我们说过，方法返回值的关键字 <code>return</code> 是可以省略的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">def add(arg1, arg2) &#123;</div><div class="line">    arg1+arg2</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>方法调用时括号是可以省略的，见 <code>println a + b</code> 的调用。<br>在 Groovy 中，类型是弱化的，所有的类型都可以动态推断，但是 Groovy 仍然是强类型的语言，类型不匹配仍然会报错；</p>
<p>上述两个类完全一致，只有有属性就有Getter/Setter；同理，只要有Getter/Setter，那么它就有隐含属性。</p>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>在Groovy中有两种风格的字符串：String（java.lang.String）和GString（groovy.lang.GString）。GString允许有占位符而且允许在运行时对占位符进行解析和计算。<br>这里我们只介绍对占位符的一种使用：嵌入表达式</p>
<h4 id="嵌入表达式"><a href="#嵌入表达式" class="headerlink" title="嵌入表达式"></a>嵌入表达式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">def worldStr = &quot;World&quot;</div><div class="line">def helloStr = &quot;Hello $&#123;worldStr&#125;&quot;;</div><div class="line">println helloStr</div><div class="line">println &quot;value: $&#123;3+3&#125;&quot;</div></pre></td></tr></table></figure>
<p>除了${}占位符的{}其实是可以省去的。<br>占位符里面可以包含一个闭包表达式。</p>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><h4 id="Getter-Setter-方法"><a href="#Getter-Setter-方法" class="headerlink" title="Getter/Setter 方法"></a>Getter/Setter 方法</h4><p>在Groovy中，对象的 Getter/Setter 方法和属性是默认关联的，比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public static class Student &#123;</div><div class="line">    String StudentName;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static class Student &#123;</div><div class="line">    String StudentName;</div><div class="line"></div><div class="line">    String getStudentName() &#123;</div><div class="line">        return StudentName</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    void setStudentName(String studentName) &#123;</div><div class="line">        StudentName = studentName</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="with-方法"><a href="#with-方法" class="headerlink" title="with 方法"></a>with 方法</h4><p>当对同一个对象进行操作时，可以使用 <code>with</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">    Student st = new Student()</div><div class="line">    st.with &#123;</div><div class="line">        id = 10;</div><div class="line">        name = &quot;James&quot;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    println st.getName()</div><div class="line">    ......</div><div class="line">public static class Student &#123;</div><div class="line">    def name</div><div class="line">    def id</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="join-方法"><a href="#join-方法" class="headerlink" title="join 方法"></a>join 方法</h4><p>用指定的字符连接集合中的元素：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">def list = [2017,1,6]</div><div class="line">println list.join(&quot;-&quot;)</div></pre></td></tr></table></figure>
<p>其他实用方法请参考 Groovy API 文档中的 <code>DefaultGroovyMethods</code>。</p>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包是一个短的匿名代码块。它通常跨越几行代码。一个方法甚至可以将代码块作为参数。它们是匿名的。<br>下面是一个简单闭包的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">def clos = &#123;</div><div class="line">    def worldStr = &quot;World&quot;</div><div class="line">    def helloStr = &quot;Hello $worldStr&quot;;</div><div class="line">    println helloStr</div><div class="line"></div><div class="line">    def person = [name: &apos;Joe&apos;, age: 36]</div><div class="line">    println &quot;$person.name is $person.age years old&quot;</div><div class="line">&#125;</div><div class="line">clos.call()</div></pre></td></tr></table></figure>
<p>代码行 {…}被称为闭包。此标识符引用的代码块可以使用call语句执行。</p>
<p>闭包也可以包含形式参数，以使它们更有用，就像Groovy中的方法一样。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">def clos = &#123; param -&gt;</div><div class="line">    def helloStr = &quot;Hello $param&quot;;</div><div class="line">    println helloStr</div><div class="line">&#125;</div><div class="line">clos.call(&quot;World&quot;)</div></pre></td></tr></table></figure>
<p>如果闭包不指定参数，那么它会有一个隐含的参数 <code>it</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">def clos = &#123;</div><div class="line">    def helloStr = &quot;Hello $it&quot;;</div><div class="line">    println helloStr</div><div class="line">&#125;</div><div class="line">clos.call(&quot;World&quot;)</div></pre></td></tr></table></figure>
<p>闭包可以有返回值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">def clos = &#123;</div><div class="line">    def helloStr = &quot;Hello $it&quot;;</div><div class="line">    return helloStr</div><div class="line">&#125;</div><div class="line">println clos.call(&quot;World&quot;)</div></pre></td></tr></table></figure>
<p>闭包还可以作方法的参数。</p>
<h3 id="本地集合"><a href="#本地集合" class="headerlink" title="本地集合"></a>本地集合</h3><h3 id="内置的正则表达式"><a href="#内置的正则表达式" class="headerlink" title="内置的正则表达式"></a>内置的正则表达式</h3><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><p><a href="https://www.w3cschool.cn/groovy/" target="_blank" rel="external">W3C school Groovy教程</a><br><a href="http://blog.csdn.net/singwhatiwanna/article/details/76084580" target="_blank" rel="external">Gradle从入门到实战 - Groovy基础</a></p>
<!-- 
https://www.ibm.com/developerworks/cn/education/java/j-groovy/j-groovy.html
https://www.jianshu.com/p/f704af0a3da5
https://www.cnblogs.com/nowgood/p/Gradle-xue-xi-bi-ji-zhiGroovy.html
https://www.jianshu.com/p/ba55dc163dfd
http://blog.csdn.net/dora_310/article/details/52895835
http://blog.csdn.net/rosten/article/details/20370849
-->
]]></content>
    
    <summary type="html">
    
      介绍 Groovy 语言的一些基本语法规则
    
    </summary>
    
      <category term="Gradle" scheme="http://yoursite.com/categories/Gradle/"/>
    
    
      <category term="Groovy" scheme="http://yoursite.com/tags/Groovy/"/>
    
  </entry>
  
  <entry>
    <title>Gradle 使用指南 -- Plugin DSL 扩展</title>
    <link href="http://yoursite.com/2016/04/16/development-tool-gradle-customized-plugin-dsl-extension/"/>
    <id>http://yoursite.com/2016/04/16/development-tool-gradle-customized-plugin-dsl-extension/</id>
    <published>2016-04-16T02:00:00.000Z</published>
    <updated>2019-02-27T10:42:59.015Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>前面的博客<a href="http://www.heqiangfly.com/2016/03/15/development-tool-gradle-customized-plugin/" target="_blank" rel="external">Gradle 使用指南 – 创建Plugin </a> 介绍了如何去创建一个插件，那么这篇文章将介绍一些深入的知识：如何对自定义插件进行 DSL 扩展。<br>在博客<a href="http://www.heqiangfly.com/2016/03/08/development-tool-gradle-android-dsl-extension/" target="_blank" rel="external">Gradle 使用指南 – Android DSL 扩展 </a> Android 插件对 Gradle 进行的 DSL 扩展，那么我们自定义插件也是完全可以做到的。</p>
<p><a href="https://docs.gradle.org/current/userguide/custom_plugins.html" target="_blank" rel="external">Gradle 官方文档：Writing Custom Plugins</a></p>
<h2 id="DSL-扩展基本实现"><a href="#DSL-扩展基本实现" class="headerlink" title="DSL 扩展基本实现"></a>DSL 扩展基本实现</h2><h3 id="ExtensionContainer-DSL-实现扩展"><a href="#ExtensionContainer-DSL-实现扩展" class="headerlink" title="ExtensionContainer DSL 实现扩展"></a>ExtensionContainer DSL 实现扩展</h3><p>我们在进行 Gradle 配置时，很多的配置都是在 build.gradle 文件中进行的，插件可以在构建过程中获取这些输入。我们自定义的插件也是可以做到这一点的。这就要借助 <code>ExtensionContainer</code> 来实现。<br>怎么来得到一个 <code>ExtensionContainer</code> 对象呢？我们来看一下 <code>Project</code> 的 <code>getExtensions()</code> 方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ExtensionContainer getExtensions();</div></pre></td></tr></table></figure>
<p>它的返回者是一个 <code>ExtensionContainer</code> 对象。<br>通过 <code>ExtensionContainer</code> 我们可以向目标对象添加DSL扩展，通过 <code>ExtensionContainer</code> 的 <code>create()</code> 方法来创建新的 DSL 域，并与一个对应的委托类关联起来（即新建一个 DSL 域，并委托给一个具体类），通过它来跟踪传递给插件的所有设置和属性。</p>
<p>首先实现一个扩展类：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">class MyExtension &#123;</div><div class="line">    String message</div><div class="line">    Boolean isDebug</div><div class="line">    </div><div class="line">    String getMessage() &#123;</div><div class="line">        return message</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    void setMessage(String message) &#123;</div><div class="line">        println &quot;set message = &quot;+message</div><div class="line">        this.message = message</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后在插件中的 <code>apply</code> 方法中通过 <code>project.extensions.create()</code> 创建DSL扩展：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class MyFirstPlugin implements Plugin&lt;Project&gt;&#123;</div><div class="line">    @Override</div><div class="line">    void apply(Project project) &#123;</div><div class="line">        // 创建一个扩展属性 myExtension，使用 MyExtension 进行管理外部属性配置</div><div class="line">        project.extensions.create(&apos;myExtension&apos;, MyExtension.class)</div><div class="line">        // 实现一个名称为myPlugin的task</div><div class="line">        project.task(&apos;myPlugin&apos;) &lt;&lt; &#123;</div><div class="line">            println project.myExtension.message</div><div class="line">            println project.myExtension.isDebug</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 build.gradle 中通过引入插件后就可以配置了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">apply plugin: com.android.hq.myfirstplugin.MyFirstPlugin</div><div class="line"></div><div class="line">myExtension &#123;</div><div class="line">    message &quot;Hello Plugin&quot;</div><div class="line">    isDebug true</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行 myPlugin task 后可以通过打印看到配置中的输入。</p>
<h3 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h3><p>我们先来看一下 <code>create</code> 方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;T&gt; T create(String var1, Class&lt;T&gt; var2, Object... var3);</div></pre></td></tr></table></figure>
<p>第一个参数是在 build.gradle 中可以配置的代码块的方法名称；<br>第二个参数是关联的扩展实体类的名称<br>后面的参数表示传递给实体类构造函数的参数</p>
<p>比如想把 <code>apply</code> 方法的 <code>project</code> 参数传递进来，就需要这样引用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">project.extensions.create(&apos;myExtension&apos;, MyExtension.class, project)</div></pre></td></tr></table></figure>
<p>那么对应 <code>MyExtension</code> 类要加一个带 <code>Project</code> 类的构造函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class MyExtension &#123;</div><div class="line">    String message</div><div class="line">    Boolean isDebug</div><div class="line">    public MyExtension(Project project) &#123;</div><div class="line">    &#125;</div><div class="line">    String getMessage() &#123;</div><div class="line">        return message</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    void setMessage(String message) &#123;</div><div class="line">        println &quot;set message = &quot;+message</div><div class="line">        this.message = message</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="ExtensionContainer-实现子-Script-blocks-配置"><a href="#ExtensionContainer-实现子-Script-blocks-配置" class="headerlink" title="ExtensionContainer 实现子  Script blocks 配置"></a>ExtensionContainer 实现子  Script blocks 配置</h3><p>在使用配置 gradle 中我们一定使用过这样的配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    compileSdkVersion 23</div><div class="line">    buildToolsVersion &quot;23.0.1&quot;</div><div class="line">    defaultConfig &#123;</div><div class="line">        applicationId &quot;com.example.heqiang.testsomething&quot;</div><div class="line">        minSdkVersion 23</div><div class="line">        targetSdkVersion 23</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 <code>android</code> 代码块中还可以进行 <code>defaultConfig</code> 代码块的配置，那么在自定义 Plugin 中这个配置方法也是可以实现的，也是要借助 <code>ExtensionContainer</code> 的 <code>create()</code> 方法来实现新的 DSL 域的创建。<br>比如在上面的例子中我们想在 <code>myExtension</code> 域中创建一个 <code>defaultConfig</code> 配置方法，那么可以在 <code>MyExtension</code> 中通过下面的代码来实现：<br>实现一个 <code>DefaultConfig</code> 类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class DefaultConfig &#123;</div><div class="line">    String applicationId</div><div class="line">    int minSdkVersion</div><div class="line">    int targetSdkVersion</div><div class="line">    public DefaultConfig(String name) &#123;</div><div class="line">        println &quot;name = &quot; + name</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在 <code>MyExtension</code> 中添加映射关系：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">class MyExtension &#123;</div><div class="line">    String message</div><div class="line">    Boolean isDebug</div><div class="line"></div><div class="line">    public MyExtension() &#123;</div><div class="line">        this.extensions.create(&quot;defaultConfig&quot;, DefaultConfig, &quot;defaultConfig&quot;)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    String getMessage() &#123;</div><div class="line">        return message</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    void setMessage(String message) &#123;</div><div class="line">        println &quot;set message = &quot;+message</div><div class="line">        this.message = message</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class MyFirstPlugin implements Plugin&lt;Project&gt;&#123;</div><div class="line">    @Override</div><div class="line">    void apply(Project project) &#123;</div><div class="line">        project.extensions.create(&apos;myExtension&apos;, MyExtension.class)</div><div class="line">        // 实现一个名称为myPlugin的task</div><div class="line">        project.task(&apos;myPlugin&apos;) &lt;&lt; &#123;</div><div class="line">            println project.myExtension.message</div><div class="line">            println project.myExtension.isDebug</div><div class="line">            println project.myExtension.defaultConfig.applicationId</div><div class="line">            println project.myExtension.defaultConfig.minSdkVersion</div><div class="line">            println project.myExtension.defaultConfig.targetSdkVersion</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>配置代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">myExtension &#123;</div><div class="line">    message &quot;Hello Plugin&quot;</div><div class="line">    isDebug true</div><div class="line"></div><div class="line">    defaultConfig &#123;</div><div class="line">        applicationId &quot;com.android.hq.test&quot;</div><div class="line">        minSdkVersion 23</div><div class="line">        targetSdkVersion 23</div><div class="line">        </div><div class="line">        println &quot;print in defaultConfig&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="ObjectFactory-实现子-Script-blocks-配置扩展"><a href="#ObjectFactory-实现子-Script-blocks-配置扩展" class="headerlink" title="ObjectFactory 实现子  Script blocks 配置扩展"></a>ObjectFactory 实现子  Script blocks 配置扩展</h3><p>从 Gradle 4.2 开始，提供了 ObjectFactory 类，使用它也可以实现嵌套 DSL 扩展。<br>参考 <a href="https://docs.gradle.org/4.2/userguide/custom_plugins.html" target="_blank" rel="external">Gradle 官方文档：4.2 Writing Custom Plugins</a></p>
<p>插件代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class TestPlugin implements Plugin&lt;Project&gt;&#123;</div><div class="line">    @Override</div><div class="line">    void apply(Project project) &#123;</div><div class="line">        // 通过参数传递把 ObjectFactory 传递给构造函数</div><div class="line">        project.extensions.create(&apos;myExtension&apos;, MyExtension.class, project.objects)</div><div class="line">        // 实现一个名称为testPlugin的task，设置分组为 myPlugin，并设置描述信息</div><div class="line">        project.task(&apos;testPlugin&apos;, group: &quot;myPlugin&quot;, description: &quot;This is my test plugin&quot;) &lt;&lt; &#123;</div><div class="line">            println &quot;**## Test This is my first gradle plugin in testPlugin task **&quot;</div><div class="line"></div><div class="line">            println project.myExtension.message</div><div class="line">            println project.myExtension.isDebug</div><div class="line"></div><div class="line">            println project.myExtension.defaultConfig.applicationId</div><div class="line">            println project.myExtension.defaultConfig.minSdkVersion</div><div class="line">            println project.myExtension.defaultConfig.targetSdkVersion</div><div class="line"></div><div class="line">            //println project.myExtension.buildConfigs.size()</div><div class="line">        &#125;</div><div class="line">        println &quot;** Test This is my first gradle plugin **&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class MyExtension &#123;</div><div class="line">    String message</div><div class="line">    Boolean isDebug</div><div class="line">    final DefaultConfig defaultConfig</div><div class="line"></div><div class="line">    @javax.inject.Inject</div><div class="line">    public MyExtension(ObjectFactory objectFactory) &#123;</div><div class="line">        // 创建一个 DefaultConfig 对象</div><div class="line">        defaultConfig = objectFactory.newInstance(DefaultConfig)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 必须要实现 defaultConfig 方法</div><div class="line">    void defaultConfig(Action&lt;? super DefaultConfig&gt; action) &#123;</div><div class="line">        action.execute(defaultConfig)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    String getMessage() &#123;</div><div class="line">        return message</div><div class="line">    &#125;</div><div class="line">    void setMessage(String message) &#123;</div><div class="line">        println &quot;set message = &quot;+message</div><div class="line">        this.message = message</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public class DefaultConfig &#123;</div><div class="line">    String applicationId</div><div class="line">    int minSdkVersion</div><div class="line">    int targetSdkVersion</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="容器扩展"><a href="#容器扩展" class="headerlink" title="容器扩展"></a>容器扩展</h2><p>在进行 Android 配置时，我们一定用过 <code>buildTypes</code> 的配置，类似：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">buildTypes &#123;</div><div class="line">    release &#123;</div><div class="line">        minifyEnabled true</div><div class="line">        proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</div><div class="line">    &#125;</div><div class="line">    debug &#123;</div><div class="line">        minifyEnabled false</div><div class="line">        proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种类型可以用于在代码块中创建新的指定类型的对象。<br>先来看一下源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public void buildTypes(Action&lt;? super NamedDomainObjectContainer&lt;BuildType&gt;&gt; action) &#123;</div><div class="line">    this.checkWritability();</div><div class="line">    action.execute(this.buildTypes);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>它传入的是一个 <code>BuildType</code> 类型列表的闭包代码。<br><code>NamedDomainObjectContainer</code> 是一个容器，追根溯源它是继承自 <code>Collection&lt;T&gt;</code>。<br>我们这里叫它命名对象容器，可以用于在 builds cript 中创建对象,创建的对象必须要有 name 属性作为容器内元素的标识。<br>怎么来得到这样的容器对象呢？我们来看一下 <code>Project</code> 的 <code>container</code> 方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;T&gt; NamedDomainObjectContainer&lt;T&gt; container(Class&lt;T&gt; var1);</div><div class="line">&lt;T&gt; NamedDomainObjectContainer&lt;T&gt; container(Class&lt;T&gt; var1, NamedDomainObjectFactory&lt;T&gt; var2);</div><div class="line">&lt;T&gt; NamedDomainObjectContainer&lt;T&gt; container(Class&lt;T&gt; var1, Closure var2);</div></pre></td></tr></table></figure>
<p>下面通过实例来介绍一下。</p>
<h3 id="实例介绍"><a href="#实例介绍" class="headerlink" title="实例介绍"></a>实例介绍</h3><p>首先创建一个 <code>BuildConfig</code> 类，上面说了，这个类必须有个 <code>name</code> 属性：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class BuildConfig &#123;</div><div class="line">    final String name</div><div class="line">    public boolean debugMode</div><div class="line">    String applicationId</div><div class="line"></div><div class="line">    BuildConfig(String name) &#123;</div><div class="line">        this.name = name</div><div class="line">        println &quot;BuildConfig name = &quot;+name</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    void debugMode(boolean isDebug) &#123;</div><div class="line">        this.debugMode = isDebug</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后创建一个容器并将容器添加为 extension：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 注意这里要为构造函数增加 project 参数，看上面的参数传递一节</div><div class="line">public MyExtension(Project project) &#123;</div><div class="line">    this.extensions.create(&quot;defaultConfig&quot;, DefaultConfig, &quot;defaultConfig&quot;)</div><div class="line"></div><div class="line">    // 创建一个容器</div><div class="line">    NamedDomainObjectContainer&lt;BuildConfig&gt; buildConfigs = project.container(BuildConfig)</div><div class="line">    // 将容器添加为 extension</div><div class="line">    this.extensions.add(&quot;buildConfigs&quot;, buildConfigs)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">myExtension &#123;</div><div class="line">    message &quot;Hello Plugin&quot;</div><div class="line">    isDebug true</div><div class="line"></div><div class="line">    defaultConfig &#123;</div><div class="line">        applicationId &quot;com.android.hq.test&quot;</div><div class="line">        minSdkVersion 23</div><div class="line">        targetSdkVersion 23</div><div class="line"></div><div class="line">        println &quot;print in defaultConfig&quot;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    buildConfigs &#123;</div><div class="line">        debug &#123;</div><div class="line">            debugMode true</div><div class="line">            applicationId = &quot;com.android.hq.test&quot;</div><div class="line">        &#125;</div><div class="line">        release &#123;</div><div class="line">            debugMode = false</div><div class="line">            applicationId = &quot;com.android.hq.test&quot;</div><div class="line">        &#125;</div><div class="line">        demo &#123;</div><div class="line">            debugMode = true</div><div class="line">            applicationId = &quot;com.android.hq.test&quot;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意上面的扩展属性赋值，因为我们实现了 <code>debugMode(boolean isDebug)</code> 方法，所以 debugMode 加不加 <code>=</code> 号都是可以的，但是 applicationId 赋值时必须要用 <code>=</code> 号，否则会报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Could not find method applicationId() for arguments [com.android.hq.test] on object of type com.android.hq.testplugin.TestPlugin$BuildConfig.</div></pre></td></tr></table></figure></p>
<!--  
http://www.yiibai.com/gradle/gradle_plugins.html
https://www.jianshu.com/p/3c59eded8155
http://wiki.jikexueyuan.com/project/deep-android-gradle/four-four.html
https://blog.csdn.net/CmdMac/article/details/80509994
-->
]]></content>
    
    <summary type="html">
    
      介绍如何在 Android Studio 中自定义 Gradle 插件
    
    </summary>
    
      <category term="Gradle" scheme="http://yoursite.com/categories/Gradle/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Gradle" scheme="http://yoursite.com/tags/Gradle/"/>
    
      <category term="Android Studio" scheme="http://yoursite.com/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>Gradle 使用指南 -- Plugin 的使用和创建</title>
    <link href="http://yoursite.com/2016/04/15/development-tool-gradle-customized-plugin/"/>
    <id>http://yoursite.com/2016/04/15/development-tool-gradle-customized-plugin/</id>
    <published>2016-04-15T02:00:00.000Z</published>
    <updated>2019-02-27T01:08:02.963Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://docs.gradle.org/current/userguide/plugins.html" target="_blank" rel="external">官方文档：Using Gradle Plugins</a><br><a href="https://docs.gradle.org/current/userguide/custom_plugins.html" target="_blank" rel="external">官方文档：Writing Custom Plugins</a></p>
<h2 id="插件的类型"><a href="#插件的类型" class="headerlink" title="插件的类型"></a>插件的类型</h2><p>插件可以分为下两种：</p>
<ul>
<li>脚本插件：脚本插件是额外的构建脚本，进一步配置构建，常常用于声明一些操作构建的方法，它们通常在构建内部使用。</li>
<li>二进制插件：二进制插件是实现了Plugin的类，并且通过编程方式来操作构建，二进制插件可以在构建脚本中，也可以在buildSrc中，也可以以jar的方式导入。</li>
</ul>
<h2 id="插件的使用"><a href="#插件的使用" class="headerlink" title="插件的使用"></a>插件的使用</h2><p>先来介绍一下插件的使用，可以分为两步骤：</p>
<ul>
<li>解析插件：找到给定的包含插件的 jar 的正确版本，并把它添加到脚本的 classpath 中。一旦插件被解析，它的 API 就能在构建脚本中使用，脚本可以用文件路径或者 url 进行解析。脚本插件是可以自动解析的，它可以是相对于项目目录的本地路径，也可以是个http的远程路径。比如：<code>apply from: &#39;other.gradle&#39;</code>。二进制插件是需要应用插件id或者jar包路径来自动解析。比如 <code>classpath &#39;com.android.hq.testplugin:testplugin:1.0.0&#39;</code>,<code>classpath files(&quot;../../TestGradlePlugin/app/build/libs/app-1.0.0.jar&quot;)</code></li>
<li>应用插件：应用插件其实就是在需要应用插件的项目上执行 <code>Plugin.apply()</code> 方法。比如：<code>apply plugin: &#39;com.android.application&#39;</code>。</li>
</ul>
<h3 id="引用插件的两种方式："><a href="#引用插件的两种方式：" class="headerlink" title="引用插件的两种方式："></a>引用插件的两种方式：</h3><p>第一种方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">  repositories &#123;</div><div class="line">    maven &#123;</div><div class="line">      url &quot;https://plugins.gradle.org/m2/&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  dependencies &#123;</div><div class="line">    classpath &quot;org.hidetake:gradle-ssh-plugin:2.9.0&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">apply plugin: &quot;org.hidetake.ssh&quot;</div></pre></td></tr></table></figure>
<p>上面这个是 2.0及以前版本的用法。</p>
<p>第二种方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">plugins &#123;</div><div class="line">  id &apos;org.hidetake.ssh&apos; version &apos;2.9.0&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是 gradle 2.1 及以上最新版本的语法。<br>plugins{} 块提供了下面的语法约束：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">plugins &#123;</div><div class="line">    id «plugin id»                                            // (1)</div><div class="line">    id «plugin id» version «plugin version» [apply «false»]   // (2)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>«plugin version»和«plugin id»必须是常量，文字或字符串，apply则必须是bool类型（可以用于快速禁用插件）。<br>plugins {}目前仅仅可以使用在构建脚本中，而不能使用在脚本插件，settings.gradle和初始化脚本。</p>
<h3 id="插件的配置"><a href="#插件的配置" class="headerlink" title="插件的配置"></a>插件的配置</h3><p>插件引入到工程之后，我们就可以执行在插件中定义的各种 Task 了，我们可以通过 <code>./gradlew tasks --all</code> 来查看可以执行的所有 Task。另外，我们还可以在 build.gradle 中对插件进行配置，其实这一部分我们是经常使用到的，比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    compileSdkVersion 26</div><div class="line">    defaultConfig &#123;</div><div class="line">        applicationId &quot;com.example.hq.myapplication&quot;</div><div class="line">        minSdkVersion 21</div><div class="line">        targetSdkVersion 26</div><div class="line">        versionCode 1</div><div class="line">        versionName &quot;1.0&quot;</div><div class="line">        testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;</div><div class="line">    &#125;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            minifyEnabled false</div><div class="line">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码就是对 android 插件进行的各种配置。</p>
<h3 id="把插件应用到子工程中"><a href="#把插件应用到子工程中" class="headerlink" title="把插件应用到子工程中"></a>把插件应用到子工程中</h3><p>在多项目构建中，你可能想吧插件应用到一部分或者所有的子项目，而不是根项目，plugins {}默认的行为是快速解析和应用插件，但是你可以通过 apply false来告诉Gradle不要应用插件，然后通过apply plugin: «plugin id»应用到子项目中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">plugins &#123;</div><div class="line">    id &apos;org.gradle.sample.hello&apos; version &apos;1.0.0&apos; apply false</div><div class="line">    id &apos;org.gradle.sample.goodbye&apos; version &apos;1.0.0&apos; apply false</div><div class="line">&#125;</div><div class="line"></div><div class="line">subprojects &#123;</div><div class="line">    if (name.startsWith(&apos;hello&apos;)) &#123;</div><div class="line">        apply plugin: &apos;org.gradle.sample.hello&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="自定义插件库"><a href="#自定义插件库" class="headerlink" title="自定义插件库"></a>自定义插件库</h2><p>默认情况下，plugins {}DSL将会从Gradle插件官网下载插件，但很多构建者想从自己的私有Maven仓库下载Gradle插件，因为可能需要私有的实现细节，而且可以更好的控制插件的可用性。</p>
<p>为了指定自定义的插件资源库，需要在settings.gradle中使用pluginManagement {}下嵌套的repositories {}块</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">pluginManagement &#123;</div><div class="line">    repositories &#123;</div><div class="line">        maven &#123;</div><div class="line">            // 本地</div><div class="line">            url &apos;../maven-repo&apos;</div><div class="line">            // 远程</div><div class="line">            // uri &apos;http://127.0.0.1:8081/maven-repo/&apos;</div><div class="line">        &#125;</div><div class="line">        gradlePluginPortal()</div><div class="line">        ivy &#123;</div><div class="line">            url &apos;../ivy-repo&apos;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这会告诉Gradle首先在 <code>../maven-repo</code> 资源库中查找，如果没有找到然后才会寻找官方的插件资源库，如果你不想寻找官方资源库，可以去掉gradlePluginPortal()。</p>
<h2 id="插件的创建"><a href="#插件的创建" class="headerlink" title="插件的创建"></a>插件的创建</h2><p>创建插件一般我们是通过实现 Plugin 接口来实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface Plugin&lt;T&gt; &#123;</div><div class="line">    void apply(T var1);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它有个apply方法，这个方法是在插件的配置阶段执行的方法，也即是说当我们引入插件时，这个方法就执行。<br>比如当我们通过 <code>apply plugin: &#39;com.android.application&#39;</code> 引入 android 插件时，对应的 apply 方法就会执行了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">class CustomExtension &#123;</div><div class="line">    String msg</div><div class="line">&#125;</div><div class="line"></div><div class="line">class CustomPlugin implements Plugin&lt;Project&gt;&#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    void apply(Project target) &#123;</div><div class="line">        // 创建一个扩展属性 myExtension，使用 CustomExtension 进行管理外部属性配置</div><div class="line">        target.extensions.create(&quot;myExtension&quot;, CustomExtension)</div><div class="line"></div><div class="line">        // 实现一个名称为testPluginTask1的task，设置分组为 myPlugin，并设置描述信息</div><div class="line">        target.task(&apos;testPluginTask1&apos;, group: &quot;myPlugin&quot;, description: &quot;This is my test plugin&quot;) &lt;&lt; &#123;</div><div class="line">            println &quot;## This is my first gradle plugin in testPlugin task. msg = &quot;+target.myExtension.msg</div><div class="line">        &#125;</div><div class="line">        // 实现一个名称为testPluginTask2的task，设置分组为 myPlugin，并设置描述信息</div><div class="line">        target.task(&apos;testPluginTask2&apos;, group: &quot;myPlugin&quot;, description: &quot;This is my test plugin&quot;) &lt;&lt; &#123;</div><div class="line">            println &quot;## This is my first gradle plugin in testPlugin task. msg = &quot;+target.myExtension.msg</div><div class="line">        &#125;</div><div class="line">        println &quot;** This is my first gradle plugin. msg = &quot;+target.myExtension.msg</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">apply plugin: CustomPlugin</div><div class="line"></div><div class="line">myExtension &#123;</div><div class="line">    msg &quot;testMSG&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试 Task，运行 <code>./gradlew testPluginTask1</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; Configure project :app</div><div class="line">** This is my first gradle plugin. msg = null</div><div class="line"></div><div class="line">&gt; Task :app:testPluginTask1</div><div class="line">## This is my first gradle plugin in testPlugin task. msg = testMSG</div></pre></td></tr></table></figure>
<p>上面的配置阶段 msg 输出为 null，是因为调用 <code>apply plugin: CustomPlugin</code> 时还没有给 msg 赋值。<br>下面我们测试一下 apply 方法的执行时机：</p>
<figure class="highlight plain"><figcaption><span>"before apply CustomPlugin"</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apply plugin: CustomPlugin</div><div class="line">println &quot;after apply CustomPlugin&quot;</div></pre></td></tr></table></figure>
<p>运行 <code>./gradlew testPluginTask1</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt; Configure project :app</div><div class="line">before apply CustomPlugin</div><div class="line">** This is my first gradle plugin. msg = null</div><div class="line">after apply CustomPlugin</div><div class="line"></div><div class="line">&gt; Task :app:testPluginTask1</div><div class="line">## This is my first gradle plugin in testPlugin task. msg = testMSG</div></pre></td></tr></table></figure>
<p>可以看到 apply 方法确实是在 <code>apply plugin: CustomPlugin</code> 时调用的。</p>
<h2 id="创建插件的方式"><a href="#创建插件的方式" class="headerlink" title="创建插件的方式"></a>创建插件的方式</h2><p>Gradle 的插件可以有三种形式来提供：</p>
<ul>
<li>直接在build.gradle中编写 Plugin，这种方式这种方法写的Plugin无法被其他 build.gradle 文件引用。</li>
<li>单独的一个Module，这个Module的名称必须为buildSrc，同一个工程中所有的构建文件够可以引用这个插件，但是不能被其他工程引用。</li>
<li>在一个项目中自定义插件，然后上传到远端maven库等，其他工程通过添加依赖，引用这个插件。</li>
</ul>
<p>第一种方式在上面的插件的创建这一节中已经介绍了，本文接下来再对后面两种方式来进行简单介绍。</p>
<h2 id="在当前项目中创建插件"><a href="#在当前项目中创建插件" class="headerlink" title="在当前项目中创建插件"></a>在当前项目中创建插件</h2><p>最终的目录结构为：</p>
<p><img src="/images/development-tool-customized-gradle-plugin/gradle-plugin-module.png" alt="效果图"></p>
<h3 id="创建Plugin"><a href="#创建Plugin" class="headerlink" title="创建Plugin"></a>创建Plugin</h3><ol>
<li>创建一个 Module （Phone&amp;Tablet Module 或 Android Librarty 都可以），Module的名称必须为 buildSrc。</li>
<li>将Module里面的内容删除，只保留build.gradle文件和src/main目录。    </li>
<li>我们开发的 gradle 插件相当于一个 groovy 项目。所以需要在 main 目录下新建 groovy 目录。</li>
<li>然后创建一个 Java 文件一样的方式创建一个 groovy 文件，比如报名为 com.android.hq.testplugin 的 TestPlugin.groovy 文件。</li>
</ol>
<h3 id="修改build-gradle"><a href="#修改build-gradle" class="headerlink" title="修改build.gradle"></a>修改build.gradle</h3><p>因为我们要用到 groovy，以及要用到gradle和groovy的sdk，因此将 buildSrc 下面的 build.gradle 修改为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;groovy&apos;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    //gradle sdk</div><div class="line">    compile gradleApi()</div><div class="line">    //groovy sdk</div><div class="line">    compile localGroovy()</div><div class="line">&#125;</div><div class="line"></div><div class="line">repositories &#123;</div><div class="line">    jcenter()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>实现 <code>TestPlugin</code> 类，在脚本中通过实现gradle的Plugin接口，实现apply方法即可：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.android.hq.testplugin</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.gradle.api.Plugin</div><div class="line"><span class="keyword">import</span> org.gradle.api.Project;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPlugin</span> <span class="keyword">implements</span> <span class="title">Plugin</span>&lt;<span class="title">Project</span>&gt;</span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">apply</span><span class="params">(Project project)</span> </span>&#123;</div><div class="line">        <span class="comment">// 实现一个名称为testPlugin的task，设置分组为 myPlugin，并设置描述信息</span></div><div class="line">        project.task(<span class="string">'testPlugin'</span>, group: <span class="string">"myPlugin"</span>, description: <span class="string">"This is my test plugin"</span>) &lt;&lt; &#123;</div><div class="line">            println <span class="string">"## This is my first gradle plugin in testPlugin task"</span></div><div class="line">        &#125;</div><div class="line">        println <span class="string">"** This is my first gradle plugin"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里在简单实现了一个名称为testPlugin的 task，apply 方法会在配置阶段执行。<br>当执行该插件的 testPlugin taks 时，会打印 <code>## This is my first gradle plugin in testPlugin task</code>，而<code>** This is my first gradle plugin</code>则在配置阶段打印出来。因为在执行所有的task时都会进行执行配置阶段，那么这个打印在执行任何一个 task 时都会打印。</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>使用方式比较简单，在 app 的 build.gradle 中添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply plugin: com.android.hq.testplugin.TestPlugin</div></pre></td></tr></table></figure>
<p>即可。</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ol>
<li><p>在 Gradle 的 task 视窗里面: app/myplugin 下多了一个 testPlugin 的 task。</p>
</li>
<li><p>输入 <code>./gradlew tasks</code>，我们可以看到 testPlugin 已经在task列表中。</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">:tasks</div><div class="line"></div><div class="line">------------------------------------------------------------</div><div class="line">All tasks runnable from root project</div><div class="line">------------------------------------------------------------</div><div class="line"></div><div class="line">Android tasks</div><div class="line">-------------</div><div class="line">androidDependencies - Displays the Android dependencies of the project.</div><div class="line">signingReport - Displays the signing info for each variant.</div><div class="line">sourceSets - Prints out all the source sets defined in this project.</div><div class="line"></div><div class="line">Build tasks</div><div class="line">-----------</div><div class="line">assemble - Assembles all variants of all applications and secondary packages.</div><div class="line">assembleAndroidTest - Assembles all the Test applications.</div><div class="line">assembleDebug - Assembles all Debug builds.</div><div class="line">assembleRelease - Assembles all Release builds.</div><div class="line">build - Assembles and tests this project.</div><div class="line"></div><div class="line">......</div><div class="line"></div><div class="line">MyPlugin tasks</div><div class="line">--------------</div><div class="line">testPlugin - This is my test plugin</div></pre></td></tr></table></figure>
<p>执行 testPlugin task，输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">$ ./gradlew testPlugin</div><div class="line"></div><div class="line">:buildSrc:compileJava UP-TO-DATE</div><div class="line">:buildSrc:compileGroovy UP-TO-DATE</div><div class="line">:buildSrc:processResources UP-TO-DATE</div><div class="line">:buildSrc:classes UP-TO-DATE</div><div class="line">:buildSrc:jar UP-TO-DATE</div><div class="line">:buildSrc:assemble UP-TO-DATE</div><div class="line">:buildSrc:compileTestJava UP-TO-DATE</div><div class="line">:buildSrc:compileTestGroovy UP-TO-DATE</div><div class="line">:buildSrc:processTestResources UP-TO-DATE</div><div class="line">:buildSrc:testClasses UP-TO-DATE</div><div class="line">:buildSrc:test UP-TO-DATE</div><div class="line">:buildSrc:check UP-TO-DATE</div><div class="line">:buildSrc:build UP-TO-DATE</div><div class="line">** This is my first gradle plugin</div><div class="line">** build versionName=2.1.0</div><div class="line">:app:testPlugin</div><div class="line">## This is my first gradle plugin in testPlugin task</div><div class="line"></div><div class="line">BUILD SUCCESSFUL</div><div class="line"></div><div class="line">Total time: 5.358 secs</div></pre></td></tr></table></figure>
<p>可以看到，<code>** This is my first gradle plugin</code>和<code>## This is my first gradle plugin in testPlugin task</code>都会打印出来。<br>执行 assembleDebug task，输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">$ ./gradlew assembleDebug</div><div class="line"></div><div class="line">:buildSrc:compileJava UP-TO-DATE</div><div class="line">:buildSrc:compileGroovy UP-TO-DATE</div><div class="line">:buildSrc:processResources UP-TO-DATE</div><div class="line">:buildSrc:classes UP-TO-DATE</div><div class="line">:buildSrc:jar UP-TO-DATE</div><div class="line">:buildSrc:assemble UP-TO-DATE</div><div class="line">:buildSrc:compileTestJava UP-TO-DATE</div><div class="line">:buildSrc:compileTestGroovy UP-TO-DATE</div><div class="line">:buildSrc:processTestResources UP-TO-DATE</div><div class="line">:buildSrc:testClasses UP-TO-DATE</div><div class="line">:buildSrc:test UP-TO-DATE</div><div class="line">:buildSrc:check UP-TO-DATE</div><div class="line">:buildSrc:build UP-TO-DATE</div><div class="line">** This is my first gradle plugin</div><div class="line">** build versionName=2.1.0</div><div class="line">:app:preBuild UP-TO-DATE</div><div class="line">:app:preDebugBuild UP-TO-DATE</div><div class="line"></div><div class="line">......</div><div class="line"></div><div class="line">:app:assembleDebug UP-TO-DATE</div><div class="line"></div><div class="line">BUILD SUCCESSFUL</div><div class="line"></div><div class="line">Total time: 4.925 secs</div></pre></td></tr></table></figure>
<p>可以看到，只有 <code>** This is my first gradle plugin</code> 输出。</p>
<h2 id="独立的插件项目（发布的本地或者远程仓库）"><a href="#独立的插件项目（发布的本地或者远程仓库）" class="headerlink" title="独立的插件项目（发布的本地或者远程仓库）"></a>独立的插件项目（发布的本地或者远程仓库）</h2><p>这种类型的插件可以在本地独立引用，也可以上传到远端 maven 库等，其他工程通过添加依赖，引用这个插件。<br>实质是二进制插件被发布成外部的 jar 文件，然后通过将其增加到构建脚本的 classpath 中来进一步应用插件。<br>创建步骤和前面的在当前项目中创建插件的步骤有些是类似的。</p>
<h3 id="创建Plugin-1"><a href="#创建Plugin-1" class="headerlink" title="创建Plugin"></a>创建Plugin</h3><p>这里的步骤除了3,4,5和前的一样，其他的都是不一样的。 </p>
<ol>
<li>创建一个新的 Project。</li>
<li>同样创建一个 Module （Phone&amp;Tablet Module 或 Android Librarty 都可以），Module的名称随意。</li>
<li>将Module里面的内容删除，只保留build.gradle文件和src/main目录。</li>
<li>我们开发的 gradle 插件相当于一个groovy项目。所以需要在main目录下新建groovy目录。</li>
<li>然后创建一个 Java 文件一样的方式创建一个 groovy文件，比如报名为 com.android.hq.testplugin 的 TestPlugin.groovy 文件。</li>
<li><p>现在，我们已经定义好了自己的 gradle 插件类，接下来就是告诉 gradle，哪一个是我们自定义的插件类，因此，需要在 main 目录下新建 resources 目录，然后在 resources 目录里面再新建 META-INF 目录，再在 META-INF 里面新建 gradle-plugins 目录。最后在 gradle-plugins 目录里面新建 properties 文件，注意这个文件的命名，你可以随意取名，但是后面使用这个插件的时候，会用到这个名字。比如，你取名为com.android.hq.testplugin.properties，而在其他 build.gradle 文件中使用自定义的插件时候则需写成：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;com.android.hq.testplugin&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>然后在com.android.hq.testplugin.properties文件里面指明你自定义的类：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">implementation-class=com.android.hq.testplugin.TestPlugin</div></pre></td></tr></table></figure>
</li>
<li><p>修改build.gradle<br>因为我们要用到 groovy 以及后面打包要用到 maven ,所以在我们自定义的 Module 下的 build.gradle 需要添加如下代码：</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;groovy&apos;</div><div class="line">apply plugin: &apos;maven&apos;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    //gradle sdk</div><div class="line">    compile gradleApi()</div><div class="line">    //groovy sdk</div><div class="line">    compile localGroovy()</div><div class="line">&#125;</div><div class="line"></div><div class="line">repositories &#123;</div><div class="line">    mavenCentral()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><p>实现 <code>TestPlugin</code> 类，这一步和前面的一样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.android.hq.testplugin</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.gradle.api.Plugin</div><div class="line"><span class="keyword">import</span> org.gradle.api.Project;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPlugin</span> <span class="keyword">implements</span> <span class="title">Plugin</span>&lt;<span class="title">Project</span>&gt;</span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">apply</span><span class="params">(Project project)</span> </span>&#123;</div><div class="line">        <span class="comment">// 实现一个名称为testPlugin的task，设置分组为 myPlugin，并设置描述信息</span></div><div class="line">        project.task(<span class="string">'testPlugin'</span>, group: <span class="string">"myPlugin"</span>, description: <span class="string">"This is my test plugin"</span>) &lt;&lt; &#123;</div><div class="line">            println <span class="string">"## This is my first gradle plugin in testPlugin task"</span></div><div class="line">        &#125;</div><div class="line">        println <span class="string">"** This is my first gradle plugin"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p>前面我们已经自定义好了插件，接下来就是要打包到Maven库里面去了，你可以选择打包到本地，或者是远程服务器中。在我们自定义Module目录下的build.gradle添加如下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">//group和version在后面使用自定义插件的时候会用到</div><div class="line">group=&apos;com.android.hq.testplugin&apos;</div><div class="line">version=&apos;1.0.0&apos;</div><div class="line"></div><div class="line">uploadArchives &#123;</div><div class="line">    repositories &#123;</div><div class="line">        mavenDeployer &#123;</div><div class="line">            //提交到远程服务器：</div><div class="line">            //repository(url: &quot;http://www.xxx.com/repos&quot;) &#123;</div><div class="line">            //    authentication(userName: &quot;admin&quot;, password: &quot;admin&quot;)</div><div class="line">            //&#125;</div><div class="line">            //本地的Maven地址设置为/mnt/TestRepos/</div><div class="line">            repository(url: uri(&apos;/mnt/TestRepos/&apos;))</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在我们定义好了打包地址以及打包相关配置，还需要我们让这个打包 task 执行。点击 AndroidStudio 右侧的 gradle 工具，如下图所示：</p>
<p><img src="/images/development-tool-customized-gradle-plugin/gradle-plugin-upload-archives.png" alt="效果图"></p>
<p>可以看到有 uploadArchives 这个 Task,双击 uploadArchives 就会执行打包上传。执行完成后，去我们的 Maven 本地仓库查看一下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hq@EF-hq:/mnt/TestRepos/com/android/hq/testplugin/testplugin/1.0.0$ ls</div><div class="line">testplugin-1.0.0.jar  testplugin-1.0.0.jar.md5  testplugin-1.0.0.jar.sha1  testplugin-1.0.0.pom  testplugin-1.0.0.pom.md5  testplugin-1.0.0.pom.sha1</div></pre></td></tr></table></figure>
<p>其中，/com/android/hq/testplugin/ 这几层目录是由我们的 group 指定，testplugin 是模块的名称，1.0.0是版本号（version指定）。</p>
<h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><p>首先我们需要在使用的 Module 的build.gradle文件中里面指定Maven地址、自定义插件的名称以及依赖包名。<br>当然也可以直接引用 jar 包的方式，这种方式下面介绍。<br>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//com.android.hq.testplugin.TestPlugin为resources/META-INF/gradle-plugins 下的properties文件名称</div><div class="line">apply plugin: &apos;com.android.hq.testplugin&apos;</div><div class="line"></div><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        maven &#123;</div><div class="line">            //本地Maven仓库地址</div><div class="line">            url uri(&apos;/mnt/TestRepos/&apos;)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        //格式为--&gt;group:module:version</div><div class="line">        classpath &apos;com.android.hq.testplugin:testplugin:1.0.0&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后就可以测试使用情况了。</p>
<h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>和前面的方法一样，不再详述。</p>
<h2 id="独立的插件项目2（生成jar包直接引用）"><a href="#独立的插件项目2（生成jar包直接引用）" class="headerlink" title="独立的插件项目2（生成jar包直接引用）"></a>独立的插件项目2（生成jar包直接引用）</h2><p>上面介绍的独立插件项目的做法有点繁琐，要建各种文件，还要上传本地仓库或者远程仓库，下面再介绍一个方法，直接生成插件 jar 包后，然后通过将其增加到需要使用的工程中的构建脚本的 classpath 中来直接引用插件。</p>
<h3 id="创建Plugin-2"><a href="#创建Plugin-2" class="headerlink" title="创建Plugin"></a>创建Plugin</h3><ul>
<li>创建一个新的 Project。</li>
<li>删除app模块（这个模块名可以随意定）的 src/main 下面的所有文件，创建 groovy 目录。</li>
<li>在 groovy 目录下面创建 com/android/hq/testplugin 目录</li>
<li>在 com/android/hq/testplugin 目录下面创建 TestPlugin.groovy 文件。</li>
</ul>
<h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><p>实现 TestPlugin 类，这一步和前面的一样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">package com.android.hq.testplugin</div><div class="line">import org.gradle.api.Plugin</div><div class="line">import org.gradle.api.Project;</div><div class="line">public class TestPlugin implements Plugin&lt;Project&gt;&#123;</div><div class="line">    @Override</div><div class="line">    void apply(Project project) &#123;</div><div class="line">        // 实现一个名称为testPlugin的task，设置分组为 myPlugin，并设置描述信息</div><div class="line">        project.task(&apos;testPlugin&apos;, group: &quot;myPlugin&quot;, description: &quot;This is my test plugin&quot;) &lt;&lt; &#123;</div><div class="line">            println &quot;** Test This is my first gradle plugin in testPlugin task **&quot;</div><div class="line">        &#125;</div><div class="line">        println &quot;** Test This is my first gradle plugin **&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="打包-1"><a href="#打包-1" class="headerlink" title="打包"></a>打包</h3><p>打包前先实现 app 模块的 build.gradle 文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">// 引用插件</div><div class="line">plugins &#123;</div><div class="line">    // 用来生成plugin的插件，gradlePlugin 方法</div><div class="line">    id &quot;java-gradle-plugin&quot;</div><div class="line">    // 用来发布plugin的插件，publishing 方法</div><div class="line">    id &apos;maven-publish&apos;</div><div class="line">    id &quot;groovy&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//group和version在后面使用自定义插件的时候会用到</div><div class="line">group=&apos;com.android.hq.testplugin&apos;</div><div class="line">version=&apos;1.0.0&apos;</div><div class="line">gradlePlugin &#123;</div><div class="line">    plugins &#123;</div><div class="line">        hello &#123;</div><div class="line">            id = &apos;com.android.hq.testplugin.test&apos;</div><div class="line">            implementationClass = &apos;com.android.hq.testplugin.TestPlugin&apos;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">publishing &#123;</div><div class="line">    repositories &#123;</div><div class="line">        maven &#123;</div><div class="line">            url &apos;../maven-repo&apos;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后运行命令发布，也可以只编译生成 jar 包。<br>在当前工程下运行 <code>./gradlew publish</code>，会在 <code>app/build/libs/</code> 目录下面生成 app-1.0.0.jar 文件。还会在对应的 maven-repo 目录下面生成资源库。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># ls maven-repo/com/android/hq/testplugin/app/</div><div class="line">1.0.0                   maven-metadata.xml      maven-metadata.xml.md5  maven-metadata.xml.sha1</div><div class="line"># ls maven-repo/com/android/hq/testplugin/app/1.0.0/</div><div class="line">app-1.0.0.jar      app-1.0.0.jar.md5  app-1.0.0.jar.sha1 app-1.0.0.pom      app-1.0.0.pom.md5  app-1.0.0.pom.sha1</div></pre></td></tr></table></figure>
<p>如果只运行 <code>./gradlew build</code>，只会在 <code>app/build/libs/</code> 目录下面生成 app-1.0.0.jar 文件。这个文件就是插件包。</p>
<h3 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h3><p>这里只介绍引用jar包的方法，当然也可以通过上面的指定本地或者远程仓库地址然后通过应用插件id的方式引用。<br>在其他工程的中使用该插件，需要在使用的模块的 build.gradle 文件中添加下面的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// 引用插件</div><div class="line">apply plugin: &apos;com.android.hq.testplugin.test&apos;</div><div class="line"></div><div class="line">// 添加插件的依赖路径</div><div class="line">buildscript &#123;</div><div class="line">    dependencies &#123;</div><div class="line">        // 这里直接使用了上面插件工程中生成 jar 包的路径，</div><div class="line">        // 当然可以把jar包copy到你喜欢的路径然后在此指定就可以了</div><div class="line">        classpath files(&quot;../../TestGradlePlugin/app/build/libs/app-1.0.0.jar&quot;)</div><div class="line">        // NOTE: Do not place your application dependencies here; they belong</div><div class="line">        // in the individual module build.gradle files</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><p>在测试工程下面运行 <code>./gradlew tasks</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">MyPlugin tasks</div><div class="line">--------------</div><div class="line">testPlugin - This is my test plugin</div></pre></td></tr></table></figure>
<p>已经多了 testPlugin 这个 task。<br>执行该 task，<code>./gradlew testPlugin</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt; Configure project :app</div><div class="line">The Task.leftShift(Closure) method has been deprecated and is scheduled to be removed in Gradle 5.0. Please use Task.doLast(Action) instead.</div><div class="line">        at build_f32z80bmob9ip5197i06gw0om.run(/home/heqiang/android-studio-workspace/TestPlugin/app/build.gradle:3)</div><div class="line">** Test This is my first gradle plugin **</div><div class="line"></div><div class="line">&gt; Task :app:testPlugin</div><div class="line">** Test This is my first gradle plugin in testPlugin task **</div></pre></td></tr></table></figure>
<p>输出了我们的测试代码。</p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>上面介绍的两种独立的插件项目的使用，其中打包和使用两个步骤并不是严格的一一对照关系，它们是可以交叉使用的，任何一种打包出来的jar包都可以使用介绍的两种引用方法。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.gradle.org/current/userguide/plugins.html" target="_blank" rel="external">https://docs.gradle.org/current/userguide/plugins.html</a><br><a href="https://docs.gradle.org/current/userguide/custom_plugins.html" target="_blank" rel="external">https://docs.gradle.org/current/userguide/custom_plugins.html</a><br><a href="http://www.jianshu.com/p/d53399cd507b" target="_blank" rel="external">http://www.jianshu.com/p/d53399cd507b</a><br><a href="https://blog.csdn.net/lastsweetop/article/details/79643576" target="_blank" rel="external">https://blog.csdn.net/lastsweetop/article/details/79643576</a></p>
]]></content>
    
    <summary type="html">
    
      介绍如何在 Android Studio 中自定义 Gradle 插件
    
    </summary>
    
      <category term="Gradle" scheme="http://yoursite.com/categories/Gradle/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Gradle" scheme="http://yoursite.com/tags/Gradle/"/>
    
      <category term="Android Studio" scheme="http://yoursite.com/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>Gradle 使用指南 -- Gradle 生命周期</title>
    <link href="http://yoursite.com/2016/03/18/development-tool-gradle-lifecycle/"/>
    <id>http://yoursite.com/2016/03/18/development-tool-gradle-lifecycle/</id>
    <published>2016-03-18T02:00:00.000Z</published>
    <updated>2019-02-27T03:01:34.138Z</updated>
    
    <content type="html"><![CDATA[<h2 id="生命周期概述"><a href="#生命周期概述" class="headerlink" title="生命周期概述"></a>生命周期概述</h2><p>无论什么时候执行 Gradle 构建，都会运行三个不同的生命周期阶段：</p>
<ol>
<li>初始化阶段</li>
<li>配置阶段</li>
<li>执行阶段</li>
</ol>
<p>在<strong>初始化阶段</strong>，Gradle 根据 settings.gradle 文件的配置为项目创建了 Project 实例。在给定的构建脚本中只定义了一个项目。在多项目构建中，这个构建阶段变得更加重要。根据你正在执行的项目，Gradle 找出哪些项目需要参与到构建中。实质为执行 settings.gradle 脚本。注意，在这个阶段当前已有的构建脚本代码都不会被执行。<br>用户可以在 settings.gradle 文件中调用 Settings 类的各种方法配置项目，最常用的就是 include 方法，它可以将用户新建的module加入项目中。<br><a href="https://docs.gradle.org/current/dsl/org.gradle.api.initialization.Settings.html#org.gradle.api.initialization.Settings" target="_blank" rel="external">Gradle 官方文档：Settings 类</a></p>
<p>在<strong>配置阶段</strong>，Gradle 构造了一个模型来表示任务，并参与到构建中来。增量式构建特性决定来模型中的 task 是否需要运行。配置阶段完成后，整个 build 的 project 以及内部的 Task 关系就确定了。这个阶段非常适合于为项目或指定 task 设置所需的配置。配置阶段的实质为解析每个被加入构建项目的 build.gradle 脚本，比如通过 apply 方法引入插件，为插件扩展属性进行的配置等等。<br>注意，项目的每一次构建的任何配置代码都可以被执行–即使你只执行 <code>gradle tasks</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">bogon:TestPlugin heqiang$ ./gradlew testPluginTask1</div><div class="line"></div><div class="line">&gt; Configure project :app</div><div class="line">** Test This is my first gradle plugin **</div><div class="line">## hello</div><div class="line">before apply CustomPlugin</div><div class="line">** This is my first gradle plugin. msg = null</div><div class="line">after apply CustomPlugin</div><div class="line"></div><div class="line">&gt; Task :app:testPluginTask1</div><div class="line">## This is my first gradle plugin in testPlugin task. msg = testMSG</div></pre></td></tr></table></figure>
<p>比如这里是执行 task，但是仍然经历了配置阶段。</p>
<p>在<strong>执行阶段</strong>，所有的 task 都应该以正确的顺序被执行。执行顺序时由它们的依赖决定的。如果任务被认为没有被修改过，将被跳过。</p>
<p>Gradle 的增量式的构建特性紧紧地与生命周期相结合。<br>作为一个开发人员，不能仅限于编写在不同构建阶段执行的 task 动作或者配置逻辑。有时候当一个特定的生命周期事件发生时你可能想要执行代码。一个声明周期事件可能发生在某个构建阶段之前、期间或者之后。在执行阶段之后发生的生命周期事件是构建的完成。<br>我们有两种方式可以编写回调声明周期事件：在闭包中，或者是通过 Gradle API 所提供的监听器接口实现。Gradle 不会引导你采用哪种方式去监听生命周期事件，着完全取决于你的选择。<br>下面提供一个有用的声明周期钩子（Hook）的用法。</p>
<p><img src="http://wiki.jikexueyuan.com/project/gradleIn-action/images/dag27.png" alt="图片"></p>
<p>许多生命周期回调方法被定义在 <code>Gradle</code> 和 <code>Projet</code> 接口中。<br>不要害怕使用生命周期钩子，它们不是 Gradle API 的秘密后门，相反，它们是特意提供给开发者使用的。</p>
<h2 id="生命周期监听方法"><a href="#生命周期监听方法" class="headerlink" title="生命周期监听方法"></a>生命周期监听方法</h2><p>如果我们想在 Gradle 特定的阶段去 Hook 指定的任务，那么就需要对如何监听生命周期回调做一些了解。<br><code>Gradle</code> 和 <code>Projet</code> 对象提供了一些方法来供我们设置一些生命周期的回调方法。<br>生命周期监听的设置有两种方法：</p>
<ol>
<li>实现一个特定的监听接口；</li>
<li>提供一个用于在收到通知时执行的闭包。</li>
</ol>
<p>上面两个对象对这两种方法的都是支持的。<br><code>Projet</code> 提供的一些生命周期回调方法：</p>
<ul>
<li>afterEvaluate(closure)，afterEvaluate(action)</li>
<li>beforeEvaluate(closure)，beforeEvaluate(action)</li>
</ul>
<p><code>Gradle</code> 提供的一些生命周期回调方法：</p>
<ul>
<li>afterProject(closure)，afterProject(action)</li>
<li>beforeProject(closure)，beforeProject(action)</li>
<li>buildFinished(closure)，buildFinished(action)</li>
<li>projectsEvaluated(closure)，projectsEvaluated(action)</li>
<li>projectsLoaded(closure)，projectsLoaded(action)</li>
<li>settingsEvaluated(closure)，settingsEvaluated(action)</li>
<li>addBuildListener(buildListener)</li>
<li>addListener(listener)</li>
<li>addProjectEvaluationListener(listener)</li>
</ul>
<p>可以看到，每个方法都有两个不同参数的方法，一个接收闭包作为回调，另外一个接受 <code>Action</code> 作为回调，下面的介绍时只介绍闭包为参数的方法。<br><strong>请注意</strong>：一些声明周期事件只有在适当的位置上声明才会发生。</p>
<p>下面开始介绍 project 的几个方法：</p>
<h3 id="beforeEvaluate"><a href="#beforeEvaluate" class="headerlink" title="beforeEvaluate"></a>beforeEvaluate</h3><p><code>beforeEvaluate()</code>是在 project 开始配置前调用，当前的 project 作为参数传递给闭包。<br>这个方法很容易误用，你要是直接当前子模块的 build.gradle 中使用是肯定不会调用到的，因为Project都没配置好所以也就没它什么事情，这个代码块的添加只能放在父工程的 build.gradle 中,如此才可以调用的到。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">this.project.subprojects &#123; sub -&gt;</div><div class="line">    sub.beforeEvaluate &#123; project</div><div class="line">        println &quot;#### Evaluate before of &quot;+project.path</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果你想用 <code>Action</code> 作为参数的方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">this.project.subprojects &#123; sub -&gt;</div><div class="line">    sub.beforeEvaluate(new Action&lt;Project&gt;() &#123;</div><div class="line">        @Override</div><div class="line">        void execute(Project project) &#123;</div><div class="line">            println &quot;#### Evaluate before of &quot;+project.path</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="afterEvaluate"><a href="#afterEvaluate" class="headerlink" title="afterEvaluate"></a>afterEvaluate</h3><p><code>afterEvaluate</code> 是一般比较常见的一个配置参数的回调方式，只要 project 配置成功均会调用，不论是在父模块还是子模块。参数类型以及写法与afterEvaluate相同：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">project.afterEvaluate &#123; pro -&gt;</div><div class="line">    println(&quot;#### Evaluate after of &quot; + pro.path)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再来看一下 Gradle 对象的几个回调，可以通过 project 获取当前的 gradle 对象，gradle 设置的回调监控的是所有的 project 实现。</p>
<h3 id="afterProject"><a href="#afterProject" class="headerlink" title="afterProject"></a>afterProject</h3><p>设置一个 project 配置完毕后立即执行的闭包或者回调方法。<br>afterProject 在配置参数失败后会传入两个参数，前者是当前 project，后者显示失败信息。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">this.getGradle().afterProject &#123; project,projectState -&gt;</div><div class="line">    if(projectState.failure)&#123;</div><div class="line">        println &quot;Evaluation afterProject of &quot;+project+&quot; FAILED&quot;</div><div class="line">    &#125; else &#123;</div><div class="line">        println &quot;Evaluation afterProject of &quot;+project+&quot; succeeded&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="beforeProject"><a href="#beforeProject" class="headerlink" title="beforeProject"></a>beforeProject</h3><p>设置一个 project 配置前执行的闭包或者回调方法。<br>当前 project 作为参数传递给闭包。<br>子模块的该方法声明在 root project 中回调才会执行，root project 的该方法声明在 settings.gradle 中才会执行。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gradle.beforeProject &#123; p -&gt;</div><div class="line">    println(&quot;Evaluation beforeProject&quot;+p)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="buildFinished"><a href="#buildFinished" class="headerlink" title="buildFinished"></a>buildFinished</h3><p>构建结束时的回调，此时所有的任务都已经执行，一个构建结果的对象  BuildResult 作为参数传递给闭包。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gradle.buildFinished &#123; r -&gt;</div><div class="line">    println(&quot;buildFinished &quot;+r.failure)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="projectsEvaluated"><a href="#projectsEvaluated" class="headerlink" title="projectsEvaluated"></a>projectsEvaluated</h3><p>所有的 project 都配置完成后的回调，此时，所有的project都已经配置完毕，准备开始生成 task 图。gradle 对象会作为参数传递给闭包。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gradle.projectsEvaluated &#123;gradle -&gt;</div><div class="line">    println(&quot;projectsEvaluated&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="projectsLoaded"><a href="#projectsLoaded" class="headerlink" title="projectsLoaded"></a>projectsLoaded</h3><p>当 setting 中的所有project 都创建好时执行闭包回调。gradle 对象会作为参数传递给闭包。<br>这个方法也比较特殊，只有声明在适当的位置上才会发生，如果将这个声明周期挂接闭包声明在 build.gradle 文件中，那么将不会发生这个事件，因为项目创建发生在初始化阶段。<br>放在 settings.gradle 中是可以执行的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gradle.projectsLoaded &#123;gradle -&gt;</div><div class="line">    println(&quot;@@@@@@@ projectsLoaded&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="settingsEvaluated"><a href="#settingsEvaluated" class="headerlink" title="settingsEvaluated"></a>settingsEvaluated</h3><p>当 settings.gradle 加载并配置完毕后执行闭包回调，setting对象已经配置好并且准备开始加载构建 project。<br>这个回调在 build.gradle 中声明也是不起作用的，在 settings.gradle 中声明是可以的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gradle.settingsEvaluated &#123;</div><div class="line">    println(&quot;@@@@@@@ settingsEvaluated&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>前面我们说过，设置监听回调还有另外一种方法，通过设置接口监听添加回调来实现。作用的对象均是所有的 project 实现。</p>
<h3 id="addProjectEvaluationListener"><a href="#addProjectEvaluationListener" class="headerlink" title="addProjectEvaluationListener"></a>addProjectEvaluationListener</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">gradle.addProjectEvaluationListener(new ProjectEvaluationListener() &#123;</div><div class="line">    @Override</div><div class="line">    void beforeEvaluate(Project project) &#123;</div><div class="line">        println &quot; add project evaluation lister beforeEvaluate,project path is: &quot;+project</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    void afterEvaluate(Project project, ProjectState state) &#123;</div><div class="line">        println &quot; add project evaluation lister afterProject,project path is:&quot;+project</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="addListener"><a href="#addListener" class="headerlink" title="addListener"></a>addListener</h3><p>添加一个实现来 listener 接口的对象到 build。</p>
<h3 id="addBuildListener"><a href="#addBuildListener" class="headerlink" title="addBuildListener"></a>addBuildListener</h3><p>添加一个 <code>BuildListener</code> 对象到 Build 。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">gradle.addBuildListener(new BuildListener() &#123;</div><div class="line">    @Override</div><div class="line">    void buildStarted(Gradle gradle) &#123;</div><div class="line">        println(&quot;### buildStarted&quot;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    void settingsEvaluated(Settings settings) &#123;</div><div class="line">        println(&quot;### settingsEvaluated&quot;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    void projectsLoaded(Gradle gradle) &#123;</div><div class="line">        println(&quot;### projectsLoaded&quot;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    void projectsEvaluated(Gradle gradle) &#123;</div><div class="line">        println(&quot;### projectsEvaluated&quot;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    void buildFinished(BuildResult result) &#123;</div><div class="line">        println(&quot;### buildFinished&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="Task-执行图（TaskExecutionGraph）"><a href="#Task-执行图（TaskExecutionGraph）" class="headerlink" title="Task 执行图（TaskExecutionGraph）"></a>Task 执行图（TaskExecutionGraph）</h2><p>在配置时，Gradle 决定了在执行阶段要运行的 task 的顺序，他们的依赖关系的内部结构被建模为一个有向无环图，我们可以称之为 taks 执行图，它可以用 <code>TaskExecutionGraph</code> 来表示。可以通过 <code>gradle.taskGraph</code> 来获取。<br>在 <code>TaskExecutionGraph</code> 中也可以设置一些 Task 生命周期的回调：</p>
<ul>
<li>addTaskExecutionGraphListener(TaskExecutionGraphListener listener)</li>
<li>addTaskExecutionListener(TaskExecutionListener listener)</li>
<li>afterTask(Action<task> action)，afterTask(Closure closure)</task></li>
<li>beforeTask(Action<task> action)，beforeTask(Closure closure)</task></li>
<li>whenReady(Action<taskexecutiongraph> action)，whenReady(Closure closure)</taskexecutiongraph></li>
</ul>
<p>下面来进行详细介绍。</p>
<h3 id="addTaskExecutionGraphListener"><a href="#addTaskExecutionGraphListener" class="headerlink" title="addTaskExecutionGraphListener"></a>addTaskExecutionGraphListener</h3><p>添加 task 执行图的监听器，当执行图配置好会执行通知。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">gradle.taskGraph.addTaskExecutionGraphListener(new TaskExecutionGraphListener() &#123;</div><div class="line">    @Override</div><div class="line">    void graphPopulated(TaskExecutionGraph graph) &#123;</div><div class="line">        println(&quot;@@@ gradle.taskGraph.graphPopulated &quot;)</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="addTaskExecutionListener"><a href="#addTaskExecutionListener" class="headerlink" title="addTaskExecutionListener"></a>addTaskExecutionListener</h3><p>添加 task 执行监听器，当 task 执行前或者执行完毕会执行回调发出通知。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">gradle.taskGraph.addTaskExecutionListener(new TaskExecutionListener() &#123;</div><div class="line">    @Override</div><div class="line">    void beforeExecute(Task task) &#123;</div><div class="line">        println(&quot;@@@ gradle.taskGraph.beforeTask &quot;+task)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    void afterExecute(Task task, TaskState state) &#123;</div><div class="line">        println(&quot;@@@ gradle.taskGraph.afterTask &quot;+task)</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="afterTask"><a href="#afterTask" class="headerlink" title="afterTask"></a>afterTask</h3><p>设置一个 task 执行完毕的闭包或者回调方法。<br>该 task 作为参数传递给闭包。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gradle.taskGraph.afterTask &#123; task -&gt;</div><div class="line">    println(&quot;### gradle.taskGraph.afterTask &quot;+task)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="beforeTask"><a href="#beforeTask" class="headerlink" title="beforeTask"></a>beforeTask</h3><p>设置一个 task 执行前的闭包或者回调方法。<br>该 task 作为参数传递给闭包。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gradle.taskGraph.beforeTask &#123; task -&gt;</div><div class="line">    println(&quot;### gradle.taskGraph.beforeTask &quot;+task)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="whenReady"><a href="#whenReady" class="headerlink" title="whenReady"></a>whenReady</h3><p>设置一个 task 执行图准备好后的闭包或者回调方法。<br>该 taskGrahp 作为参数传递给闭包。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gradle.taskGraph.whenReady &#123; taskGrahp -&gt;</div><div class="line">    println(&quot;@@@ gradle.taskGraph.whenReady &quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="生命周期顺序"><a href="#生命周期顺序" class="headerlink" title="生命周期顺序"></a>生命周期顺序</h2><p>我们通过在生命周期回调中添加打印的方法来看一下他们的执行顺序。<br>为了看一下配置 task 的时机，我们在 app 模块中创建来一个 taks：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">task hello &#123;</div><div class="line">    doFirst &#123;</div><div class="line">        println &apos;*** task hello doFirst&apos;</div><div class="line">    &#125;</div><div class="line">    doLast &#123;</div><div class="line">        println &apos;*** task hello doLast&apos;</div><div class="line">    &#125;</div><div class="line">    println &apos;*** config task hello&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为了保证生命周期的各个回调方法都被执行，我们在 settings.gradle 中添加各个回调方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line">gradle.addBuildListener(new BuildListener() &#123;</div><div class="line">    @Override</div><div class="line">    void buildStarted(Gradle gradle) &#123;</div><div class="line">        println(&quot;### gradle.buildStarted&quot;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    void settingsEvaluated(Settings settings) &#123;</div><div class="line">        println(&quot;### gradle.settingsEvaluated&quot;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    void projectsLoaded(Gradle gradle) &#123;</div><div class="line">        println(&quot;### gradle.projectsLoaded&quot;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    void projectsEvaluated(Gradle gradle) &#123;</div><div class="line">        println(&quot;### gradle.projectsEvaluated&quot;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    void buildFinished(BuildResult result) &#123;</div><div class="line">        println(&quot;### gradle.buildFinished&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">gradle.afterProject &#123; project,projectState -&gt;</div><div class="line">    if(projectState.failure)&#123;</div><div class="line">        println &quot;### gradld.afterProject &quot;+project+&quot; FAILED&quot;</div><div class="line">    &#125; else &#123;</div><div class="line">        println &quot;### gradle.afterProject &quot;+project+&quot; succeeded&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">gradle.beforeProject &#123; p -&gt;</div><div class="line">    println(&quot;### gradle.beforeProject &quot;+p)</div><div class="line">&#125;</div><div class="line"></div><div class="line">gradle.allprojects(new Action&lt;Project&gt;() &#123;</div><div class="line">    @Override</div><div class="line">    void execute(Project project) &#123;</div><div class="line">        project.beforeEvaluate &#123; project</div><div class="line">            println &quot;### project.beforeEvaluate &quot;+project</div><div class="line">        &#125;</div><div class="line">        project.afterEvaluate &#123; pro -&gt;</div><div class="line">            println(&quot;### project.afterEvaluate &quot; + pro)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">gradle.taskGraph.addTaskExecutionListener(new TaskExecutionListener() &#123;</div><div class="line">    @Override</div><div class="line">    void beforeExecute(Task task) &#123;</div><div class="line">        if (task.name.equals(&quot;hello&quot;))&#123;</div><div class="line">            println(&quot;@@@ gradle.taskGraph.beforeTask &quot;+task)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    void afterExecute(Task task, TaskState state) &#123;</div><div class="line">        if (task.name.equals(&quot;hello&quot;))&#123;</div><div class="line">            println(&quot;@@@ gradle.taskGraph.afterTask &quot;+task)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">gradle.taskGraph.addTaskExecutionGraphListener(new TaskExecutionGraphListener() &#123;</div><div class="line">    @Override</div><div class="line">    void graphPopulated(TaskExecutionGraph graph) &#123;</div><div class="line">        println(&quot;@@@ gradle.taskGraph.graphPopulated &quot;)</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">gradle.taskGraph.whenReady &#123; taskGrahp -&gt;</div><div class="line">    println(&quot;@@@ gradle.taskGraph.whenReady &quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行 task hello：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">./gradlew hello</div><div class="line">### gradle.settingsEvaluated</div><div class="line">### gradle.projectsLoaded</div><div class="line"></div><div class="line">&gt; Configure project : </div><div class="line">### gradle.beforeProject root project &apos;TestSomething&apos;</div><div class="line">### project.beforeEvaluate root project &apos;TestSomething&apos;</div><div class="line">### gradle.afterProject root project &apos;TestSomething&apos; succeeded</div><div class="line">### project.afterEvaluate root project &apos;TestSomething&apos;</div><div class="line"></div><div class="line">&gt; Configure project :app </div><div class="line">### gradle.beforeProject project &apos;:app&apos;</div><div class="line">### project.beforeEvaluate project &apos;:app&apos;</div><div class="line">*** config task hello</div><div class="line">### gradle.afterProject project &apos;:app&apos; succeeded</div><div class="line">### project.afterEvaluate project &apos;:app&apos;</div><div class="line"></div><div class="line">&gt; Configure project :common </div><div class="line">### gradle.beforeProject project &apos;:common&apos;</div><div class="line">### project.beforeEvaluate project &apos;:common&apos;</div><div class="line">### gradle.afterProject project &apos;:common&apos; succeeded</div><div class="line">### project.afterEvaluate project &apos;:common&apos;</div><div class="line"></div><div class="line">### gradle.projectsEvaluated</div><div class="line">@@@ gradle.taskGraph.graphPopulated </div><div class="line">@@@ gradle.taskGraph.whenReady </div><div class="line"></div><div class="line">&gt; Task :app:hello </div><div class="line">@@@ gradle.taskGraph.beforeTask task &apos;:app:hello&apos;</div><div class="line">*** task hello doFirst</div><div class="line">*** task hello doLast</div><div class="line">@@@ gradle.taskGraph.afterTask task &apos;:app:hello&apos;</div><div class="line"></div><div class="line">BUILD SUCCESSFUL in 1s</div><div class="line">1 actionable task: 1 executed</div><div class="line">### gradle.buildFinished</div></pre></td></tr></table></figure>
<p>因此，生命周期回调的执行顺序是：<br>gradle.settingsEvaluated-&gt;<br>gradle.projectsLoaded-&gt;<br>gradle.beforeProject-&gt;<br>project.beforeEvaluate-&gt;<br>gradle.afterProject-&gt;<br>project.afterEvaluate-&gt;<br>gradle.projectsEvaluated-&gt;<br>gradle.taskGraph.graphPopulated-&gt;<br>gradle.taskGraph.whenReady-&gt;<br>gradle.buildFinished</p>
<!--  
https://blog.csdn.net/chf1142152101/article/details/72830565
http://baijiahao.baidu.com/s?id=1591357844180592405&wfr=spider&for=pc
https://segmentfault.com/q/1010000004503896/a-1020000004504034
http://wiki.jikexueyuan.com/project/deep-android-gradle/four-four.html
http://wiki.jikexueyuan.com/project/gradleIn-action/build-lifetime.html
http://blog.csdn.net/zxc123e/article/details/72846762

http://www.sohu.com/a/132990618_46

https://www.oreilly.com/library/view/gradle-beyond-the/9781449373801/ch03.html

-->
]]></content>
    
    <summary type="html">
    
      介绍 Gradle 生命周期
    
    </summary>
    
      <category term="Gradle" scheme="http://yoursite.com/categories/Gradle/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Gradle" scheme="http://yoursite.com/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>Gradle 使用指南 -- Extra Properties</title>
    <link href="http://yoursite.com/2016/03/15/development-tool-gradle-extra-properties/"/>
    <id>http://yoursite.com/2016/03/15/development-tool-gradle-extra-properties/</id>
    <published>2016-03-15T02:00:00.000Z</published>
    <updated>2018-05-29T02:28:24.835Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Gradle 提供了一种名为 extra property 的方法。这就使我们扩展一些自定义属性成为可能。<br>可以查看<a href="https://docs.gradle.org/current/dsl/org.gradle.api.Project.html" target="_blank" rel="external">Project 官方文档</a>中对 Extra Properties 的介绍。<br><a href="https://docs.gradle.org/current/dsl/org.gradle.api.plugins.ExtraPropertiesExtension.html" target="_blank" rel="external">ExtraPropertiesExtension 官方文档</a><br>所有的扩展属性都必须通过 <code>ext</code> 命名空间来定义，定义完后就可以直接通过对象来引用。ext 属性支持 Project、Gradle 对象。扩展属性是可读写的。扩展属性，使得自定义属性的跨脚本传递成为可能。</p>
<h2 id="扩展属性的使用"><a href="#扩展属性的使用" class="headerlink" title="扩展属性的使用"></a>扩展属性的使用</h2><h3 id="在-Gradle-对象中使用扩展属性"><a href="#在-Gradle-对象中使用扩展属性" class="headerlink" title="在 Gradle 对象中使用扩展属性"></a>在 Gradle 对象中使用扩展属性</h3><p>比如我们在 settings.gradle 中定义扩展属性：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle.ext.testGradleExt=10</div></pre></td></tr></table></figure>
<p>那么就可以在 build.gradle 中引用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">println gradle.testGradleExt</div></pre></td></tr></table></figure>
<h3 id="在-Project-对象中使用扩展属性"><a href="#在-Project-对象中使用扩展属性" class="headerlink" title="在 Project 对象中使用扩展属性"></a>在 Project 对象中使用扩展属性</h3><p>比如我们在 root project 中的build.gradle 中定义扩展属性：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ext &#123;</div><div class="line">    testProjectExt1 = 20</div><div class="line">    testProjectExt2 = &quot;testProjectExt2&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以在 sub project 中的 build.gradle 中引用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">println rootProject.testProjectExt2</div></pre></td></tr></table></figure>
<p>当然你的定义方式还可以是这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ext.testProjectExt3 = &quot;testProjectExt3&quot;</div></pre></td></tr></table></figure>
<h2 id="扩展属性的多种定义方式"><a href="#扩展属性的多种定义方式" class="headerlink" title="扩展属性的多种定义方式"></a>扩展属性的多种定义方式</h2><p>除了上面的定义方式，你还可以这样来定义扩展属性：</p>
<h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>在 sub project 中定义 root project 的属性，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rootProject.ext &#123;</div><div class="line">    testProjectExt4 = &quot;testProjectExt4&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后在 root project 中引用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">task test &lt;&lt; &#123;</div><div class="line">    println this.testProjectExt4</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至于这里为什么要放在 task 的执行阶段来使用这个扩展属性，相信大家了解了 Gradle  的生命周期的同学都会知道的，如果放在 配置阶段去执行，会报错的。</p>
<h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>还可以这样定义：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ext.set(&quot;testProjectExt5&quot;, 5)</div></pre></td></tr></table></figure>
<h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p>还可以这样引用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">println rootProject.ext.get(&quot;testProjectExt5&quot;)</div></pre></td></tr></table></figure>
<p>还可以这样引用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">println rootProject.ext[&quot;testProjectExt5&quot;]</div></pre></td></tr></table></figure>
<h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><p>可以这样去更新一个扩展属性的值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rootProject.testProjectExt5 = 55</div></pre></td></tr></table></figure>
<p>也可以这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rootProject.ext[&quot;testProjectExt5&quot;] = 66</div></pre></td></tr></table></figure>
<h2 id="扩展属性的一些属性和方法"><a href="#扩展属性的一些属性和方法" class="headerlink" title="扩展属性的一些属性和方法"></a>扩展属性的一些属性和方法</h2><p>可以参考<a href="https://docs.gradle.org/current/dsl/org.gradle.api.plugins.ExtraPropertiesExtension.html" target="_blank" rel="external">ExtraPropertiesExtension 官方文档</a></p>
<h3 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h3><p><code>properties</code> 属性返回一个 <code>Map&lt;String, Object&gt;</code> 对象，存储了当前对象定义的所有扩展属性。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">println rootProject.properties.each &#123; key, value -&gt;</div><div class="line">    println key</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">println rootProject.properties.containsKey(&quot;testProjectExt5&quot;)</div></pre></td></tr></table></figure>
<h3 id="has"><a href="#has" class="headerlink" title="has"></a>has</h3><p>返回当前对象是否包含给定的属性：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">println rootProject.ext.has(&quot;testProjectExt5&quot;)</div><div class="line">println rootProject.hasProperty(&quot;testProjectExt5&quot;)</div></pre></td></tr></table></figure>
<h3 id="get，set"><a href="#get，set" class="headerlink" title="get，set"></a>get，set</h3><p>设置和取值的两个方法：<br>get</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">project.ext &#123; foo = &quot;bar&quot; &#125;</div><div class="line"></div><div class="line">println project.ext.get(&quot;foo&quot;) == &quot;bar&quot;</div><div class="line">println project.ext.foo == &quot;bar&quot;</div><div class="line">println project.ext[&quot;foo&quot;] == &quot;bar&quot;</div><div class="line"></div><div class="line">println project.foo == &quot;bar&quot;</div><div class="line">println project[&quot;foo&quot;] == &quot;bar&quot;</div></pre></td></tr></table></figure>
<p>set</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">project.ext.set(&quot;foo&quot;, &quot;bar&quot;)</div><div class="line">project.ext.foo = &quot;bar&quot;</div><div class="line">project.ext[&quot;foo&quot;] = &quot;bar&quot;</div><div class="line"></div><div class="line">// Once the property has been created via the extension, it can be changed by the owner.</div><div class="line">project.foo = &quot;bar&quot;</div><div class="line">project[&quot;foo&quot;] = &quot;bar&quot;</div></pre></td></tr></table></figure>
<h2 id="命令行自定义扩展属性"><a href="#命令行自定义扩展属性" class="headerlink" title="命令行自定义扩展属性"></a>命令行自定义扩展属性</h2><p>在 <a href="http://www.heqiangfly.com/2016/03/03/development-tool-gradle-command-config/" target="_blank" rel="external">Gradle 使用指南 – 基础配置</a> 一文中我们也介绍了如何在命令行自定义扩展属性。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gradlew assembleDebug -Pcustom=true</div></pre></td></tr></table></figure>
<p>在脚本中使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if (project.hasProperty(&apos;custom&apos;))&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们还可以通过 -D 来添加系统属性。</p>
<h2 id="grade-properties-文件扩展属性"><a href="#grade-properties-文件扩展属性" class="headerlink" title="grade.properties 文件扩展属性"></a>grade.properties 文件扩展属性</h2><p>可以通过 gradle.properties 文件中声明直接添加到项目中使用，在这个属性文件中声明的属性对所有的项目可用。<br>比如在 gradle.properties 文件中声明：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">VERSION_CODE=200100</div><div class="line">VERSION_NAME=2.1.0</div><div class="line">testProperties = &quot;testProperties&quot;</div></pre></td></tr></table></figure>
<p>在 root project中使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">versionCode project.VERSION_CODE as int</div><div class="line">versionName project.VERSION_NAME</div></pre></td></tr></table></figure>
<p>在 app subproject 中使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">println rootProject.hasProperty(&quot;testProperties&quot;)</div><div class="line">println this.hasProperty(&quot;testProperties&quot;)</div></pre></td></tr></table></figure>
<p>另外，我们还可以在 gradle.properties 文件中添加系统属性。如果有 <code>systemProp.</code> 为前缀的属性会被识别为系统属性。</p>
<p>比如在 gradle.properties 文件中声明：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemProp.testProperties=&quot;testProperties&quot;</div></pre></td></tr></table></figure>
<p>可以通过下面方式使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">println System.properties[&quot;testProperties&quot;]</div></pre></td></tr></table></figure>
<!--  
https://blog.csdn.net/zxc123e/article/details/72846762
https://docs.gradle.org/current/dsl/org.gradle.api.plugins.ExtraPropertiesExtension.html
-->
]]></content>
    
    <summary type="html">
    
      介绍 Gradle 扩展属性的使用
    
    </summary>
    
      <category term="Gradle" scheme="http://yoursite.com/categories/Gradle/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Gradle" scheme="http://yoursite.com/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>Gradle 使用指南 -- Gradle Task</title>
    <link href="http://yoursite.com/2016/03/13/development-tool-gradle-task/"/>
    <id>http://yoursite.com/2016/03/13/development-tool-gradle-task/</id>
    <published>2016-03-13T02:00:00.000Z</published>
    <updated>2019-02-27T03:17:16.973Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><a href="https://docs.gradle.org/current/userguide/userguide.html" target="_blank" rel="external">Gradle 官方文档</a><br><a href="http://wiki.jikexueyuan.com/project/GradleUserGuide-Wiki/" target="_blank" rel="external">Gradle User Guide 中文版</a><br><a href="https://docs.gradle.org/current/dsl/org.gradle.api.Task.html" target="_blank" rel="external">Task的API文档</a><br><a href="https://docs.gradle.org/current/userguide/more_about_tasks.html#header" target="_blank" rel="external">官方文档：Authoring Tasks</a><br><a href="https://guides.gradle.org/writing-gradle-tasks/" target="_blank" rel="external">官方文档：Writing Custom Gradle Tasks</a></p>
<p>Gradle 中的每一个 Project 都是由一个或者多个 Task 来构成的，它是 gradle 构建脚本的最小运行单元，一个 Task 代表一些更加细化的构建，可能是编译一些 classes、创建一个 Jar、生成 javadoc、或者生成某个目录的压缩文件。<br>Task 有一些重要的功能：任务动作(task action)和任务依赖(task dependency)。task action定义了任务执行时最小的工作单元，比如 doFirst和doLast。task dependency定义了task之间的依赖关系，例如在某个task运行之前要运行另外一个task，尤其是需要另一个task的输出作为输入的时候。</p>
<h2 id="Task-相关命令"><a href="#Task-相关命令" class="headerlink" title="Task 相关命令"></a>Task 相关命令</h2><ul>
<li><code>./gradlew tasks</code>：列出当前工程的所有Task</li>
<li><code>./gradlew [-q] &lt;task name&gt;</code>：单独执行某个task，-q 代表 quite 模式，它不会生成 Gradle 的日志信息 (log messages)，所以用户只能看到 tasks 的输出。</li>
</ul>
<h2 id="创建任务"><a href="#创建任务" class="headerlink" title="创建任务"></a>创建任务</h2><p>默认情况下，我们创建的每一个 Task 都是 org.gradle.api.DefaultTask 类型，这是一个通用的 Task 类型。另外 Gradle 还提供了具有一些特定功能的 Task，比如 Copy 和 Delete 等，我们需要时直接继承即可。另外，我们还可以创建自己的 Task 类型，并且可以自行定义我们创建的 Task 类型。<br>Task 的定义和构造方式也是多种多样的，Gradle 提供了多种方法来定义 Task。另外 Task 既可以在 build.gradle 文件中直接创建，也可以由不同的 Plugin 引入。 </p>
<h3 id="Task-构造方法"><a href="#Task-构造方法" class="headerlink" title="Task 构造方法"></a>Task 构造方法</h3><p>可以通过下面几个方法来构造 Task：</p>
<ul>
<li>task myTask：用 task 关键字构造</li>
<li>task()：用 project 的 task 方法构造</li>
<li>tasks.create：用 TaskContainer 的 create 方法构造</li>
<li>myTask extends DefaultTask </li>
</ul>
<h3 id="Task-示例"><a href="#Task-示例" class="headerlink" title="Task 示例"></a>Task 示例</h3><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">task hello &#123;</div><div class="line">    doFirst &#123;</div><div class="line">        println &apos;task hello doFirst&apos;</div><div class="line">    &#125;</div><div class="line">    doLast &#123;</div><div class="line">        println &apos;task hello doLast&apos;</div><div class="line">    &#125;</div><div class="line">    println &apos;config task hello&apos;</div><div class="line">&#125;</div><div class="line"></div><div class="line">task hello1 &lt;&lt; &#123;</div><div class="line">    println &apos;task hello1&apos;</div><div class="line">&#125;</div><div class="line"></div><div class="line">task hello2 (type: Copy)&#123;</div><div class="line">    from &apos;src/main/AndroidManifest.xml&apos;</div><div class="line">    into &apos;build/test&apos;</div><div class="line">&#125;</div><div class="line"></div><div class="line">task hello3(group: &quot;myTest&quot;, description:&quot;This is test task paras&quot;, dependsOn: [&quot;A&quot;, &quot;B&quot;])&#123;</div><div class="line">    println &apos;task hello3&apos;</div><div class="line">&#125;</div><div class="line"></div><div class="line">task(&quot;hello4&quot;, group: &quot;myTest&quot;, description:&quot;This is test task para name&quot;)&#123;</div><div class="line">    println &apos;task hello4&apos;</div><div class="line">&#125;</div><div class="line"></div><div class="line">tasks.create(&quot;hello5&quot;) &#123;</div><div class="line">    group = &apos;Welcome&apos;</div><div class="line">    description = &apos;Produces a greeting&apos;</div><div class="line"></div><div class="line">    doLast &#123;</div><div class="line">        println &apos;Hello, World&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行 <code>./gradlew  tasks --all</code>，上面的 Task 就会在列表中显示出来。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">MyTest tasks</div><div class="line">------------</div><div class="line">hello3 - This is test task paras</div><div class="line">hello4 - This is test task para name</div><div class="line"></div><div class="line">Other tasks</div><div class="line">-----------</div><div class="line">...</div><div class="line">hello</div><div class="line">hello1</div><div class="line">hello2</div><div class="line"></div><div class="line">Welcome tasks</div><div class="line">-------------</div><div class="line">hello5 - Produces a greeting</div></pre></td></tr></table></figure>
<p>我们执行 <code>./gradlew -q hello</code>，会有下面的输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">config task hello</div><div class="line">task hello doFirst</div><div class="line">task hello doLast</div></pre></td></tr></table></figure>
<p>hello1 task的声明方式 &lt;&lt; 只是简写的 <code>doLast</code>，或者说当这个任务不需要任何在配置状态下运行的内容时，这两种声明方式是一样的。doLast还有一个等价的操作leftShift，leftShift还可以缩写为&lt;&lt;。&lt;&lt; 操作符在Gradle 5.0已经废弃了。<br>实际上大部分时候 task 都应该是在执行状态下才真正执行的，配置状态大部分时候用于声明执行时需要用到的变量等为执行服务的前置动作。<br>hello2: Task创建的时候可以通过 <code>type: SomeType</code> 指定Type，Type其实就是告诉Gradle，这个新建的Task对象会从哪个基类Task派生。比如，Gradle本身提供了一些通用的Task，最常见的有CopyC、Delete、Sync、Tar等任务。Copy是Gradle中的一个类。当我们：task myTask(type:Copy)的时候，创建的Task就是一个Copy Task。下面会详细介绍。Gradle 本身提供了很多已经定义好的这些 task 来供我们使用，我们使用时直接继承就行了，这个后面会有介绍。当然我们也可以自定义一些这样的 Task 来供其他 Task 来继承。下面也会详细介绍。</p>
<h4 id="Task-的一些构造方法"><a href="#Task-的一些构造方法" class="headerlink" title="Task 的一些构造方法"></a>Task 的一些构造方法</h4><p>Task 提供了下面几个构造方法：</p>
<ul>
<li>task myTask</li>
<li>task myTask { configure closure }</li>
<li>task myTask(type: SomeType)</li>
<li>task myTask(type: SomeType) { configure closure }</li>
</ul>
<p>Project 提供了下面几个 task 方法来创建 task：</p>
<ul>
<li>task(name)</li>
<li>task(name, configureClosure)</li>
<li>task(name, configureAction)</li>
<li>task(args, name)</li>
<li>task(args, name, configureClosure)</li>
</ul>
<p>TaskContainer 提供了下面几个方法来创建 task，TaskContainer 可以通过 Project 的 tasks 属性或者 getTasks() 方法获取：</p>
<ul>
<li>create​(String name)</li>
<li>create​(String name, Closure configureClosure)</li>
<li>create​(String name, Class<t> type)</t></li>
<li>create​(String name, Class<t> type, Object… constructorArgs)</t></li>
<li>create​(String name, Class<t> type, Action&lt;? super T&gt; configuration)</t></li>
<li>create​(Map<string,​?> options)</string,​?></li>
<li>create​(Map<string,​?> options, Closure configureClosure)</string,​?></li>
</ul>
<h4 id="TaskContainer-create-方法定义-Task"><a href="#TaskContainer-create-方法定义-Task" class="headerlink" title="TaskContainer create 方法定义 Task"></a>TaskContainer create 方法定义 Task</h4><p>来介绍一下 create 方法的用法：<br>先来看一段代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">tasks.create(&quot;hello&quot;) &#123; </div><div class="line">    doLast &#123; </div><div class="line">        println &apos;Hello, World!&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码做了两件事情：</p>
<ul>
<li>创建了一个叫 hello 的 task</li>
<li>在 doLast action 中打印 Hello, World! 到终端</li>
</ul>
<p>运行 <code>./gradlew tasks --all</code> 命令后，会在 Other tasks 的组中发现 hello task。<br>运行 <code>./gradlew hello</code> 输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; Task :hello</div><div class="line">Hello, World!</div></pre></td></tr></table></figure>
<p>下面我们为 task 添加组信息和task描述信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">tasks.create(&quot;hello&quot;) &#123;</div><div class="line">    group = &apos;Welcome&apos;</div><div class="line">    description = &apos;Produces a greeting&apos;</div><div class="line"></div><div class="line">    doLast &#123;</div><div class="line">        println &apos;Hello, World&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为该 task 生成组和描述信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Welcome tasks</div><div class="line">-------------</div><div class="line">hello - Produces a greeting</div></pre></td></tr></table></figure>
<h4 id="实现-TaskAction，定义公共-Task"><a href="#实现-TaskAction，定义公共-Task" class="headerlink" title="实现 TaskAction，定义公共 Task"></a>实现 TaskAction，定义公共 Task</h4><p>上面介绍的集中定义 task 的方法，实际真正执行的时候什么都没有做，或者是在 doFirst 和 doLast action 时做了一些事情。<br>我们还可以通过继承 Task 的方式通过 @TaskAction 操作符也可以指定一个 Task 执行时要做的事情，它区别于doFirst 和 doLast。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">// 这个类可以放到当前 build.gradle 文件中，也可以放到单独的 gradle 文件中，也可以放到插件的 java 或者 groovy 文件中。</div><div class="line">class TestTask extends DefaultTask &#123;</div><div class="line">    String source</div><div class="line"></div><div class="line">    @TaskAction</div><div class="line">    void testAction() &#123;</div><div class="line">        println getName()+&quot; ### testAction!&quot;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    void testMothod(String para) &#123;</div><div class="line">        println &quot;Source is &quot;+source+ &quot; para = &quot;+para</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">task testTask (type: TestTask) &#123;</div><div class="line">    source &quot;MyApplication&quot;</div><div class="line">    testMothod &quot;test&quot;</div><div class="line">    doLast &#123;</div><div class="line">        println &apos;GoodBye&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码中定义了一个名为 TestTask 的 Task，它继承自 DefaultTask， 通过注解 TaskAction 标记了默认的 Action。@TaskAction表示该Task要执行的动作，即在调用该Task时，要执行的方法。<br>另外演示了属性和方法的应用。<br>我们可以定制一些这样的 Task 放到 plugin 中，作为公共的 Task 供开发者调用和继承。在项目中存在大量自定义的 Task 类型时，我们是推荐使用这种方法的。</p>
<p>下面来介绍一下在 plugin 的 java 文件中定义 task：<br>创建自定义 task：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">package com.android.hq.testplugin;</div><div class="line"></div><div class="line">import org.gradle.api.DefaultTask;</div><div class="line">import org.gradle.api.tasks.TaskAction;</div><div class="line"></div><div class="line"></div><div class="line">public class TestJavaTask extends DefaultTask &#123;</div><div class="line"></div><div class="line">    @TaskAction</div><div class="line">    public void testAction()&#123;</div><div class="line">        System.out.println(&quot;### This is TestJavaTask&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>定义 task：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">// 引用插件</div><div class="line">apply plugin: &apos;com.android.hq.testplugin.test&apos;</div><div class="line"></div><div class="line"></div><div class="line">// 添加插件的依赖路径</div><div class="line">buildscript &#123;</div><div class="line">    dependencies &#123;</div><div class="line">        // 这里直接使用了上面插件工程中生成 jar 包的路径</div><div class="line">        classpath files(&quot;../../TestGradlePlugin/app/build/libs/app-1.0.0.jar&quot;)</div><div class="line">        // NOTE: Do not place your application dependencies here; they belong</div><div class="line">        // in the individual module build.gradle files</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">task testCustom(type: com.android.hq.testplugin.TestJavaTask) &#123;</div><div class="line">    doFirst &#123;</div><div class="line">        println &quot;Hello&quot;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    doLast &#123;</div><div class="line">        println &quot;GoodBye&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行 ‘./gradlew testCustom’ 后生成信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; Task :app:testCustom</div><div class="line">Hello</div><div class="line">### This is TestJavaTask</div><div class="line">GoodBye</div></pre></td></tr></table></figure>
<h4 id="配置-Task-属性"><a href="#配置-Task-属性" class="headerlink" title="配置 Task 属性"></a>配置 Task 属性</h4><p>下面我们再来介绍如何进行灵活地进行定制 task 的一些属性，比如下面例子中的要输出的信息。<br>这里我们通过实现一个 Task 类来实现创建 task。<br>在 build.gradle 中添加代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">class Greeting extends DefaultTask &#123;</div><div class="line">    String message</div><div class="line">    String recipient</div><div class="line"></div><div class="line">    @TaskAction</div><div class="line">    void sayGreeting() &#123;</div><div class="line">        println &quot;$&#123;message&#125;, $&#123;recipient&#125;!&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">tasks.create(&quot;hello&quot;, Greeting) &#123;</div><div class="line">    group = &apos;Welcome&apos;</div><div class="line">    description = &apos;Produces a world greeting&apos;</div><div class="line">    message = &apos;Hello&apos;</div><div class="line">    recipient = &apos;World&apos;</div><div class="line">&#125;</div><div class="line"></div><div class="line">tasks.create(&quot;gutenTag&quot;, Greeting) &#123;</div><div class="line">    group = &apos;Welcome&apos;</div><div class="line">    description = &apos;Produces a German greeting&apos;</div><div class="line">    message = &apos;Guten Tag&apos;</div><div class="line">    recipient = &apos;Welt&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行 <code>./gradlew tasks</code> 命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Welcome tasks</div><div class="line">-------------</div><div class="line">gutenTag - Produces a German greeting</div><div class="line">hello - Produces a world greeting</div></pre></td></tr></table></figure>
<p>下面几点说明：</p>
<ul>
<li>虽然 Gradle API 的其他 Task 类我们也可以使用，但继承 DefaultTask 是常见的扩展 Task 的方法。</li>
<li>上面例子中添加了自定义的 message 和 recipient 实现任务类型的可配置，分别实现了不同输出的 hello 和 gutenTag 两个任务。</li>
<li>通过注解 TaskAction 标记了默认的 Action。@TaskAction表示该Task要执行的动作，即在调用该Task时，要执行的 方法。</li>
<li>通过引用 Greeting 实现了不同的任务类。</li>
</ul>
<h3 id="Task-的状态"><a href="#Task-的状态" class="headerlink" title="Task 的状态"></a>Task 的状态</h3><p>这里会有个奇怪的现象，我们在执行 <code>./gradlew -q hello</code> 时有上面三条输出是容易理解的，但是在执行 <code>./gradlew tasks</code> 或者是执行其他 Task 比如 <code>./gradlew -q hello1</code> 时，<code>config task hello</code> 这个打印也会输出，为什么呢？<br>这是因为 Task 有两种状态，分别是：</p>
<ul>
<li>配置状态（Configuration State）</li>
<li>执行状态（Execution State）</li>
</ul>
<p>这其实对应了 Gradle 三个生命周期中的配置阶段和执行阶段，task 的配置块永远在 task 动作执行之前被执行。<br>Gradle 会在进入执行之前，配置所有 Task，而 <code>println &#39;config task hello&#39;</code> 这段代码就是在配置时进行执行。所以哪怕没有显式调用 <code>gradlew hello</code>，只是调用列出所有 task 的命令，hello task 仍然需要进入到配置状态，也就仍然执行了一遍。<br>很多时候我们并不需要配置代码，我们想要我们的代码在执行 task 的时候才执行，这个时候可以通过 doFirst、doLast或者实现 TaskAction 来完成。</p>
<h3 id="Task-参数"><a href="#Task-参数" class="headerlink" title="Task 参数"></a>Task 参数</h3><p>我们用命令查看 Task 信息时一般是这样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Build tasks</div><div class="line">-----------</div><div class="line">assemble - Assembles all variants of all applications and secondary packages.</div><div class="line">assembleAndroidTest - Assembles all the Test applications.</div><div class="line">assembleDdd - Assembles all Ddd builds.</div><div class="line">assembleDebug - Assembles all Debug builds.</div><div class="line">assembleRelease - Assembles all Release builds.</div></pre></td></tr></table></figure>
<p>一般是由 group、name 和 description组成，其实在上面的示例中大家应该看到 hello3、hello4和其他任务的不同了。他们两个处在同一个 group 中并且 Task 名称后面有一些描述信息。<br>Task的一般的属性有下面几种，可以在创建 Task 的时候在闭包中声明：</p>
<table>
<thead>
<tr>
<th style="text-align:center">Property</th>
<th style="text-align:center">Property</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center">task的名字</td>
</tr>
<tr>
<td style="text-align:center">type</td>
<td style="text-align:center">task的“父类”</td>
</tr>
<tr>
<td style="text-align:center">overwrite</td>
<td style="text-align:center">是否替换已经存在的task</td>
</tr>
<tr>
<td style="text-align:center">dependsOn</td>
<td style="text-align:center">task依赖的task的集合</td>
</tr>
<tr>
<td style="text-align:center">group</td>
<td style="text-align:center">task属于哪个组</td>
</tr>
<tr>
<td style="text-align:center">description</td>
<td style="text-align:center">task的描述</td>
</tr>
</tbody>
</table>
<h3 id="动态任务"><a href="#动态任务" class="headerlink" title="动态任务"></a>动态任务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">4.times &#123; counter -&gt;</div><div class="line">    task &quot;task$counter&quot; &lt;&lt; &#123;</div><div class="line">        println &quot;I&apos;m task number $counter&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里动态的创建了 task0，task1，task2，task3。<br>执行 <code>./gradlew -q task1</code>，输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">I&apos;m task number 1</div></pre></td></tr></table></figure>
<h2 id="调用任务"><a href="#调用任务" class="headerlink" title="调用任务"></a>调用任务</h2><h3 id="短标记法"><a href="#短标记法" class="headerlink" title="短标记法"></a>短标记法</h3><p>可以使用短标记 $ 可以访问一个存在的任务：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">task hello &lt;&lt; &#123;</div><div class="line">    println &apos;Hello world!&apos;</div><div class="line">&#125;</div><div class="line">hello.doLast &#123;</div><div class="line">    println &quot;Greetings from the $hello.name task.&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行 <code>gradle -q hello</code> 输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Hello world!</div><div class="line">Greetings from the hello task.</div></pre></td></tr></table></figure>
<h3 id="在Task中调用其他Task"><a href="#在Task中调用其他Task" class="headerlink" title="在Task中调用其他Task"></a>在Task中调用其他Task</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">task A &lt;&lt; &#123;</div><div class="line">    C.execute()</div><div class="line">&#125;</div><div class="line"></div><div class="line">task C &lt;&lt; &#123;</div><div class="line">    println &apos;Hello from C&apos;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 将自定义任务挂接到assemble任务的最后再执行</div><div class="line">afterEvaluate &#123; Project project -&gt;</div><div class="line">    def t = project.tasks.findByName(&quot;assemble&quot;)</div><div class="line">    t.doLast &#123;</div><div class="line">        def testTask = project.tasks.findByName(&quot;C&quot;)</div><div class="line">        testTask.execute()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码通过 <code>execute()</code> 方法来调用 Task C。</p>
<h2 id="任务依赖"><a href="#任务依赖" class="headerlink" title="任务依赖"></a>任务依赖</h2><h3 id="创建依赖"><a href="#创建依赖" class="headerlink" title="创建依赖"></a>创建依赖</h3><p>在Gradle中，Task之间是可以存在依赖关系的。这种关系可以通过 <code>dependsOn</code> 来实现。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">task A &lt;&lt; &#123;</div><div class="line">    println &apos;Hello from A&apos;</div><div class="line">&#125;</div><div class="line">task B &lt;&lt; &#123;</div><div class="line">    println &apos;Hello from B&apos;</div><div class="line">&#125;</div><div class="line">B.dependsOn A</div></pre></td></tr></table></figure>
<p>或者<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">task A &lt;&lt; &#123;</div><div class="line">    println <span class="string">'Hello from A'</span></div><div class="line">&#125;</div><div class="line"><span class="function">task <span class="title">B</span> <span class="params">(dependsOn: A)</span> &lt;&lt; </span>&#123;</div><div class="line">    println <span class="string">'Hello from B'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>执行 <code>./gradlew -q B</code> 的同时会先去执行任务 A：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Hello from A</div><div class="line">Hello from B</div></pre></td></tr></table></figure>
<p>下面的代码同样能创建有依赖关系的任务：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">task A &lt;&lt; &#123;</div><div class="line">    println &apos;Hello from A&apos;</div><div class="line">&#125;</div><div class="line">task B &#123;</div><div class="line">    dependsOn A</div><div class="line">    doLast &#123;</div><div class="line">        println &apos;Hello from B&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="插入依赖"><a href="#插入依赖" class="headerlink" title="插入依赖"></a>插入依赖</h3><p>也可以在已经存在的 task 依赖中插入我们的 task 。<br>比如前面的A和B已经存在了依赖关系，我们想在中间插入任务B1，可以通过下面的代码实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">B1.dependsOn A</div><div class="line">B.dependsOn B1</div></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Hello from A</div><div class="line">Hello from B1</div><div class="line">Hello from B</div></pre></td></tr></table></figure>
<h2 id="任务排序"><a href="#任务排序" class="headerlink" title="任务排序"></a>任务排序</h2><h3 id="mustRunAfter-与-shouldRunAfter"><a href="#mustRunAfter-与-shouldRunAfter" class="headerlink" title="mustRunAfter 与 shouldRunAfter"></a>mustRunAfter 与 shouldRunAfter</h3><p>在某些情况下，我们希望能控制任务的的执行顺序，这种控制并不是向上面那样去显示地加入依赖关系。我们可以通过 <code>mustRunAfter</code> 和 <code>shouldRunAfter</code> 来实现。<br>使用 <code>mustRunAfter</code> 意味着 taskB 必须总是在 taskA 之后运行，<code>shouldRunAfter</code> 和 <code>mustRunAfter</code> 很像，只是没有这么严格。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">task A &lt;&lt; &#123;</div><div class="line">    println &apos;Hello from A&apos;</div><div class="line">&#125;</div><div class="line">task B &lt;&lt; &#123;</div><div class="line">    println &apos;Hello from B&apos;</div><div class="line">&#125;</div><div class="line">A.mustRunAfter B</div></pre></td></tr></table></figure>
<p>执行 <code>./gradlew -q A B</code>，结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Hello from B</div><div class="line">Hello from A</div></pre></td></tr></table></figure>
<p>如果换成 <code>shouldRunAfter</code>，结果也是一样的。<br>虽然我们将两个任务进行了排序，但是他们仍然是可以单独执行的，任务排序不影响任务执行。排序规则只有当两个任务同时执行时才会被应用。<br>比如执行 <code>./gradlew -q A</code> 会输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hello from A</div></pre></td></tr></table></figure>
<p>另外，<code>shouldRunAfter</code> 不影响任务之间的执行依赖。但如果 <code>mustRunAfter</code> 和任务依赖之间发生了冲突，那么执行时将会报错。</p>
<h3 id="finalizedBy"><a href="#finalizedBy" class="headerlink" title="finalizedBy"></a>finalizedBy</h3><p>假如出现了这样一种使用场景，执行完任务 A 之后必须要执行一下任务 B，那么上面的方法是无法解决这个问题的，这时 <code>finalizedBy</code> 就派上用场了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">task A &lt;&lt; &#123;</div><div class="line">    println &apos;Hello from A&apos;</div><div class="line">&#125;</div><div class="line">task B &lt;&lt; &#123;</div><div class="line">    println &apos;Hello from B&apos;</div><div class="line">&#125;</div><div class="line">A.finalizedBy B</div></pre></td></tr></table></figure>
<p>执行 <code>./gradlew -q A</code>，结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Hello from A</div><div class="line">Hello from B</div></pre></td></tr></table></figure>
<h2 id="Task-Type"><a href="#Task-Type" class="headerlink" title="Task Type"></a>Task Type</h2><p>除了前面我们介绍的 task 定义方式以外，Gradle 本身还提供了一些已有的 task 供我们使用，比如 Copy、Delete、Sync 等。因此我们定义 task 的时候是可以继承已有的 task，比如我们可以继承自系统的 Copy Task 来完成文件的拷贝操作。</p>
<h3 id="Copy"><a href="#Copy" class="headerlink" title="Copy"></a>Copy</h3><p><a href="https://docs.gradle.org/current/dsl/org.gradle.api.tasks.Copy.html" target="_blank" rel="external">Copy的API文档</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">task hello2 (type: Copy)&#123;</div><div class="line">    from &apos;src/main/AndroidManifest.xml&apos;  // 调用 from 方法</div><div class="line">    into &apos;build/test&apos;  // 调用 into 方法</div><div class="line">    // 调用 rename 方法</div><div class="line">    rename &#123;String fileName -&gt;</div><div class="line">        fileName = &quot;AndroidManifestCopy.xml&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Copy Task的其他属性和方法参考源码或者文档。</p>
<p>其他 Type 具体详见文档，此处不详细解释。</p>
<h3 id="Exec"><a href="#Exec" class="headerlink" title="Exec"></a>Exec</h3><p><a href="https://docs.gradle.org/current/dsl/org.gradle.api.tasks.Exec.html" target="_blank" rel="external">Exec Task</a>用来执行命令行。</p>
<h2 id="任务的执行条件"><a href="#任务的执行条件" class="headerlink" title="任务的执行条件"></a>任务的执行条件</h2><h3 id="使用判断条件"><a href="#使用判断条件" class="headerlink" title="使用判断条件"></a>使用判断条件</h3><p>可以使用 <code>onlyIf()</code> 方法来为一个任务加入判断条件。就和 Java 里的 <code>if</code> 语句一样，任务只有在条件判断为真时才会执行。可以通过一个闭包来实现判断条件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">task A &lt;&lt; &#123;</div><div class="line">    println &apos;Hello from A&apos;</div><div class="line">&#125;</div><div class="line">A.onlyIf&#123;!project.hasProperty(&apos;skipA&apos;)&#125;</div></pre></td></tr></table></figure>
<p>执行 “./gradlew A -PskipA”，输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:app:A SKIPPED</div></pre></td></tr></table></figure>
<p>可以看到 A 任务被跳过。</p>
<h3 id="使用-StopExecutionException"><a href="#使用-StopExecutionException" class="headerlink" title="使用 StopExecutionException"></a>使用 StopExecutionException</h3><p>如果想要跳过一个任务的逻辑并不能被判断条件通过表达式表达出来，那么可以使用 <code>StopExecutionException</code>。如果这个异常是被一个任务要执行的动作抛出的，这个动作之后的执行以及所有紧跟它的动作都会被跳过。构建将会继续执行下一个任务。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">task hello &#123;</div><div class="line">    doFirst &#123;</div><div class="line">        println &apos;task hello doFirst&apos;</div><div class="line">        throw new StopExecutionException()</div><div class="line">    &#125;</div><div class="line">    doLast &#123;</div><div class="line">        println &apos;task hello doLast&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果你直接使用 Gradle 提供的任务，这项功能还是十分有用的。它允许你为内建的任务加入条件来控制执行。</p>
<h3 id="激活和注销任务"><a href="#激活和注销任务" class="headerlink" title="激活和注销任务"></a>激活和注销任务</h3><p>每一个任务都有一个已经激活的标记(enabled flag)，这个标记一般默认为真。 将它设置为假，那它的任何动作都不会被执行。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">task A &lt;&lt; &#123;</div><div class="line">    println &apos;Hello from A&apos;</div><div class="line">&#125;</div><div class="line">A.enabled = false</div></pre></td></tr></table></figure>
<p>执行 “./gradlew A”，输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:app:A SKIPPED</div></pre></td></tr></table></figure>
<h2 id="声明任务的输入和输出"><a href="#声明任务的输入和输出" class="headerlink" title="声明任务的输入和输出"></a>声明任务的输入和输出</h2><p>我们在执行 Gradle 任务的时候，你可能会注意到 Gradle 会跳过一些任务，这些任务后面会标注 up-to-date。代表这个任务已经运行过了或者说是最新的状态，不再需要产生一次相同的输出。<br>Gradle 通过比较两次 build 之间输入和输出有没有变化来确定这个任务是否是最新的，如果从上一个执行之后这个任务的输入和输出没有发生改变这个任务就标记为 up-to-date，跳过这个任务。<br>因此，要想跳过 up-to-date 的任务，我们必须为任务指定输入和输出。<br>任务的输入属性是 <a href="https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/TaskInputs.html" target="_blank" rel="external">TaskInputs</a> 类型. 任务的输出属性是 <a href="https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/TaskOutputs.html" target="_blank" rel="external">TaskOutputs</a> 类型.<br>下面的例子中把上面的 <code>Copy</code> 示例中的输入和输出文件作为 <code>hello</code> task 的输入和输出文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">task hello &#123;</div><div class="line">    inputs.file (&quot;src/main/AndroidManifest.xml&quot;)</div><div class="line">    outputs.file (&quot;build/test/AndroidManifestCopy.xml&quot;)</div><div class="line">    doFirst &#123;</div><div class="line">        println &apos;task hello doFirst&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第一次执行 <code>./gradlew hello</code>输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">:app:hello</div><div class="line">task hello doFirst</div></pre></td></tr></table></figure>
<p>可以看到任务正常的执行。<br>然后进行第二次执行，输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:app:hello UP-TO-DATE</div></pre></td></tr></table></figure>
<p>跳过这个任务。可以看到，Gradle 能够检测出任务是否是 up-to-date 状态.<br>如果我们修改一下 <code>src/main/AndroidManifest.xml</code> 文件，输入上面命令就会再次执行该任务。</p>
<h3 id="UP-TO-DATE-原理"><a href="#UP-TO-DATE-原理" class="headerlink" title="UP-TO-DATE 原理"></a>UP-TO-DATE 原理</h3><p>当一个任务是首次执行时，Gradle 会取一个输入的快照 (snapshot)。该快照包含组输入文件和每个文件的内容的散列。然后当 Gradle 执行任务时，如果任务成功完成，Gradle 会获得一个输出的快照。该快照包含输出文件和每个文件的内容的散列。Gradle 会保留这两个快照用来在该任务的下一次执行时进行判断。<br>之后，每次在任务执行之前，Gradle 都会为输入和输出取一个新的快照，如果这个快照和之前的快照一样，Gradle 就会假定这个任务已经是最新的 (up-to-date) 并且跳过任务，反之亦然。<br><strong>需要注意的是</strong>，如果一个任务有指定的输出目录，自从该任务上次执行以来被加入到该目录的任务文件都会被忽略，并且不会引起任务过时 (out of date)。这是因为不相关任务也许会共用同一个输出目录。如果这并不是你所想要的情况，可以考虑使用 <code>TaskOutputs.upToDateWhen()</code>。</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://wiki.jikexueyuan.com/project/GradleUserGuide-Wiki/" target="_blank" rel="external">http://wiki.jikexueyuan.com/project/GradleUserGuide-Wiki/</a><br><a href="https://docs.gradle.org/current/userguide/userguide.html" target="_blank" rel="external">https://docs.gradle.org/current/userguide/userguide.html</a><br><a href="http://www.jianshu.com/p/cd1a78dc8346" target="_blank" rel="external">http://www.jianshu.com/p/cd1a78dc8346</a></p>
]]></content>
    
    <summary type="html">
    
      介绍 Gradle 中 Task 的使用
    
    </summary>
    
      <category term="Gradle" scheme="http://yoursite.com/categories/Gradle/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Gradle" scheme="http://yoursite.com/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>Gradle 使用指南 -- Android DSL 扩展</title>
    <link href="http://yoursite.com/2016/03/08/development-tool-gradle-android-dsl-extension/"/>
    <id>http://yoursite.com/2016/03/08/development-tool-gradle-android-dsl-extension/</id>
    <published>2016-03-08T02:00:00.000Z</published>
    <updated>2018-03-11T13:47:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在前面博客<a href="http://www.heqiangfly.com/2016/03/03/development-tool-gradle-command-config/" target="_blank" rel="external">Gradle 使用指南 – 基础配置</a> 中介绍了一些 Gradle 配置的基本命令，其中有一个名称为 <code>android</code>的函数不知道有没有引起大家的注意：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    compileSdkVersion 23</div><div class="line">    buildToolsVersion &quot;23.0.1&quot;</div><div class="line">    defaultConfig &#123;</div><div class="line">        ......</div><div class="line">    &#125;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            ......</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该函数接收闭包作为参数,然而其实在<a href="https://docs.gradle.org/current/dsl/org.gradle.api.invocation.Gradle.html" target="_blank" rel="external">Gradle的API文档</a>中是不存在这个函数的。那么 <code>android</code> 脚本怎么会出现在这里呢？ 答案就是最上面的 <code>apply plugin: &#39;com.android.application&#39;</code>。这个插件提供了 Android 构建所需要的各种 script。<br><a href="http://google.github.io/android-gradle-dsl/" target="_blank" rel="external">Android Plugin DSL Reference</a>：Android 插件 DSL 扩展文档，各个版本的都有。<br>下面简单介绍一些 Android Plugin 对 Gradle 一些扩展的知识，没有涉及的地方可以参考官方文档。</p>
<h2 id="扩展介绍"><a href="#扩展介绍" class="headerlink" title="扩展介绍"></a>扩展介绍</h2><p>下面列出了各个插件使用的Gradle扩展类型：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>AppExtension</td>
<td>对 <code>com.android.application</code> 插件的扩展</td>
</tr>
<tr>
<td>LibraryExtension</td>
<td>对 <code>com.android.library</code> 插件的扩展</td>
</tr>
<tr>
<td>TestExtension</td>
<td>对 <code>com.android.test</code> 插件的扩展</td>
</tr>
<tr>
<td>FeatureExtension</td>
<td>对 <code>com.android.feature</code> 插件的扩展，Gradle 3.0新增</td>
</tr>
</tbody>
</table>
<p>下面是 Android Plugin 一些通用的 Script blocks，以上四种类型的扩展除了对下面的支持之外，还有自己类型的一些扩展。</p>
<table>
<thead>
<tr>
<th>方法（Script blocks）</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>aaptOptions { }</td>
<td>Specifies options for the Android Asset Packaging Tool (AAPT)</td>
</tr>
<tr>
<td>adbOptions { }</td>
<td>Specifies options for the Android Debug Bridge (ADB), such as APK installation options</td>
</tr>
<tr>
<td>buildTypes { }</td>
<td>Encapsulates all build type configurations for this project.</td>
</tr>
<tr>
<td>compileOptions { }</td>
<td>Specifies Java compiler options, such as the language level of the Java source code and generated bytecode.</td>
</tr>
<tr>
<td>dataBinding { }</td>
<td>Specifies options for the Data Binding Library.</td>
</tr>
<tr>
<td>defaultConfig { }</td>
<td>Specifies defaults for variant properties that the Android plugin applies to all build variants.</td>
</tr>
<tr>
<td>dexOptions { }</td>
<td>Specifies options for the DEX tool, such as enabling library pre-dexing.</td>
</tr>
<tr>
<td>externalNativeBuild { }</td>
<td>Configures external native build using CMake or ndk-build.</td>
</tr>
<tr>
<td>jacoco { }</td>
<td>Configuring JaCoCo using this block is deprecated.</td>
</tr>
<tr>
<td>lintOptions { }</td>
<td>Specifies options for the lint tool.</td>
</tr>
<tr>
<td>packagingOptions { }</td>
<td>Specifies options and rules that determine which files the Android plugin packages into your APK.</td>
</tr>
<tr>
<td>productFlavors { }</td>
<td>Encapsulates all product flavors configurations for this project.</td>
</tr>
<tr>
<td>signingConfigs { }</td>
<td>Encapsulates signing configurations that you can apply to BuildType and ProductFlavor configurations.</td>
</tr>
<tr>
<td>sourceSets { }</td>
<td>Encapsulates source set configurations for all variants.</td>
</tr>
<tr>
<td>splits { }</td>
<td>Specifies configurations for building multiple APKs or APK splits.</td>
</tr>
<tr>
<td>testOptions { }</td>
<td>Specifies options for how the Android plugin should run local and instrumented tests.</td>
</tr>
</tbody>
</table>
<h3 id="AppExtension"><a href="#AppExtension" class="headerlink" title="AppExtension"></a>AppExtension</h3><p>下面仅列觉一下 <code>AppExtension</code> 的部分扩展：</p>
<table>
<thead>
<tr>
<th>方法（Script blocks）</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>buildToolsVersion</td>
<td>Specifies the version of the SDK Build Tools to use when building your project.</td>
</tr>
<tr>
<td>applicationVariants</td>
<td>Returns a collection of build variants that the app project includes.</td>
</tr>
<tr>
<td>compileSdkVersion</td>
<td>Specifies the API level to compile your project against. The Android plugin requires you to configure this property.</td>
</tr>
<tr>
<td>testVariants</td>
<td>Returns a collection of Android test build variants.</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
</tr>
</tbody>
</table>
<h2 id="操作-Task"><a href="#操作-Task" class="headerlink" title="操作 Task"></a>操作 Task</h2><p>Android项目中会有大量相同的task，并且它们的名字基于Build Types和Product Flavor生成。<br>android 对象有两个属性：</p>
<ul>
<li>applicationVariants（只适用于app plugin）</li>
<li>libraryVariants（只适用于library plugin）</li>
<li>featureVariants (只适用于feature plugin)</li>
<li>testVariants（三个plugin都适用）</li>
</ul>
<p>这三个都会分别返回一个 <code>ApplicationVariant</code>、<code>LibraryVariant</code> 、 <code>TestVariant</code> 和 <code>FeatureVariant</code> 对象的 <code>DomainObjectCollection</code>。<br><a href="https://android.googlesource.com/platform/tools/build/+/8dca86a/gradle/src/main/groovy/com/android/build/gradle/internal/ApplicationVariant.groovy" target="_blank" rel="external">ApplicationVariant 源码</a><br><code>DomainObjectCollection</code> 继承自 <code>Collection</code>，可以查看 <a href="https://docs.gradle.org/4.2/javadoc/org/gradle/api/DomainObjectCollection.html" target="_blank" rel="external">DomainObjectCollection文档说明</a></p>
<p><strong>注意：</strong> 使用这四个 <code>collection</code> 中的其中一个都会触发生成所有对应的task。这意味着使用 <code>collection</code> 之后不需要更改配置。</p>
<p><code>DomainObjectCollection</code> 可以直接访问所有对象，或者通过过滤器进行筛选。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">android.applicationVariants.all &#123;  variant -&gt;</div><div class="line">    def name = variant.name</div><div class="line">    println &quot;android &quot;+name</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>DomainObjectCollection</code> 可以直接访问所有对象，或者通过过滤器进行筛选。</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://google.github.io/android-gradle-dsl/current/" target="_blank" rel="external">http://google.github.io/android-gradle-dsl/current/</a></p>
<!-- 
https://www.jianshu.com/p/cc98a6b4f52e
https://www.baidu.com/s?word=android.applicationVariants.all&tn=50000021_hao_pg&ie=utf-8&sc=UWd1pgw-pA7EnHc1FMfqnHRkPHD1njfLPW04nBuW5y99U1Dznzu9m1Yknj6knHRvrHf1&ssl_sample=s_4%2Cs_56&srcqid=1643360121714362939
http://blog.csdn.net/qinxiandiqi/article/details/37925629
http://blog.csdn.net/maosidiaoxian/article/details/39473191
https://www.jianshu.com/p/49bb7fb43f90
http://blog.csdn.net/qinxiandiqi/article/category/2394347
https://chaosleong.gitbooks.io/gradle-for-android/content/


Android Plugin DSL Reference
https://google.github.io/android-gradle-dsl/current/
http://blog.csdn.net/wangbaochu/article/details/51177672
-->
]]></content>
    
    <summary type="html">
    
      介绍在Android开发过程中Gradle的一些常见命令和配置
    
    </summary>
    
      <category term="Gradle" scheme="http://yoursite.com/categories/Gradle/"/>
    
    
      <category term="开发工具" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Gradle" scheme="http://yoursite.com/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>Gradle 使用指南 -- 基础配置</title>
    <link href="http://yoursite.com/2016/03/03/development-tool-gradle-command-config/"/>
    <id>http://yoursite.com/2016/03/03/development-tool-gradle-command-config/</id>
    <published>2016-03-03T02:00:00.000Z</published>
    <updated>2019-02-27T03:42:04.461Z</updated>
    
    <content type="html"><![CDATA[<p>Gradle是一种构建工具，它抛弃了基于XML的构建脚本，取而代之的是采用一种基于Groovy的内部领域特定语言（DSL），建议可以先熟悉一下Groovy脚本。<br><a href="https://docs.gradle.org/current/userguide/userguide.html" target="_blank" rel="external">官方文档：Gradle 使用指南</a><br><a href="https://docs.gradle.org/current/dsl/" target="_blank" rel="external">官方文档：Gradle API</a><br><a href="https://developer.android.com/studio/build/index.html" target="_blank" rel="external">Android 配置构建</a><br><a href="http://google.github.io/android-gradle-dsl/current/" target="_blank" rel="external">Android 插件 DSL 扩展</a><br>本文只是简单的介绍一下 Gradle 的一些基本配置，如果想进行一些高级的操作或者是想深入的了解这些配置，请参考我的后面几篇博客。<br><a href="http://www.heqiangfly.com/2016/03/08/development-tool-gradle-android-dsl-extension/" target="_blank" rel="external">Gradle 使用指南 – Android DSL 扩展</a><br><a href="http://www.heqiangfly.com/2016/03/16/development-tool-gradle-customized-plugin-dsl-extension/" target="_blank" rel="external">Gradle 使用指南 – Plugin DSL 扩展</a></p>
<h1 id="Gradle命令"><a href="#Gradle命令" class="headerlink" title="Gradle命令"></a>Gradle命令</h1><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>gradle明明一般是<code>./gradlew +参数</code>， <code>gradlew</code>代表 <code>gradle wrapper</code>，意思是gradle的一层包装，大家可以理解为在这个项目本地就封装了gradle，即gradle wrapper， 在<code>gradle/wrapper/gralde-wrapper.properties</code>文件中声明了它指向的目录和版本。只要下载成功即可用<code>grdlew wrapper</code>的命令代替全局的<code>gradle</code>命令。</p>
<ul>
<li><code>./gradlew -v</code> 版本号</li>
<li><code>./gradlew clean</code> 清除app目录下的build文件夹</li>
<li><code>./gradlew build</code> 检查依赖并编译打包</li>
<li><code>./gradlew tasks</code> 列出所有task</li>
</ul>
<p>这里注意的是 <code>./gradlew build</code> 命令把debug、release环境的包都打出来，如果正式发布只需要打Release的包，该怎么办呢，下面介绍一个很有用的命令 <code>assemble</code>， 如：</p>
<ul>
<li><code>./gradlew assembleDebug</code> 编译并打Debug包</li>
<li><code>./gradlew assembleRelease</code> 编译并打Release的包</li>
</ul>
<p>除此之外，<code>assemble</code>还可以和<code>productFlavors</code>结合使用：</p>
<ul>
<li><code>./gradlew installRelease</code> Release模式打包并安装</li>
<li><code>./gradlew uninstallRelease</code> 卸载Release模式包</li>
</ul>
<h2 id="加入自定义参数"><a href="#加入自定义参数" class="headerlink" title="加入自定义参数"></a>加入自定义参数</h2><p>比如我们想根据不同的参数来进行不用的编译配置，可以在<code>./gradlew</code>中加入自定义参数。</p>
<ul>
<li><code>./gradlew assembleDebug -Pcustom=true</code></li>
</ul>
<p>就可以在<code>build.gradle</code>中使用下面代码来判断：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if (project.hasProperty(&apos;custom&apos;))&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="assemble结合Build-Variants来创建task"><a href="#assemble结合Build-Variants来创建task" class="headerlink" title="assemble结合Build Variants来创建task"></a>assemble结合Build Variants来创建task</h2><p><code>assemble</code> 还能和 <code>Product Flavor</code> 结合创建新的任务，其实 <code>assemble</code> 是和 <code>Build Variants</code> 一起结合使用的，而 <code>Build Variants = Build Type + Product Flavor</code>，举个例子大家就明白了：<br>如果我们想打包 wandoujia 渠道的<code>release</code>版本，执行如下命令就好了：</p>
<ul>
<li><code>./gradlew assembleWandoujiaRelease</code></li>
</ul>
<p>如果我们只打wandoujia渠道版本，则：</p>
<ul>
<li><code>./gradlew assembleWandoujia</code></li>
</ul>
<p>此命令会生成wandoujia渠道的Release和Debug版本<br>同理我想打全部Release版本：</p>
<ul>
<li><code>./gradlew assembleRelease</code></li>
</ul>
<p>这条命令会把Product Flavor下的所有渠道的Release版本都打出来。<br>总之，<code>assemble</code> 命令创建task有如下用法：</p>
<ol>
<li><code>assemble&lt;Variant Name&gt;</code>： 允许直接构建一个Variant版本，例如<code>assembleFlavor1Debug</code>。</li>
<li><code>assemble&lt;Build Type Name&gt;</code>： 允许构建指定Build Type的所有APK，例如<code>assembleDebug</code>将会构建Flavor1Debug和Flavor2Debug两个Variant版本。</li>
<li><code>assemble&lt;Product Flavor Name&gt;</code>： 允许构建指定flavor的所有APK，例如<code>assembleFlavor1</code>将会构建Flavor1Debug和Flavor1Release两个Variant版本。</li>
</ol>
<h1 id="Gradle配置"><a href="#Gradle配置" class="headerlink" title="Gradle配置"></a>Gradle配置</h1><p>Gradle构建脚本 build.gradle<br>Gradle属性文件 gradle.properties<br>Gradle设置文件 settings.gradle</p>
<h2 id="build-gradle"><a href="#build-gradle" class="headerlink" title="build.gradle"></a>build.gradle</h2><p>先看整个项目的gradle配置文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath &apos;com.android.tools.build:gradle:1.3.0&apos;</div><div class="line"></div><div class="line">        // NOTE: Do not place your application dependencies here; they belong</div><div class="line">        // in the individual module build.gradle files</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>内容主要包含了两个方面：一个是声明仓库的源，这里可以看到是指明的<code>jcenter()</code>, 之前版本则是<code>mavenCentral()</code>, <code>jcenter</code>可以理解成是一个新的中央远程仓库，兼容<code>maven</code>中心仓库，而且性能更优。<br>另一个是声明了android gradle plugin的版本，android studio 1.0正式版必须要求支持gradle plugin 1.0的版本。<br>上面的 buildscript 和 allprojects 其实是 Project 类的一个 Script blocks，Gradle 中每个 build.gradle 会转换成一个 Project 对象。</p>
<p>某个Moudle的gradle配置文件：</p>
<h3 id="buildscript"><a href="#buildscript" class="headerlink" title="buildscript"></a>buildscript</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        maven &#123; url &apos;http://*********&apos; &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    dependencies &#123;</div><div class="line">        classpath &apos;com.android.tools.build:gradle:1.3.1&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>buildscript{}</code>设置脚本的运行环境。</li>
<li><code>repositories{}</code>支持java依赖库管理，用于项目依赖。</li>
<li><code>dependencies{}</code>依赖包的定义。支持<code>maven/ivy</code>，远程，本地库，也支持单文件。如果前面定义了<code>repositories{}</code>maven 库，则使用maven的依赖库，使用时只需要按照用类似于<code>com.android.tools.build:gradle:0.4</code>，gradle 就会自动的往远程库下载相应的依赖。</li>
</ul>
<h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//声明引用 com.android.application 插件，那么这个模块就是一个Android应用程序</div><div class="line">apply plugin: &apos;com.android.application&apos;</div></pre></td></tr></table></figure>
<ul>
<li><code>apply plugin</code>:声明引用插件的类型。如果是库的话就加</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;com.android.library&apos;</div></pre></td></tr></table></figure>
<ul>
<li><code>apply from</code>：表示引用其他的配置文件，比如 </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">apply from: &quot;config.gradle&quot;</div><div class="line">apply from: &apos;../version.gradle&apos;, to: rootProject     // 导入到 root project</div><div class="line">apply from: &apos;../buildscript.gradle&apos;, to:buildscript  // 导入到 buildscript 块</div></pre></td></tr></table></figure>
<h3 id="android"><a href="#android" class="headerlink" title="android"></a>android</h3><p>这个是 Android 插件引入的 Script blocks，想深入了解的话看我后面的博客。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    // 编译SDK的版本</div><div class="line">    compileSdkVersion 22</div><div class="line">    // build tools的版本</div><div class="line">    buildToolsVersion &quot;23.0.1&quot;</div><div class="line"></div><div class="line">    //aapt配置</div><div class="line">    aaptOptions &#123;</div><div class="line">        //不用压缩的文件</div><div class="line">        noCompress &apos;pak&apos;, &apos;dat&apos;, &apos;bin&apos;, &apos;notice&apos;</div><div class="line">        //打包时候要忽略的文件</div><div class="line">        ignoreAssetsPattern &quot;!.svn:!.git&quot;</div><div class="line">        //分包</div><div class="line">        multiDexEnabled true</div><div class="line">        //--extra-packages是为资源文件设置别名：意思是通过该应用包名+R，com.android.test1.R和com.android.test2.R都可以访问到资源</div><div class="line">        additionalParameters &apos;--extra-packages&apos;, &apos;com.android.test1&apos;,&apos;--extra-packages&apos;,&apos;com.android.test2&apos;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //默认配置</div><div class="line">    defaultConfig &#123;</div><div class="line">        //应用的包名</div><div class="line">        applicationId &quot;com.example.heqiang.androiddemo&quot;</div><div class="line">        minSdkVersion 21</div><div class="line">        targetSdkVersion 22</div><div class="line">        versionCode 1</div><div class="line">        versionName &quot;1.0&quot;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //编译配置</div><div class="line">    compileOptions &#123;</div><div class="line">        // java版本</div><div class="line">        sourceCompatibility JavaVersion.VERSION_1_7</div><div class="line">        targetCompatibility JavaVersion.VERSION_1_7</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //源文件目录设置</div><div class="line">    sourceSets &#123;</div><div class="line">        main &#123;</div><div class="line">             //jni lib的位置</div><div class="line">             jniLibs.srcDirs = jniLibs.srcDirs &lt;&lt; &apos;src/jniLibs&apos;</div><div class="line">             //定义多个资源文件夹,这种情况下，两个资源文件夹具有相同优先级，即如果一个资源在两个文件夹都声明了，合并会报错。</div><div class="line">             res.srcDirs = [&apos;src/main/res&apos;, &apos;src/main/res2&apos;]</div><div class="line">             //指定多个源文件目录</div><div class="line">             java.srcDirs = [&apos;src/main/java&apos;, &apos;src/main/aidl&apos;]</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //签名配置</div><div class="line">    signingConfigs &#123;</div><div class="line">        debug &#123;</div><div class="line">            keyAlias &apos;androiddebugkey&apos;</div><div class="line">            keyPassword &apos;android&apos;</div><div class="line">            storeFile file(&apos;keystore/debug.keystore&apos;)</div><div class="line">            storePassword &apos;android&apos;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    buildTypes &#123;</div><div class="line">        //release版本配置</div><div class="line">        release &#123;</div><div class="line">            debuggable false</div><div class="line">            // 是否进行混淆</div><div class="line">            minifyEnabled true</div><div class="line">            //去除没有用到的资源文件，要求minifyEnabled为true才生效</div><div class="line">            shrinkResources true</div><div class="line">            // 混淆文件的位置</div><div class="line">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.txt&apos;</div><div class="line">            signingConfig signingConfigs.debug</div><div class="line">            //ndk的一些相关配置，也可以放到defaultConfig里面。</div><div class="line">            //指定要ndk需要兼容的架构(这样其他依赖包里mips,x86,arm-v8之类的so会被过滤掉)</div><div class="line">            ndk &#123;</div><div class="line">                abiFilter &quot;armeabi&quot;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        //debug版本配置</div><div class="line">        debug &#123;</div><div class="line">            debuggable true</div><div class="line">            // 是否进行混淆</div><div class="line">            minifyEnabled false</div><div class="line">            //去除没有用到的资源文件，要求minifyEnabled为true才生效</div><div class="line">            shrinkResources true</div><div class="line">            // 混淆文件的位置</div><div class="line">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.txt&apos;</div><div class="line">            signingConfig signingConfigs.debug</div><div class="line">            //ndk的一些相关配置，也可以放到defaultConfig里面。</div><div class="line">            //指定要ndk需要兼容的架构(这样其他依赖包里mips,x86,arm-v8之类的so会被过滤掉)</div><div class="line">            ndk &#123;</div><div class="line">                abiFilter &quot;armeabi&quot;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    // lint配置 </div><div class="line">    lintOptions &#123;</div><div class="line">      //移除lint检查的error</div><div class="line">      abortOnError false</div><div class="line">      //禁止掉某些lint检查</div><div class="line">      disable &apos;NewApi&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>android{}</code>设置编译android项目的参数，构建android项目的所有配置都写在这里。<br>除了上面写的，在<code>android{}</code>块中可以包含以下直接配置项：</p>
<ul>
<li><code>productFlavors{ }</code> 产品风格配置，ProductFlavor类型，后面的多渠道打包章节会详细介绍</li>
<li><code>testOptions{ }</code> 测试配置，TestOptions类型</li>
<li><code>dexOptions{ }</code> dex配置，DexOptions类型</li>
<li><code>packagingOptions{ }</code> PackagingOptions类型</li>
<li><code>jacoco{ }</code> JacocoExtension类型。 用于设定 jacoco版本</li>
<li><code>splits{ }</code> Splits类型。</li>
</ul>
<p>几点说明：</p>
<ul>
<li>文件开头<code>apply plugin</code>是最新gradle版本的写法，以前的写法是<code>apply plugin: &#39;android&#39;</code>, 如果还是以前的写法，请改正过来。</li>
<li><code>minifyEnabled</code>也是最新的语法，很早之前是<code>runProguard</code>,这个也需要更新下。</li>
<li><code>proguardFiles</code>这部分有两段，前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明，免去了我们很多事，这个文件的目录在 sdk目录<code>/tools/proguard/proguard-android.txt</code> , 后一部分是我们项目里的自定义的混淆文件，目录就在 <code>app/proguard-rules.txt</code> , 如果你用Studio 1.0创建的新项目默认生成的文件名是 <code>proguard-rules.pro</code> , 这个名字没关系，在这个文件里你可以声明一些第三方依赖的一些混淆规则。最终混淆的结果是这两部分文件共同作用的。</li>
<li><code>aaptOptions</code>更多介绍 <a href="http://blog.csdn.net/heqiangflytosky/article/details/51009123" target="_blank" rel="external">http://blog.csdn.net/heqiangflytosky/article/details/51009123</a></li>
</ul>
<h4 id="变量的引用"><a href="#变量的引用" class="headerlink" title="变量的引用"></a>变量的引用</h4><p>比如在gradle的某个地方想使用版本号，可以使用下面的方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">def getVersionCode() &#123;</div><div class="line">    int code = android.defaultConfig.versionCode</div><div class="line">    return code</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="repositories"><a href="#repositories" class="headerlink" title="repositories"></a>repositories</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">repositories &#123;</div><div class="line">    flatDir &#123;</div><div class="line">        //本地jar依赖包路径</div><div class="line">        dirs &apos;../../../../main/libs&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="dependencies"><a href="#dependencies" class="headerlink" title="dependencies"></a>dependencies</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">        compile files(&apos;libs/android-support-v4.jar&apos;)</div><div class="line">        //在flatDir.dirs下面找依赖的aar</div><div class="line">        compile (name:&apos;ui&apos;, ext:&apos;aar&apos;)</div><div class="line">        // 编译extras目录下的ShimmerAndroid模块</div><div class="line">        // 使用transitive属性设置为false来排除所有的传递依赖，默认为true</div><div class="line">        compile project(&apos;:extras:ShimmerAndroid&apos;)&#123;</div><div class="line">            transitive = false</div><div class="line">        &#125;</div><div class="line">        // 编译CommonSDK模块，但是去掉此模块中对com.android.support的依赖，防止重复依赖报错</div><div class="line">        compile (project(&apos;:CommonSDK&apos;)) &#123; exclude group: &quot;com.android.support&quot; &#125;</div><div class="line">        provided fileTree(dir: &apos;src/android5/libs&apos;, include: [&apos;*.jar&apos;])</div><div class="line">        provided &apos;com.android.support:support-v4:21.0.3&apos;</div><div class="line">        provided project(&apos;:main-host&apos;)</div><div class="line">        //通用使用exclude排除support-compat模块的依赖</div><div class="line">        compile (&apos;com.jakewharton:butterknife:8.5.1&apos;)&#123;</div><div class="line">            exclude module: &apos;support-compat&apos;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // gradle 3.0以后版本支持的写法</div><div class="line">        implementation &apos;com.android.support.constraint:constraint-layout:1.0.2&apos;</div><div class="line">        api &apos;com.android.support:design:26.1.0&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>compile</code>和<code>provided</code><br><code>compile</code>表示编译时提供并打包进apk。<br><code>provided</code>表示只在编译时提供，不打包进apk。</li>
<li><code>implementation</code> 和 <code>api</code><br>这两个是 Gradle 3.0 以后的依赖方法，<code>implementation</code> 在编译期会将依赖隐藏在内部而不对外公开，就是说使用 <code>implementation</code> 的依赖不会传递。只有在运行时其他模块才能获取依赖。比如：一个项目中app模块依赖A模块，A模块使用 <code>implementation</code> 来依赖 fastjson ，那么app里面如果不添加依赖的话就不能直接引用fastjson。这样做的好处是1.加快编译速度，2. 隐藏对外不必要的接口。<br><code>api</code> 和以前的 <code>compile</code> 是一样的。<br>gradle 3.0以后使用 <code>compileOnly</code> 来代替 <code>provided</code>，使用 <code>runtimeOnly</code> 来代替 <code>apk</code></li>
<li><code>exclude</code> 防止重复依赖，后面会重点介绍</li>
<li><code>transitive</code> 排除所有的传递依赖，后面会重点介绍</li>
<li><code>include</code></li>
</ul>
<p>CommonSDK模块的定义可以参考<code>settings.gradle</code><br>其他的介绍可以参考 依赖库管理。</p>
<h3 id="几点说明"><a href="#几点说明" class="headerlink" title="几点说明"></a>几点说明</h3><ul>
<li>看到上面的两个一模一样的<code>repositories</code>和<code>dependencies</code>了吗？他们的作用是不一样的，在<code>buildscript</code>里面的那个是插件初始化环境用的，用于设定插件的下载仓库，而外面的这个是设定工程依赖的一些模块和远程library的下载仓库的。</li>
</ul>
<h2 id="settings-gradle"><a href="#settings-gradle" class="headerlink" title="settings.gradle"></a>settings.gradle</h2><p>这个文件是全局的项目配置文件，里面主要声明一些需要加入gradle的module。<br>一般在<code>setting.gradle</code>中主要是调用<code>include</code>方法，导入工程下的各个子模块。<br>那我们在<code>setting.gradle</code>里面还能写什么呢？因为<code>setting.gradle</code>对应的是<code>gradle</code>中的<code>Settings</code>对象，那查下<code>Settings</code>的文档（<a href="https://docs.gradle.org/current/dsl/org.gradle.api.initialization.Settings.html），看下它都有哪些方法，哪些属性，就知道在`setting.gradle`能写什么了；" target="_blank" rel="external">https://docs.gradle.org/current/dsl/org.gradle.api.initialization.Settings.html），看下它都有哪些方法，哪些属性，就知道在`setting.gradle`能写什么了；</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">include &apos;:AndroidDemo&apos;</div><div class="line"></div><div class="line">include &apos;:CommonSDK&apos;</div><div class="line">project(&apos;:CommonSDK&apos;).projectDir = new File(settingsDir, &apos;../../CommonSDK/&apos;)</div></pre></td></tr></table></figure>
<p><code>include</code>调用后，生成了一个名为:<code>CommonSDK</code>的<code>Project</code>对象，<code>project(&#39;:CommonSDK&#39;)</code>取出这个对象，设置<code>Project</code>的 <code>projectDir</code>属性。<code>projectDir</code>哪里来的？请看<code>Project</code>类的文档。</p>
<h2 id="gradle-properties"><a href="#gradle-properties" class="headerlink" title="gradle.properties"></a>gradle.properties</h2><p>可以在 gradle.properties 文件中配置一些变量，这些变量在这个工程下的所有module的build.gradle文件里都可以使用。这样就可以把一些共用的变量放到这里，这样后面修改的时候就可以只修改这个变量，不用各个模块都要修改了。<br>比如我们在 gradle.properties SDK 版本以及应用的版本号：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">MIN_SDK_VERSION=21</div><div class="line">TARGET_SDK_VERSION=22</div><div class="line">VERSION_CODE=200100</div><div class="line">VERSION_NAME=2.1.0</div><div class="line">debug=true</div><div class="line">RX_ANDROID_VERSION=1.2.0</div></pre></td></tr></table></figure>
<p>那么在 build.gradle 中可以通过<code>project</code>进行获取或者 <code>&quot;${RX_ANDROID_VERSION}&quot;</code> 引用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">    defaultConfig &#123;</div><div class="line">        applicationId &quot;com.example.heqiang.testsomething&quot;</div><div class="line">        minSdkVersion project.MIN_SDK_VERSION as int</div><div class="line">        targetSdkVersion project.TARGET_SDK_VERSION as int</div><div class="line">        versionCode project.VERSION_CODE as int</div><div class="line">        versionName project.VERSION_NAME</div><div class="line">        // 还可以这样获取</div><div class="line">        if(&apos;true&apos; == project.properties[&apos;debug&apos;])&#123;</div><div class="line">        &#125;</div><div class="line">        /*</div><div class="line">        * as int 关键字是用来进行类型转换的，因为从配置里面读取出来的默认是字符串</div><div class="line">        *还可以使用 versionCode Integer.parseInt(project.VERSION_CODE)</div><div class="line">        * */</div><div class="line">    &#125;</div><div class="line">// 还可以这样用</div><div class="line">dependencies &#123;</div><div class="line">    compile &quot;io.reactivex:rxandroid:$&#123;RX_ANDROID_VERSION&#125;&quot;</div><div class="line">    compile &quot;io.reactivex:rxjava:$&#123;RX_JAVA_VERSION&#125;&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或者在 <code>gradle.properties</code> 中添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">systemProp.versionName=1.0.0</div><div class="line">systemProp.versionCode=100</div></pre></td></tr></table></figure>
<p>可以通过 <code>System.properties</code>进行引用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">def code = System.properties[&apos;versionCode&apos;]</div><div class="line">def name = System.properties[&apos;versionName&apos;]</div></pre></td></tr></table></figure>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>我们在进行一些配置的时候可能需要知道一些变量的值，这时候可以在 build.gradle 中添加打印进行调试，比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">defaultConfig &#123;</div><div class="line">    applicationId &quot;com.example.hq.testsomething&quot;</div><div class="line">    minSdkVersion project.MIN_SDK_VERSION as int</div><div class="line">    targetSdkVersion project.TARGET_SDK_VERSION as int</div><div class="line">    versionCode project.VERSION_CODE as int</div><div class="line">    versionName project.VERSION_NAME</div><div class="line"></div><div class="line">    println(&apos;** build versionName=&apos; + versionName)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 Gradle Console 中就可以看到打印：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">** build versionName=2.1.0</div></pre></td></tr></table></figure>
<h1 id="依赖库管理"><a href="#依赖库管理" class="headerlink" title="依赖库管理"></a>依赖库管理</h1><h2 id="本地依赖"><a href="#本地依赖" class="headerlink" title="本地依赖"></a>本地依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">	//单文件依赖</div><div class="line">        compile files(&apos;libs/android-support-v4.jar&apos;)</div><div class="line">	//某个文件夹下面全部依赖</div><div class="line">        compile fileTree(dir: &apos;src/android6/libs&apos;, include: [&apos;*.jar&apos;])</div><div class="line">        compile (name:&apos;ui&apos;, ext:&apos;aar&apos;)</div><div class="line">	compile (project(&apos;:CommonSDK&apos;)) &#123; exclude group: &quot;com.android.support&quot; &#125;</div><div class="line">        provided fileTree(dir: &apos;src/android5/libs&apos;, include: [&apos;*.jar&apos;])</div><div class="line">        provided &apos;com.android.support:support-v4:21.0.3&apos;</div><div class="line">        provided project(&apos;:main-host&apos;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="远程依赖"><a href="#远程依赖" class="headerlink" title="远程依赖"></a>远程依赖</h2><p><code>gradle</code>同时支持<code>maven</code>，<code>ivy</code>，以<code>maven</code>作为例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">repositories &#123; </div><div class="line"> //从中央库里面获取依赖</div><div class="line"> mavenCentral() </div><div class="line"> //或者使用指定的本地maven 库</div><div class="line"> maven&#123; </div><div class="line">  url &quot;file://F:/githubrepo/releases&quot; </div><div class="line"> &#125;</div><div class="line"> //或者使用指定的远程maven库</div><div class="line"> maven&#123; </div><div class="line">  url &quot;https://github.com/youxiachai/youxiachai-mvn-repo/raw/master/releases&quot; </div><div class="line"> &#125; </div><div class="line">&#125; </div><div class="line"></div><div class="line">dependencies &#123; </div><div class="line"> //应用格式: packageName:artifactId:version </div><div class="line"> compile &apos;com.google.android:support-v4:r13&apos; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="项目依赖"><a href="#项目依赖" class="headerlink" title="项目依赖"></a>项目依赖</h2><p>对于项目依赖<code>android library</code>的话，在这里需要使用gradle mulit project机制。<br>Mulit project设置是<code>gradle</code>约定的一种格式，如果需要编译某个项目之前，要先编译另外一个项目的时候，就需要用到。结构如下（来自于官方文档）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">MyProject/ </div><div class="line">| settings.gradle </div><div class="line"> + app/ </div><div class="line">| build.gradle </div><div class="line"> + libraries/ </div><div class="line">  + lib1/ </div><div class="line">   | build.gradle </div><div class="line">  + lib2/ </div><div class="line">   | build.gradle</div></pre></td></tr></table></figure>
<p>需要在workplace目录下面创建<code>settings.gradle</code> 的文件，然后在里面写上：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">include &apos;:app&apos;, &apos;:libraries:lib1&apos;, &apos;:libraries:lib2&apos;</div></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">include &apos;:AndroidDemo&apos;</div><div class="line"></div><div class="line">include &apos;:CommonSDK&apos;</div><div class="line">project(&apos;:CommonSDK&apos;).projectDir = new File(settingsDir, &apos;../../CommonSDK/&apos;)</div></pre></td></tr></table></figure>
<p>如此，gradle mutil project 就设置完毕。<br>对于app project如果需要应用libraries目录下的lib1，只需要在app project的<code>build.gradle</code>文件里的依赖中这么写：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile project(&apos;:libraries:lib1&apos;)</div></pre></td></tr></table></figure>
<p>类似前面的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">provided project(&apos;:main-host&apos;)</div></pre></td></tr></table></figure>
<p>即可完成，写完以后可以用<code>gradle dependencies</code>可以检查依赖状况</p>
<h2 id="Gradle依赖的统一管理"><a href="#Gradle依赖的统一管理" class="headerlink" title="Gradle依赖的统一管理"></a>Gradle依赖的统一管理</h2><p>我们可以在项目的根目录创建一个gradle配置文件<code>config.gradle</code>，内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">ext&#123;</div><div class="line">    android=[</div><div class="line">            compileSdkVersion: 22,</div><div class="line">            buildToolsVersion: &quot;23.0.1&quot;,</div><div class="line">            minSdkVersion: 21,</div><div class="line">            targetSdkVersion: 22,</div><div class="line">            versionCode: 1,</div><div class="line">            versionName: &quot;1.0&quot;</div><div class="line">    ]</div><div class="line">    dependencies=[</div><div class="line">            compile:&apos;com.android.support:support-v4:21.0.3&apos;,</div><div class="line">            compile: (project(&apos;:CommonSDK&apos;)) &#123; exclude group: &quot;com.android.support&quot; &#125;,</div><div class="line">            provided: fileTree(dir: &apos;src/android5/libs&apos;, include: [&apos;*.jar&apos;]),</div><div class="line">            provided: project(&apos;:main-host&apos;)</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>targetSdkVersion的版本还有依赖库的版本升级都在这里进行统一管理，所有的module以及主项目都从这里同意读取就可以了。<br>在build.gradle文件中加入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply from:&quot;config.gradle&quot;</div></pre></td></tr></table></figure>
<p>意思是所有的子项目或者所有的modules都可以从这个配置文件中读取内容。<br>android节点读取ext中android对应项，dependencies读取dependencies对应项，如果配置有变化就可以只在config.gradle中修改，是不是很方便进行配置的管理呢？</p>
<h2 id="检查依赖报告"><a href="#检查依赖报告" class="headerlink" title="检查依赖报告"></a>检查依赖报告</h2><p>运行命令<code>./gradlew &lt;projectname&gt;:dependencies</code> （projectname为settings.gradle里面配置的各个project，如果没有配置，直接运行<code>./gradlew dependencies</code>），会把该模块所有配置的依赖树会打印出来，依赖树显示了你 build 脚本声明的顶级依赖和它们的传递依赖。<br>为了减少输出内容我们只对 compile configuration感兴趣，那么可以运行下面的命令：<br><code>./gradlew &lt;projectname&gt;:dependencies --configuration compile</code><br><img src="/images/development-tool-gradle-command-config/gradle-dependencies.png" alt="依赖树"><br>仔细观察你会发现有些传递依赖标注了（*）星号，表示这个依赖被忽略了，这是因为其他顶级依赖中也依赖了这个传递的依赖，Gradle会自动分析下载最合适的依赖，一般是比较新的版本。<br>（-&gt;）箭头表示被强转变依赖于箭头后面的版本<br>如果在 Gradle 3.0 以后可以运行：<br><code>./gradlew &lt;projectname&gt;:dependencies --configuration releaseRuntimeClasspath</code></p>
<h2 id="排除传递依赖"><a href="#排除传递依赖" class="headerlink" title="排除传递依赖"></a>排除传递依赖</h2><p>Gradle允许你完全控制传递依赖，你可以选择排除全部的传递依赖也可以排除指定的依赖。</p>
<ul>
<li><p>exclude：前面已经介绍过，可以设置不编译指定的模块，排除指定模块的依赖。后的参数有<code>group</code>和<code>module</code>，可以分别单独使用，会排除所有匹配项。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 编译CommonSDK模块，但是去掉此模块中对com.android.support的依赖，防止重复依赖报错</div><div class="line">compile (project(&apos;:CommonSDK&apos;)) &#123; exclude group: &quot;com.android.support&quot; &#125;</div><div class="line">compile (&apos;com.jakewharton:butterknife:8.5.1&apos;)&#123;</div><div class="line">    exclude module: &apos;support-compat&apos;</div><div class="line">    exclude group: &apos;com.android.**.***&apos;, module: &apos;***-***&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>transitive：前面已经介绍过，用于自动处理子依赖项，默认为true，gradle自动添加子依赖项。设置为false排除所有的传递依赖，可以用来解决一些依赖冲突的问题，比如一些 <code>Error:java.io.IOException: Duplicate zip entry</code> 报错。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 使用transitive属性设置为false来排除所有的传递依赖</div><div class="line">compile project(&apos;:extras:ShimmerAndroid&apos;)&#123;</div><div class="line">    transitive = false</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>force：强制设置某个模块的版本。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">configurations.all&#123;</div><div class="line">    resolutionStrategy&#123;</div><div class="line">        force&apos;org.hamcrest:hamcrest-core:1.3&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>或者：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">compile (&apos;com.jakewharton:butterknife:8.5.1&apos;)&#123;</div><div class="line">    // 冲突时优先使用该版本</div><div class="line">    force = true</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样，应用中对<code>org.hamcrest:hamcrest-core</code> 依赖就会变成1.3版本。</p>
<h2 id="动态版本声明"><a href="#动态版本声明" class="headerlink" title="动态版本声明"></a>动态版本声明</h2><p>如果你想使用一个依赖的最新版本，你可以使用latest.integration，比如声明 Cargo Ant tasks的最新版本，你可以这样写org.codehaus .cargo:cargo-ant:latest-integration，你也可以用一个+号来动态的声明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">	//依赖最新的1.x版本</div><div class="line">	compile &quot;org.codehaus.cargo:cargo-ant:1.+&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后在依赖树里面可以清晰的看到选择了哪个版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">\--- org.codehaus.cargo:cargo-ant:1.+ -&gt; 1.3.1</div></pre></td></tr></table></figure></p>
<p><a href="http://www.open-open.com/lib/view/open1431391503529.html" target="_blank" rel="external">http://www.open-open.com/lib/view/open1431391503529.html</a><br><a href="http://www.jianshu.com/p/429733dbbc34" target="_blank" rel="external">http://www.jianshu.com/p/429733dbbc34</a></p>
<h1 id="多渠道打包"><a href="#多渠道打包" class="headerlink" title="多渠道打包"></a>多渠道打包</h1><p>主要借助</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    productFlavors&#123;</div><div class="line">    ……</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>来实现。<br>网上多是类似友盟的配置，copy过来：<br><a href="http://blog.csdn.net/maosidiaoxian/article/details/42000913" target="_blank" rel="external">http://blog.csdn.net/maosidiaoxian/article/details/42000913</a><br><a href="https://segmentfault.com/a/1190000004050697" target="_blank" rel="external">https://segmentfault.com/a/1190000004050697</a><br>在<code>AndroidManifest.xml</code>里面写上：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;meta-data</div><div class="line">    android:name=&quot;UMENG_CHANNEL&quot;</div><div class="line">    android:value=&quot;Channel_ID&quot; /&gt;</div></pre></td></tr></table></figure>
<p>里面的<code>Channel_ID</code>就是渠道标示。我们的目标就是在编译的时候这个值能够自动变化。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    productFlavors &#123;</div><div class="line">        xiaomi &#123;</div><div class="line">            manifestPlaceholders = [UMENG_CHANNEL_VALUE: &quot;xiaomi&quot;]</div><div class="line">        &#125;</div><div class="line">        _360 &#123;</div><div class="line">            manifestPlaceholders = [UMENG_CHANNEL_VALUE: &quot;_360&quot;]</div><div class="line">        &#125;</div><div class="line">        baidu &#123;</div><div class="line">            manifestPlaceholders = [UMENG_CHANNEL_VALUE: &quot;baidu&quot;]</div><div class="line">        &#125;</div><div class="line">        wandoujia &#123;</div><div class="line">            manifestPlaceholders = [UMENG_CHANNEL_VALUE: &quot;wandoujia&quot;]</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或者批量修改</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    productFlavors &#123;</div><div class="line">        xiaomi &#123;&#125;</div><div class="line">        _360 &#123;&#125;</div><div class="line">        baidu &#123;&#125;</div><div class="line">        wandoujia &#123;&#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    productFlavors.all &#123; </div><div class="line">        flavor -&gt; flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name] </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后用 <code>./gradlew assembleRelease</code> 这条命令会把Product Flavor下的所有渠道的Release版本都打出来。<br><code>assemble&lt;Product Flavor Name&gt;</code>： 允许构建指定flavor的所有APK，例如<code>assembleFlavor1</code>将会构建<code>Flavor1Debug</code>和<code>Flavor1Release</code>两个<code>Variant</code>版本。<br>在上面当中，我们也可以指定一个默认的渠道名，如果需要的话。指定默认的值是在<code>defaultConfig</code>节点当中添加如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">manifestPlaceholders = [ CHANNEL_NAME:&quot;Unspecified&quot;]</div></pre></td></tr></table></figure></p>
<p>这里的<code>Unspecified</code>换成你实际上的默认的渠道名。<br>使用<code>manifestPlaceholders</code>的这种配置，同样适用于<code>manifest</code>的其他配置。比如你需要在不同渠道发布的apk里面，指定不同的启动<code>Activity</code>。比如在豌豆荚里面发布的，启动的<code>Activity</code>显示的是豌豆荚首发的界面，应用宝里面启动的是应用宝首发的界面（哈哈，有点坏），你就可以对你的<code>activity</code>的值使用 <code>{activity_name}</code>的方式，然后在<code>productFlavors</code>里面配置这个<code>{activity_name}</code>的值。</p>
<p>另外这里记录一个 productFlavors 和 applicationId 关系的小知识。<br><a href="https://developer.android.com/studio/build/application-id.html" target="_blank" rel="external">参考文档</a><br>每个 Android 应用均有一个唯一的应用 ID，我们可以在通过 productFlavors 构建的应用变体中配置不同的应用 ID。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    defaultConfig &#123;</div><div class="line">        applicationId &quot;com.example.myapp&quot;</div><div class="line">    &#125;</div><div class="line">    productFlavors &#123;</div><div class="line">        free &#123;</div><div class="line">            applicationIdSuffix &quot;.free&quot;</div><div class="line">        &#125;</div><div class="line">        pro &#123;</div><div class="line">            applicationIdSuffix &quot;.pro&quot;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样，“免费”的 applicationId 就变为“com.example.myapp.free”。</p>
]]></content>
    
    <summary type="html">
    
      介绍在Android开发过程中Gradle的一些常见命令和配置
    
    </summary>
    
      <category term="Gradle" scheme="http://yoursite.com/categories/Gradle/"/>
    
    
      <category term="开发工具" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Gradle" scheme="http://yoursite.com/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>Gradle 使用指南 -- 资料汇总</title>
    <link href="http://yoursite.com/2016/03/02/development-tool-gradle-study-materials/"/>
    <id>http://yoursite.com/2016/03/02/development-tool-gradle-study-materials/</id>
    <published>2016-03-02T02:00:00.000Z</published>
    <updated>2019-03-01T00:56:34.283Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://docs.gradle.org/current/userguide/userguide.html" target="_blank" rel="external">Gradle 官方文档：Gradle User Manual</a><br><a href="https://gradle.org/guides/" target="_blank" rel="external">Gradle 官方文档：Gradle Tutorials and Guides</a><br><a href="https://dongchuan.gitbooks.io/gradle-user-guide-/" target="_blank" rel="external">Gradle User Guide 中文版</a></p>
<p><a href="https://blog.csdn.net/lastsweetop/column/info/18566" target="_blank" rel="external">Gradle学习</a>：CSDN 上面的一个 Gralde 专栏，主要是翻译官方文档。</p>
]]></content>
    
    <summary type="html">
    
      介绍 Gradle 中学习过程中一些不错的资料和文章
    
    </summary>
    
      <category term="Gradle" scheme="http://yoursite.com/categories/Gradle/"/>
    
    
      <category term="Gradle" scheme="http://yoursite.com/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>Android 性能优化之TraceView的使用</title>
    <link href="http://yoursite.com/2016/02/25/development-tool-traceview/"/>
    <id>http://yoursite.com/2016/02/25/development-tool-traceview/</id>
    <published>2016-02-25T02:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TraceView简介"><a href="#TraceView简介" class="headerlink" title="TraceView简介"></a>TraceView简介</h2><p>工欲善其事，必先利其器。要想分析Android的性能问题，比如卡顿了之类的，那么就必需掌握TraceView工具的使用。<br>TraceView 是 Android SDK 中内置的一个工具，它可以加载 trace 文件，用图形的形式展示代码的执行时间、次数及调用栈，便于我们分析，以此来优化 App 运行效率。</p>
<h2 id="生成trace文件"><a href="#生成trace文件" class="headerlink" title="生成trace文件"></a>生成trace文件</h2><p>在进行分析以前，必需要生成trace文件，可以用下面的三种方法生成trace文件：</p>
<h3 id="插入代码生成trace文件"><a href="#插入代码生成trace文件" class="headerlink" title="插入代码生成trace文件"></a>插入代码生成trace文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Debug.startMethodTracing(&quot;test.trace&quot;)</div><div class="line">……</div><div class="line">Debug.stopMethodTracing();</div></pre></td></tr></table></figure>
<p>然后把 trace 文件从手机导出来就可以进行分析了，这种方法的优点是可以精确的控制追踪的起点和终点，缺点是步骤繁琐了一些。</p>
<h3 id="使用Android-Monitor"><a href="#使用Android-Monitor" class="headerlink" title="使用Android Monitor"></a>使用Android Monitor</h3><p>使用Android Studio 内置的 Android Monitor 也可以很方便的生成 trace 文件到电脑。<br>在 CPU 监控的那栏会有一个类似秒表的按钮，未启动应用时是灰色，不可点击，应用启动后变成可以点击状态，点击之后开始追踪，再次点击结束追踪，并生成后缀为.trace的 tarce 文件。</p>
<p><img src="/images/development-tool-traceview/android_monitor_start.png" alt="图片"></p>
<h3 id="使用DDMS"><a href="#使用DDMS" class="headerlink" title="使用DDMS"></a>使用DDMS</h3><p>DDMS 是 Android 调试监控工具，用来分析 trace 文件更为直观，菜单栏点击<code>Tools</code>-&gt;<code>Android</code>-&gt;<code>Android Device Monitor</code>，便可以打开DDMS，如图：</p>
<p><img src="/images/development-tool-traceview/ddms_start.png" alt="图片"></p>
<p>我们可以用 DDMS 打开前面方法生成的 trace 文件，<code>File</code> -&gt; <code>Open File</code>，然后选择文件即可。<br>或者也可以生成 trace 文件。<br>选择需要调试的进程，在上面点击<code>Start Mothod Profiling</code>按钮：</p>
<p><img src="/images/development-tool-traceview/trace_start.png" alt="图片"></p>
<p>此时会弹出一个选项框：</p>
<p><img src="/images/development-tool-traceview/trace_profile_options.png" alt="图片"></p>
<ul>
<li>Sample base profiling：抽样监听，以指定的频率进行抽样调查，一般不要超过5s，需要较长时间获取准确的样本数据。</li>
<li>Trace base profiling：整体监听，项目中所有方法都会监听，资源消耗比较大。</li>
</ul>
<p>点击OK后，边开始了监听，再次点击mothod profiling按钮，结束监听。</p>
<p><img src="/images/development-tool-traceview/trace_stop.png" alt="图片"></p>
<p>DDMS会打开trace文件，此时就可以对trace文件进行分析了。</p>
<h2 id="trace文件分析"><a href="#trace文件分析" class="headerlink" title="trace文件分析"></a>trace文件分析</h2><p>如图：</p>
<p><img src="/images/development-tool-traceview/trace_analysis.png" alt="图片"></p>
<p>通过界面图我们可以看到整个界面可以分为上下两个部分，上面是你测试的进程中每个线程的执行情况，每个线程占一行，下面是每个方法执行的各个指标的值。<br>上面一部分是测试进程的中每个线程运行的时间线，x轴表示时间，色块区域可放大，每个区域代表每个方法的执行时间，不同的颜色代表不同的方法，颜色长度代表占用时间。y轴表示每一个独立线程。<br>下面一部分Name为所选择的颜色区块所代表的性能分析。</p>
<p>属性介绍：</p>
<ul>
<li>Incl cpu time：某方法占用CPU总时间（父+子）。</li>
<li>Excl cpu time：某方法本身占用cpu时间（父），即总时间减去子方法的时间。</li>
<li>Incl Real time：某方法真正执行总时间（父+子）。</li>
<li>Excl Real time：某方法自身执行时间（父），即总时间减去子方法的时间。</li>
<li>Calls+RecurCall： 调用次数+递归调用次数。</li>
<li>Cpu time/Call：平均每次调用占用CPU时间。</li>
<li>Real time/Call ：平均每次调用所执行的时间。</li>
</ul>
<p>点击某一个方法，可以看到它的详细信息：</p>
<ul>
<li>Parents：选中方法的调用处</li>
<li>Children：选中方法调用的方法</li>
</ul>
<p>打开每个方法，会显示Paents和Children(即父方法和子方法)，以及分别所占用时间。<br>根据上图，很轻易的就找到了<code>createBitmp</code>方法占用了主线程中大量的时间，是可以优化的对象。</p>
<p>一些分析 trace 文件的方法：</p>
<ul>
<li>从上半部分图中先直观的分析那些函数运行的时间较长，点击色块区域下面会自动展开该函数。</li>
<li>点击 TraceView 中的 Cpu Time/Call，按照占用 CPU 时间从高到低排序</li>
<li>哪些方法调用次数非常频繁</li>
<li>点击 TraceView 中的 Calls + Recur Calls/Total ，按照调用次数从高到底排序</li>
</ul>
]]></content>
    
    <summary type="html">
    
      简单介绍TraceView工具的使用
    
    </summary>
    
      <category term="开发工具" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="开发工具" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="性能优化" scheme="http://yoursite.com/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Android 性能优化之MAT分析内存泄漏</title>
    <link href="http://yoursite.com/2016/02/20/development-tool-mat-to-analyse-leak/"/>
    <id>http://yoursite.com/2016/02/20/development-tool-mat-to-analyse-leak/</id>
    <published>2016-02-20T02:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>MAT 是 Memory Analyzer Tool 的简称，它是一款强大的内存分析工具，使用它能帮助开发者快速分析内存泄漏以及优化内存的使用。<br>内存泄漏也是我们开发过程中经常碰到的问题，掌握了MAT工具，那么你就不会惧怕内存泄漏，使用它可以让内存泄漏无所遁形。</p>
<h2 id="MAT下载"><a href="#MAT下载" class="headerlink" title="MAT下载"></a>MAT下载</h2><p>进入<a href="https://www.eclipse.org/mat/" target="_blank" rel="external">网址</a>下载MAT工具，如果你使用 Eclipse 开发工具而且已经集成了插件，可以不用下载了。</p>
<h2 id="场景准备"><a href="#场景准备" class="headerlink" title="场景准备"></a>场景准备</h2><p>我们用下面的代码产生一个内存泄漏的场景：<br>MainActivity.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    <span class="keyword">if</span>(mInnerClassInstance == <span class="keyword">null</span>)&#123;</div><div class="line">        mInnerClassInstance = <span class="keyword">new</span> InnerClass();</div><div class="line">    &#125;</div><div class="line">    mInnerClassInstance.testFunc();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> InnerClass mInnerClassInstance;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFunc</span><span class="params">()</span></span>&#123;</div><div class="line">        Log.e(<span class="string">"InnerClass"</span>, <span class="string">"InnerClass.testFunc()"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们知道，在 Java 中，非静态内部类会默认隐性引用外部类对象。而上面的例子中的静态变量<code>mInnerClassInstance</code>在第一个<code>MainActivity</code>实例创建后便会一直存在，那么它就会一直持有<code>MainActivity</code>的一个引用，在<code>MainActivity</code>实例销毁后它是无法被回收的，因此便造成了内存泄漏。</p>
<h2 id="内存泄漏的初步分析"><a href="#内存泄漏的初步分析" class="headerlink" title="内存泄漏的初步分析"></a>内存泄漏的初步分析</h2><p>首先可以用<code>adb shell dumpsys meminfo &lt;包名&gt;</code>先进行初步的分析。<br>我们按下手机的后退键回到桌面，这时会调用<code>MainActivity</code>的<code>onDestroy()</code>，正常情况下<code>MainActivity</code>实例会被回收。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">$ adb shell dumpsys meminfo com.example.hq.testsomething</div><div class="line"></div><div class="line">Applications Memory Usage (kB):</div><div class="line">Uptime: 23692543 Realtime: 23692543</div><div class="line"></div><div class="line">** MEMINFO in pid 29474 [com.example.hq.testsomething] **</div><div class="line">                   Pss  Private  Private  Swapped     Heap     Heap     Heap</div><div class="line">                 Total    Dirty    Clean    Dirty     Size    Alloc     Free</div><div class="line">                ------   ------   ------   ------   ------   ------   ------</div><div class="line">  Native Heap     5252     4568        0     9400    32768    30309     2458</div><div class="line">  Dalvik Heap     1761     1692        0      320    11829     7872     3957</div><div class="line"> Dalvik Other      467      396        0     2848</div><div class="line">        Stack      200      200        0        0                           </div><div class="line">       Ashmem        2        0        0        0</div><div class="line">    Other dev        4        0        4        0</div><div class="line">     .so mmap     1047      156       12     2184</div><div class="line">    .apk mmap      160        0       72        0</div><div class="line">    .ttf mmap       33        0       16        0</div><div class="line">    .dex mmap      268        4      264        0</div><div class="line">    .oat mmap     1172        0      388        4</div><div class="line">    .art mmap     1434      492      424       80</div><div class="line">   Other mmap      131        8       28        4</div><div class="line">      Unknown      188      188        0       96</div><div class="line">        TOTAL    12119     7704     1208    14936    44597    38181     6415</div><div class="line"> </div><div class="line"> App Summary</div><div class="line">                       Pss(KB)</div><div class="line">                        ------</div><div class="line">           Java Heap:     2608</div><div class="line">         Native Heap:     4568</div><div class="line">                Code:      912</div><div class="line">               Stack:      200</div><div class="line">            Graphics:        0</div><div class="line">       Private Other:      624</div><div class="line">              System:     3207</div><div class="line"> </div><div class="line">               TOTAL:    12119      TOTAL SWAP (KB):    14936</div><div class="line"> </div><div class="line"> Objects</div><div class="line">               Views:       26         ViewRootImpl:        0</div><div class="line">         AppContexts:        2           Activities:        1</div><div class="line">              Assets:        3        AssetManagers:        2</div><div class="line">       Local Binders:       11        Proxy Binders:       15</div><div class="line">       Parcel memory:        3         Parcel count:       12</div><div class="line">    Death Recipients:        1      OpenSSL Sockets:        0</div><div class="line"> </div><div class="line"> Dalvik</div><div class="line">         isLargeHeap:    false</div><div class="line"> </div><div class="line"> SQL</div><div class="line">         MEMORY_USED:        0</div><div class="line">  PAGECACHE_OVERFLOW:        0          MALLOC_SIZE:        0</div></pre></td></tr></table></figure></p>
<p>我们通过这个结果查看发现<code>Objects</code>这一项里面的<code>Activities</code>为1,证明还是有个<code>Activity</code>的实例存在的，没有被正常回收。下面我们来借助于MAT工具来分析一下。</p>
<h2 id="使用Android-Monitor分析内存泄漏"><a href="#使用Android-Monitor分析内存泄漏" class="headerlink" title="使用Android Monitor分析内存泄漏"></a>使用Android Monitor分析内存泄漏</h2><p>Android Studio 中的 Android Monitor 里面有个 Memory 控制台，它提供了一个内存监视器，我们可以通过它方便地查看应用程序的性能和内存使用情况，从而也就可以找到需要释放对象，查找内存泄漏等。</p>
<p>点击图中的按钮可以触发一次GC</p>
<p><img src="/images/development-tool-mat-to-analyse-leak/android_monitor_init_gc.png" alt="效果图"></p>
<p>点击图中的按钮可以生成hprof文件来进行分析。</p>
<p><img src="/images/development-tool-mat-to-analyse-leak/android_monitor_dump_heap.png" alt="效果图"></p>
<p>这里我们不再详细介绍。</p>
<h2 id="生成HPROF文件"><a href="#生成HPROF文件" class="headerlink" title="生成HPROF文件"></a>生成HPROF文件</h2><h3 id="使用Android-Studio"><a href="#使用Android-Studio" class="headerlink" title="使用Android Studio"></a>使用Android Studio</h3><p>首先我们借助Android Studio生成hprof文件，Tools -&gt; Android -&gt; Android Device Monitor 打开 DDMS：</p>
<p><img src="/images/development-tool-mat-to-analyse-leak/mat_open_device_monitor.png" alt="效果图"></p>
<p>点击一下我们需要调试的进程，此时进程上访的一排工具处于可点击状态，点击一下 Update Heap 按钮可以在Heap视图里面现实当前堆内存的使用情况，点击 Cause GC 按钮可以触发一次GC操作。</p>
<p><img src="/images/development-tool-mat-to-analyse-leak/mat_update_heap.png" alt="效果图"></p>
<p>按回退键回到桌面，然后点击 Dump HPROF file 按钮，如图：</p>
<p><img src="/images/development-tool-mat-to-analyse-leak/mat_dump_hprof_file.png" alt="效果图"></p>
<p>会生成 hprof 文件，会弹框提示我们保存下来。<br>然后打开MAT工具，File –&gt; Open Heap Dump…，选择刚刚生成的文件，如果出现下面的错误，用 <code>hprof-conv</code> 命令转换一下就可以了。这是因为MAT是用来分析java程序的hprof文件的，与Android导出的hprof有一定的格式区别，因此我们需要把导出的hprof文件转换一下。<code>hprof-conv</code> 是 Android SDK 提供的工具，它位于 Android SDK 的platform-tools目录下。</p>
<p><img src="/images/development-tool-mat-to-analyse-leak/mat_open_error.png" alt="效果图"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android-sdk-linux/platform-tools/hprof-conv com.example.hq.testsomething.hprof test.hprof</div></pre></td></tr></table></figure>
<h3 id="使用Eclipse"><a href="#使用Eclipse" class="headerlink" title="使用Eclipse"></a>使用Eclipse</h3><p>如果你的 Eclipse 安装了MAT插件，那么安装上面使用Android Studio生成hprof文件的步骤，点击 Dump HPROF file 按钮后，就直接打开了该hprof文件。</p>
<h3 id="使用代码"><a href="#使用代码" class="headerlink" title="使用代码"></a>使用代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android.os.Debug.dumpHprofData(hprofName);</div></pre></td></tr></table></figure>
<p>生成的hprof文件也需要用<code>hprof-conv</code>转换一下才能用MAT工具打开。</p>
<h2 id="通过MAT工具分析内存泄漏"><a href="#通过MAT工具分析内存泄漏" class="headerlink" title="通过MAT工具分析内存泄漏"></a>通过MAT工具分析内存泄漏</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>打开hprof文件后首先进入主视图，下来看一下这个主视图：</p>
<p><img src="/images/development-tool-mat-to-analyse-leak/mat_overview.png" alt="效果图"></p>
<p>MAT 提供了很多功能，但是最常用的只有 Histogram 和 Domintor Tree：</p>
<ul>
<li>Histogram：通过 Histogram 可以直观地看出内存中不同类型的 buffer 的数量和占用内存的大小。</li>
<li>Domintor Tree：把内存中的对象按照从大到小的顺序进行排序，并且可以分析对象之间的引用关系</li>
</ul>
<p>我们看到在这两个视图中还会发现有 Shallow size 和 Retained Size 两个属性：</p>
<ul>
<li>Shallow size：对象自身占用的内存大小，不包括它引用的对象。针对非数组类型的对象，它的大小就是对象与它所有的成员变量大小的总和。<br>当然这里面还会包括一些java语言特性的数据存储单元。针对数组类型的对象，它的大小是数组元素对象的大小总和。</li>
<li>Retained Size：当前对象大小+当前对象可直接或间接引用到的对象的大小总和。(间接引用的含义：A-&gt;B-&gt;C, C就是间接引用)</li>
</ul>
<p>一个对象到GC Roots的引用链被称为Path to GC Roots，通过分析Path to GC Roots可以找出JAVA的内存泄露问题。</p>
<h3 id="内存泄漏分析"><a href="#内存泄漏分析" class="headerlink" title="内存泄漏分析"></a>内存泄漏分析</h3><p>我们在主视图中选择<code>Actions</code>–&gt;<code>Domintor Tree</code>或者<code>Histogram</code>也可以。<br>因为在前面我们已经初步分析了<code>MainActivity</code>是存在内存泄漏的，这里我们可以使用界面中的搜索功能，在输入框中输入<code>MainActivity</code>进行过滤，查看当前存在的<code>MainActivity</code>对象，我们发现当前有两个<code>MainActivity</code>对象，这是因为我们按back键退出应用再进来，系统都会重新创建一个新的<code>MainActivity</code>，但是第一次创建的老的对象却无法回收，所以就出现了两个<code>MainActivity</code>对象。</p>
<p><img src="/images/development-tool-mat-to-analyse-leak/mat_activity_leak.png" alt="效果图"></p>
<p>我们在进一步分析一下是什么导致了内存泄漏，单击选中<code>MainActivity</code>，然后单击鼠标右键-&gt;Path To GC Roots-&gt;exclude all phontom/weak/soft etc. references，如图所示。</p>
<p><img src="/images/development-tool-mat-to-analyse-leak/mat_path_to_gc_root_exclude_phontom_soft_weak.png" alt="效果图"></p>
<p>这里在 Path To GC Roots 之所以选择排除所有的虚引用、弱引用和软引用，是因为它们都有很大的几率被GC回收掉的，它们并不会构成内存泄漏。<br>可以看到是 <code>mInnerClassInstance</code> 引用了 <code>MainActivity</code> 导致了无法释放。</p>
<h3 id="Domintor-Tree-视图分析"><a href="#Domintor-Tree-视图分析" class="headerlink" title="Domintor Tree 视图分析"></a>Domintor Tree 视图分析</h3><p>一般分析内存泄漏我们需要分析 Domintor Tree 视图，但是在视图中内存泄漏一般不会直接显示出来，这个时候我们一般要需要按照内存的从大到小去排查一遍。</p>
<p><img src="/images/development-tool-mat-to-analyse-leak/mat_domintor_tree_analysis.png" alt="效果图"></p>
<p>在图中我们就发现第2列中就有个<code>BitmapDrawable</code>对象，同样我们选择<code>BitmapDrawable</code>对象，然后单击鼠标右键-&gt;Path To GC Roots-&gt;exclude all phontom/weak/soft etc. references，如图所示。</p>
<p><img src="/images/development-tool-mat-to-analyse-leak/mat_bitmap_leak_result.png" alt="效果图"></p>
<p>可以看到同样是 <code>mInnerClassInstance</code> 引用了 <code>MainActivity</code> 导致了<code>BitmapDrawable</code>对象无法释放。</p>
]]></content>
    
    <summary type="html">
    
      介绍Android分析内存泄漏工具的使用方法
    
    </summary>
    
      <category term="开发工具" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="开发工具" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="性能优化" scheme="http://yoursite.com/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Android：使用LayoutInflater应该注意的问题</title>
    <link href="http://yoursite.com/2016/02/18/android-knowledge-point-layoutInflater/"/>
    <id>http://yoursite.com/2016/02/18/android-knowledge-point-layoutInflater/</id>
    <published>2016-02-18T02:00:00.000Z</published>
    <updated>2018-03-11T13:47:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们通常使用<code>addView</code>这个方法时，会先通过<code>LayoutInflater</code>的<code>inflate</code>生成一个<code>View</code>视图，然后添加到当前<code>ViewGroup</code>中，如果使用不恰当，就会出现这样的问题：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">        setContentView(R.layout.layout_inflate_test);</div><div class="line">        LinearLayout viewGroup = (LinearLayout) findViewById(R.id.root);</div><div class="line"></div><div class="line">        <span class="comment">//1.inflate_test根布局layout参数被忽略</span></div><div class="line"><span class="comment">//        View v = LayoutInflater.from(this).inflate(R.layout.inflate_test, null);</span></div><div class="line"><span class="comment">//        viewGroup.addView(v);</span></div><div class="line"></div><div class="line">        <span class="comment">//2.不会忽略</span></div><div class="line"><span class="comment">//        View v = LayoutInflater.from(this).inflate(R.layout.inflate_test, viewGroup, false);</span></div><div class="line"><span class="comment">//        viewGroup.addView(v);</span></div><div class="line"></div><div class="line">        <span class="comment">//3.不会忽略</span></div><div class="line"><span class="comment">//        LayoutInflater.from(this).inflate(R.layout.inflate_test, viewGroup);</span></div><div class="line"></div><div class="line">        <span class="comment">//4.不会忽略</span></div><div class="line"><span class="comment">//        LayoutInflater.from(this).inflate(R.layout.inflate_test, viewGroup, true);</span></div></pre></td></tr></table></figure>
<p>上面的代码中，第一种用法根布局 layout 参数会被忽略，后面都不会。我们从 <code>LayoutInflater</code> 源码中可以看出来原因，在<code>public View inflate(XmlPullParser parser, ViewGroup root, boolean attachToRoot)</code>方法中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="keyword">if</span> (DEBUG) &#123;</div><div class="line">        System.out.println(<span class="string">"Creating params from root: "</span> +</div><div class="line">                root);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// Create layout params that match root, if supplied</span></div><div class="line">    params = root.generateLayoutParams(attrs);</div><div class="line">    <span class="keyword">if</span> (!attachToRoot) &#123;</div><div class="line">        <span class="comment">// Set the layout params for temp if we are not</span></div><div class="line">        <span class="comment">// attaching. (If we are, we use addView, below)</span></div><div class="line">        temp.setLayoutParams(params);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果<code>root</code>不为空，且<code>attachToRoot</code>为<code>false</code>，会把布局参数<code>params</code>加上。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (root != <span class="keyword">null</span> &amp;&amp; attachToRoot) &#123;</div><div class="line">    root.addView(temp, params);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果<code>root</code>不为空，且<code>attachToRoot</code>为<code>true</code>，会通过<code>addView(temp, params)</code>方法加上布局参数。<br>因此，我们不能因为暂时不需要绑定到<code>root</code>上面就忽视掉root的作用，没有的话设置的布局参数就不起作用了哦！<br>比如我们在使用<code>ListView</code>的时候就经常碰到，<code>ListView</code> 添加<code>HeaderView</code>之后尺寸布局被忽略的情况：<br>通常添加头部的方法是</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">LayoutInflater lif = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);</div><div class="line">View headerView = lif.inflate(R.layout.header, <span class="keyword">null</span>);</div><div class="line">mListView.addHeaderView(headerView);</div></pre></td></tr></table></figure>
<p>原因就是<code>lif.inflate(R.layout.header, null)</code>丢失了 XML 布局中根 <code>View</code> 的 <code>LayoutParam</code>，其实使用下面的方法就可以了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lif.inflate(R.layout.header, mListView, <span class="keyword">false</span>);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      通过解决在使用ViewGroup.addView()添加LayoutInflater生成的布局文件时遇到的布局文件的layout参数被忽略的问题来介绍如何正确使用LayoutInflater
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="LayoutInflater" scheme="http://yoursite.com/tags/LayoutInflater/"/>
    
  </entry>
  
  <entry>
    <title>Android：一个Multidex引发的VerifyError和Class Not Found问题</title>
    <link href="http://yoursite.com/2016/02/16/android-problem-multidex-verifyerror/"/>
    <id>http://yoursite.com/2016/02/16/android-problem-multidex-verifyerror/</id>
    <published>2016-02-16T02:00:00.000Z</published>
    <updated>2018-03-11T13:47:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>一个困扰两天的问题终于解决了，下面记录一下该问题解决的历程，希望能对那些遇到类似问题的猿们有些帮助。</p>
<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>由于项目要适配 android4.X，而应用需要引用的一个 jar 包的 4.X 版本就只能用 JDK1.6 来编译，而应用要用 JDK1.7 来编译，这个情况也为该问题的解决带来了干扰。<br>当把编译好的 jar 包放入应用中，且应用编译通过，运行时报各种问题：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">java.lang.VerifyError</div><div class="line">java.lang.NoClassDefFoundError</div></pre></td></tr></table></figure>
<p>等等……<br>网上说的各种解决办法都试过了也没用。后来看到一个帖子<br><a href="http://www.cnblogs.com/successjerry/p/4402962.html" target="_blank" rel="external">http://www.cnblogs.com/successjerry/p/4402962.html</a><br>说 <code>java.lang.VerifyError</code> 的解决办法，说是 <code>proguard</code> 引起的。但是我编译的是 <code>debug</code> 版本，根本没有用 <code>proguard</code> 啊！但实在没办法了，我就想编个 <code>release</code> 版本看看我的 <code>proguard</code> 有没有问题。结果一试上面的两个报错都没有了，但是出现 了另外一个<code>class</code> 找不到的现象，是一个匿名内部类找不到。<br>其实这个时候应该可以想到的是可能是 <code>proguard</code> 去除了无用的方法，导致应用的方法数在 65535 之内，前面的出问题的几个类回到了主包，因此前面出现的两个问题就没有了。<br>但是但是只考虑是 <code>progurad</code> 混淆引起的，通过反编译 apk 也确实发现匿名内部类创建是变成了 <code>new 1(this)</code> 之类的，但是主要解决方向都在这里。<br>后来纠结了两天，当中也请教了好多人，还是没有解决。当时想着就先放一放，就把这个出错的地方注释掉了，应用可以跑起来了。<br>后来的一个线索的出现是，当时修改了一下 jar 包，往里面添加了几个方法，运行应用的时候又出现类找不到，方法找不到，这是就恍然大悟了，可能是方法超限的问题导致的。<br>后来看了一下应用的设置，在 build.gradle 里面确实配置了分包：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">multiDexEnabled true</div></pre></td></tr></table></figure>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>后来在网上查资料，发现<br><a href="http://blog.csdn.net/t12x3456/article/details/40837287" target="_blank" rel="external">http://blog.csdn.net/t12x3456/article/details/40837287</a><br>可能需要在 <code>Application</code> 类的 <code>attachBaseContext</code> 方法中加上：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android.support.multidex.MultiDex.install(<span class="keyword">this</span>);</div></pre></td></tr></table></figure>
<p>一试，果然没有报错了。<br>在<br><a href="http://weibo.com/p/1001603884849646685222" target="_blank" rel="external">http://weibo.com/p/1001603884849646685222</a><br>和<br><a href="http://blog.csdn.net/qq2603825424/article/details/48311961" target="_blank" rel="external">http://blog.csdn.net/qq2603825424/article/details/48311961</a><br>中有介绍：<br>使用了 <code>Multidex</code> 的 APK 运行在 Android5.0 之前的设备上时，还需要配合 support 库里面的 <code>MultiDex.install</code> 接口才行。有三种方法使用 <code>MultiDex.install</code> 接口：</p>
<ol>
<li>如果没有自定义自己的 <code>Application</code>，那么在 AndroidManifest.xml 将 APK 的 <code>Application</code> 指定为 <code>MultiDexApplication</code>。</li>
<li>如果自定义了自己的 <code>Application</code>，那么将自己的 <code>Application</code> 继承于 <code>MultiDexApplication</code>。</li>
<li>如果不想继承于 <code>MultiDexApplication</code>，那么重写父类 <code>Applicatio</code> 的成员函数<code>attachBaseContext</code>，并且在该成员函数中调用 <code>MultiDex.install</code> 接口。</li>
</ol>
<p>这里我们采用方法3。<br>最后，使用了 <code>Multidex</code> 的 APK 运行在 Android5.0 之后的设备上时，不需要 <code>MultiDex.install</code> 支持。这是因为 Android 5.0 使用的是 ART 虚拟机，ART 虚拟机解决了 Dalvik 虚拟机方法数限制在 65K 的问题。Android 5.0 在安装一个使用了 <code>MultiDex</code> 的APK时，会收集它的 Main Dex 和 Additional Dex，然后将它们翻译成Native Code，最终保存在一个OAT文件中。因此就不需要 <code>MultiDex.install</code> 了。<br><code>MultiDex.install</code> 干了什么事情呢？它首先是收集 APK 里面的 Additional Dex，并且找到 APK 所使用的 <code>PathClassLoader</code>。接下来通过反射得到 <code>PathClassLoader</code> 的成员变量 <code>pathList</code>，这是一个类型为 <code>DexPathList</code> 的对象。<code>DexPathList</code> 里面又有一个成员变量<code>dexElements</code>，指向的是一个 <code>Element</code> 数组，该数组包含了系统主动为 APK 加载的 Dex。再接下来，又通过反射调用上述的 <code>DexPathList</code> 对象的成员函数<code>makeDexElements</code> 加载前面找到的 Additional Dex，并且将这些 Additional Dex 增加到它的成员变量<code>dexElements</code>描述的<code>Element</code>数组中。<br>Dalvik 虚拟机在查找一个<code>Class</code>的时候，会询问 APK 使用的<code>PathClassLoader</code>。<code>PathClassLoader</code>又询问它的成员变量 <code>pathList</code> 指向的<code>DexPathList</code>对象。<code>DexPathList</code>又询问保存在它的成员变量<code>dexElements</code>描述的一个<code>Element</code>数组中的 Dex。因此，就可以想象中，一旦 <code>MultiDex.install</code> 调用过后，APK 就可以正常使用打包在<code>AdditionalDex</code>中的 Class。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实在当发生 Debug 报错而 Release 版本有些报错就没有的时候，本来就可以往这方法考虑的，但是当时走错了方向，一直以为是混淆导致的问题，没有考虑到<code>minifyEnabled true</code>这个配置在 release中 也生效了。<br>希望对大家有所帮助。</p>
]]></content>
    
    <summary type="html">
    
      介绍一个在开发过程中遇到的Multidex引发的VerifyError和Class Not Found问题
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Multidex" scheme="http://yoursite.com/tags/Multidex/"/>
    
  </entry>
  
  <entry>
    <title>Android 解决Lib Module 和 App Module 的 buildType 不一样的问题</title>
    <link href="http://yoursite.com/2016/02/05/android-knowledge-point-app-lib-build-type/"/>
    <id>http://yoursite.com/2016/02/05/android-knowledge-point-app-lib-build-type/</id>
    <published>2016-02-05T02:00:00.000Z</published>
    <updated>2018-03-11T13:47:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在前一篇文章 <a href="http://www.heqiangfly.com/2016/03/18/android-knowledge-point-buildconfig/" target="_blank" rel="external">Android BuildConfig的使用</a> 中介绍了 <code>BuildConfig</code> 的使用，那么在使用的过程中你也会会遇到这样的问题，Lib Module 和 App Module 的 <code>BuildConfig.DEBUG</code> 的值是不一样的。<br>这是因为默认情况下依赖库总是以 release 模式打包, 导致 <code>BuildConfig.DEBUG</code> 为 <code>false</code>。那么本文将带来这种问题的集中解决办法。</p>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>假设在应用中有下面模块，App、ModuleA、ModuleB 和 Common 模块，Common 模块提供了一些公用代码来供其他模块来使用，现在 App 模块 引入了 Common 模块，来看下面在 APP Module 中的一段代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Log.e(<span class="string">"Test"</span>,<span class="string">"App debugMode = "</span>+BuildConfig.DEBUG);</div><div class="line">Log.e(<span class="string">"Test"</span>,<span class="string">"Common debugMode = "</span>+com.android.hq.common.BuildConfig.DEBUG);</div></pre></td></tr></table></figure>
<p>如果以 Debug 模式编译，打印结果为：true 和  false；<br>这也就印证了前面我们的说法。<br>下面带来集中解决方案。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="使用高版本的-Gradle"><a href="#使用高版本的-Gradle" class="headerlink" title="使用高版本的 Gradle"></a>使用高版本的 Gradle</h3><p>使用Gradle 3.0 以上版本不会有这个问题</p>
<h3 id="Common-Module-提供其他版本"><a href="#Common-Module-提供其他版本" class="headerlink" title="Common Module 提供其他版本"></a>Common Module 提供其他版本</h3><p>1 在 Common 模块的 build.gradle 文件中添加下面代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line"></div><div class="line">    ......</div><div class="line">    publishNonDefault <span class="keyword">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2 在 App 模块的 build.gradle 文件中添加下面代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    <span class="comment">//依赖library</span></div><div class="line">    <span class="comment">//compile project(':common')</span></div><div class="line">    <span class="function">debugCompile <span class="title">project</span><span class="params">(path: <span class="string">':common'</span>, configuration: <span class="string">'debug'</span>)</span></span></div><div class="line">    releaseCompile <span class="title">project</span><span class="params">(path: <span class="string">':common'</span>, configuration: <span class="string">'release'</span>)</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>来修改 Common 模块的应用方式，再来看上面的代码的打印：结果为 true 和 true。<br>问题解决</p>
<h3 id="在-Common-中使用反射来获取-App-中的-BuildConfig-DEBUG"><a href="#在-Common-中使用反射来获取-App-中的-BuildConfig-DEBUG" class="headerlink" title="在 Common 中使用反射来获取 App 中的 BuildConfig.DEBUG"></a>在 Common 中使用反射来获取 App 中的 BuildConfig.DEBUG</h3><p>代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppBuildConfig</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Boolean sIsDebug = <span class="keyword">null</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getBuildConfigDebugValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sIsDebug == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Class&lt;?&gt; clazz = Class.forName(<span class="string">"包名.BuildConfig"</span>);</div><div class="line">                Field field = clazz.getField(<span class="string">"DEBUG"</span>);</div><div class="line">                sIsDebug = (Boolean) field.get(<span class="keyword">null</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> sIsDebug != <span class="keyword">null</span> ? sIsDebug : <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用-ApplicationInfo-FLAG-DEBUGGABLE-来判断-DEBUG-Type"><a href="#使用-ApplicationInfo-FLAG-DEBUGGABLE-来判断-DEBUG-Type" class="headerlink" title="使用 ApplicationInfo.FLAG_DEBUGGABLE 来判断 DEBUG Type"></a>使用 ApplicationInfo.FLAG_DEBUGGABLE 来判断 DEBUG Type</h3><p>我们反编译 Debug 包和 Release 包对比看看有没有其他的区别，会发现他们 AndroidManifest.xml 中 application 节点的 <code>android:debuggable</code> 值是不同的。Debug 包值为 <code>true</code>，Release 包值为 <code>false</code>，这是编译自动修改的。所以我们考虑通过 <code>ApplicationInfo</code> 的这个属性去判断是否是 Debug 版本，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppUtils</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Boolean isDebug = <span class="keyword">null</span>;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isDebug</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> isDebug == <span class="keyword">null</span> ? <span class="keyword">false</span> : isDebug.booleanValue();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">syncIsDebug</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (isDebug == <span class="keyword">null</span>) &#123;</div><div class="line">            isDebug = context.getApplicationInfo() != <span class="keyword">null</span> &amp;&amp;</div><div class="line">                    (context.getApplicationInfo().flags &amp; ApplicationInfo.FLAG_DEBUGGABLE) != <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="引申问题"><a href="#引申问题" class="headerlink" title="引申问题"></a>引申问题</h2><p>上面的方法 2 中，如果 App 依赖 ModuleA 和 Common，ModuleA 又依赖 Common，在Common 中使用新特性发布了全版本，在 App 中使用方法 2 中的特性进行控制，App 对 ModuleA 不做控制，ModuleA 对 Common 也不做控制，这种方法就会有下面的报错：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Error:Execution failed for task &apos;:app:processDebugResources&apos;.</div><div class="line">&gt; Error: more than one library with package name &apos;com.android.hq.common&apos;</div><div class="line">  You can temporarily disable this error with android.enforceUniquePackageName=false</div><div class="line">  However, this is temporary and will be enforced in 1.0</div></pre></td></tr></table></figure>
<p>因为当应用 App 是 debug 的时候，库 Common 是被新特性控制成 debug 的了，另一边库 ModuleA 只默认构建 release 版本，就自然使用了 release ，而库 ModuleA 依赖的库 Common 因为是普通依赖，自然也是默认的 release。<br>这样整个项目中就会存在一个 debug 的库 Common 和一个 release 的库 Common，Gradle 就报了构建错误：<code>more than one library with package name：XXX</code>。</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>让 ModuleA 也发布全版本，ModuleA 也用新特性控制 Common。<br>App 模块的 build.gradle ：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    //依赖library</div><div class="line">    //compile project(&apos;:common&apos;)</div><div class="line">    debugCompile project(path: &apos;:common&apos;, configuration: &apos;debug&apos;)</div><div class="line">    releaseCompile project(path: &apos;:common&apos;, configuration: &apos;release&apos;)</div><div class="line"></div><div class="line">    //compile project(&apos;:modulea&apos;)</div><div class="line">    debugCompile project(path: &apos;:modulea&apos;, configuration: &apos;debug&apos;)</div><div class="line">    releaseCompile project(path: &apos;:modulea&apos;, configuration: &apos;release&apos;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ModuleA 模块的 build.gradle ：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    ......</div><div class="line">    publishNonDefault true</div><div class="line">&#125;</div><div class="line">dependencies &#123;</div><div class="line">    ......</div><div class="line">    //compile project(&apos;:common&apos;)</div><div class="line">    debugCompile project(path: &apos;:common&apos;, configuration: &apos;debug&apos;)</div><div class="line">    releaseCompile project(path: &apos;:common&apos;, configuration: &apos;release&apos;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.cnblogs.com/bellkosmos/p/6437171.html" target="_blank" rel="external">https://www.cnblogs.com/bellkosmos/p/6437171.html</a><br><a href="http://www.jianshu.com/p/1907bffef0a3" target="_blank" rel="external">http://www.jianshu.com/p/1907bffef0a3</a><br><a href="http://www.trinea.cn/android/android-whether-debug-mode-why-buildconfig-debug-always-false/" target="_blank" rel="external">http://www.trinea.cn/android/android-whether-debug-mode-why-buildconfig-debug-always-false/</a></p>
]]></content>
    
    <summary type="html">
    
      介绍如何解决 Android 多模块开发过程中遇到的 Lib Module 和 App Module 的 buildType 不一样的问题
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="buildType" scheme="http://yoursite.com/tags/buildType/"/>
    
  </entry>
  
  <entry>
    <title>Android BuildConfig的使用</title>
    <link href="http://yoursite.com/2016/02/02/android-knowledge-point-buildconfig/"/>
    <id>http://yoursite.com/2016/02/02/android-knowledge-point-buildconfig/</id>
    <published>2016-02-02T02:00:00.000Z</published>
    <updated>2018-03-11T13:47:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>BuildConfig</code> 是 Android Studio 在 Build 之后自动生成的一个类，顾名思义，我们可以在里面定义一些编译配置相关的变量。<br>在不同的编译模式下会生成不同的变量，比如在 Debug 和 Release 模式下，我们可以利用这些变量来方便不同编译环境下的开发，比如日志的打印等等。<br>我们可以在哪里找到 <code>BuildConfig</code> 这个类呢？如果我们编译的是 Debug 版本的应用，可以在下面的目录中找到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./app/build/generated/source/buildConfig/debug/&lt;你的包名&gt;/BuildConfig.java</div></pre></td></tr></table></figure></p>
<p>下面来看一下默认情况下 <code>BuildConfig</code> 类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Automatically generated file. DO NOT MODIFY</div><div class="line"> * 这个类是自动生成的，不要试图去修改它</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">BuildConfig</span> </span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> DEBUG = Boolean.parseBoolean(<span class="string">"true"</span>);</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String APPLICATION_ID = <span class="string">"com.example.heqiang.testsomething"</span>;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BUILD_TYPE = <span class="string">"debug"</span>;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FLAVOR = <span class="string">""</span>;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VERSION_CODE = <span class="number">1</span>;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String VERSION_NAME = <span class="string">"1.0"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h2><p>我们可以在 <code>build.gradle</code> 中使用 <code>buildConfigField</code> 方法来添加自己的自定义常量。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">buildTypes &#123;</div><div class="line">    debug&#123;</div><div class="line">        <span class="function">minifyEnabled <span class="keyword">false</span></span></div><div class="line">        proguardFiles <span class="title">getDefaultProguardFile</span><span class="params">(<span class="string">'proguard-android.txt'</span>)</span>, 'proguard-rules.pro'</div><div class="line">        <span class="title">buildConfigField</span><span class="params">(<span class="string">"String"</span>, <span class="string">"TEST_STRING"</span>, <span class="string">"\"debug\""</span>)</span></div><div class="line">        <span class="title">buildConfigField</span><span class="params">(<span class="string">"boolean"</span>, <span class="string">"IS_DEBUG"</span>, <span class="string">"true"</span>)</span></div><div class="line">    &#125;</div><div class="line">    release &#123;</div><div class="line">        <span class="function">minifyEnabled <span class="keyword">false</span></span></div><div class="line">        proguardFiles <span class="title">getDefaultProguardFile</span><span class="params">(<span class="string">'proguard-android.txt'</span>)</span>, 'proguard-rules.pro'</div><div class="line">        <span class="title">buildConfigField</span><span class="params">(<span class="string">"String"</span>, <span class="string">"TEST_STRING"</span>, <span class="string">"\"release\""</span>)</span></div><div class="line">        <span class="title">buildConfigField</span><span class="params">(<span class="string">"boolean"</span>, <span class="string">"IS_DEBUG"</span>, <span class="string">"false"</span>)</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>在 <code>build.gradle</code> 的 <code>buildTypes</code> 节点 <code>debug</code> 和 <code>release</code> 节点中分别添加同名的变量配置信息，如上面的代码所示。<br>sync 之后 <code>BuildConfig</code> 类就会自动重新生成：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">BuildConfig</span> </span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> DEBUG = Boolean.parseBoolean(<span class="string">"true"</span>);</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String APPLICATION_ID = <span class="string">"com.example.heqiang.testsomething"</span>;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BUILD_TYPE = <span class="string">"debug"</span>;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FLAVOR = <span class="string">""</span>;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VERSION_CODE = <span class="number">1</span>;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String VERSION_NAME = <span class="string">"1.0"</span>;</div><div class="line">  <span class="comment">// Fields from build type: debug</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> IS_DEBUG = <span class="keyword">true</span>;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TEST_STRING = <span class="string">"debug"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>buildConfigField</code> 定义自定义常量时后面的括号也可以去掉，下面的用法也是可以的： <code>buildConfigField &quot;boolean&quot;, &quot;IS_DEBUG&quot;, &quot;true&quot;</code>。</p>
]]></content>
    
    <summary type="html">
    
      介绍如何在 Android 开发中 BuildConfig 类的用法
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="BuildConfig" scheme="http://yoursite.com/tags/BuildConfig/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio 使用技巧</title>
    <link href="http://yoursite.com/2016/01/30/development-tool-android-studio-debug-skill/"/>
    <id>http://yoursite.com/2016/01/30/development-tool-android-studio-debug-skill/</id>
    <published>2016-01-30T02:00:00.000Z</published>
    <updated>2019-02-14T15:28:22.891Z</updated>
    
    <content type="html"><![CDATA[<p>作为一名 Android 开发者，使用 Android Studio 作为 IDE 进行开发已经成为标配，本文就把 AS 的一些使用技巧来做一下归纳和总结。随着 AS  的版本升级，本文会同步更新。</p>
<h2 id="调试技巧"><a href="#调试技巧" class="headerlink" title="调试技巧"></a>调试技巧</h2><p>在我们写代码或者是 Debug 过程中，各种调试手段必不可少，Android Studio 提供了强大的调试能力。</p>
<h3 id="启动调试"><a href="#启动调试" class="headerlink" title="启动调试"></a>启动调试</h3><p>启动调试方法我相信大家都会，一个是以Debug模式启动App，APP启动后，运行至第一处断点处会停下来，断点可以在运行之前设置，也可在运行后设置。一个是使一个已经启动的进程进入调试模式。这两种方式可以通过下面工具栏的的两个按钮启动。<br><img src="/images/development-tool-android-studio-debug-skill/as-start-debug.png" alt="效果图"></p>
<h3 id="基本调试方法"><a href="#基本调试方法" class="headerlink" title="基本调试方法"></a>基本调试方法</h3><p>先来看一下 AS 的调试面板：<br><img src="/images/development-tool-android-studio-debug-skill/as-debug-panel.png" alt="效果图"></p>
<ul>
<li>调试功能键：控制断点的执行；</li>
<li>断点管理键：控制断点调试的运行；</li>
<li>求值表达式：计算表达式的值；</li>
<li>变量观察区：显示当前可以观察到的对象及其属性值；</li>
<li>指定变量观察区：观察指定变量或者表达式的变化；</li>
<li>当前线程堆栈区：（点击Restore ‘Threads’ View 按钮）查看当前断点所在的线程以及调用堆栈；</li>
</ul>
<h4 id="调试功能键"><a href="#调试功能键" class="headerlink" title="调试功能键"></a>调试功能键</h4><ul>
<li>Show Execution Point：点击该按钮，光标将定位到当前正在调试的位置。</li>
<li>Run to Cursor：程序执行到当前光标所在的位置。</li>
<li>Force Run to Cursor：程序执行到当前光标所在的位置，可以忽视已经存在的断点。注意和 Run to Cursor 的区别。如果我们在代码中添加了很多的断点，现在不想每个断点都调试，只想让程序一次到位运行到指定的位置，这个是非常有用的功能。</li>
<li>Get thread dump：获取线程Dump，点击该按钮将进入线程Dump界面。</li>
</ul>
<h4 id="断点管理键"><a href="#断点管理键" class="headerlink" title="断点管理键"></a>断点管理键</h4><ul>
<li>Restore Layout：重置调试窗口布局。</li>
<li>View Breakpoints：可以查看所有断点，管理或者配置断点的行为。</li>
<li>Mute Breakpoints：中途切换所有断点的状态。可以临时取消所有断点，不可用的时候断点是白色的。</li>
<li>Drop Frame：这个还不知道怎么用。</li>
<li>Show Values InLine：这个在 Settings 按钮列表中，可以在调试过程中代码右边显示变量值。</li>
<li>Show Method Return Values：这个在 Settings 按钮列表中，可以把调试过程中在对象变量区将带返回值方法的返回值显示出来。</li>
</ul>
<h4 id="求值表达式"><a href="#求值表达式" class="headerlink" title="求值表达式"></a>求值表达式</h4><p>求值表达式的窗口如图所示：<br><img src="/images/development-tool-android-studio-debug-skill/as-evaluate-expression-window.png" alt="效果图"><br>调用这个窗口有两种方式：</p>
<ol>
<li>通过调试面板的<strong>求值表达式</strong>按钮；</li>
<li>选中需要调试的表达式，点击右键，选中“Evaluate Expression…”；</li>
</ol>
<p>注意这里有个 Code Fragment Mode，这个是支持代码片段，可以输入多行表达式，返回最后结果。</p>
<h4 id="变量观察区"><a href="#变量观察区" class="headerlink" title="变量观察区"></a>变量观察区</h4><p>把一个变量或者表达式添加到变量观察区也有两个方法：</p>
<ol>
<li>点击<strong>变量观察区</strong>的 + 号；</li>
<li>选中需要调试的表达式，点击右键，选中“Add to Watches”；</li>
</ol>
<h4 id="修改变量值"><a href="#修改变量值" class="headerlink" title="修改变量值"></a>修改变量值</h4><p>在调试过程中，我们可以方便的修改某个变量的值，以方便我们的调试。<br>在<strong>Variables</strong>窗口中选中改变量，右键点击，然后选择“Set Value…”就可以修改变量值。</p>
<p><img src="/images/development-tool-android-studio-debug-skill/as-variables-set-value.png" alt="效果图"></p>
<p>上图中变量 <code>a</code> 的值是2，现在我们想观察一下 <code>a</code> 为 20 的执行结果，我们不必在代码中修改然后编译运行程序这种方法来进行，用上图的方法和轻松的可以达到目的。</p>
<h3 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h3><p>基本的断点调试方法这里就不多介绍，先介绍一下观察变量值的方法。</p>
<h4 id="方法断点"><a href="#方法断点" class="headerlink" title="方法断点"></a>方法断点</h4><p>在方法名所在行断点位置单击鼠标会生成一个方法断点，当执行到这个方法时使程序停止。<br>这种断点在当前的代码和运行代码不匹配是非常有用，可以执行到特定的方法。</p>
<p><img src="/images/development-tool-android-studio-debug-skill/as-function-break-point.png" alt="效果图"></p>
<h4 id="条件断点"><a href="#条件断点" class="headerlink" title="条件断点"></a>条件断点</h4><p>所谓的条件断点就是在特定条件发生的断点，也就是说，我们可将某个断点设置为只对某种事件感兴趣。<br>断点处右键单击，在弹框的Condition处填写过滤条件。此处我们只关心 <code>i==2</code> 的情况，因此填写<code>i==2</code>。那么代码在变量 <code>i</code> 为 2 时才会停下来。</p>
<p><img src="/images/development-tool-android-studio-debug-skill/as-condition-break-point.png" alt="效果图"></p>
<h4 id="日志断点"><a href="#日志断点" class="headerlink" title="日志断点"></a>日志断点</h4><p>该类型的断点不会使程序停下来，而是在输出我们要它输出的日志信息，然后继续执行。<br>步骤如下：<br>在断点出右键单击，在弹出的对话框中取消选中<strong>Suspend</strong>，在弹出的控制面板中，选中 <strong>Log evaluated</strong> 和 <strong>Condition</strong>，然后填写断点条件以及输出日志信息。<br>如下图：</p>
<p><img src="/images/development-tool-android-studio-debug-skill/as-log-break-point.png" alt="效果图"></p>
<p>在 <code>i</code> 为 2 时才会输出 <code>Test Log Break Point</code> 这条日志。</p>
<h4 id="异常断点"><a href="#异常断点" class="headerlink" title="异常断点"></a>异常断点</h4><p>异常断点顾名思义就是在调试过程中，一旦发生异常（可以指定某类异常），则会立刻定位到异常抛出的地方。<br>通过这类断点，我们可以在调试异常中，可以进行运行异常时及时定位及调试。<br>步骤如下：<br>点击<strong>View Breakpoints</strong>，在窗口中点击 + 号，选择 Java Exception Breakpoints，</p>
<p><img src="/images/development-tool-android-studio-debug-skill/as-crash-break-point-1.png" alt="效果图"></p>
<p>在输入框中输入我们关注的异常类型。</p>
<p><img src="/images/development-tool-android-studio-debug-skill/as-crash-break-point-2.png" alt="效果图"></p>
<p>在调试过程一旦发生该异常，调试器就会定位到异常发生处。</p>
<p><img src="/images/development-tool-android-studio-debug-skill/as-crash-break-point-3.png" alt="效果图"></p>
<h4 id="属性断点"><a href="#属性断点" class="headerlink" title="属性断点"></a>属性断点</h4><p>我们可以为一个类的属性设置断点，那么这个断点就叫属性断点，当这个属性值被修改的时候，程序暂停在修改处。<br>属性断点的使用和添加普通的断点并无不同，只是断点图标稍有不同。</p>
<p><img src="/images/development-tool-android-studio-debug-skill/as-value-break-point.png" alt="效果图"></p>
<!--  
https://www.jianshu.com/p/f695b8f8839c
https://www.jianshu.com/p/f19ee61126ef
https://www.jianshu.com/p/011eb88f4e0d/
-->
<h2 id="设置技巧"><a href="#设置技巧" class="headerlink" title="设置技巧"></a>设置技巧</h2><p><a href="http://blog.csdn.net/heqiangflytosky/article/details/51140346" target="_blank" rel="external">http://blog.csdn.net/heqiangflytosky/article/details/51140346</a></p>
<h2 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h2><p><a href="http://blog.csdn.net/heqiangflytosky/article/details/50764020" target="_blank" rel="external">http://blog.csdn.net/heqiangflytosky/article/details/50764020</a></p>
<ul>
<li>jclasslib bytecode viewer：查看 Java 类字节码的插件。安装成功后，选中类文件，在View-&gt;Show Bytecode With jclasslib</li>
<li>database navigator：查看数据库插件</li>
</ul>
]]></content>
    
    <summary type="html">
    
      介绍 Android Studio 的使用技巧：调试技巧，设置技巧，常用插件等
    
    </summary>
    
      <category term="开发工具" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="开发工具" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Android Studio" scheme="http://yoursite.com/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>Hexo--Next主题优化</title>
    <link href="http://yoursite.com/2016/01/12/blog-optimize-next-theme/"/>
    <id>http://yoursite.com/2016/01/12/blog-optimize-next-theme/</id>
    <published>2016-01-12T02:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>按照上篇博客中更换Theme的方法，我们已经将主题改为Next，但是还是有地方我们可以优化和配置的。<br><a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">Next主题Github地址</a><br>一些常见的配置方法参考<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">文档</a>即可。<br><a id="more"></a></p>
<h3 id="语言设置"><a href="#语言设置" class="headerlink" title="语言设置"></a>语言设置</h3><p>将languages目录下面的zh-Hans.yml修改为zh-CN.yml或者按照文档中的修改根目录配置文件也行。</p>
<h3 id="修改样式"><a href="#修改样式" class="headerlink" title="修改样式"></a>修改样式</h3><h4 id="网站标题栏背景颜色"><a href="#网站标题栏背景颜色" class="headerlink" title="网站标题栏背景颜色"></a>网站标题栏背景颜色</h4><p>当使用Pisces主题时，网站标题栏背景颜色是黑色的，感觉不好看，可以在source/css/_schemes/Pisces/_brand.styl中修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">.site-meta &#123;</div><div class="line">  padding: 20px 0;</div><div class="line">  color: white;</div><div class="line">  background: $blue-dodger; //修改为自己喜欢的颜色</div><div class="line"></div><div class="line">  +tablet() &#123;</div><div class="line">    box-shadow: 0 0 16px rgba(0,0,0,0.5);</div><div class="line">  &#125;</div><div class="line">  +mobile() &#123;</div><div class="line">    box-shadow: 0 0 16px rgba(0,0,0,0.5);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>但是，我们一般不主张这样修改源码的，在<code>next/source/css/_custom</code>目录下面专门提供了<code>custom.styl</code>供我们自定义样式的，因此也可以在<code>custom.styl</code>里面添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// Custom styles.</div><div class="line">.site-meta &#123;</div><div class="line">  background: $blue; //修改为自己喜欢的颜色</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="修改内容区域的宽度"><a href="#修改内容区域的宽度" class="headerlink" title="修改内容区域的宽度"></a>修改内容区域的宽度</h4><p>我们用Next主题是发现在电脑上阅读文章时内容两边留的空白较多，这样在浏览代码块时经常要滚动滚动条才能阅读完整，体验不是很好，下面提供修改内容区域的宽度的方法。<br>NexT 对于内容的宽度的设定如下：</p>
<ul>
<li>700px，当屏幕宽度 &lt; 1600px</li>
<li>900px，当屏幕宽度 &gt;= 1600px</li>
<li>移动设备下，宽度自适应</li>
</ul>
<p>如果你需要修改内容的宽度，同样需要编辑样式文件。<br>在Mist和Muse风格可以用下面的方法：<br>编辑主题的 source/css/_variables/custom.styl 文件，新增变量：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 修改成你期望的宽度</div><div class="line">$content-desktop = 700px</div><div class="line"></div><div class="line">// 当视窗超过 1600px 后的宽度</div><div class="line">$content-desktop-large = 900px</div></pre></td></tr></table></figure></p>
<p>当你使用Pisces风格时可以用下面的方法，在 source/css/_variables/custom.styl 中添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$main-desktop                   = 1200px</div><div class="line">$content-desktop                = 900px</div></pre></td></tr></table></figure></p>
<p>也可以在 Pisces 的布局定义文件 source/css/_schemes/Picses/_layout.styl 的代码后面追加下面的代码：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.header</span>&#123; <span class="attribute">width</span>: <span class="number">80%</span>; &#125; </div><div class="line"><span class="selector-class">.container</span> <span class="selector-class">.main-inner</span> &#123; <span class="attribute">width</span>: <span class="number">80%</span>; &#125; </div><div class="line"><span class="selector-class">.content-wrap</span> &#123; <span class="attribute">width</span>: <span class="built_in">calc</span>(100% - 260px); &#125;</div></pre></td></tr></table></figure></p>
<p>但是这样的修改在PC端是没有问题的，在手机或者平板移动端自适应会有问题，需要在源码中直接修改。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">.header &#123;</div><div class="line">  position: relative;</div><div class="line">  margin: 0 auto;</div><div class="line"></div><div class="line">  //width: $main-desktop;</div><div class="line">  width: 80%; </div><div class="line"></div><div class="line">  +tablet() &#123;</div><div class="line">    width: auto;</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line">...</div><div class="line">.container .main-inner &#123;</div><div class="line">  //width: $main-desktop;</div><div class="line">  width: 80%;</div><div class="line"></div><div class="line">  +tablet() &#123;</div><div class="line">    width: auto;</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">  &#125;</div><div class="line">...</div><div class="line">.content-wrap &#123;</div><div class="line">  ...</div><div class="line">  padding: $content-desktop-padding;</div><div class="line"></div><div class="line">  //width: $content-desktop;</div><div class="line">  width: calc(100% - 260px);</div><div class="line"></div><div class="line">  background: white;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以上几种方式都是亲测有效的。这里推荐在 custom.styl 中修改变量的方法，定制化的东西尽量不要写在源码中。<br>参考文档：<br><a href="http://theme-next.iissnan.com/faqs.html" target="_blank" rel="external">http://theme-next.iissnan.com/faqs.html</a><br><a href="https://github.com/iissnan/hexo-theme-next/issues/759#issuecomment-202242848" target="_blank" rel="external">https://github.com/iissnan/hexo-theme-next/issues/759#issuecomment-202242848</a></p>
<h3 id="主页显示文章摘要"><a href="#主页显示文章摘要" class="headerlink" title="主页显示文章摘要"></a>主页显示文章摘要</h3><p>默认情况下在主页是把文章内容全部显示出来的，如果在根目录的<code>_config.yml</code>中配置分页:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">per_page: 10</div></pre></td></tr></table></figure></p>
<p>那么每页显示10篇文章，这样的花主页就看起来不是很精简了，可以通过下面的方法来配置主页只显示文章摘要：<br>在<code>themes/next/</code>的<code>_config.yml</code>中配置：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Automatically Excerpt. Not recommand.</span></div><div class="line"><span class="comment"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span></div><div class="line"><span class="attr">auto_excerpt:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">false</span> </div><div class="line"><span class="attr">  length:</span> <span class="number">150</span></div></pre></td></tr></table></figure></p>
<p>把<code>enable</code>项配置为<code>true</code>就可以了。<br>但是我们也可以看到注释中是不推荐这样做的，因为这样会强制把文章前150个字符做为摘要的，会出现描述不完整的情况，而且有时候会把文章的源码显示出来。<br>那么我们就用推荐的在文章中用<code>&lt;!-- more --&gt;</code>这种方式来作为文章摘要的方式，可以根据每篇文章的不同情况自己来把控摘要的内容。<br>或者是在文章中配置<code>description</code>也是可以的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: Hexo+GitHub搭建个人博客</div><div class="line">categories: Hexo</div><div class="line">comments: true</div><div class="line">keywords: Hexo, Blog, GitHub</div><div class="line">tags: [Hexo, Blog, GitHub]</div><div class="line">description: 使用Hexo在GitHub上搭建个人博客</div><div class="line">date: 2017-01-010 13:00:00</div><div class="line">---</div></pre></td></tr></table></figure></p>
<h3 id="阅读次数统计-使用LeanCloud"><a href="#阅读次数统计-使用LeanCloud" class="headerlink" title="阅读次数统计(使用LeanCloud)"></a>阅读次数统计(使用LeanCloud)</h3><p>参考<a href="http://theme-next.iissnan.com/third-party-services.html" target="_blank" rel="external">文档</a></p>
<h3 id="加入网站缩略图标"><a href="#加入网站缩略图标" class="headerlink" title="加入网站缩略图标"></a>加入网站缩略图标</h3><p>加入后就可以在浏览器的标签栏或者是收藏夹里面现实网站的缩略图标了。<br>在<code>themes/next/</code>的<code>_config.yml</code>中配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Put your favicon.ico into `hexo-site/source/` directory.</div><div class="line">favicon: /images/favicon.ico</div></pre></td></tr></table></figure></p>
<p>然后把图表放到根目录的<code>source/images/</code>下面。</p>
<h3 id="添加友情链接页面"><a href="#添加友情链接页面" class="headerlink" title="添加友情链接页面"></a>添加友情链接页面</h3><p>和前面的添加关于页面、分类页面类似，不同的是Next主题默认是没有这个页面的，需要我们自己添加一些东西，比如文字翻译，添加对应图标等。<br>首先通过下面的命令添加一个页面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new page links</div></pre></td></tr></table></figure></p>
<p>会生成source/links/index.md文件。<br>在Next主题配置文件中添加：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">menu:</span></div><div class="line"><span class="attr">  home:</span> /</div><div class="line">  ......</div><div class="line"><span class="attr">  about:</span> /about</div><div class="line"><span class="attr">  links:</span> /links</div></pre></td></tr></table></figure></p>
<p>添加图标：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">menu_icons:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">true</span></div><div class="line">  ......</div><div class="line"><span class="attr">  links:</span> users</div></pre></td></tr></table></figure></p>
<p>这里如果找到合适的图标呢？可以到<a href="http://fontawesome.io/" target="_blank" rel="external">fontawesome.io</a>这个网站来找 ，Next里面用的就是这里面的图标。<br>下一步就是要添加翻译了，要不在菜单栏现实的是 menu.links。<br>在next/languages/ 下面编辑对应的语言，添加翻译。<br>比如在zh-CN.yml中添加：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">menu:</span></div><div class="line">  ...</div><div class="line"><span class="attr">  links:</span> 友情链接</div></pre></td></tr></table></figure></p>
<p>然后可以随意编辑source/links/index.md文件就可以了。</p>
]]></content>
    
    <summary type="html">
    
      介绍一些Next主题的优化和配置技巧
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="Next Theme" scheme="http://yoursite.com/tags/Next-Theme/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客配置优化</title>
    <link href="http://yoursite.com/2016/01/11/blog-hexo-optimize/"/>
    <id>http://yoursite.com/2016/01/11/blog-hexo-optimize/</id>
    <published>2016-01-11T02:00:00.000Z</published>
    <updated>2018-10-04T08:25:45.187Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://hexo.io/docs/" target="_blank" rel="external">Hexo 文档</a></p>
<h3 id="创建hexo分支"><a href="#创建hexo分支" class="headerlink" title="创建hexo分支"></a>创建hexo分支</h3><p>为了实现能在更换环境（比如更换电脑）的情况下我们仍然能发布博客，我们创建一个hexo分支用来存放hexo的文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git checkout --orphan hexo</div><div class="line">$ git rm -rf .</div></pre></td></tr></table></figure></p>
<p>将hexo代码全部copy过来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git add . -A</div><div class="line">$ git commit -m &quot;hexo init&quot;</div><div class="line">$ git push origin hexo</div></pre></td></tr></table></figure></p>
<p>这样就用hexo分支来存放网站的原始文件，master分支用来存放生成的静态网页。<br><a id="more"></a></p>
<h3 id="添加README-md到github"><a href="#添加README-md到github" class="headerlink" title="添加README.md到github"></a>添加README.md到github</h3><p>众所周知hexo会把文件夹内的所有md文件解析成html，而github的readme只支持MD格式，但是我们可以使用下面方式来规避。<br>修改_config.yml文件：<br>skip_render: README.md<br>在source目录下创建README.md文件。<br>其他几种情况下的写法：</p>
<ul>
<li>单个文件夹下全部文件：skip_render: demo/*</li>
<li>单个文件夹下指定类型文件：skip_render: demo/*.html</li>
<li>单个文件夹下全部文件以及子目录:skip_render: demo/**</li>
<li>多个文件夹以及各种复杂情况：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">skip_render:</div><div class="line">   - &apos;demo/*.html&apos;</div><div class="line">   - &apos;demo/**&apos;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="修改网站相关信息"><a href="#修改网站相关信息" class="headerlink" title="修改网站相关信息"></a>修改网站相关信息</h3><p>修改根目录下面的_config.yml文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">title: 孤舟蓑笠翁，独钓寒江雪 #网站title</div><div class="line">subtitle: 天道酬勤  #副标题，网站名下面</div><div class="line">description: 技术博客     //网站描述，便于搜索引擎用关键词检索</div><div class="line">author: QH</div><div class="line">language: zh-CN</div><div class="line">timezone: Asia/Shanghai</div></pre></td></tr></table></figure></p>
<h3 id="添加RSS"><a href="#添加RSS" class="headerlink" title="添加RSS"></a>添加RSS</h3><p>安装RSS插件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-feed --save</div></pre></td></tr></table></figure>
<p>现在重新发布一下，就可以在根目录找到 atom.xml 文件了。在个人站点处看到 RSS 的订阅图标，点击这个图标就可以出现RSS订阅的地址，就可以添加到你的 RSS 阅读器方便查看博客的最新文章。<br>配置：<br>然后在在_config.yml文件中配置该插件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># rss</div><div class="line">feed:</div><div class="line">  limit: false</div></pre></td></tr></table></figure>
<p>如果不配置的话是有个默认配置的，这里默认只会显示 20 篇文章，这里去掉这个限制。</p>
<h3 id="添加百度sitemap"><a href="#添加百度sitemap" class="headerlink" title="添加百度sitemap"></a>添加百度sitemap</h3><p>站点地图，方便搜索引擎的收录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-baidu-sitemap --save</div></pre></td></tr></table></figure></p>
<p>我们在百度里面搜索site:heqiangfly.com，发现没有我们的博客并没有被百度收录，也就是说你的博客别人可能会看不到，下面来解决这个问题。<br>进入<a href="http://zhanzhang.baidu.com/linksubmit/url" target="_blank" rel="external">链接提交</a>，然后<a href="http://zhanzhang.baidu.com/site/siteadd" target="_blank" rel="external">验证网站所有权</a>，选择文件验证，下面baidu_verify_IIJFGFbbEX.html文件到source/目录下面。<br>修改_config.yml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">skip_render: </div><div class="line">  - README.md</div><div class="line">  - baidu_verify_IIJFGFbbEX.html</div></pre></td></tr></table></figure></p>
<p>注意-后面要加个空格。<br>按照说明完成验证。<br>在百度站长平台里面的站点管理里面看到是否验证成功。<br>上面进行步骤成功之后，进入站点信息-&gt;网页抓取-&gt;链接提交-&gt;详情，按照说明进行设置。<br>完成后等一段时间，在百度里面搜索site:heqiangfly.com，有记录说明是被收录了。</p>
<h3 id="添加Google收录"><a href="#添加Google收录" class="headerlink" title="添加Google收录"></a>添加Google收录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-sitemap --save</div></pre></td></tr></table></figure>
<p>谷歌操作比较简单，就是向<a href="https://www.google.com/webmasters/tools/home?hl=zh-CN" target="_blank" rel="external">Google站长工具</a>提交sitemap。<br>类似百度，通过HTML文件方式验证通过后，在站点里选择 抓取-&gt;站点地图里 添加/测试站点地图。<br>完成后等一段时间（大概一天时间）在Google里面搜索site:heqiangfly.com，就可以看到搜索结果了。</p>
<h3 id="站点访问量统计"><a href="#站点访问量统计" class="headerlink" title="站点访问量统计"></a>站点访问量统计</h3><h4 id="添加CNZZ统计"><a href="#添加CNZZ统计" class="headerlink" title="添加CNZZ统计"></a>添加CNZZ统计</h4><p>首先要在<a href="http://i.umeng.com/signup" target="_blank" rel="external">CNZZ网站</a>注册一个帐号，复制一种你喜欢的统计格式的代码，在themes/landscape/layout/_partial/新建文件cnzz.ejs，加入代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;% if (theme.cnzz)&#123; %&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;var cnzz_protocol = ((&quot;https:&quot; == document.location.protocol) ? &quot; https://&quot; : &quot; http://&quot;);document.write(unescape(&quot;%3Cspan id=&apos;cnzz_stat_icon_1261134288&apos;%3E%3C/span%3E%3Cscript src=&apos;&quot; + cnzz_protocol + &quot;s95.cnzz.com/z_stat.php%3Fid%3D1261134288&apos; type=&apos;text/javascript&apos;%3E%3C/script%3E&quot;));&lt;/script&gt;</div><div class="line">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure></p>
<p>把第一行与最后一行之间的代码替换成你自己的代码。<br>然后，在页面的某个位置添加你期望站长统计出现的位置，比如我是在footer.ejs里面加上以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;%- partial(&apos;cnzz&apos;) %&gt;</div></pre></td></tr></table></figure></p>
<p>然后在themes/landscape/_config.yml里面打开统计开关：<br>添加代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#### Analytics</div><div class="line">cnzz: true</div></pre></td></tr></table></figure></p>
<p>就会在页面左下角出现站长统计了。</p>
<h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4><p>参考<a href="http://busuanzi.ibruce.info/" target="_blank" rel="external">不蒜子</a>的方法。</p>
<h3 id="文章访问量统计"><a href="#文章访问量统计" class="headerlink" title="文章访问量统计"></a>文章访问量统计</h3><p>使用LeanCloud，参考<a href="https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud" target="_blank" rel="external">文档</a></p>
<h3 id="修改日期显示"><a href="#修改日期显示" class="headerlink" title="修改日期显示"></a>修改日期显示</h3><p>打开根目录下的_config.yml文件，修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">date_format: YYYY-MM-DD</div></pre></td></tr></table></figure></p>
<p>即可。</p>
<h3 id="创建关于页面"><a href="#创建关于页面" class="headerlink" title="创建关于页面"></a>创建关于页面</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new page about</div></pre></td></tr></table></figure>
<p>会在source/about中生成index.md，然后自己可以随意编辑。<br>在主题配置文件中添加<br>menu:<br>  about: /about</p>
<h3 id="创建分类"><a href="#创建分类" class="headerlink" title="创建分类"></a>创建分类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new page categories</div></pre></td></tr></table></figure>
<p>会在source/categories中生成index.md，然后修改index.md。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: 分类</div><div class="line">date: 2017-01-17 17:53:50</div><div class="line">type: &quot;categories&quot;</div><div class="line">comments: false</div><div class="line">---</div></pre></td></tr></table></figure></p>
<p>在博客文章中配置，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: Hexo+GitHub搭建个人博客</div><div class="line">categories: Hexo</div><div class="line">comments: true</div><div class="line">keywords: Hexo, Blog, GitHub</div><div class="line">description: 使用Hexo在GitHub上搭建个人博客</div><div class="line">date: 2017-01-010 13:00:00</div><div class="line">---</div></pre></td></tr></table></figure></p>
<p>那么这篇博客就添加到了Hexo分类中了。<br>在主题配置文件中添加<br>menu:<br>  categories: /categories</p>
<h3 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new page tags</div></pre></td></tr></table></figure>
<p>会在source/tags中生成index.md，然后修改index.md。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: tags</div><div class="line">date: 2017-01-17 17:39:48</div><div class="line">type: &quot;tags&quot;</div><div class="line">comments: false</div><div class="line">---</div></pre></td></tr></table></figure></p>
<p>然后在文章中配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tags: Hexo</div></pre></td></tr></table></figure></p>
<p>就可以了。<br>多个标签：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tags: [标签1,标签2,标签3]</div></pre></td></tr></table></figure></p>
<p>下面的写法也是可以的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">tags: </div><div class="line"> - Hexo</div><div class="line"> - Blog</div><div class="line"> - GitHub</div></pre></td></tr></table></figure></p>
<p>在主题配置文件中添加<br>menu:<br>  tags: /tags</p>
<h3 id="创建404页面"><a href="#创建404页面" class="headerlink" title="创建404页面"></a>创建404页面</h3><p>在 source 目录下创建 404.html 文件，页面内容可以自己定义，比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">         &lt;meta charset=&quot;UTF-8&quot; /&gt;</div><div class="line">         &lt;title&gt;404&lt;/title&gt;                                                                                                                                        </div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">         &lt;p&gt; 有可能博客调整导致您所访问的文章地址发生变化，在此深感抱歉！ &lt;/p&gt;</div><div class="line">         &lt;p&gt; 请在在首页、归档或者分类里面找您需要的文章。  &lt;/p&gt;</div><div class="line">         &lt;p&gt; </div><div class="line">             &lt;a href=&quot;http://www.heqiangfly.com/&quot;&gt;回到首页&lt;/a&gt;</div><div class="line">             &lt;a href=&quot;http://www.heqiangfly.com/archives/&quot;&gt;归档&lt;/a&gt;</div><div class="line">             &lt;a href=&quot;http://www.heqiangfly.com/categories/&quot;&gt;分类&lt;/a&gt;   </div><div class="line">         &lt;/p&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><p><a href="https://hexo.io/themes/" target="_blank" rel="external">官方推荐的一些主题</a> 。<br>在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。博客的整体配置在hexo_config.yml文件中进行。默认使用的主题是landscape，主题的配置在hexo\themes\landscape_config.yml。<br>下面就把默认的landscape主题切换为next主题：</p>
<h4 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd hexo\themes</div><div class="line">git clone https://github.com/iissnan/hexo-theme-next next</div></pre></td></tr></table></figure>
<p>注意：next为一个git仓库，可以采用submodule方式来管理，也可以把next下面的.git删除，然后再提交。</p>
<h4 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h4><p>打开next根目录下面的配置文件_config.yml，修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme: next</div></pre></td></tr></table></figure></p>
<h4 id="验证主题"><a href="#验证主题" class="headerlink" title="验证主题"></a>验证主题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo s</div></pre></td></tr></table></figure>
<p>浏览器中打开 <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> 。<br>Next主题的具体其他的配置请参考<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">文档</a><br>然后再把自己自定义的一些东西，比如CNZZ统计迁移过来即可。</p>
]]></content>
    
    <summary type="html">
    
      介绍一些Hexo的配置技巧
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+GitHub搭建个人博客</title>
    <link href="http://yoursite.com/2016/01/10/blog-use-hexo-to-build-blog/"/>
    <id>http://yoursite.com/2016/01/10/blog-use-hexo-to-build-blog/</id>
    <published>2016-01-10T02:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本地环境搭建"><a href="#本地环境搭建" class="headerlink" title="本地环境搭建"></a>本地环境搭建</h2><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><p>去<a href="https://nodejs.org/en/download/" target="_blank" rel="external">官网</a>下载node-v5.0.0-linux-x64解压即可<br><a id="more"></a></p>
<h2 id="配置Github"><a href="#配置Github" class="headerlink" title="配置Github"></a>配置Github</h2><h3 id="建立Repository"><a href="#建立Repository" class="headerlink" title="建立Repository"></a>建立Repository</h3><p>首先在github上面建一个仓库username.github.io，username是你github的用户名。此时访问 <a href="http://heqiangflytosky.github.io/" target="_blank" rel="external">http://heqiangflytosky.github.io/</a> ，就会访问到你创建的git的内容。</p>
<h3 id="域名配置"><a href="#域名配置" class="headerlink" title="域名配置"></a>域名配置</h3><p>首先要购买一个域名，然后进入域名解析页面，添加一个CNAME记录，指向username.github.io即可。配置好一般等待TTL缓存的时间过后，博客建好后，访问你的域名heqiangfly.com，你会发现已经跳转到你的博客页面了。</p>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><h3 id="安装Hexo-1"><a href="#安装Hexo-1" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo</div></pre></td></tr></table></figure>
<h3 id="初始化hexo"><a href="#初始化hexo" class="headerlink" title="初始化hexo"></a>初始化hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init</div></pre></td></tr></table></figure>
<h3 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo g</div></pre></td></tr></table></figure>
<h3 id="启动本地服务，进行文章预览调试"><a href="#启动本地服务，进行文章预览调试" class="headerlink" title="启动本地服务，进行文章预览调试"></a>启动本地服务，进行文章预览调试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo s</div></pre></td></tr></table></figure>
<p>浏览器输入 <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> ，查看搭建效果。</p>
<h3 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h3><p>编辑更目录下面的_config.yml文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># Deployment</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: https://github.com/heqiangflytosky/heqiangflytosky.github.io.git</div><div class="line">  branch: master</div><div class="line">  name: heqiang</div><div class="line">  email: heqiangfly@163.com</div></pre></td></tr></table></figure></p>
<p>这里的name和email在你每次部署提交到master分支的时候，会生成在提交信息里面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">commit c201b7e15aba41f9c874c2ee79223becba477fac</div><div class="line">Author: heqiang &lt;heqiangfly@163.com&gt;</div><div class="line">Date:   Tue Jan 10 13:05:22 2017 +0800</div><div class="line"></div><div class="line">    Site updated: 2017-01-10 13:05:22</div></pre></td></tr></table></figure></p>
<p>注意：每一项的填写，其:后面都要保留一个空格，下同。</p>
<h3 id="发布到github"><a href="#发布到github" class="headerlink" title="发布到github"></a>发布到github</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo d</div></pre></td></tr></table></figure>
<p>如果有下面报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ERROR Deployer not found: git</div></pre></td></tr></table></figure></p>
<p>执行下面命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>
<p>再次执行 hexo d，输入github用户名和秘密，就已经发布到github对应仓库的master分支了。</p>
<h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p>在source文件夹中新建一个CNAME文件<br>写入www.heqiangfly.com<br>生成提交<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo g</div><div class="line">$ hexo d</div></pre></td></tr></table></figure></p>
<p>然后访问www.heqiangfly.com你会发现已经跳转到博客页面了。</p>
<h2 id="发表博客"><a href="#发表博客" class="headerlink" title="发表博客"></a>发表博客</h2><h3 id="文章信息"><a href="#文章信息" class="headerlink" title="文章信息"></a>文章信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">title: Hexo+GitHub搭建个人博客</div><div class="line">layout: post</div><div class="line">date: 2016-01-10 10:00:00</div><div class="line">comments: true</div><div class="line">categories: Blog</div><div class="line">tags: </div><div class="line">keywords: Hexo, Blog, GitHub</div><div class="line">description: 使用Hexo在GitHub上搭建个人博客</div></pre></td></tr></table></figure>
<p>title：文章的标题<br>date：文章的发表日期<br>comments：是否允许评论<br>categories：此文章的分类<br>tag：文章的标签<br>keywords：文章内容的关键字<br>description：设置摘要</p>
<h3 id="设置摘要"><a href="#设置摘要" class="headerlink" title="设置摘要"></a>设置摘要</h3><p>使用<code>&lt;!--more--&gt;</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">以上是文章摘要 &lt;!--more--&gt; 以下是余下全文</div></pre></td></tr></table></figure></p>
<p>这样在主页就只显示文章的摘要内容。</p>
<h2 id="Hexo常用命令"><a href="#Hexo常用命令" class="headerlink" title="Hexo常用命令"></a>Hexo常用命令</h2><ul>
<li>hexo generate = hexo g          #生成</li>
<li>hexo server = hexo s            #启动服务预览</li>
<li>hexo deploy = hexo d            #部署</li>
<li>hexo new “博客”= hexo n “博客”   #新建文章</li>
<li>hexo clean                      #清除缓存,清除缓存文件 db.json 和已生成的静态文件 public。 网页正常情况下可以忽略此条命令</li>
<li>hexo new “postName”             #新建文章</li>
<li>hexo new page “pageName”        #新建页面</li>
</ul>
<p>好了，我的GitHub个人博客<a href="www.heqiangfly.com">孤舟蓑笠翁，独钓寒江雪</a>就是这样炼成的，欢迎大家访问，博客持续更新中。</p>
]]></content>
    
    <summary type="html">
    
      使用Hexo在GitHub上搭建个人博客
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="Blog" scheme="http://yoursite.com/tags/Blog/"/>
    
      <category term="GitHub" scheme="http://yoursite.com/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Android App Process 以及 sharedUserId的关系</title>
    <link href="http://yoursite.com/2015/12/16/android-knowledge-point-shareduserid-app-process/"/>
    <id>http://yoursite.com/2015/12/16/android-knowledge-point-shareduserid-app-process/</id>
    <published>2015-12-16T02:00:00.000Z</published>
    <updated>2018-12-31T13:43:51.361Z</updated>
    
    <content type="html"><![CDATA[<h2 id="应用和进程之间的关系"><a href="#应用和进程之间的关系" class="headerlink" title="应用和进程之间的关系"></a>应用和进程之间的关系</h2><h3 id="一个应用内的多进程"><a href="#一个应用内的多进程" class="headerlink" title="一个应用内的多进程"></a>一个应用内的多进程</h3><p>Activity 可以通过 <code>android:process</code> 来运行在指定的进程。<br>指定方法：</p>
<ul>
<li>冒号开头的字符串：比如 <code>：remote</code>，那么该进程就是私有进程。</li>
<li>其他字符串，必须包含一个 . ，否则安装 apk 时会报错“Invalid process name <em>* in package </em>.<em>.</em>.*: must have at least one ‘.’ separator”。那么它就是公有进程，这样拥有相同 ShareUID 的不同应用可以跑在同一进程里。 </li>
</ul>
<h3 id="调用其他App中的-Activity"><a href="#调用其他App中的-Activity" class="headerlink" title="调用其他App中的 Activity"></a>调用其他App中的 Activity</h3><p>我们先来简单测试一下从应用 A 中启动应用 B 中的 Activity A1。<br>启动后 ps 进程关系：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">u0_a267   2163  2669  1946936 110492 SyS_epoll_ 7da55ef488 S com.example.heqiang.myapplication</div><div class="line">u0_a266   2198  2669  2048192 122872 SyS_epoll_ 7da55ef488 S com.example.heqiang.testsomething</div></pre></td></tr></table></figure>
<p>它们位于不同的进程，其实这里不管启动模式是什么，他们都是在不同的进程。<br>即 A 启动的 Activity A1，它并不运行A自己的进程，而是运行在 A1 所属的应用 B 的进程。</p>
<h3 id="通过-android-process-来指定进程"><a href="#通过-android-process-来指定进程" class="headerlink" title="通过 android:process 来指定进程"></a>通过 <code>android:process</code> 来指定进程</h3><p>先来说一下场景：在应用 A 内为 Activity A1 指定进程为 <code>android:process=&quot;com.hq.test.process&quot;</code>，在应用 B 内为 Activity B1 指定进程为 <code>android:process=&quot;com.hq.test.process&quot;</code>，即和 A1 指定同一个进程。<br>我们先在 应用 A 内启动 A1，然后在应用 A 内启动 B1，最后在从桌面点击应用B的图标。<br>从上到下分别是 A1，B1，A 的 Launcher Acitvity，B的Launcher Acitvity所在的进程，可见他们都分别运行在不同的进程，虽然 A1 和 B1 的进程名称相同。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">u0_a266   3264  2669  2086900 123736 do_signal_ 7da55ef488 T com.hq.test.process</div><div class="line">u0_a267   3639  2669  2024264 138764 SyS_epoll_ 7da55ef488 S com.hq.test.process</div><div class="line">u0_a267   3559  2669  1953996 126752 SyS_epoll_ 7da55ef488 S com.example.heqiang.myapplication</div><div class="line">u0_a266   3781  2669  2216428 117764 SyS_epoll_ 7da55ef488 S com.example.heqiang.testsomething</div></pre></td></tr></table></figure>
<p>下面来看同一个应用为两个不同的 Activity A1 和 A2 指定相同 <code>android:process</code> 的情况，这个时候只有一个名称为 com.hq.test.process 的进程：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">u0_a268   7624  2669  2026660 141140 SyS_epoll_ 7da55ef488 S com.hq.test.process</div></pre></td></tr></table></figure>
<p>通过dumpsys查看 Task 和进程：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">Task id #21375</div><div class="line">mFullscreen=true</div><div class="line">mBounds=null</div><div class="line">mMinWidth=-1</div><div class="line">mMinHeight=-1</div><div class="line">mLastNonFullscreenBounds=null</div><div class="line">  TaskRecord&#123;9ea1cf3 #21375 A=com.example.heqiang.testsomething U=0 StackId=1 sz=2&#125;</div><div class="line">  Intent &#123; act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10000000 cmp=com.example.heqiang.testsomething/.MainActivity &#125;</div><div class="line">    Hist #1: ActivityRecord&#123;d23b29a u0 com.example.heqiang.testsomething/.event.EventActivity t21375&#125;</div><div class="line">      Intent &#123; cmp=com.example.heqiang.testsomething/.event.EventActivity &#125;</div><div class="line">      ProcessRecord&#123;86ad4dc 7624:com.hq.test.process/u0a268&#125;</div><div class="line">    Hist #0: ActivityRecord&#123;de17cd2 u0 com.example.heqiang.testsomething/.MainActivity t21375&#125;</div><div class="line">      Intent &#123; act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10000000 cmp=com.example.heqiang.testsomething/.MainActivity &#125;</div><div class="line">      ProcessRecord&#123;7fd9e5 7587:com.example.heqiang.testsomething/u0a268&#125;</div><div class="line">Task id #21376</div><div class="line">mFullscreen=true</div><div class="line">mBounds=null</div><div class="line">mMinWidth=-1</div><div class="line">mMinHeight=-1</div><div class="line">mLastNonFullscreenBounds=null</div><div class="line">  TaskRecord&#123;2122429 #21376 A=com.hq.test.task U=0 StackId=1 sz=1&#125;</div><div class="line">  Intent &#123; flg=0x10000000 cmp=com.example.heqiang.testsomething/.commontest.OtherTestActivity &#125;</div><div class="line">    Hist #0: ActivityRecord&#123;73a26e8 u0 com.example.heqiang.testsomething/.commontest.OtherTestActivity t21376&#125;</div><div class="line">      Intent &#123; flg=0x10000000 cmp=com.example.heqiang.testsomething/.commontest.OtherTestActivity &#125;</div><div class="line">      ProcessRecord&#123;86ad4dc 7624:com.hq.test.process/u0a268&#125;</div></pre></td></tr></table></figure>
<p>他们虽然在不同的 Task 中，但是他们在相同的进程 7624 中。</p>
<h2 id="sharedUserId-和进程之间的关系"><a href="#sharedUserId-和进程之间的关系" class="headerlink" title="sharedUserId 和进程之间的关系"></a>sharedUserId 和进程之间的关系</h2><p>首先给出 sharedUserId 的设置方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    package=&quot;com.example.heqiang.myapplication&quot;</div><div class="line">    android:sharedUserId=&quot;com.hq.test.shareduserid&quot;&gt;</div></pre></td></tr></table></figure>
<p>还要注意的是 sharedUserId 相同的两个 App 的签名必须相同。</p>
<h3 id="sharedUserId-相同，process-属性不同的两个App"><a href="#sharedUserId-相同，process-属性不同的两个App" class="headerlink" title="sharedUserId 相同，process 属性不同的两个App"></a>sharedUserId 相同，process 属性不同的两个App</h3><p>配置两个包名不同的 App 为相同的 sharedUserId，它们的 MainActivity 的 <code>android:process</code> 也不一样。<br>看一下启动两个应用的进程：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">:u0_a271   14565 2669  2220332 132320 SyS_epoll_ 7da55ef488 S com.example.heqiang.testsomething</div><div class="line">:u0_a271   14662 2669  2051216 140792 SyS_epoll_ 7da55ef488 S com.example.heqiang.myapplication</div></pre></td></tr></table></figure>
<p>可以看到，两个 Activity 仍然在不同的进程，但是 userId 确实相同的，u0_a271。</p>
<h3 id="sharedUserId-相同，process-属性相同的两个App"><a href="#sharedUserId-相同，process-属性相同的两个App" class="headerlink" title="sharedUserId 相同，process 属性相同的两个App"></a>sharedUserId 相同，process 属性相同的两个App</h3><p>配置两个包名不同的 App 为相同的 sharedUserId，它们的 MainActivity 的 <code>android:process</code> 统一配置成 <code>com.hq.test.process</code>。<br>看一下ps结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">u0_a271   14865 2669  2197988 156772 SyS_epoll_ 7da55ef488 S com.hq.test.process</div></pre></td></tr></table></figure>
<p>两个 Activity 运行在同一个进程。</p>
<h2 id="sharedUserId-和包名之间的关系"><a href="#sharedUserId-和包名之间的关系" class="headerlink" title="sharedUserId 和包名之间的关系"></a>sharedUserId 和包名之间的关系</h2><p>sharedUserId 和包名之间没有什么关系，两个包名不同的应用要想拥有相同的 sharedUserId 必须要同时显式指定，不指定的话默认是没有 sharedUserId 的。</p>
<!--  
https://blog.csdn.net/furuidelei123/article/details/7255188

https://www.cnblogs.com/scarecrow-blog/p/4876560.html

-->
]]></content>
    
    <summary type="html">
    
      介绍 sharedUserId App 和 Process 的关系
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android JNI -- Android Studio JNI 开发基础</title>
    <link href="http://yoursite.com/2015/12/10/android-jni-android-studio-base/"/>
    <id>http://yoursite.com/2015/12/10/android-jni-android-studio-base/</id>
    <published>2015-12-10T02:00:00.000Z</published>
    <updated>2018-11-06T09:32:04.282Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本文介绍如何在 Android Studio 环境下进行 JNI 开发。</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先要在 AS 的 Project Structure 中配置 Android NDK Location。</p>
<h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><h3 id="Java-类"><a href="#Java-类" class="headerlink" title="Java 类"></a>Java 类</h3><p>首先创建一个声明 native 方法的 Java 类：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public class JniUtils &#123;</div><div class="line">    public static native String getString();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>rebuild 一下工程，然后就可以在 <code>JniUtils</code> 类所在的 Module 的  <code>build/intermediates/classes/debug/&lt;包名&gt;</code> 下面找到 JniUtils.class 文件。</p>
<h3 id="生成头文件"><a href="#生成头文件" class="headerlink" title="生成头文件"></a>生成头文件</h3><p>进入 <code>build/intermediates/classes/debug</code> 目录，执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javah -jni com.example.heqiang.testsomething.util.JniUtils</div></pre></td></tr></table></figure>
<p>就会在当前目录生成 com_example_heqiang_testsomething_util_JniUtils.h 头文件。当然这个头文件的文件名你也可以自定义成其他。</p>
<h3 id="JNI-开发"><a href="#JNI-开发" class="headerlink" title="JNI 开发"></a>JNI 开发</h3><p>在 src/main 路径下新建一个名为 jni 的文件夹，再将前面生成的头文件放到该目录下面。<br>然后可以在目前下面创建 native 文件，名字可以随意定。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#include &quot;com_example_heqiang_testsomething_util_JniUtils.h&quot;</div><div class="line"></div><div class="line">JNIEXPORT jstring JNICALL Java_com_example_heqiang_testsomething_util_JniUtils_getKey(JNIEnv *env, jobject obj) &#123;</div><div class="line">    return (*env)-&gt;NewStringUTF(env,&quot;abcdefghijk&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><h3 id="AS-自动编译"><a href="#AS-自动编译" class="headerlink" title="AS 自动编译"></a>AS 自动编译</h3><p>首先配置 build.gradle :</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">defaultConfig &#123;</div><div class="line">    ndk &#123;</div><div class="line">        ndk &#123;</div><div class="line">            moduleName &quot;JniDemo&quot;                       //生成的so名字</div><div class="line">            abiFilters &quot;armeabi&quot;, &quot;armeabi-v7a&quot;, &quot;x86&quot; //输出指定三种abi体系结构下的so库</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>触发编译，这个时候可以会报错：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Error:Execution failed for task &apos;:app:compileDebugNdk&apos;.</div><div class="line">&gt; Error: NDK integration is deprecated in the current plugin.  Consider trying the new experimental plugin.  For details, see http://tools.android.com/tech-docs/new-build-system/gradle-experimental.  Set &quot;$USE_DEPRECATED_NDK=true&quot; in gradle.properties to continue using the current NDK integration.</div></pre></td></tr></table></figure>
<p>在 gradle.properties 文件中配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android.useDeprecatedNdk=true</div></pre></td></tr></table></figure>
<p>然后再次编译，在 <code>build/intermediates/ndk/debug/</code> 目录下会找到生成的各个平台的 so 文件。</p>
<h3 id="手动编译"><a href="#手动编译" class="headerlink" title="手动编译"></a>手动编译</h3><p>上面的方法容易受到 AS 版本的影响，下面来介绍创建 Android.mk 文件的方法来生成so。<br>其实在上面的方法中在 build/intermediates/ndk/debug 路径下也有生成 Android.mk 文件。<br>首先我们在 jni 目录下面创建 Application.mk 文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">APP_ABI := armeabi,armeabi-v7a,arm64-v8a</div></pre></td></tr></table></figure>
<p>创建 Android.mk：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">LOCAL_PATH := $(call my-dir)</div><div class="line"></div><div class="line">include $(CLEAR_VARS)</div><div class="line"></div><div class="line">LOCAL_MODULE    := JniDemo</div><div class="line">LOCAL_SRC_FILES := Constants.c</div><div class="line"></div><div class="line">include $(BUILD_SHARED_LIBRARY)</div></pre></td></tr></table></figure>
<p>在 jni 目录下面运行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ndk-build</div></pre></td></tr></table></figure>
<p>这样会在 <code>src/main/libs</code> 下面生成 so 文件。<br>然后在 build.gradle 中配置:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sourceSets.main &#123;</div><div class="line">    // JNI build</div><div class="line">    jniLibs.srcDirs = [&apos;src/main/libs&apos;] //set libs as .so&apos;s location instead of jni</div><div class="line">    jni.srcDirs = []                    //disable automatic ndk-build call with auto-generated Android.mk file</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="加载so"><a href="#加载so" class="headerlink" title="加载so"></a>加载so</h2><p>在 JniUtils 类中添加下面代码记载so：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class JniUtils &#123;</div><div class="line">    static &#123;</div><div class="line">        System.loadLibrary(&quot;JniDemo&quot;);</div><div class="line">    &#125;</div><div class="line">    public static native String getString();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后就可以通过 <code>JniUtils.getString()</code> </p>
]]></content>
    
    <summary type="html">
    
      Android Studio JNI 开发基础
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="JNI" scheme="http://yoursite.com/tags/JNI/"/>
    
  </entry>
  
  <entry>
    <title>Android LaunchMode taskAffinity 与 Intent Flag 详解</title>
    <link href="http://yoursite.com/2015/12/08/android-knowledge-point-launchmode-intent-flag/"/>
    <id>http://yoursite.com/2015/12/08/android-knowledge-point-launchmode-intent-flag/</id>
    <published>2015-12-08T02:00:00.000Z</published>
    <updated>2019-01-13T16:10:06.294Z</updated>
    
    <content type="html"><![CDATA[<h2 id="taskAffinity"><a href="#taskAffinity" class="headerlink" title="taskAffinity"></a>taskAffinity</h2><p>我们可以在 AndroidManifest.xml 中通过 <code>android:taskAffinity</code> 属性为 Activity 指定 taskAffinity。<br>那么什么是 taskAffinity 呢？<br>taskAffinity 可以为 Activity 指定归属于那个 Task。<br>一般情况下，如果应用中的 Activity 都没有特殊的显式指定 taskAffinity，那么它的这个属性就等于 Application 指明的 taskAffinity，如果 Application 也没有指明，那么该 taskAffinity 的值就等于应用的包名。<br>taskAffinity 可以为任意字符串，但是非空的话必须至少包含一个“.”，否则会编译报错。但是你可以指定taskAffinity为空字符串，这时它就不属于任何 Task。<br>Activity 的启动都会在它通过 taskAffinity 指定的 Task 里面启动。</p>
<h2 id="LaunchMode"><a href="#LaunchMode" class="headerlink" title="LaunchMode"></a>LaunchMode</h2><h3 id="standard"><a href="#standard" class="headerlink" title="standard"></a>standard</h3><p>标准模式。如果不显式的指定 launchMode，Activity都会按照此种模式启动。这种模式下的 Activity 可以有多个实例，不同任务中可以有不同的 Activity 实例，同一个任务中也可以有多个 Activity 实例。这种模式下启动Activity总是会重新创建Activity，对应调用 <code>onCreate()</code> 方法。<br>Android L(Android 5.0)前后对这种启动模式的处理方式是不同的：</p>
<ul>
<li>Android L之前：每次以该模式启动的 Activity 都会被压入当前任务的顶部，启动 N 次，在当前任务就会出现 N 个 Activity 的实例，每次Back键就会销毁一个，直到按了 N 次Back键。</li>
<li>Android L之后：如果要以该模式启动 Activity 都是来自同一应用，那么还是会像之前一样，压入当前任务的顶部; 如果是来自不同应用，那么将会创建一个新的任务，然后将 Activity 的实例压入新的任务中。Android L做的优化主要是针对多任务的显示。</li>
</ul>
<h3 id="singleTop"><a href="#singleTop" class="headerlink" title="singleTop"></a>singleTop</h3><p>栈顶复用模式。这种模式下栈顶仅有一个 Activity 实例，也就是说不会有多个相同的 Activity 叠加在栈顶。如果当前任务的顶部就是待启动的 Activity 实例，那么并不会再创建一个新的 Activity 实例，而是仅仅调用已有实例的 <code>onNewIntent()</code> 方法，所以对于要以 singleTop 启动的Activity，需要处理 <code>onCreate()</code> 和 <code>onNewIntent()</code> 这两种情况下的启动参数。<br>但是如果任务中已经有这个 Activity 实例，但是不在栈顶，还是会重新创建一个新的 Activity 实例。</p>
<h3 id="singleTask"><a href="#singleTask" class="headerlink" title="singleTask"></a>singleTask</h3><p>栈内复用模式，也是单实例模式。该模式下该 Activity 实例仅有一个 Task 存在。但是该 Task 中可能会有多个 Activity。<br>系统在该类型的 Task 不存在时创建一个新的 Task，并将该 Activity 放入 Task 底部。具体启动 singleTask 会不会新建一个 Task，则和 TaskAffinity 有关。在我们不设置 <code>android:taskAffinity</code> 的情况下，同一个应用的 Activity 默认具有相同的 TaskAffinity，除非你自己设置了 Activity 的 <code>android:taskAffinity</code>。<br>以 A 启动 B（singleTask）为例，下面我们分集中情况来介绍：</p>
<ul>
<li>A 和 B 的 TaskAffinity 相同，该 Task 里面没有 B：那么就直接在 A 的 Task 里面启动 B。</li>
<li>A 和 B 的 TaskAffinity 相同，该 Task 里面存在 B：清除该 Activity 上面的所有对象，把该 Activity 推到前台。</li>
<li>A 和 B 的 TaskAffinity 不同，且 B 不存在：则创建一个新的 Task，并将该 Activity 放入 Task 底部。</li>
<li>A 和 B 的 TaskAffinity 不同，且 B 存在：在该 Task 中启动该 Activity，并把该 Task 拉回前台，如果该 Activity 上面有其他的对象，则清除该 Activity 上面的所有对象，把该 Activity 推到前台。</li>
</ul>
<p>也就是说，启动模式为 singleTask 的 Activity 在系统中只会存在一个实例。<br>如果在栈中已经有该Activity的实例，就重用该实例(会调用实例的 <code>onNewIntent()</code>)。重用时，会让该实例回到栈顶，因此在它上面的实例将会被移除栈。<br>但是要注意，系统可能会随时杀掉后台运行的 Activity，如果这一切发生，那么系统就会调用 <code>onCreate()</code> 方法，而不调用 <code>onNewIntent()</code> 方法。，因此，如果有需要在 <code>Activity</code> 启动时处理的方法最好在 <code>onCreate()</code>和 <code>onNewIntent()</code> 方法中都要调用一下。<br>我们其实也注意到，Intent Flag 中 有 FLAG_ACTIVITY_NEW_TASK，singleTask 的作用相当于 FLAG_ACTIVITY_CLEAR_TOP + FLAG_ACTIVITY_NEW_TASK。</p>
<h3 id="singleInstance"><a href="#singleInstance" class="headerlink" title="singleInstance"></a>singleInstance</h3><p>单实例模式，也是增强型 singleTask 模式。该模式下，系统中只允许有一个存在该 Activity 的 Task 存在，而且该 Task 中只允许有该 Activity 一个实例存在。</p>
<ul>
<li>Activity 不存在：总是新建一个 Task，并且创建一个 Activity。</li>
<li>Activity 存在：则会重用该 Activity。</li>
</ul>
<p>这里可能会有个疑问，如果 A 和 B （singleInstance）的 TaskAffinity 相同，A 启动 B 时的情况是怎么样的呢？我们来做一个测试：<br>看一下 <code>adb shell dumpsys activity</code> 的打印：<br>启动 B 前：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Task id #356</div><div class="line">  TaskRecord&#123;bbe4f0d #356 A=com.example.heqiang.testsomething U=0 sz=2&#125;</div><div class="line">  Intent &#123; act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10000000 cmp=com.example.heqiang.testsomething/.MainActivity &#125;</div><div class="line">    Hist #1: ActivityRecord&#123;eeae154 u0 com.example.heqiang.testsomething/.launchFlag.ActivityA t356&#125;</div><div class="line">      Intent &#123; cmp=com.example.heqiang.testsomething/.launchFlag.ActivityA &#125;</div><div class="line">      ProcessRecord&#123;66c150e 15760:com.example.heqiang.testsomething/u0a36&#125;</div><div class="line">    Hist #0: ActivityRecord&#123;d6950cc u0 com.example.heqiang.testsomething/.MainActivity t356&#125;</div><div class="line">      Intent &#123; act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10000000 cmp=com.example.heqiang.testsomething/.MainActivity &#125;</div><div class="line">      ProcessRecord&#123;66c150e 15760:com.example.heqiang.testsomething/u0a36&#125;</div></pre></td></tr></table></figure>
<p>该 Task 里面有 MainActivity 和 A。<br>A 启动 B：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Task id #361</div><div class="line">  TaskRecord&#123;378cfdb #361 A=com.example.heqiang.testsomething U=0 sz=1&#125;</div><div class="line">  Intent &#123; flg=0x10000000 cmp=com.example.heqiang.testsomething/.launchFlag.ActivityB &#125;</div><div class="line">    Hist #0: ActivityRecord&#123;9e32cdf u0 com.example.heqiang.testsomething/.launchFlag.ActivityB t361&#125;</div><div class="line">      Intent &#123; flg=0x10000000 cmp=com.example.heqiang.testsomething/.launchFlag.ActivityB &#125;</div><div class="line">      ProcessRecord&#123;f103a35 16820:com.example.heqiang.testsomething/u0a36&#125;</div><div class="line">Task id #360</div><div class="line">  TaskRecord&#123;99a446c #360 A=com.example.heqiang.testsomething U=0 sz=2&#125;</div><div class="line">  Intent &#123; act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10000000 cmp=com.example.heqiang.testsomething/.MainActivity &#125;</div><div class="line">    Hist #1: ActivityRecord&#123;c51aa5 u0 com.example.heqiang.testsomething/.launchFlag.ActivityA t360&#125;</div><div class="line">      Intent &#123; cmp=com.example.heqiang.testsomething/.launchFlag.ActivityA &#125;</div><div class="line">      ProcessRecord&#123;f103a35 16820:com.example.heqiang.testsomething/u0a36&#125;</div><div class="line">    Hist #0: ActivityRecord&#123;d2364a7 u0 com.example.heqiang.testsomething/.MainActivity t360&#125;</div><div class="line">      Intent &#123; act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10000000 cmp=com.example.heqiang.testsomething/.MainActivity &#125;</div><div class="line">      ProcessRecord&#123;f103a35 16820:com.example.heqiang.testsomething/u0a36&#125;</div></pre></td></tr></table></figure>
<p>可以看到，新建了一个 Task 用来管理 ActivityB。印证了上面的总结，Activity 不存在时总是新建一个 Task，并且创建一个 Activity。</p>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul>
<li>standard 和 singleTop：这两种模式下 Activity 在系统中可以有多个实例。如果栈顶已经存在待启动 Activity 的实例，singleTop 会利用已有的实例，而 standard 仍然会新建一个。 然而，singleTop 只对当前应用启动有效，对于跨应用启动的情况，singleTop 与 standard 模式没有区别。在跨应用启动这种情况下，Intent 并不会去寻找已有任务的 Activity，而是直接创建一个新的 Activity 实例：在 Android L 之前，将 Activity 实例置于发起者的任务顶，在 Android L 之后，将 Activity 实例置于新任务的根部。</li>
<li>singleTask 和 singleInstance 模式的 Activity 在系统中都只有一个实例（当然也就只有一个该 Activity 的Task），但是 singleTask 模式的 Task 中允许有别的 Activity 存在，而 singleInstance 模式的 Task 中只有该 Activity 一个实例，不允许有其他 Activity 存在。</li>
</ul>
<h2 id="LaunchMode-和-taskAffinity-的关系"><a href="#LaunchMode-和-taskAffinity-的关系" class="headerlink" title="LaunchMode 和 taskAffinity 的关系"></a>LaunchMode 和 taskAffinity 的关系</h2><h3 id="standard-模式下指定-taskAffinity"><a href="#standard-模式下指定-taskAffinity" class="headerlink" title="standard 模式下指定 taskAffinity"></a>standard 模式下指定 taskAffinity</h3><p>A (MainActivity) 以 standard 模式启动 B(OtherTestActivity)，为 B 指定一个不同于 A 的 taskAffinity。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Task id #21330</div><div class="line">mFullscreen=true</div><div class="line">mBounds=null</div><div class="line">mMinWidth=-1</div><div class="line">mMinHeight=-1</div><div class="line">mLastNonFullscreenBounds=null</div><div class="line">  TaskRecord&#123;ff958fa #21330 A=com.example.heqiang.testsomething U=0 StackId=1 sz=2&#125;</div><div class="line">  Intent &#123; act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10000000 cmp=com.example.heqiang.testsomething/.MainActivity &#125;</div><div class="line">    Hist #1: ActivityRecord&#123;967b73e u0 com.example.heqiang.testsomething/.commontest.OtherTestActivity t21330&#125;</div><div class="line">      Intent &#123; cmp=com.example.heqiang.testsomething/.commontest.OtherTestActivity &#125;</div><div class="line">      ProcessRecord&#123;1a33eab 14060:com.example.heqiang.testsomething/u0a172&#125;</div><div class="line">    Hist #0: ActivityRecord&#123;daf4dea u0 com.example.heqiang.testsomething/.MainActivity t21330&#125;</div><div class="line">      Intent &#123; act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10000000 cmp=com.example.heqiang.testsomething/.MainActivity &#125;</div><div class="line">      ProcessRecord&#123;1a33eab 14060:com.example.heqiang.testsomething/u0a172&#125;</div></pre></td></tr></table></figure>
<p>可以看到，他们仍然在同一个 Task 中，这个 Task 为 A Activity 所在的 Task。<br>因此在 standard 模式下设置 taskAffinity 好像没什么作用。</p>
<h3 id="singleTask-模式下指定-taskAffinity"><a href="#singleTask-模式下指定-taskAffinity" class="headerlink" title="singleTask 模式下指定 taskAffinity"></a>singleTask 模式下指定 taskAffinity</h3><p>这种模式下启动和 taskAffinity 的关系上面已经介绍了一些普通的情况，这里不再介绍。<br>下面来看一个不同的 Activity 指定同一个 taskAffinity 的情况。<br>我们先来看一下同一个应用中的情况。首先，这两个 Activity 没有指定特殊进程，他们运行在一个进程中。<br>在 A（MainActivity） 中以 singleTask 启动同一个 taskAffinity （但不同于A）的 B（OtherTestActivity） 和 C（EventActivity） 。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">Task id #21332</div><div class="line">mFullscreen=true</div><div class="line">mBounds=null</div><div class="line">mMinWidth=-1</div><div class="line">mMinHeight=-1</div><div class="line">mLastNonFullscreenBounds=null</div><div class="line">  TaskRecord&#123;a989fd7 #21332 A=com.hq.test U=0 StackId=1 sz=2&#125;</div><div class="line">  Intent &#123; flg=0x10000000 cmp=com.example.heqiang.testsomething/.commontest.OtherTestActivity &#125;</div><div class="line">    Hist #1: ActivityRecord&#123;6c49b46 u0 com.example.heqiang.testsomething/.event.EventActivity t21332&#125;</div><div class="line">      Intent &#123; flg=0x10400000 cmp=com.example.heqiang.testsomething/.event.EventActivity &#125;</div><div class="line">      ProcessRecord&#123;64a0ee2 22782:com.example.heqiang.testsomething/u0a172&#125;</div><div class="line">    Hist #0: ActivityRecord&#123;ce7925e u0 com.example.heqiang.testsomething/.commontest.OtherTestActivity t21332&#125;</div><div class="line">      Intent &#123; flg=0x10000000 cmp=com.example.heqiang.testsomething/.commontest.OtherTestActivity &#125;</div><div class="line">      ProcessRecord&#123;64a0ee2 22782:com.example.heqiang.testsomething/u0a172&#125;</div><div class="line">Task id #21331</div><div class="line">mFullscreen=true</div><div class="line">mBounds=null</div><div class="line">mMinWidth=-1</div><div class="line">mMinHeight=-1</div><div class="line">mLastNonFullscreenBounds=null</div><div class="line">  TaskRecord&#123;aafbad #21331 A=com.example.heqiang.testsomething U=0 StackId=1 sz=1&#125;</div><div class="line">  Intent &#123; act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10000000 cmp=com.example.heqiang.testsomething/.MainActivity &#125;</div><div class="line">    Hist #0: ActivityRecord&#123;f944c08 u0 com.example.heqiang.testsomething/.MainActivity t21331&#125;</div><div class="line">      Intent &#123; act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10000000 cmp=com.example.heqiang.testsomething/.MainActivity &#125;</div><div class="line">      ProcessRecord&#123;64a0ee2 22782:com.example.heqiang.testsomething/u0a172&#125;</div></pre></td></tr></table></figure>
<p>可以看到，这种情况下，B 和 C 在同一个 Task中，而且在同一个进程中。<br>不在同一个进程的情况这里就不再测试了， B 和 C 这时候仍在 在同一个 Task 中。也就是说 Task 和 进程没有联系。</p>
<p>下面来说明一种情况，就是 A 应用和 B 应用依赖了SDK包，他们以 singleTask 模式启动 SDK 中的同一个 Activity C，这又该什么情况呢？<br>其实这种情况只要你理解了下面的事实，那么 LaunchMode 、taskAffinity 以及 Task 的关系就很容易理解了。<br>也就是虽然 SDK 中的 C 从代码层面上讲是同一个，但是对于A 应用和 B 应用来说，调用的确实两个不同的 Activity ，因为它们的包名不同，比如：</p>
<ul>
<li><code>com.hq.test.sdkdemo/com.hq.sdk.TestActivity</code></li>
<li><code>com.example.heqiang.testsomething/com.hq.sdk.TestActivity</code></li>
</ul>
<p>可以下面的信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">Task id #21313</div><div class="line">mFullscreen=true</div><div class="line">mBounds=null</div><div class="line">mMinWidth=-1</div><div class="line">mMinHeight=-1</div><div class="line">mLastNonFullscreenBounds=null</div><div class="line">  TaskRecord&#123;6cf314a #21313 A=com.hq.test U=0 StackId=1 sz=2&#125;</div><div class="line">  Intent &#123; flg=0x10000000 cmp=com.example.heqiang.testsomething/com.hq.sdk.TestActivity &#125;</div><div class="line">    Hist #1: ActivityRecord&#123;88936eb u0 com.hq.test.sdkdemo/com.hq.sdk.TestActivity t21313&#125;</div><div class="line">      Intent &#123; flg=0x10400000 cmp=com.hq.test.sdkdemo/com.hq.sdk.TestActivity &#125;</div><div class="line">      ProcessRecord&#123;7571816 5028:com.hq.test.sdkdemo/u0a137&#125;</div><div class="line">    Hist #0: ActivityRecord&#123;dc4f387 u0 com.example.heqiang.testsomething/com.hq.sdk.TestActivity t21313&#125;</div><div class="line">      Intent &#123; flg=0x10000000 cmp=com.example.heqiang.testsomething/com.hq.sdk.TestActivity &#125;</div><div class="line">      ProcessRecord&#123;702597 3847:com.example.heqiang.testsomething/u0a172&#125;</div><div class="line">Task id #21315</div><div class="line">mFullscreen=true</div><div class="line">mBounds=null</div><div class="line">mMinWidth=-1</div><div class="line">mMinHeight=-1</div><div class="line">mLastNonFullscreenBounds=null</div><div class="line">  TaskRecord&#123;751d1d8 #21315 A=com.hq.test.sdkdemo U=0 StackId=1 sz=1&#125;</div><div class="line">  Intent &#123; act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10000000 cmp=com.hq.test.sdkdemo/.MainActivity &#125;</div><div class="line">    Hist #0: ActivityRecord&#123;7b3c6a6 u0 com.hq.test.sdkdemo/.MainActivity t21315&#125;</div><div class="line">      Intent &#123; act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10000000 cmp=com.hq.test.sdkdemo/.MainActivity &#125;</div><div class="line">      ProcessRecord&#123;7571816 5028:com.hq.test.sdkdemo/u0a137&#125;</div><div class="line">Task id #21312</div><div class="line">mFullscreen=true</div><div class="line">mBounds=null</div><div class="line">mMinWidth=-1</div><div class="line">mMinHeight=-1</div><div class="line">mLastNonFullscreenBounds=null</div><div class="line">  TaskRecord&#123;d65931 #21312 A=com.example.heqiang.testsomething U=0 StackId=1 sz=1&#125;</div><div class="line">  Intent &#123; act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10000000 cmp=com.example.heqiang.testsomething/.MainActivity &#125;</div><div class="line">    Hist #0: ActivityRecord&#123;85b37c0 u0 com.example.heqiang.testsomething/.MainActivity t21312&#125;</div><div class="line">      Intent &#123; act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10000000 cmp=com.example.heqiang.testsomething/.MainActivity &#125;</div><div class="line">      ProcessRecord&#123;702597 3847:com.example.heqiang.testsomething/u0a172&#125;</div></pre></td></tr></table></figure>
<p>在 com.hq.test Task中，有两个 <code>TestActivity</code>，他们属于不同进程。</p>
<h2 id="Intent-Flag"><a href="#Intent-Flag" class="headerlink" title="Intent Flag"></a>Intent Flag</h2><h3 id="FLAG-ACTIVITY-NEW-TASK"><a href="#FLAG-ACTIVITY-NEW-TASK" class="headerlink" title="FLAG_ACTIVITY_NEW_TASK"></a>FLAG_ACTIVITY_NEW_TASK</h3><p>当使用这个 Flag 时，<br>Task 中已经有A（standard）和B，现在B以 <code>FLAG_ACTIVITY_NEW_TASK</code> 的方式来启动A（standard），先来看一下 <code>android:taskAffinity</code> 相同的情况下：<br>启动前：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">Stack #2:</div><div class="line">  Task id #454</div><div class="line">    TaskRecord&#123;97815d0 #454 A=com.example.heqiang.testsomething U=0 sz=3&#125;</div><div class="line">    Intent &#123; act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10000000 cmp=com.example.heqiang.testsomething/.MainActivity &#125;</div><div class="line">      Hist #2: ActivityRecord&#123;196a583 u0 com.example.heqiang.testsomething/.launchFlag.ActivityB t454&#125;</div><div class="line">        Intent &#123; cmp=com.example.heqiang.testsomething/.launchFlag.ActivityB &#125;</div><div class="line">        ProcessRecord&#123;da6d9c9 6104:com.example.heqiang.testsomething/u0a123&#125;</div><div class="line">      Hist #1: ActivityRecord&#123;d3a4985 u0 com.example.heqiang.testsomething/.launchFlag.ActivityA t454&#125;</div><div class="line">        Intent &#123; cmp=com.example.heqiang.testsomething/.launchFlag.ActivityA &#125;</div><div class="line">        ProcessRecord&#123;da6d9c9 6104:com.example.heqiang.testsomething/u0a123&#125;</div><div class="line">      Hist #0: ActivityRecord&#123;4ce90ca u0 com.example.heqiang.testsomething/.MainActivity t454&#125;</div><div class="line">        Intent &#123; act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10000000 cmp=com.example.heqiang.testsomething/.MainActivity &#125;</div><div class="line">        ProcessRecord&#123;da6d9c9 6104:com.example.heqiang.testsomething/u0a123&#125;</div><div class="line"></div><div class="line">  Running activities (most recent first):</div><div class="line">    TaskRecord&#123;97815d0 #454 A=com.example.heqiang.testsomething U=0 sz=3&#125;</div><div class="line">      Run #2: ActivityRecord&#123;196a583 u0 com.example.heqiang.testsomething/.launchFlag.ActivityB t454&#125;</div><div class="line">      Run #1: ActivityRecord&#123;d3a4985 u0 com.example.heqiang.testsomething/.launchFlag.ActivityA t454&#125;</div><div class="line">      Run #0: ActivityRecord&#123;4ce90ca u0 com.example.heqiang.testsomething/.MainActivity t454&#125;</div><div class="line"></div><div class="line">  mResumedActivity: ActivityRecord&#123;196a583 u0 com.example.heqiang.testsomething/.launchFlag.ActivityB t454&#125;</div></pre></td></tr></table></figure></p>
<p>启动后：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">Stack #2:</div><div class="line">  Task id #454</div><div class="line">    TaskRecord&#123;97815d0 #454 A=com.example.heqiang.testsomething U=0 sz=4&#125;</div><div class="line">    Intent &#123; act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10000000 cmp=com.example.heqiang.testsomething/.MainActivity &#125;</div><div class="line">      Hist #3: ActivityRecord&#123;367178a u0 com.example.heqiang.testsomething/.launchFlag.ActivityA t454&#125;</div><div class="line">        Intent &#123; flg=0x10000000 cmp=com.example.heqiang.testsomething/.launchFlag.ActivityA &#125;</div><div class="line">        ProcessRecord&#123;da6d9c9 6104:com.example.heqiang.testsomething/u0a123&#125;</div><div class="line">      Hist #2: ActivityRecord&#123;196a583 u0 com.example.heqiang.testsomething/.launchFlag.ActivityB t454&#125;</div><div class="line">        Intent &#123; cmp=com.example.heqiang.testsomething/.launchFlag.ActivityB &#125;</div><div class="line">        ProcessRecord&#123;da6d9c9 6104:com.example.heqiang.testsomething/u0a123&#125;</div><div class="line">      Hist #1: ActivityRecord&#123;d3a4985 u0 com.example.heqiang.testsomething/.launchFlag.ActivityA t454&#125;</div><div class="line">        Intent &#123; cmp=com.example.heqiang.testsomething/.launchFlag.ActivityA &#125;</div><div class="line">        ProcessRecord&#123;da6d9c9 6104:com.example.heqiang.testsomething/u0a123&#125;</div><div class="line">      Hist #0: ActivityRecord&#123;4ce90ca u0 com.example.heqiang.testsomething/.MainActivity t454&#125;</div><div class="line">        Intent &#123; act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10000000 cmp=com.example.heqiang.testsomething/.MainActivity &#125;</div><div class="line">        ProcessRecord&#123;da6d9c9 6104:com.example.heqiang.testsomething/u0a123&#125;</div><div class="line"></div><div class="line">  Running activities (most recent first):</div><div class="line">    TaskRecord&#123;97815d0 #454 A=com.example.heqiang.testsomething U=0 sz=4&#125;</div><div class="line">      Run #3: ActivityRecord&#123;367178a u0 com.example.heqiang.testsomething/.launchFlag.ActivityA t454&#125;</div><div class="line">      Run #2: ActivityRecord&#123;196a583 u0 com.example.heqiang.testsomething/.launchFlag.ActivityB t454&#125;</div><div class="line">      Run #1: ActivityRecord&#123;d3a4985 u0 com.example.heqiang.testsomething/.launchFlag.ActivityA t454&#125;</div><div class="line">      Run #0: ActivityRecord&#123;4ce90ca u0 com.example.heqiang.testsomething/.MainActivity t454&#125;</div><div class="line"></div><div class="line">  mResumedActivity: ActivityRecord&#123;367178a u0 com.example.heqiang.testsomething/.launchFlag.ActivityA t454&#125;</div></pre></td></tr></table></figure></p>
<p>我们发现会在B上面直接创建A。<br>再来测试另外一种情况，Task中已经存在A（standard），在另外的一个Task中的B以 <code>FLAG_ACTIVITY_NEW_TASK</code> 启动A（standard）：<br>启动前：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Task id #458</div><div class="line">  TaskRecord&#123;5d0631a #458 A=com.example.heqiang.testsomething U=0 sz=2&#125;</div><div class="line">  Intent &#123; act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10000000 cmp=com.example.heqiang.testsomething/.MainActivity &#125;</div><div class="line">    Hist #1: ActivityRecord&#123;4112d5f u0 com.example.heqiang.testsomething/.launchFlag.ActivityA t458&#125;</div><div class="line">      Intent &#123; cmp=com.example.heqiang.testsomething/.launchFlag.ActivityA &#125;</div><div class="line">      ProcessRecord&#123;8084e4b 6497:com.example.heqiang.testsomething/u0a123&#125;</div><div class="line">    Hist #0: ActivityRecord&#123;3a7589b u0 com.example.heqiang.testsomething/.MainActivity t458&#125;</div><div class="line">      Intent &#123; act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10000000 cmp=com.example.heqiang.testsomething/.MainActivity &#125;</div><div class="line">      ProcessRecord&#123;8084e4b 6497:com.example.heqiang.testsomething/u0a123&#125;</div></pre></td></tr></table></figure>
<p>启动后：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Task id #458</div><div class="line">  TaskRecord&#123;5d0631a #458 A=com.example.heqiang.testsomething U=0 sz=3&#125;</div><div class="line">  Intent &#123; act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10000000 cmp=com.example.heqiang.testsomething/.MainActivity &#125;</div><div class="line">    Hist #2: ActivityRecord&#123;569c2ed u0 com.example.heqiang.testsomething/.launchFlag.ActivityA t458&#125;</div><div class="line">      Intent &#123; flg=0x10400000 cmp=com.example.heqiang.testsomething/.launchFlag.ActivityA &#125;</div><div class="line">      ProcessRecord&#123;8084e4b 6497:com.example.heqiang.testsomething/u0a123&#125;</div><div class="line">    Hist #1: ActivityRecord&#123;4112d5f u0 com.example.heqiang.testsomething/.launchFlag.ActivityA t458&#125;</div><div class="line">      Intent &#123; cmp=com.example.heqiang.testsomething/.launchFlag.ActivityA &#125;</div><div class="line">      ProcessRecord&#123;8084e4b 6497:com.example.heqiang.testsomething/u0a123&#125;</div><div class="line">    Hist #0: ActivityRecord&#123;3a7589b u0 com.example.heqiang.testsomething/.MainActivity t458&#125;</div><div class="line">      Intent &#123; act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10000000 cmp=com.example.heqiang.testsomething/.MainActivity &#125;</div><div class="line">      ProcessRecord&#123;8084e4b 6497:com.example.heqiang.testsomething/u0a123&#125;</div></pre></td></tr></table></figure>
<p>可以看到在A上面又新创建了个A。<br>当然这里只是以A是 standard 的启动模式来做介绍，具体其他的启动模式情况肯定是不一样的。<br>因此可以得到下面的结论：FLAG_ACTIVITY_NEW_TASK 只会去关心该 <code>Activity</code> 的 Task 的个数，如果不存在就新建，存在就直接推到前台。而不去关心 <code>Activity</code> 的个数（和启动模式有关），也就是说该 Task 中可以有多个 Activity 存在，这个要和 <code>singleTask</code> 做区别。</p>
<h3 id="FLAG-ACTIVITY-CLEAR-TOP"><a href="#FLAG-ACTIVITY-CLEAR-TOP" class="headerlink" title="FLAG_ACTIVITY_CLEAR_TOP"></a>FLAG_ACTIVITY_CLEAR_TOP</h3><p>启动模式不同，具体操作也不一样。但是都会清除该 Activity 上面的所有对象。<br>standard 模式：系统收到新的 Intent 时，如果 Task 中存在该 Activity 则弹出 Activity 和 Activity 上面的所有对象，并重新初始化一个新的 Activity 对象放入栈顶，以处理 Intent 请求。因为 standard 总是初始化新的 Activity 来处理 Intent请求。<br>其他模式：则会将 Activity 上面的对象弹出，使该 Activity 在栈顶部，以处理 Intent请求。</p>
<h3 id="FLAG-ACTIVITY-CLEAR-TASK"><a href="#FLAG-ACTIVITY-CLEAR-TASK" class="headerlink" title="FLAG_ACTIVITY_CLEAR_TASK"></a>FLAG_ACTIVITY_CLEAR_TASK</h3><p>启动 Activity 时如果加入了这个标志，那么如果存放该 Activity 的 Task 已经存在，会先把该 Task 里面所有的 Activity 清空，然后再启动该 Activity。那么该 Activity 就成了该 Task 里面唯一的一个 Activity。<br>应用场景：如果在同一 Task 里面 A 启动 B，B 启动 C，但是在 C 里面后退的话会默认返回 B，然后再返回 A，如果不想返回 B 和 A，那么就可以用该 Flag，启动 C 时把 A 和 B 清除掉，比如在登陆界面跳转到到主界面。从主界面后退肯定不想返回登陆界面的。</p>
<h3 id="FLAG-ACTIVITY-EXCLUDE-FROM-RECENTS"><a href="#FLAG-ACTIVITY-EXCLUDE-FROM-RECENTS" class="headerlink" title="FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS"></a>FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS</h3><p>通过这个 Flag 启动的 Activity 将不会添加到最近使用应用列表中，我们从任务管理器中无法找到这个 Activity。</p>
<h3 id="FLAG-ACTIVITY-NO-HISTORY"><a href="#FLAG-ACTIVITY-NO-HISTORY" class="headerlink" title="FLAG_ACTIVITY_NO_HISTORY"></a>FLAG_ACTIVITY_NO_HISTORY</h3><p>通过这个 Flag 启动的 Activity 一旦退出后，就不会存在栈中。比如 A 添加这个 Flag 启动 B，B启动 C，这是栈中就只有 A、C。</p>
<h2 id="LaunchMode-与-StartActivityForResult-的关系"><a href="#LaunchMode-与-StartActivityForResult-的关系" class="headerlink" title="LaunchMode 与 StartActivityForResult 的关系"></a>LaunchMode 与 StartActivityForResult 的关系</h2><!--   

-->
]]></content>
    
    <summary type="html">
    
      介绍 Android LaunchMode 与 Intent Flag
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="LaunchMode" scheme="http://yoursite.com/tags/LaunchMode/"/>
    
      <category term="Intent Flag" scheme="http://yoursite.com/tags/Intent-Flag/"/>
    
  </entry>
  
  <entry>
    <title>Android View 事件处理流程源码解析</title>
    <link href="http://yoursite.com/2015/11/06/android-knowledge-event-transfer-process-source-code/"/>
    <id>http://yoursite.com/2015/11/06/android-knowledge-event-transfer-process-source-code/</id>
    <published>2015-11-06T02:00:00.000Z</published>
    <updated>2018-06-28T11:44:25.410Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇博客介绍了事件传递的基本流程，为了做到知其然并知其所以然，本文从源码的角度来分析一下Android事件传的流程。<br>再分析代码之前，我们先用 Android Studio 来看一下事件传过程中的调用栈。<br>我们在前文中的默认情况下（不拦截和处理事件）在 ViewC 的 <code>onTouchEvent</code> 中添加断点。<br>调用栈如图所示：</p>
<p><img src="/images/android-knowledge-event-transfer-process-source-code/android-event-process.png" alt="效果图"></p>
<p>看了上篇博客我们也许会有疑问，事件的传递流程源头是不是从 <code>Activity</code> 开的，看了上图就有答案了，源头是从系统的事件分发系统开始，首先传递给 <code>DecorView</code> 开始的。<br>下面我们源码的分析的思路就按照上面的事件传递的流程顺序来进行。<br>调用流程先用下面的流程来表示一下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h2 id="事件起源"><a href="#事件起源" class="headerlink" title="事件起源"></a>事件起源</h2><p><code>DecorView</code> 接收事件之前的流程我们这不做详细介绍，只介绍 <code>View</code> 部分的事件传递。在 <code>Activit</code> 接收到事件之前的传递流程是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">├── View.dispatchPointerEvent</div><div class="line">    ├── DecorView.dispatchTouchEvent</div><div class="line">        ├── Activity.dispatchTouchEvent</div></pre></td></tr></table></figure>
<p>先来看一下 <code>View.dispatchPointerEvent</code> ，这里其实执行的是 <code>DecorView</code> 对象的 <code>dispatchPointerEvent</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public final boolean dispatchPointerEvent(MotionEvent event) &#123;</div><div class="line">    if (event.isTouchEvent()) &#123;</div><div class="line">        return dispatchTouchEvent(event);</div><div class="line">    &#125; else &#123;</div><div class="line">        return dispatchGenericMotionEvent(event);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>View.dispatchPointerEvent</code> 方法是final类型的，是不可以被 <code>Override</code> 的。<br>如果是触摸事件，则调用 <code>DecorView</code> 的 <code>dispatchTouchEvent</code> 方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public boolean dispatchTouchEvent(MotionEvent ev) &#123;</div><div class="line">    final Callback cb = getCallback();</div><div class="line">    ......</div><div class="line">    // 这调用 Callback 的 dispatchTouchEvent 方法。这个 cb 其实就是 Activity</div><div class="line">    return cb != null &amp;&amp; !isDestroyed() &amp;&amp; mFeatureId &lt; 0 ? cb.dispatchTouchEvent(ev)</div><div class="line">            : super.dispatchTouchEvent(ev);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Activity-的事件分发"><a href="#Activity-的事件分发" class="headerlink" title="Activity 的事件分发"></a>Activity 的事件分发</h2><p>上一篇博客中介绍事件传递的开是 Activit，Activity 首先进行事的分发，那么下面先来看一下 <code>Activity.dispatchTouchEvent(MotionEvent ev)</code> 方法。在此之的流程这里先不涉及介绍。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public boolean dispatchTouchEvent(MotionEvent ev) &#123;</div><div class="line">    if (ev.getAction() == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">        onUserInteraction();</div><div class="line">    &#125;</div><div class="line">    if (getWindow().superDispatchTouchEvent(ev)) &#123;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line">    return onTouchEvent(ev);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个方法主是调用了 <code>getWindow().superDispatchTouchEvent(ev)</code> 方法，如果该方法返回false，那么再调用 <code>Activity.onTouchEvent(ev)</code> 来处理事件。<br>Activity 中的 <code>mWindow</code> 在 <code>Activity.attach()</code> 中被实例化，是一个 <code>PhoneWindow</code> 对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mWindow = new PhoneWindow(this);</div><div class="line">// 设置callback，上面一章的流程中涉及</div><div class="line">mWindow.setCallback(this);</div><div class="line">mWindow.setOnWindowDismissedCallback(this);</div><div class="line">mWindow.getLayoutInflater().setPrivateFactory(this);</div></pre></td></tr></table></figure>
<p>那么我们就再来看一下 <code>PhoneWindow.superDispatchTouchEvent</code> 方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public boolean superDispatchTouchEvent(MotionEvent event) &#123;</div><div class="line">    boolean handled = mDecor.superDispatchTouchEvent(event);</div><div class="line">    ...</div><div class="line">    return handled;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里调用了 <code>DecorView</code> 的 <code>superDispatchTouchEvent</code> 方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public boolean superDispatchTouchEvent(MotionEvent event) &#123;</div><div class="line">    return super.dispatchTouchEvent(event);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>DecorView.superDispatchTouchEvent</code> 直接调了它的 <code>dispatchTouchEvent</code> 方法，我们知，<code>DecorView</code> 是继承了 <code>FrameLayout</code> 的，那么其实就是调了 <code>ViewGroup</code> 的 <code>dispatchTouchEvent</code> 方法。</p>
<h2 id="ViewGroup-的事件分发"><a href="#ViewGroup-的事件分发" class="headerlink" title="ViewGroup 的事件分发"></a>ViewGroup 的事件分发</h2><p>来看一下 <code>ViewGroup.dispatchTouchEvent</code> 方法，这个方法比较长，我们只选择事件传递的关键代码进行分析。<br>先来看下面一段代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public boolean dispatchTouchEvent(MotionEvent ev) &#123;</div><div class="line">        ....</div><div class="line">        // Handle an initial down.</div><div class="line">        if (actionMasked == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">            // Throw away all previous state when starting a new touch gesture.</div><div class="line">            // The framework may have dropped the up or cancel event for the previous gesture</div><div class="line">            // due to an app switch, ANR, or some other state change.</div><div class="line">            // 清除 mFirstTouchTarget</div><div class="line">            cancelAndClearTouchTargets(ev);</div><div class="line">            // 这个方法将会对 FLAG_DISALLOW_INTERCEPT 标志进行重置</div><div class="line">            resetTouchState();</div><div class="line">        &#125;</div><div class="line">        // Check for interception.</div><div class="line">        final boolean intercepted;</div><div class="line">        // mFirstTouchTarget != null 表示有子View消费事件或者事件没有被拦截</div><div class="line">        if (actionMasked == MotionEvent.ACTION_DOWN</div><div class="line">                || mFirstTouchTarget != null) &#123;</div><div class="line">            // 看当前是否设置了FLAG_DISALLOW_INTERCEPT标志</div><div class="line">            // 通过requestDisallowInterceptTouchEvent设置</div><div class="line">            final boolean disallowIntercept = (mGroupFlags &amp; FLAG_DISALLOW_INTERCEPT) != 0;</div><div class="line">            if (!disallowIntercept) &#123;</div><div class="line">                // 如果允许被拦，则调用 onInterceptTouchEvent 方法，再次判断是否拦截</div><div class="line">                intercepted = onInterceptTouchEvent(ev);</div><div class="line">                ev.setAction(action); // restore action in case it was changed</div><div class="line">            &#125; else &#123;</div><div class="line">                intercepted = false;</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">            // There are no touch targets and this action is not an initial down</div><div class="line">            // so this view group continues to intercept touches.</div><div class="line">            intercepted = true;</div><div class="line">        &#125;</div><div class="line">        ....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的一段代码主要判断是否对当前事件进行拦截。<br>首先第一个条件是当前事件是否是 <code>ACTION_DOWN</code> 或者 <code>mFirstTouchTarget != null</code>，判断当前是否是 <code>ACTION_DOWN</code> 事件我们容易理解，上一篇博客的例子我们也知道，<code>ACTION_DOWN</code> 事件是一个手势事件系列的开始，是会调用 <code>onInterceptTouchEvent</code> 的。那么 <code>mFirstTouchTarget != null</code> 是什么呢？从 <code>dispatchTouchEvent</code> 后面的代码我们就可以看出来，当事件被 <code>ViewGroup</code> 的子元素处理时，<code>mFirstTouchTarget</code> 就会指向这个子元素。也就是说，如果当前 <code>ViewGroup</code> 拦截该事件时，<code>mFirstTouchTarget != null</code>这个条件是不成立的，那么当后面的 <code>ACTION_MOVE</code> 和 <code>ACTION_UP</code> 事件到来时，将不会执行这段代码，那么 <code>onInterceptTouchEvent</code> 方法就不会被调用。如果有子元素处理事件，那么后面的 <code>ACTION_MOVE</code> 和 <code>ACTION_UP</code> 事件到来时，将会执行这段代码，那么 <code>ViewGroup</code> 就会有机会拦截事件的传递。<br>这里还有另外一个判断条件，就是是否设置了 <code>FLAG_DISALLOW_INTERCEPT</code> 这个标志位，这个标志位一般是子 <code>View</code> 通过 <code>ViewGroup.requestDisallowInterceptTouchEvent</code> 方法来设置的，一旦设置，<code>ViewGroup</code> 将无法拦截除了 DOWN 事件的其他一切事件。<br>为什么说可以拦截 DOWN 事件呢？因为 <code>ViewGroup</code> 在事件分发时，如果是 DOWN 事件就重置 <code>FLAG_DISALLOW_INTERCEPT</code> 标志位，这一点从上面的源码中也可以看到，这个操作将会导致子 View 设置的该标志位无效，因此当分发 DOWN 事件时，总是会调用 <code>onInterceptTouchEvent</code> 来询问是否要拦截该事件。<br>从上面的代码可以得到下面几点结论：</p>
<ul>
<li>当 ViewGroup 决定拦截事件后，那么后续的事件将会默认交给它来处理而不再调用 <code>onInterceptTouchEvent</code> 方法。</li>
<li><code>FLAG_DISALLOW_INTERCEPT</code> 这个标志位的作用是不让它的父View们中途来拦截事件，当然父View没有拦截DOWN事件，这个标志位无法操控父View对DOWN事件的拦截。</li>
<li><code>onInterceptTouchEvent</code> 不是每次都调用，如果我们想操控所有的点击事件，只能在 <code>dispatchTouchEvent</code> 方法中处理。只有这个方法保证每次都会被调用（前提是事件能传递到当前的 <code>ViewGroup</code>）。</li>
<li>子 View 调用父 View 的 <code>requestDisallowInterceptTouchEvent</code> 一定要注意调用时机，否则是不会生效的。</li>
</ul>
<p>下面我们接着看当 <code>ViewGrou</code> 不拦截事件时的处理。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public boolean dispatchTouchEvent(MotionEvent ev) &#123;</div><div class="line">                    ...</div><div class="line">                    final View[] children = mChildren;</div><div class="line">                    for (int i = childrenCount - 1; i &gt;= 0; i--) &#123;</div><div class="line">                        final int childIndex = customOrder</div><div class="line">                                ? getChildDrawingOrder(childrenCount, i) : i;</div><div class="line">                        final View child = (preorderedList == null)</div><div class="line">                                ? children[childIndex] : preorderedList.get(childIndex);</div><div class="line"></div><div class="line">                        // If there is a view that has accessibility focus we want it</div><div class="line">                        // to get the event first and if not handled we will perform a</div><div class="line">                        // normal dispatch. We may do a double iteration but this is</div><div class="line">                        // safer given the timeframe.</div><div class="line">                        if (childWithAccessibilityFocus != null) &#123;</div><div class="line">                            if (childWithAccessibilityFocus != child) &#123;</div><div class="line">                                continue;</div><div class="line">                            &#125;</div><div class="line">                            childWithAccessibilityFocus = null;</div><div class="line">                            i = childrenCount - 1;</div><div class="line">                        &#125;</div><div class="line">                        // 判断子View是否可、是否在做动画或者点击事件的坐标是否在子View范围之内</div><div class="line">                        // 以此来作为是否可以接收点击事件的先决条件</div><div class="line">                        if (!canViewReceivePointerEvents(child)</div><div class="line">                                || !isTransformedTouchPointInView(x, y, child, null)) &#123;</div><div class="line">                            ev.setTargetAccessibilityFocus(false);</div><div class="line">                            ...</div><div class="line">                            continue;</div><div class="line">                        &#125;</div><div class="line">                        // 满足接收条件，看当前子View是否正在处理事件</div><div class="line">                        newTouchTarget = getTouchTarget(child);</div><div class="line">                        ...</div><div class="line">                        if (newTouchTarget != null) &#123;</div><div class="line">                            // Child is already receiving touch within its bounds.</div><div class="line">                            // Give it the new pointer in addition to the ones it is handling.</div><div class="line">                            newTouchTarget.pointerIdBits |= idBitsToAssign;</div><div class="line">                            break;</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        resetCancelNextUpFlag(child);</div><div class="line">                        // 在dispatchTransformedTouchEvent中调用子 View的dispatchTouchEvent</div><div class="line">                        if (dispatchTransformedTouchEvent(ev, false, child, idBitsToAssign)) &#123;</div><div class="line">                            // Child wants to receive touch within its bounds.</div><div class="line">                            mLastTouchDownTime = ev.getDownTime();</div><div class="line">                            if (preorderedList != null) &#123;</div><div class="line">                                // childIndex points into presorted list, find original index</div><div class="line">                                for (int j = 0; j &lt; childrenCount; j++) &#123;</div><div class="line">                                    if (children[childIndex] == mChildren[j]) &#123;</div><div class="line">                                        mLastTouchDownIndex = j;</div><div class="line">                                        break;</div><div class="line">                                    &#125;</div><div class="line">                                &#125;</div><div class="line">                            &#125; else &#123;</div><div class="line">                                mLastTouchDownIndex = childIndex;</div><div class="line">                            &#125;</div><div class="line">                            mLastTouchDownX = ev.getX();</div><div class="line">                            mLastTouchDownY = ev.getY();</div><div class="line">                            newTouchTarget = addTouchTarget(child, idBitsToAssign);</div><div class="line">                            alreadyDispatchedToNewTouchTarget = true;</div><div class="line">                            break;</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        // The accessibility focus didn&apos;t handle the event, so clear</div><div class="line">                        // the flag and do a normal dispatch to all children.</div><div class="line">                        ev.setTargetAccessibilityFocus(false);</div><div class="line">                    &#125;</div><div class="line">                    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从上面源码可以看到，当 <code>ViewGroup</code> 不拦截事件时，事件会向下分发交由它的子 View 处理。<br>首先会遍历一遍所有的子元素，判断元素是否能接收点击事件，条件是判断子View是否可、是否在做动画或者点击事件的坐标是否在子View范围之内来作为依据，如果可以接收事件，则调用 <code>dispatchTransformedTouchEvent</code> 方法。</p>
<p>那么再来看一下这个方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">private boolean dispatchTransformedTouchEvent(MotionEvent event, boolean cancel,</div><div class="line">        View child, int desiredPointerIdBits) &#123;</div><div class="line">    ...</div><div class="line">    if (newPointerIdBits == oldPointerIdBits) &#123;</div><div class="line">        if (child == null || child.hasIdentityMatrix()) &#123;</div><div class="line">            if (child == null) &#123;</div><div class="line">                handled = super.dispatchTouchEvent(event);</div><div class="line">            &#125; else &#123;</div><div class="line">                final float offsetX = mScrollX - child.mLeft;</div><div class="line">                final float offsetY = mScrollY - child.mTop;</div><div class="line">                event.offsetLocation(offsetX, offsetY);</div><div class="line"></div><div class="line">                handled = child.dispatchTouchEvent(event);</div><div class="line"></div><div class="line">                event.offsetLocation(-offsetX, -offsetY);</div><div class="line">            &#125;</div><div class="line">            return handled;</div><div class="line">        &#125;</div><div class="line">        transformedEvent = MotionEvent.obtain(event);</div><div class="line">    &#125; else &#123;</div><div class="line">        transformedEvent = event.split(newPointerIdBits);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果子元素为null则调用父类的 <code>dispatchTouchEvent</code>，如果子元素不为null，则调用子元素的 <code>dispatchTouchEvent</code>。</p>
<p>再来回到 <code>dispatchTouchEvent</code> 方法，如果遍历子元素后事件都没有被处理，这包含两种情况：一是 <code>ViewGroup</code> 没有子元素，二是子元素处理了点击事件，但是子元素 <code>dispatchTouchEvent</code> 返回了 false，这时  <code>ViewGroup</code>会自己处理事件。这时还是会调用 <code>dispatchTransformedTouchEvent</code>，只是 child 参数为  null，这是根据上面的的代码，会调用 <code>super.dispatchTouchEvent</code>，即 <code>View.dispatchTouchEvent</code> 来处理。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public boolean dispatchTouchEvent(MotionEvent ev) &#123;</div><div class="line">        ...</div><div class="line">        // Dispatch to touch targets.</div><div class="line">        if (mFirstTouchTarget == null) &#123;</div><div class="line">            // No touch targets so treat this as an ordinary view.</div><div class="line">            handled = dispatchTransformedTouchEvent(ev, canceled, null,</div><div class="line">                    TouchTarget.ALL_POINTER_IDS);</div><div class="line">        &#125; </div><div class="line">        ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以看到 <code>ViewGroup</code> 是没有覆盖父类的 <code>onTouchEvent</code> 方法的。也没有发现调用 <code>onTouchEvent</code>。<br>对 <code>ViewGroup</code> 的 <code>onTouchEvent</code> 调用，都是通过其父类 <code>View</code> 的 <code>dispatchTouchEvent</code> 来调用的。</p>
<h2 id="View-的事件分发"><a href="#View-的事件分发" class="headerlink" title="View 的事件分发"></a>View 的事件分发</h2><p>先来看一下 <code>View</code> 的 <code>dispatchTouchEvent</code> 方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public boolean dispatchTouchEvent(MotionEvent event) &#123;</div><div class="line">    ...</div><div class="line">    if (onFilterTouchEventForSecurity(event)) &#123;</div><div class="line">        if ((mViewFlags &amp; ENABLED_MASK) == ENABLED &amp;&amp; handleScrollBarDragging(event)) &#123;</div><div class="line">            result = true;</div><div class="line">        &#125;</div><div class="line">        //noinspection SimplifiableIfStatement</div><div class="line">        ListenerInfo li = mListenerInfo;</div><div class="line">        if (li != null &amp;&amp; li.mOnTouchListener != null</div><div class="line">                &amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED</div><div class="line">                &amp;&amp; li.mOnTouchListener.onTouch(this, event)) &#123;</div><div class="line">            result = true;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (!result &amp;&amp; onTouchEvent(event)) &#123;</div><div class="line">            result = true;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>View</code> 这里对事件的处理比较简单，这里的处理包含两种类型：一类是由父元素调用子元素的 <code>dispatchTouchEvent</code> 分发而来，第二类是 <code>ViewGroup</code> 没有子元素，调用 <code>super.dispatchTouchEvent</code> 而来。<br>这里对事件的处理也比较简单，如果没有满足下面的两个条件就会调用 <code>onTouchEvent</code> 来处理事件，即：该 <code>View</code> 是使能状态；设置了 <code>OnTouchListener</code> 且 <code>onTouch</code> 方法返回 true。否则就会调用 <code>onTouchEvent</code>。<br>从这里可以看到 <code>OnTouchListener</code> 的优先级是高于 <code>onTouchEvent</code> 的，这样做的好处是方便在外界处理事件。</p>
<p>接下来再看一下 <code>View</code> 的 <code>onTouchEvent</code> 方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public boolean onTouchEvent(MotionEvent event) &#123;</div><div class="line">    ...</div><div class="line">    if ((viewFlags &amp; ENABLED_MASK) == DISABLED) &#123;</div><div class="line">        if (action == MotionEvent.ACTION_UP &amp;&amp; (mPrivateFlags &amp; PFLAG_PRESSED) != 0) &#123;</div><div class="line">            setPressed(false);</div><div class="line">        &#125;</div><div class="line">        // A disabled view that is clickable still consumes the touch</div><div class="line">        // events, it just doesn&apos;t respond to them.</div><div class="line">        return (((viewFlags &amp; CLICKABLE) == CLICKABLE</div><div class="line">                || (viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE)</div><div class="line">                || (viewFlags &amp; CONTEXT_CLICKABLE) == CONTEXT_CLICKABLE);</div><div class="line">    &#125;</div><div class="line">    if (mTouchDelegate != null) &#123;</div><div class="line">        if (mTouchDelegate.onTouchEvent(event)) &#123;</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面一段代码是处理 <code>View</code> 在不可用的情况下对事件的处理。通过阅读代码我们可以得到下面的结论：</p>
<ul>
<li>不可用状态下的 <code>View</code> 在设置可点击（<code>CLICKABLE</code>、<code>LONG_CLICKABLE</code>或<code>CONTEXT_CLICKABLE</code>）的情况下仍然会消费事件。</li>
</ul>
<p>下面再来看一下 <code>onTouchEvent</code> 对具体事件的处理：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line">public boolean onTouchEvent(MotionEvent event) &#123;</div><div class="line">    ...</div><div class="line">        if (((viewFlags &amp; CLICKABLE) == CLICKABLE ||</div><div class="line">            (viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE) ||</div><div class="line">            (viewFlags &amp; CONTEXT_CLICKABLE) == CONTEXT_CLICKABLE) &#123;</div><div class="line">        switch (action) &#123;</div><div class="line">            case MotionEvent.ACTION_UP:</div><div class="line">                boolean prepressed = (mPrivateFlags &amp; PFLAG_PREPRESSED) != 0;</div><div class="line">                if ((mPrivateFlags &amp; PFLAG_PRESSED) != 0 || prepressed) &#123;</div><div class="line">                    boolean focusTaken = false;</div><div class="line">                    if (isFocusable() &amp;&amp; isFocusableInTouchMode() &amp;&amp; !isFocused()) &#123;</div><div class="line">                        focusTaken = requestFocus();</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    if (prepressed) &#123;</div><div class="line">                        setPressed(true, x, y);</div><div class="line">                   &#125;</div><div class="line"></div><div class="line">                    if (!mHasPerformedLongPress &amp;&amp; !mIgnoreNextUpEvent) &#123;</div><div class="line">                        // This is a tap, so remove the longpress check</div><div class="line">                        removeLongPressCallback();</div><div class="line"></div><div class="line">                        if (!focusTaken) &#123;</div><div class="line">                            if (mPerformClick == null) &#123;</div><div class="line">                                mPerformClick = new PerformClick();</div><div class="line">                            &#125;</div><div class="line">                            if (!post(mPerformClick)) &#123;</div><div class="line">                                performClick();</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    if (mUnsetPressedState == null) &#123;</div><div class="line">                        mUnsetPressedState = new UnsetPressedState();</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    if (prepressed) &#123;</div><div class="line">                        postDelayed(mUnsetPressedState,</div><div class="line">                                ViewConfiguration.getPressedStateDuration());</div><div class="line">                    &#125; else if (!post(mUnsetPressedState)) &#123;</div><div class="line">                        // If the post failed, unpress right now</div><div class="line">                        mUnsetPressedState.run();</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    removeTapCallback();</div><div class="line">                &#125;</div><div class="line">                mIgnoreNextUpEvent = false;</div><div class="line">                break;</div><div class="line"></div><div class="line">            case MotionEvent.ACTION_DOWN:</div><div class="line">                mHasPerformedLongPress = false;</div><div class="line"></div><div class="line">                if (performButtonActionOnTouchDown(event)) &#123;</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                // Walk up the hierarchy to determine if we&apos;re inside a scrolling container.</div><div class="line">                boolean isInScrollingContainer = isInScrollingContainer();</div><div class="line"></div><div class="line">                // For views inside a scrolling container, delay the pressed feedback for</div><div class="line">                // a short period in case this is a scroll.</div><div class="line">                if (isInScrollingContainer) &#123;</div><div class="line">                    mPrivateFlags |= PFLAG_PREPRESSED;</div><div class="line">                    if (mPendingCheckForTap == null) &#123;</div><div class="line">                        mPendingCheckForTap = new CheckForTap();</div><div class="line">                    &#125;</div><div class="line">                    mPendingCheckForTap.x = event.getX();</div><div class="line">                    mPendingCheckForTap.y = event.getY();</div><div class="line">                    postDelayed(mPendingCheckForTap, ViewConfiguration.getTapTimeout());</div><div class="line">                &#125; else &#123;</div><div class="line">                    // Not inside a scrolling container, so show the feedback right away</div><div class="line">                    setPressed(true, x, y);</div><div class="line"></div><div class="line">                    checkForLongClick(0, x, y);</div><div class="line">                &#125;</div><div class="line">                break;</div><div class="line"></div><div class="line">            case MotionEvent.ACTION_CANCEL:</div><div class="line">                setPressed(false);</div><div class="line">                removeTapCallback();</div><div class="line">                removeLongPressCallback();</div><div class="line">                mInContextButtonPress = false;</div><div class="line">                mHasPerformedLongPress = false;</div><div class="line">                mIgnoreNextUpEvent = false;</div><div class="line">                break;</div><div class="line"></div><div class="line">            case MotionEvent.ACTION_MOVE:</div><div class="line">                drawableHotspotChanged(x, y);</div><div class="line"></div><div class="line">                // Be lenient about moving outside of buttons</div><div class="line">                if (!pointInView(x, y, mTouchSlop)) &#123;</div><div class="line">                    // Outside button</div><div class="line">                    removeTapCallback();</div><div class="line">                    if ((mPrivateFlags &amp; PFLAG_PRESSED) != 0) &#123;</div><div class="line">                        // Remove any future long press/tap checks</div><div class="line">                        removeLongPressCallback();</div><div class="line"></div><div class="line">                        setPressed(false);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public boolean performClick() &#123;</div><div class="line">    final boolean result;</div><div class="line">    final ListenerInfo li = mListenerInfo;</div><div class="line">    if (li != null &amp;&amp; li.mOnClickListener != null) &#123;</div><div class="line">        playSoundEffect(SoundEffectConstants.CLICK);</div><div class="line">        li.mOnClickListener.onClick(this);</div><div class="line">        result = true;</div><div class="line">    &#125; else &#123;</div><div class="line">        result = false;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);</div><div class="line">    return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从上面的代码可以得到如下结论：</p>
<ul>
<li>设置可点击（<code>CLICKABLE</code>、<code>LONG_CLICKABLE</code>或<code>CONTEXT_CLICKABLE</code>）满足任意一个条件，<code>View</code>就会消费这个事件，<code>onTouchEvent</code> 就会返回 true，不管是否是 DISABLE 状态。</li>
<li>当 <code>ACTION_UP</code> 事件触发时，会调用 <code>performClick()</code> 方法。<code>performClick()</code> 会调用 <code>OnClickListener</code> 的  <code>onClick</code> 方法。</li>
</ul>
<h2 id="事件处理流程图"><a href="#事件处理流程图" class="headerlink" title="事件处理流程图"></a>事件处理流程图</h2><p>下图表示了在事件不被消费的情况下 <code>DOWN</code> 事件的处理流程：</p>
<p><img src="http://www.plantuml.com/plantuml/svg/dP912i8m44NtSufUm0kuaBeGSI_kOpAIW6P2-bFrzbR1WIffnTsGl3VyyDDsC1dbSYOV73Sd4HpbHhHODMkBq0VSbovqoS3wlHJhDpr7a7dU6R12z1wQmJm4lcwpb3IfAaKwZMM9kmZEbXEcVSU_B9qDyrAKbbZb75SyZJwIF_6_Ng1jr5Oh_LsEOdDdBKSt_8K7" alt="效果图"></p>
<!--  
@startuml
hide footbox

-> Activity:dispatchTouchEvent
activate Activity
Activity -> ViewGroup:dispatchTouchEvent
activate ViewGroup
ViewGroup -> ViewGroup:onInterceptTouchEvent
activate ViewGroup
deactivate ViewGroup
ViewGroup -> View:dispatchTouchEvent
activate View
View -> View:onTouchEvent
activate View
deactivate View
View -> ViewGroup:onTouchEvent
deactivate View
activate ViewGroup
deactivate ViewGroup
ViewGroup -> Activity:onTouchEvent
deactivate ViewGroup
activate Activity
deactivate Activity
deactivate Activity
@enduml
-->
]]></content>
    
    <summary type="html">
    
      介绍 Android 事件处理流程
    
    </summary>
    
      <category term="Android 事件分发体系" scheme="http://yoursite.com/categories/Android-%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E4%BD%93%E7%B3%BB/"/>
    
    
      <category term="Android 事件分发体系" scheme="http://yoursite.com/tags/Android-%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E4%BD%93%E7%B3%BB/"/>
    
  </entry>
  
  <entry>
    <title>Android View 事件处理流程</title>
    <link href="http://yoursite.com/2015/11/02/android-knowledge-event-transfer-process/"/>
    <id>http://yoursite.com/2015/11/02/android-knowledge-event-transfer-process/</id>
    <published>2015-11-02T02:00:00.000Z</published>
    <updated>2018-06-28T11:44:25.411Z</updated>
    
    <content type="html"><![CDATA[<p>网上流传着一篇被誉为<a href="http://balpha.de/2013/07/android-development-what-i-wish-i-had-known-earlier/" target="_blank" rel="external">可能是讲解Android事件分发最好的文章</a>，我看了之后也觉得受益匪浅，文章虽然很短，但是却明了的阐述了Android事件分发机制。本文是在研读这篇文章的基础上做了一些自己理解，在此记录下来，以备后面查阅。<br>首先我们先来熟悉一下几个在处理Android事件分发过程中可能用到的几个方法：<br><code>View</code> 中的方法：</p>
<ul>
<li>boolean dispatchTouchEvent(MotionEvent event)：事件分发。返回true表示处理该事件，中断分发，false表示会继续分发。</li>
<li>boolean onTouchEvent(MotionEvent event)：事件处理。返回true表示处理该事件，false表示不处理事件。该方法在 dispatchTouchEvent 中调用。</li>
<li>void setOnTouchListener(OnTouchListener l)</li>
<li>void setTouchDelegate(TouchDelegate delegate)</li>
</ul>
<p><code>ViewGroup</code> 中的方法：我们知道 <code>ViewGroup</code> 是继承了 <code>View</code> 类的，因此也继承了上面的几个方法，另外还有：</p>
<ul>
<li>boolean onInterceptTouchEvent(MotionEvent ev)：事件拦截。它只存在于 <code>ViewGroup</code> 中，普通的 <code>View</code> 中没有这个方法。在任何一个 <code>View</code> 的 <code>onTouchEvent</code> 被调用之前，它的父辈们将先获得拦截这个事件的一次机会。换句话说，它们可以窃取该事件。返回 true 表示拦截，false 表示不拦截。该方法在 dispatchTouchEvent 中调用。</li>
<li>requestDisallowInterceptTouchEvent(boolean disallowIntercept)：阻止事件传递：当前 View 可以调用父View的 <code>requestDisallowInterceptTouchEvent</code> 方法来阻止父View对事件的拦截，<code>getParent().requestDisallowInterceptTouchEvent(true)</code>。那么父 View 将无法通过 <code>onInterceptTouchEvent</code> 来拦截事件。</li>
</ul>
<h2 id="一些假设"><a href="#一些假设" class="headerlink" title="一些假设"></a>一些假设</h2><p>我们只考虑最重要的四个触摸事件，即：DOWN,MOVE,UP和CANCEL。一个手势（gesture）是一个事件列，以一个DOWN事件开始（当用户触摸屏幕时产生），后跟0个或多个MOVE事件（当用户四处移动手指时产生），最后跟一个单独的UP或CANCEL事件（当用户手指离开屏幕或者系统告诉你手势（gesture）由于其他原因结束时产生）。当我们说到“手势剩余部分”时指的是手势后续的MOVE事件和最后的UP或CANCEL事件。<br>在这里我也不考虑多点触摸手势（我们只假设用一个手指）并且忽略多个MOVE事件可以被归为一组这一实际情况。最后，我们假设文中的view都没有注册onTouchListener。<br>我们将要讨论的视图层次是这样的：最外层是一个ViewGroup A，包含一个或多个子view（children），其中一个子view是ViewGroup B，ViewGroupB中又包含一个或多个子view，其中一个子view是 View C,C不是一个ViewGroup。这里我们忽略同层级view之间可能的交叉叠加。</p>
<p><img src="/images/android-knowledge-event-transfer-process/android-touch.png" alt="效果图"></p>
<p>假设用户首先触摸到的屏幕上的点是C上的某个点，该点被标记为触摸点（touch point），DOWN事件就在该点产生。然后用户移动手指并最后离开屏幕，此过程中手指是否离开C的区域无关紧要，关键是手势（gesture）是从哪里开始的。</p>
<h2 id="默认情况"><a href="#默认情况" class="headerlink" title="默认情况"></a>默认情况</h2><p>假设上面的A,B,C都没有覆写默认的事件传播行为，那么下面就是事件传播的过程：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Activity dispatchTouchEvent ACTION_DOWN</div><div class="line">A dispatchTouchEvent ACTION_DOWN</div><div class="line">A onInterceptTouchEvent ACTION_DOWN</div><div class="line">B dispatchTouchEvent ACTION_DOWN</div><div class="line">B onInterceptTouchEvent ACTION_DOWN</div><div class="line">C dispatchTouchEvent ACTION_DOWN</div><div class="line">C onTouchEvent ACTION_DOWN</div><div class="line">B onTouchEvent ACTION_DOWN</div><div class="line">A onTouchEvent ACTION_DOWN</div><div class="line">Activity onTouchEvent ACTION_DOWN</div><div class="line">Activity dispatchTouchEvent ACTION_MOVE</div><div class="line">Activity onTouchEvent ACTION_UP</div></pre></td></tr></table></figure>
<ol>
<li>DOWN事件首先由 Activity 进程分发。</li>
<li>首先传递给 A，由 A 进行分发，A 没有进行时间拦截。</li>
<li>事件传递给 B，由 B 进行分发，B 没有进行时间拦截。</li>
<li>事件传递给 C，C 没有处理这个事件。</li>
<li>再把事件传递给 B，B 没有处理这个事件。</li>
<li>再把事件传递给 A，A 没有处理这个事件。</li>
<li>最终把 DOWN 事件传递给 Activity。</li>
<li>Activity 处理后面的 MOVE 和 UP 事件。</li>
</ol>
<p>由于没有 View 对这个事件感兴趣。后面的 MOVE 和 UP 事件不再进行逐级分发和传递，直接由 Activity 进行处理。<br>从这个流程我们可以得到下面的结论：</p>
<ul>
<li>假如 DOWN 事件传给 C 的 <code>onTouchEvent</code> 方法时，它返回了 false，DOWN 事件会继续向上传递给 B 和 A 的 <code>onTouchEvent</code>，即使它们在 <code>onInterceptTouchEvent</code> 方法中说它们不想拦截这个 DOWN 事件，但没办法，没有子 <code>View</code> 愿意处理该事件。</li>
<li>如果所有的 <code>View</code> 都不愿意处理事件，那么最后只能交给 Activity 来处理了。</li>
</ul>
<h2 id="处理事件"><a href="#处理事件" class="headerlink" title="处理事件"></a>处理事件</h2><p>现在我们假设 C 对 DOWN 事件感兴趣，我们可以通过下面方法实现：</p>
<ul>
<li>覆写了 C 的 <code>onTouchEvent</code> 方法，处理 DOWN 事件，并返回 true 。</li>
<li>调用 <code>setOnClickListener</code> 设置监听。</li>
<li>调用 <code>setOnTouchListener</code> 设置监听，并且 <code>onTouch</code> 方法返回true。</li>
<li>设置 <code>setClickable(true)</code>。</li>
</ul>
<p>先来看一下事件传递流程：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Activity dispatchTouchEvent ACTION_DOWN</div><div class="line">A dispatchTouchEvent ACTION_DOWN</div><div class="line">A onInterceptTouchEvent ACTION_DOWN</div><div class="line">B dispatchTouchEvent ACTION_DOWN</div><div class="line">B onInterceptTouchEvent ACTION_DOWN</div><div class="line">C dispatchTouchEvent ACTION_DOWN</div><div class="line">C onTouchEvent ACTION_DOWN</div><div class="line"></div><div class="line">Activity dispatchTouchEvent ACTION_UP</div><div class="line">A dispatchTouchEvent ACTION_UP</div><div class="line">A onInterceptTouchEvent ACTION_UP</div><div class="line">B dispatchTouchEvent ACTION_UP</div><div class="line">B onInterceptTouchEvent ACTION_UP</div><div class="line">C dispatchTouchEvent ACTION_UP</div><div class="line">C onTouchEvent ACTION_UP</div></pre></td></tr></table></figure>
<ul>
<li>前面几步的流程和前面一样。</li>
<li>DOWN 事件传递到 C 的 onTouchEvent 方法时，C 需要对这个事件做处理，即消费了这个事件。</li>
<li>DOWN事件不会继续传递，将不再被传递给 B 和 A 的 onTouchEvent 方法。</li>
<li>因为 C 对当前的事件感兴趣，所以剩余的手势事件（MOVE 和 UP）也将传递给 C 的 onTouchEvent 方法，此时该方法返回 true 或 false 都无关紧要了，但是为保持一致最好还是返回 true。</li>
</ul>
<p>从这里可以看出，各个 <code>View</code> 的 <code>onTouchEvent</code> 方法对 DOWN 事件的处理，代表了该 <code>View</code> 对以此 DOWN 开始的整个手势（gesture）的处理意愿，返回 true 代表愿意处理该 gesture，返回 false 代表不愿意处理该 gesture。</p>
<p>从这个流程我们可以得到下面的结论：</p>
<ul>
<li>虽然 A 和 B 的 <code>onInterceptTouchEvent</code> 方法对 DOWN 事件返回了 false，后续的事件依然会传递给它们的 <code>onInterceptTouchEvent</code> 方法，这一点与 <code>onTouchEvent</code> 的行为是不一样的。</li>
</ul>
<p>下面把 B 接受该事件的流程也列出来：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Activity dispatchTouchEvent ACTION_DOWN</div><div class="line">A dispatchTouchEvent ACTION_DOWN</div><div class="line">A onInterceptTouchEvent ACTION_DOWN</div><div class="line">B dispatchTouchEvent ACTION_DOWN</div><div class="line">B onInterceptTouchEvent ACTION_DOWN</div><div class="line">C dispatchTouchEvent ACTION_DOWN</div><div class="line">C onTouchEvent ACTION_DOWN</div><div class="line">B onTouchEvent ACTION_DOWN</div><div class="line"></div><div class="line">Activity dispatchTouchEvent ACTION_UP</div><div class="line">A dispatchTouchEvent ACTION_UP</div><div class="line">A onInterceptTouchEvent ACTION_UP</div><div class="line">B dispatchTouchEvent ACTION_UP</div><div class="line">B onTouchEvent ACTION_UP</div></pre></td></tr></table></figure>
<h2 id="拦截事件"><a href="#拦截事件" class="headerlink" title="拦截事件"></a>拦截事件</h2><p>上面的事件处理的例子中，DOWN 事件被 C 消费了，那么后面的 MOVE 和 UP 事件默认都会给 C 来处理。但是如果后面的 MOVE 事件 B 又想处理了怎么办呢？这个时候就需要 <code>onInterceptTouchEvent</code> 上场了。<br>前面也讲过，<code>onInterceptTouchEvent</code> 只存在于 <code>ViewGroup</code> 中，普通的 <code>View</code> 中没有这个方法。在任何一个 <code>View</code> 的 <code>onTouchEvent</code> 被调用之前，它的父辈们将先获得拦截这个事件的一次机会，换句话说，它们可以窃取该事件。<br>从上面的流程中也可以看出，事件在交给 C 的 <code>onTouchEvent</code> 处理之间，都会经过 A 和 B 的 <code>onInterceptTouchEvent</code> 方法。<br>那么如果 B 想拦截这个事件，只需要 <code>onInterceptTouchEvent</code> 中处理并返回 true 就行了。<br>先来看一下事件传递流程：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">Activity dispatchTouchEvent ACTION_DOWN</div><div class="line">A dispatchTouchEvent ACTION_DOWN</div><div class="line">A onInterceptTouchEvent ACTION_DOWN</div><div class="line">B dispatchTouchEvent ACTION_DOWN</div><div class="line">B onInterceptTouchEvent ACTION_DOWN</div><div class="line">C dispatchTouchEvent ACTION_DOWN</div><div class="line">C onTouchEvent ACTION_DOWN</div><div class="line"></div><div class="line">Activity dispatchTouchEvent ACTION_MOVE</div><div class="line">A dispatchTouchEvent ACTION_MOVE</div><div class="line">A onInterceptTouchEvent ACTION_MOVE</div><div class="line">B dispatchTouchEvent ACTION_MOVE</div><div class="line">B onInterceptTouchEvent ACTION_MOVE</div><div class="line"></div><div class="line">C dispatchTouchEvent ACTION_CANCEL</div><div class="line">C onTouchEvent ACTION_CANCEL</div><div class="line"></div><div class="line">Activity dispatchTouchEvent ACTION_MOVE</div><div class="line">A dispatchTouchEvent ACTION_MOVE</div><div class="line">A onInterceptTouchEvent ACTION_MOVE</div><div class="line">B dispatchTouchEvent ACTION_MOVE</div><div class="line">B onTouchEvent ACTION_MOVE</div><div class="line">（Activity onTouchEvent ACTION_MOVE）如果 B onTouchEvent返回false</div><div class="line"></div><div class="line">Activity dispatchTouchEvent ACTION_UP</div><div class="line">A dispatchTouchEvent ACTION_UP</div><div class="line">A onInterceptTouchEvent ACTION_UP</div><div class="line">B dispatchTouchEvent ACTION_UP</div><div class="line">B onTouchEvent ACTION_UP</div><div class="line">（Activity onTouchEvent ACTION_UP）如果 B onTouchEvent返回false</div></pre></td></tr></table></figure>
<ul>
<li>前面几步的流程和前面一样。C 处理了 DOWN 事件。</li>
<li>MOVE 事件传递到 B 的 <code>onInterceptTouchEvent</code> 方法时，B 想对这个事件做处理，那么就返回了 true。</li>
<li>MOVE 事件中断传递，这时 C 分发了 CANCEL 事件，<code>onTouchEvent</code> 也将会接收到 CANCEL 事件。</li>
<li>那么后面的 MOVE 和 UP 事件不会再通过 B 的 <code>onInterceptTouchEvent</code>，将会直接分发到 B 的 <code>onTouchEvent</code> 进行处理。</li>
<li>后面的 MOVE 和 UP 事件如果 B 的 <code>onTouchEvent</code> 做了处理并返回true，那么 UP 事件将被消费，不再继续传递，如果 B 的 <code>onTouchEvent</code> 不处理返回 false，那么这个事件将直接返回给 <code>Activity</code> 进行处理。</li>
<li>事件被拦截后，除了 CANCEL 事件，C 将不会再收到任何事件。</li>
</ul>
<p>从这个流程我们可以得到下面的结论：</p>
<ul>
<li>DOWN 事件的处理实际上经历了一下一上两个过程，下是指 A-&gt;B 的 <code>onInterceptTouchEvent</code>，上是指 C-&gt;B-&gt;A 的 <code>onTouchEvent</code>，当然，任意一步的方法中返回 true,都能阻止它继续传播。</li>
<li>如果 ViewGroup 拦截了一个半路的事件（比如 MOVE），这个事件将会被系统变成一个 CANCEL 事件，并传递给之前处理该手势（gesture）的子 View，而且不会再传递（无论是被拦截的 MOVE 还是系统生成的 CANCEL）给 <code>ViewGroup</code> 的 <code>onTouchEvent</code> 方法。只有再到来的事件才会传递到 <code>ViewGroup</code> 的 <code>onTouchEvent</code> 方法中。</li>
<li>事件被拦截后，如果本身的 <code>onTouchEvent</code> 也不做处理，那么直接返回给 <code>Activity</code> 处理。</li>
</ul>
<p>下面我们再来做一个实验：B 在 <code>onInterceptTouchEvent</code> 中拦截了最初的 DOWN 事件。<br>先看第一种情况：DOWN 事件只在 <code>onInterceptTouchEvent</code> 中拦截，<code>onTouchEvent</code> 不做处理。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Activity dispatchTouchEvent ACTION_DOWN</div><div class="line">A dispatchTouchEvent ACTION_DOWN</div><div class="line">A onInterceptTouchEvent ACTION_DOWN</div><div class="line">B dispatchTouchEvent ACTION_DOWN</div><div class="line">B onInterceptTouchEvent ACTION_DOWN</div><div class="line">B onTouchEvent ACTION_DOWN</div><div class="line">A onTouchEvent ACTION_DOWN</div><div class="line">Activity onTouchEvent ACTION_DOWN</div><div class="line"></div><div class="line">Activity dispatchTouchEvent ACTION_MOVE</div><div class="line">Activity onTouchEvent ACTION_MOVE</div><div class="line"></div><div class="line">Activity dispatchTouchEvent ACTION_UP</div><div class="line">Activity onTouchEvent ACTION_UP</div></pre></td></tr></table></figure>
<p>第二种情况：DOWN 事件在 <code>onInterceptTouchEvent</code> 中拦截，<code>onTouchEvent</code> 中处理并返回true。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Activity dispatchTouchEvent ACTION_DOWN</div><div class="line">A dispatchTouchEvent ACTION_DOWN</div><div class="line">A onInterceptTouchEvent ACTION_DOWN</div><div class="line">B dispatchTouchEvent ACTION_DOWN</div><div class="line">B onInterceptTouchEvent ACTION_DOWN</div><div class="line">B onTouchEvent ACTION_DOWN</div><div class="line"></div><div class="line">Activity dispatchTouchEvent ACTION_MOVE</div><div class="line">A dispatchTouchEvent ACTION_MOVE</div><div class="line">A onInterceptTouchEvent ACTION_MOVE</div><div class="line">B dispatchTouchEvent ACTION_MOVE</div><div class="line">B onTouchEvent ACTION_MOVE</div><div class="line">（Activity onTouchEvent ACTION_MOVE）如果B的`onTouchEvent`不处理MOVE事件</div><div class="line"></div><div class="line">Activity dispatchTouchEvent ACTION_UP</div><div class="line">A dispatchTouchEvent ACTION_UP</div><div class="line">A onInterceptTouchEvent ACTION_UP</div><div class="line">B dispatchTouchEvent ACTION_UP</div><div class="line">B onTouchEvent ACTION_UP</div><div class="line">（Activity onTouchEvent ACTION_UP）如果B的`onTouchEvent`不处理UP事件</div></pre></td></tr></table></figure>
<ul>
<li>如果一个 <code>ViewGroup</code> 拦截了最初的 DOWN 事件，该事件仍然会传递到该 <code>ViewGroup</code> 的 <code>onTouchEvent</code> 方法中。</li>
<li><code>onInterceptTouchEvent</code> 只会拦截事件的传递，具体事件如何传递还要看 <code>onTouchEvent</code> 的处理。</li>
<li>如果只拦截 DOWM 事件而不做处理，那么认为没有 View 对这组手势事件感兴趣，那么后面直接交由 Activity 处理。</li>
<li>如果对 DOWN 事件处理，那么后续事件都会分发给 ViewGroup 的 <code>onTouchEvent</code> ，如果不处理再直接传递给 Activity 处理。</li>
</ul>
<h2 id="阻止拦截事件"><a href="#阻止拦截事件" class="headerlink" title="阻止拦截事件"></a>阻止拦截事件</h2><p>子 View 是可以阻止父 View 对事件拦截的，这就要用到 <code>ViewGroup</code> 的 <code>requestDisallowInterceptTouchEvent</code>，子 <code>View</code> 中调用 <code>getParent().requestDisallowInterceptTouchEvent(true)</code> 即可。<br>但是这个调用却要在合适的位置才能生效，具体原因在后面的源码分析中会介绍。<br>在 <code>onTouchEvent</code> 的处理 <code>DOWN</code> 事件时设置是合适的位置，因为在事件处理的开始(ACTION_DOWN)时会重新清理这个标志位，因此，设置过早是不生效的。<br>下面是 C 处理了事件，并且在 <code>onTouchEvent</code> 处理 <code>DOWN</code> 事件时设置了 <code>getParent().requestDisallowInterceptTouchEvent(true)</code> 的流程。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">Activity dispatchTouchEvent ACTION_DOWN</div><div class="line">A dispatchTouchEvent ACTION_DOWN</div><div class="line">A onInterceptTouchEvent ACTION_DOWN</div><div class="line">B dispatchTouchEvent ACTION_DOWN</div><div class="line">B onInterceptTouchEvent ACTION_DOWN</div><div class="line">C dispatchTouchEvent ACTION_DOWN</div><div class="line">C onTouchEvent ACTION_DOWN</div><div class="line"></div><div class="line">Activity dispatchTouchEvent ACTION_MOVE</div><div class="line">A dispatchTouchEvent ACTION_MOVE</div><div class="line">B dispatchTouchEvent ACTION_MOVE</div><div class="line">C dispatchTouchEvent ACTION_MOVE</div><div class="line">C onTouchEvent ACTION_MOVE</div><div class="line"></div><div class="line">Activity dispatchTouchEvent ACTION_UP</div><div class="line">A dispatchTouchEvent ACTION_UP</div><div class="line">B dispatchTouchEvent ACTION_UP</div><div class="line">C dispatchTouchEvent ACTION_UP</div><div class="line">C onTouchEvent ACTION_UP</div></pre></td></tr></table></figure>
<p>可以看出，除了 DOWN 事件 C 的父元素们将无法通过 <code>onInterceptTouchEvent</code> 拦截 MOVE 和 UP 事件。</p>
<h2 id="几个问题"><a href="#几个问题" class="headerlink" title="几个问题"></a>几个问题</h2><p>在总结几个关于 Android 事件分发经常遇到的几个问题：</p>
<ul>
<li>如果B、C都没有处理ACTION_DOWN事件，包括没有注册touch和click监听，那么B的onInterceptTouchEvent执行几次？<ul>
<li>处理一次ACTION_DOWN，因为所有的View对此次时间都没有兴趣，那以后的Move和Up就不传回来了。</li>
</ul>
</li>
<li>如果B、C没有注册touch和click监听，B的onTouchEvent对MotionEvent.ACTION_DOWN返回true，那么B的onInterceptTouchEvent执行几次？<ul>
<li>处理一次ACTION_DOWN，因为B表示对这个时间感兴趣，以后的move和up就没必要再调用onInterceptTouchEvent了。B的onTouchEvent会对这些事件响应。</li>
</ul>
</li>
<li>如果B、C都没有拦截和处理ACTION_DOWN事件，C注册了click监听，那么B的onInterceptTouchEvent和onTouchEvent会执行几次？ <ul>
<li>B的onInterceptTouchEvent会对ACTION_DOWN、ACTION_MOVE和ACTION_UP都会响应，但onTouchEvent对此都不响应，因为子View已经表示对此次事件感兴趣了。但是父View仍然有权利对事件拦截。</li>
</ul>
</li>
<li>ACTION_CANCEL事件如何被触发<ul>
<li>当C响应了ACTION_DOWN事件后（比如ACTION_CANCEL对down事件返回true），B突然插手把ACTION_MOVE事件拦截了，那么以后的move和up事件都交由B的onTouchEvent来处理，C的onTouchEvent就会收到ACTION_CANCEL事件。</li>
</ul>
</li>
</ul>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://balpha.de/2013/07/android-development-what-i-wish-i-had-known-earlier/" target="_blank" rel="external">http://balpha.de/2013/07/android-development-what-i-wish-i-had-known-earlier/</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzI0MjE3OTYwMg==&amp;mid=2649547708&amp;idx=1&amp;sn=143add3bcceba00c4e3292b49557d4bc#rd" target="_blank" rel="external">https://mp.weixin.qq.com/s?__biz=MzI0MjE3OTYwMg==&amp;mid=2649547708&amp;idx=1&amp;sn=143add3bcceba00c4e3292b49557d4bc#rd</a></p>
]]></content>
    
    <summary type="html">
    
      介绍 Android 事件处理流程
    
    </summary>
    
      <category term="Android 事件分发体系" scheme="http://yoursite.com/categories/Android-%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E4%BD%93%E7%B3%BB/"/>
    
    
      <category term="Android 事件分发体系" scheme="http://yoursite.com/tags/Android-%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E4%BD%93%E7%B3%BB/"/>
    
  </entry>
  
  <entry>
    <title>Java 基础 -- 并发集合的使用</title>
    <link href="http://yoursite.com/2015/10/18/java-basic-concurrent-map-collection/"/>
    <id>http://yoursite.com/2015/10/18/java-basic-concurrent-map-collection/</id>
    <published>2015-10-18T02:00:00.000Z</published>
    <updated>2018-11-21T09:58:18.407Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>前面大多数集合并不适合用在并发应用程序中，因为它们没有控制并发访问数据。如果一些并发任务共享一个数据结构，而这个数据结构并不适合用在并发任务中，你将会有数据不一致的错误，这将影响到程序的正确运行。比如 ArrayList 类。<br>为了方便开发者并发编程，在 JDK 5.0 中加入了并发包 java.util.concurrent.*，它提供了可以在并发程序中使用的类，本文仅介绍并发结合的特点和使用方法。</p>
<p><img src="http://www.plantuml.com/plantuml/svg/SoWkIImgAStDuGh9BCb9LL3oIYnBL7YwSzlJ_ec-YGKlPxSzdT3nR67RitdRdixUfyJ5bPbNabgKbfYSgW2KHk85vnULfAQWYlabbcMc9oRbfA8AE-Vd9PSM5QNcbU0IHz6Oc5HSKfIONAAGd9DONApW2EM2f20Y27qUYSKPsCI3ipCBV3ABmNf004WhsDJewI4R1XO4YkhgeZaGIGr46jC-50qA4ACnLI4iG0GMd0MHGF4uWeDfCuf2X31-bPX-mH56s7KZ_8Mfmo4rBmMOYW00" alt="效果图"></p>
<p><img src="http://www.plantuml.com/plantuml/svg/XLJBgjim4DtxAyJTt_i5NIHDLYNqWGDTAyua5L6aL9O3Xgv3TstNWK9_8j1D_yQ1_iN5FfXed37P6C-SCsSU6cbIHXrYjRVPqaHBwkcTFchL_BqqFtxDlBLKHEFT__Ef-Vdz-kTq_Nrfpl-UiiouI66Z2r8tLkBCAQQM3v7MtFTU7yrMhonnzyAKgVcfeeeI-wtrnSwuxT0_fwyYR-XV1ktA3GN4wrKPWowYAgmkIpM56PEEHXWvnJ48ol3Dl2kg4CZ5V6SERMjjO8yTwW_kSp2HfY7ekaL7e5jGP_QzoPaMnkreZRw1pSdgEYM3maSa8VSnV7n0yjeLNu9tlYfJzyTWV31nK6rscwrwy-tbHPWvfpm_TxkKK-Jytjaoalt2Nm_m9RjFfS1ADPD_WF8Pfi8eJEODUi5wjny42Kl0Iq3Ka2OfOxxT5mu-U010SEBTbrC1i429C3f8VWcG4uroW6S0Gzfj5eKK0WsTG4Mu1sB149FPFAlC73Oe4yG6akl8se0Eq95WyUOo2o8IxQ7QM4cFQL3ZRyDeEavZbahpFPJZxuvSEkV8PokzLBAQJ9oGMrTx-me0" alt="效果图"></p>
<h2 id="并发-Map-框架"><a href="#并发-Map-框架" class="headerlink" title="并发 Map 框架"></a>并发 Map 框架</h2><h3 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h3><p>ConcurrentHashMap 是线程安全且高效的 HashMap，底层采用分段的数组+链表实现，线程安全ConcurrentHashMap允许多个修改操作并发进行，其关键在于使用了锁分离技术。它使用了多个锁来控制对hash表的不同部分进行的修改。ConcurrentHashMap内部使用段(Segment)来表示这些不同的部分，每个段其实就是一个小的Hashtable，它们有自己的锁。只要多个修改操作发生在不同的段上，它们就可以并发进行。</p>
<p>JDK1.8的实现已经摒弃了Segment的概念，而是直接用Node数组+链表+红黑树的数据结构来实现，此时锁加在key上，并发控制使用Synchronized和CAS来操作，整个看起来就像是优化过且线程安全的HashMap，虽然在JDK1.8中还能看到Segment的数据结构，但是已经简化了属性，只是为了兼容旧版本。</p>
<h3 id="ConcurrentSkipListMap"><a href="#ConcurrentSkipListMap" class="headerlink" title="ConcurrentSkipListMap"></a>ConcurrentSkipListMap</h3><p><code>ConcurrentSkipListMap</code> 的 key 是有序的，底层是通过跳表来实现的。</p>
<h2 id="并发-Collection-框架"><a href="#并发-Collection-框架" class="headerlink" title="并发 Collection 框架"></a>并发 Collection 框架</h2><h3 id="BlockingQueue"><a href="#BlockingQueue" class="headerlink" title="BlockingQueue"></a>BlockingQueue</h3><p>BlockingQueue 就是阻塞队列，它是一个先进先出的队列，当获取队列元素但是队列为空时，会阻塞等待队列中有元素再返回。当添加元素时，如果队列已满，那么等到队列可以放入新元素时再放入。<br>BlockingQueue 的实现都是线程安全的。<br>BlockingQueue 通常用于实现生产者-消费者队列的场景，当然，你也可以将它当做普通的 Collection 来用。</p>
<h4 id="ArrayBlockingQueue"><a href="#ArrayBlockingQueue" class="headerlink" title="ArrayBlockingQueue"></a>ArrayBlockingQueue</h4><p>数组阻塞队列，它实现了 BlockingQueue 接口。其内部实现是将对象放到一个数组里。</p>
<h4 id="DelayQueue"><a href="#DelayQueue" class="headerlink" title="DelayQueue"></a>DelayQueue</h4><p>延迟队列，它实现了 BlockingQueue 接口。只有在延迟期满时才能从中提取元素。该队列的头部是延迟期满后保存时间最长的Delayed 元素。</p>
<h4 id="LinkedBlockingQueue"><a href="#LinkedBlockingQueue" class="headerlink" title="LinkedBlockingQueue"></a>LinkedBlockingQueue</h4><p>链阻塞队列，内部以一个链式结构(链接节点)对其元素进行存储。</p>
<h4 id="PriorityBlockingQueue"><a href="#PriorityBlockingQueue" class="headerlink" title="PriorityBlockingQueue"></a>PriorityBlockingQueue</h4><p>具有优先级的阻塞队列，所有插入到 PriorityBlockingQueue 的元素必须实现 java.lang.Comparable 接口。因此该队列中元素的排序就取决于你自己的 Comparable 实现。<br>基于数组，数据结构为二叉堆.</p>
<h4 id="SynchronousQueue"><a href="#SynchronousQueue" class="headerlink" title="SynchronousQueue"></a>SynchronousQueue</h4><p>它的内部同时只能够容纳单个元素。如果该队列已有一元素的话，试图向队列中插入一个新元素的线程将会阻塞，直到另一个线程将该元素从队列中抽走。同样，如果该队列为空，试图向队列中抽取一个元素的线程将会阻塞，直到另一个线程向队列中插入了一条新的元素。</p>
<h4 id="BlockingDeque"><a href="#BlockingDeque" class="headerlink" title="BlockingDeque"></a>BlockingDeque</h4><p>阻塞双端队列，在不能够插入元素时，它将阻塞住试图插入元素的线程；在不能够抽取元素时，它将阻塞住试图抽取的线程。</p>
<h3 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h3><p><code>CopyOnWriteArrayList</code> 可以说是 <code>ArrayList</code> 的多线程版本，它是线程安全的。<br>它使用了一种叫写时复制的方法，当有新元素添加到 <code>CopyOnWriteArrayList</code> 时，先从原有的数组中拷贝一份出来，然后在新的数组做写操作，写完之后，再将原来的数组引用指向到新数组。</p>
<!-- 
http://www.importnew.com/26461.html
https://www.cnblogs.com/cccw/p/5837448.html
https://blog.csdn.net/king866/article/details/53945400
https://www.cnblogs.com/vijozsoft/p/5585620.html
http://ifeve.com/concurrent-collections-1/
https://blog.csdn.net/ink4t/article/details/76696728
https://www.cnblogs.com/bushi/p/6681543.html
https://www.baidu.com/s?word=CopyOnWriteArrayList&tn=50000021_hao_pg&ie=utf-8&sc=UWd1pgw-pA7EnHc1FMfqnHR1rHb1rj0sPjDknBuW5y99U1Dznzu9m1YknHc3PjTdn6&ssl_sample=s_10%2Cs_77&srcqid=2489131420700060184
https://www.jianshu.com/p/5f570d2f81a2
http://www.runoob.com/java/java-collections.html
http://www.runoob.com/java/java-hashTable-class.html
-->
<!-- 
@startuml
Title "Java 并发Map集合框架图"

interface Map
interface SortedMap
interface NavigableMap
interface ConcurrentMap
interface ConcurrentNavigableMap
abstract class AbstractMap
class ConcurrentHashMap
class ConcurrentSkipListMap




Map <|.. AbstractMap
Map  <|-- ConcurrentMap
AbstractMap <|-- ConcurrentHashMap
ConcurrentMap  <|.. ConcurrentHashMap
Map  <|-- SortedMap
SortedMap <|-- NavigableMap
NavigableMap <|-- ConcurrentNavigableMap
ConcurrentMap <|-- ConcurrentNavigableMap
AbstractMap <|-- ConcurrentSkipListMap
ConcurrentNavigableMap <|.. ConcurrentSkipListMap
@enduml
-->
<!-- 

@startuml
Title "Java 并发Collection集合框架图"

interface Collection
interface Set
interface SortedSet
interface NavigableSet
interface List
interface Queue
interface BlockingQueue
interface Deque
interface BlockingDeque
interface TransferQueue
abstract class AbstractCollection
abstract class AbstractSet
abstract class AbstractQueue
class ConcurrentSkipListSet
class CopyOnWriteArrayList
class CopyOnWriteArraySet
class ArrayBlockingQueue
class ConcurrentLinkedDeque
class DelayQueue
class LinkedBlockingDeque
class LinkedBlockingQueue
class LinkedTransferQueue
class SynchronousQueue
class PriorityBlockingQueue

Collection <|.. AbstractCollection
Collection <|-- Set
Set <|.. AbstractSet
Set <|-- SortedSet
SortedSet <|-- NavigableSet
AbstractCollection  <|-- AbstractSet
AbstractSet <|-- ConcurrentSkipListSet
NavigableSet <|.. ConcurrentSkipListSet
Collection <|-- List
List <|.. CopyOnWriteArrayList
AbstractSet  <|-- CopyOnWriteArraySet
Collection <|-- Queue
Queue <|-- BlockingQueue
Queue  <|-- Deque
Deque <|-- BlockingDeque
BlockingQueue <|-- BlockingDeque
AbstractCollection  <|--  AbstractQueue
Queue <|.. AbstractQueue
BlockingQueue  <|..  ArrayBlockingQueue
AbstractQueue <|--  ArrayBlockingQueue
Deque <|.. ConcurrentLinkedDeque
AbstractCollection <|-- ConcurrentLinkedDeque
AbstractQueue  <|-- ConcurrentLinkedQueue
Queue <|.. ConcurrentLinkedQueue
AbstractQueue <|--  DelayQueue
BlockingQueue <|.. DelayQueue
AbstractQueue <|-- LinkedBlockingDeque
BlockingDeque <|.. LinkedBlockingDeque
AbstractQueue <|-- LinkedBlockingQueue
BlockingQueue <|.. LinkedBlockingQueue
BlockingQueue <|-- TransferQueue
AbstractQueue <|-- LinkedTransferQueue
TransferQueue  <|.. LinkedTransferQueue
AbstractQueue <|-- SynchronousQueue
BlockingQueue <|.. SynchronousQueue
AbstractQueue  <|-- PriorityBlockingQueue
BlockingQueue <|.. PriorityBlockingQueue
@enduml
-->]]></content>
    
    <summary type="html">
    
      并发包中的集合的使用
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="并发集合" scheme="http://yoursite.com/tags/%E5%B9%B6%E5%8F%91%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>Android 线程 -- HandlerThread 使用及源码分析</title>
    <link href="http://yoursite.com/2015/10/10/android-thread-handlerthread-source-code/"/>
    <id>http://yoursite.com/2015/10/10/android-thread-handlerthread-source-code/</id>
    <published>2015-10-10T02:00:00.000Z</published>
    <updated>2018-07-13T08:32:36.563Z</updated>
    
    <content type="html"><![CDATA[<p>本文是介绍 <code>HandlerThread</code> 这个类的使用以及源码分析，单从这个类的名称上看，我们就知道这个类可能会和 <code>Handler</code> 和 <code>Thread</code> 有关系。<br>进入正题以前，我们先来看一下 <code>Handler</code>、<code>Thread</code> 和 <code>Looper</code> 的关系。</p>
<h2 id="Handler、Thread-和-Looper-的关系"><a href="#Handler、Thread-和-Looper-的关系" class="headerlink" title="Handler、Thread 和 Looper 的关系"></a>Handler、Thread 和 Looper 的关系</h2><ol>
<li><code>Looper</code> 类别用来为一个线程开启一个消息循环。默认情况下 Android 中新诞生的线程是没有开启消息循环的。（主线程除外，主线程系统会自动为其创建 <code>Looper</code> 对象，开启消息循环）。<br><code>Looper</code> 对象通过 <code>MessageQueue</code> 来存放消息和事件。一个线程只能有一个 <code>Looper</code>，对应一个 <code>MessageQueue</code>。<br>通常是通过 <code>Handler</code> 对象来与 <code>Looper</code> 交互的。<code>Handler</code> 可看做是 <code>Looper</code> 的一个接口，用来向指定的 <code>Looper</code> 发送消息及定义处理方法。</li>
<li>默认情况下 <code>Handler</code> 会与其被定义时所在线程的 <code>Looper</code> 绑定，比如，在主线程中定义，其是与主线程的 <code>Looper</code> 绑定。<br><code>mainHandler = new Handler()</code> 等价于 <code>new Handler(Looper.myLooper())</code><br><code>Looper.myLooper()</code> 用来获取当前进程的 <code>Looper</code> 对象。<br>还有一个类似的 <code>Looper.getMainLooper()</code> 用于获取主线程的 <code>Looper</code> 对象。</li>
<li><p>在非主线程中直接 <code>new Handler()</code> 会报如下的错误:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java.lang.RuntimeException: Can&apos;t create handler inside thread that has not called Looper.prepare()</div></pre></td></tr></table></figure>
<p>原因是非主线程中默认没有创建 <code>Looper</code> 对象，需要先调用 <code>Looper.prepare()</code> 启用 <code>Looper</code>。</p>
</li>
<li>需要先调用 <code>Looper.prepare()</code> 启用 <code>Looper</code>。<br>调用 <code>Looper.loop()</code> 让 <code>Looper</code> 开始工作，从消息队列里取消息，处理消息。<br>注意：写在 <code>Looper.loop()</code> 之后的代码不会被执行，这个函数内部应该是一个循环，当调用 <code>mHandler.getLooper().quit()</code> 后，loop 才会中止，其后的代码才能得以运行。</li>
</ol>
<h2 id="Handler和Thread结合"><a href="#Handler和Thread结合" class="headerlink" title="Handler和Thread结合"></a>Handler和Thread结合</h2><p>了解了上面的知识，如果我们想在一个子线程里面处理消息，就需要实现下面的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">class LooperThread extends Thread &#123;</div><div class="line">    public Handler mHandler;</div><div class="line"></div><div class="line">    public void run() &#123;</div><div class="line">        // 初始化Looper</div><div class="line">        Looper.prepare();</div><div class="line">        // 必须在初始化Looper之后创建Handler，否则会报错</div><div class="line">        mHandler = new Handler() &#123;</div><div class="line">            public void handleMessage(Message msg) &#123;</div><div class="line">                // 这里处理消息</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        // 开启消息循环</div><div class="line">        Looper.loop();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到实现起来比较麻烦。<br>那么在这种情况下，<code>HandlerThread</code> 应运而生。</p>
<h2 id="HandlerThread-的用法"><a href="#HandlerThread-的用法" class="headerlink" title="HandlerThread 的用法"></a>HandlerThread 的用法</h2><p><code>HandlerThread</code> 是一个包含 <code>Looper</code> 的 <code>Thread</code>，我们可以直接使用这个 <code>Looper</code> 创建 <code>Handler</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">private HandlerThread mUpdateStatusThread;</div><div class="line"></div><div class="line">&#123;</div><div class="line">    // 初始化 HandlerThread</div><div class="line">    mUpdateStatusThread = new HandlerThread(&quot;update_download_status_thread&quot;);</div><div class="line">    mUpdateStatusThread.start();</div><div class="line">    // 初始化 Handler</div><div class="line">    mUpdateStatusHandler = new UpdateStatusHandler(mUpdateStatusThread.getLooper(), this);</div><div class="line">&#125;</div><div class="line"></div><div class="line">private static class UpdateStatusHandler extends Handler &#123;</div><div class="line">    static final int MSG_UPDATE_PROGRESS = 0;</div><div class="line">    private WeakReference&lt;DownloadObserver&gt; mWeakReference;</div><div class="line"></div><div class="line">    UpdateStatusHandler(Looper looper) &#123;</div><div class="line">        super(looper);</div><div class="line">        mWeakReference = new WeakReference&lt;&gt;(downloadObserver);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void handleMessage(Message msg) &#123;</div><div class="line">        ....</div><div class="line">        switch (msg.what) &#123;</div><div class="line">            case MSG_UPDATE_PROGRESS:</div><div class="line">                ......</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">       // 发送消息</div><div class="line">       mUpdateStatusHandler.obtainMessage(UpdateStatusHandler.MSG_UPDATE_PROGRESS, downloadId)</div><div class="line">                .sendToTarget();</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">        // 退出</div><div class="line">        mUpdateStatusHandler.removeCallbacksAndMessages(null);</div><div class="line">        mUpdateStatusThread.quitSafely();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>HandlerThread</code> 相当于给 <code>Handler</code> 提供了一个 <code>Looper</code>，那么多个 <code>Handler</code> 共用一个 <code>HandlerThread</code>，显然也是可以的。<br>比如我们需要在后台处理多中任务，可能需要建多个 <code>Handler</code>（当然在一个 <code>Handler</code> 处理也是可行的），那么我们就可以只创建一个 <code>HandlerThread</code>，多个 <code>Handler</code> 通过 <code>HandlerThread.getLooper()</code> 来获取 <code>Looper</code> 对象来创建 <code>Handler</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class LooperUtils &#123;</div><div class="line"></div><div class="line">    public static HandlerThread mThread;</div><div class="line"></div><div class="line">    private static final String BACKGROUND_THREAD=&quot;background_thread&quot;;</div><div class="line"></div><div class="line">    static &#123;</div><div class="line">        mThread = new HandlerThread(BACKGROUND_THREAD);</div><div class="line">        mThread.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static Looper getThreadLooper()&#123;</div><div class="line">        return mThread.getLooper();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static Looper getMainThreadLooper()&#123;</div><div class="line">        return Looper.getMainLooper();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mUpdateStatusHandler = new UpdateStatusHandler(LooperUtils.getThreadLooper(), this);</div></pre></td></tr></table></figure>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line">public class HandlerThread extends Thread &#123;</div><div class="line">    int mPriority;</div><div class="line">    int mTid = -1;</div><div class="line">    Looper mLooper;</div><div class="line">    // 构造方法，设置线程的名称，默认的优先级</div><div class="line">    public HandlerThread(String name) &#123;</div><div class="line">        super(name);</div><div class="line">        mPriority = Process.THREAD_PRIORITY_DEFAULT;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // 构造方法，设置线程的名称以及优先级</div><div class="line">    // 注意使用的是 android.os.Process 而不是 java.lang.Thread 的优先级</div><div class="line">    public HandlerThread(String name, int priority) &#123;</div><div class="line">        super(name);</div><div class="line">        mPriority = priority;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // 回调方法</div><div class="line">    protected void onLooperPrepared() &#123;</div><div class="line">    &#125;</div><div class="line">    // 调用Thread start 方法，就会执行 run方法，开启循环</div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        mTid = Process.myTid();</div><div class="line">        Looper.prepare();</div><div class="line">        synchronized (this) &#123;</div><div class="line">            mLooper = Looper.myLooper();</div><div class="line">            notifyAll();</div><div class="line">        &#125;</div><div class="line">        Process.setThreadPriority(mPriority);</div><div class="line">        onLooperPrepared();</div><div class="line">        Looper.loop();</div><div class="line">        mTid = -1;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // 获取当前 Thread 的Looper</div><div class="line">    public Looper getLooper() &#123;</div><div class="line">        if (!isAlive()) &#123;</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        // If the thread has been started, wait until the looper has been created.</div><div class="line">        synchronized (this) &#123;</div><div class="line">            while (isAlive() &amp;&amp; mLooper == null) &#123;</div><div class="line">                try &#123;</div><div class="line">                    wait();</div><div class="line">                &#125; catch (InterruptedException e) &#123;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return mLooper;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 退出 Looper，清空所有的消息队列，包含非延迟消息和延迟消息</div><div class="line">    public boolean quit() &#123;</div><div class="line">        Looper looper = getLooper();</div><div class="line">        if (looper != null) &#123;</div><div class="line">            looper.quit();</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 退出 Looper，退出之前会派发所有的非延迟消息。</div><div class="line">    public boolean quitSafely() &#123;</div><div class="line">        Looper looper = getLooper();</div><div class="line">        if (looper != null) &#123;</div><div class="line">            looper.quitSafely();</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Returns the identifier of this thread. See Process.myTid().</div><div class="line">     */</div><div class="line">    public int getThreadId() &#123;</div><div class="line">        return mTid;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      本文介绍 HandlerThread 的使用及源码分析
    
    </summary>
    
      <category term="Android 线程" scheme="http://yoursite.com/categories/Android-%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="Android 线程" scheme="http://yoursite.com/tags/Android-%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java 线程池 -- ThreadPoolExecutor 源码解析</title>
    <link href="http://yoursite.com/2015/09/06/java-thread-sourcecode-of-threadpoolexecutor/"/>
    <id>http://yoursite.com/2015/09/06/java-thread-sourcecode-of-threadpoolexecutor/</id>
    <published>2015-09-06T02:00:00.000Z</published>
    <updated>2019-03-14T06:17:18.637Z</updated>
    
    <content type="html"><![CDATA[<h2 id="构造方法以及参数解析"><a href="#构造方法以及参数解析" class="headerlink" title="构造方法以及参数解析"></a>构造方法以及参数解析</h2><p>先来看一下 <code>ThreadPoolExecutor</code> 的几个构造方法：</p>
<ul>
<li>ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,BlockingQueue<runnable> workQueue)</runnable></li>
<li>ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,BlockingQueue<runnable> workQueue,ThreadFactory threadFactory)</runnable></li>
<li>ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,BlockingQueue<runnable> workQueue,RejectedExecutionHandler handler)</runnable></li>
<li>ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,BlockingQueue<runnable> workQueue,ThreadFactory threadFactory, RejectedExecutionHandler handler)</runnable></li>
</ul>
<p>下面来解释一下这结果参数的意义：</p>
<ul>
<li>corePoolSize：核心线程的数量。<ul>
<li>核心线程默认是没有超时的，也就是说就算线程闲置，也不会被处理。但是如果设置了 <code>allowCoreTimeOut</code> 为true，那么当核心线程闲置时，会被回收。</li>
<li>当提交一个任务到线程池时，线程池会创建一个线程来执行任务，即使其他空闲的核心线程能够执行新任务也会创建线程，等到需要执行的任务数大于线程池核心线程的数量时就不再创建。如果调用了线程池的 <code>prestartAllCoreThreads</code> 方法，线程池会提前创建并启动所有核心线程。</li>
<li>核心线程在创建 Worker 的时候会赋值 firstTask。</li>
</ul>
</li>
<li>maximumPoolSize：线程池的允许创建的最大线程数量，被 <code>CAPACITY</code> 限制，最大职能是 2^29-1。<ul>
<li>当 corePoolSize =&lt; 线程数 &lt; maximumPoolSize，且任务队列已满时。线程池会创建新线程来处理任务。</li>
<li>当 maximumPoolSize &lt; 线程数时，且任务队列已满时，线程池会拒绝处理任务而抛出异常。</li>
</ul>
</li>
<li>keepAliveTime：线程活动保持时间。线程池的工作线程空闲后，保持存活的时间。</li>
<li>unit：线程活动保持时间的单位。</li>
<li>workQueue：用于保存等待执行的任务的阻塞队列。</li>
<li>threadFactory：设置创建线程的工厂。可用于统一设置线程的一些属性。</li>
<li>handler：线程池的拒绝策略。当队列和线程池都满了，说明线程池处于饱和状态，那么必须采取一种策略处理提交的新任务。下面介绍源码中给出的四种实现。<ul>
<li>AbortPolicy：直接抛出 <code>RejectedExecutionException</code> 异常。这是 <code>ThreadPoolExecutor</code> 的默认策略。</li>
<li>CallerRunsPolicy：直接在调用者所处的线程来执行任务。</li>
<li>DiscardOldestPolicy：丢弃队列中最早创建的任务，并尝试重新触发执行一次线程池任务。</li>
<li>DiscardPolicy：直接丢弃该任务，不做任何处理。</li>
<li>也可以根据应用场景需要来实现 <code>RejectedExecutionHandler</code> 接口自定义策略。</li>
</ul>
</li>
</ul>
<h2 id="概念解释"><a href="#概念解释" class="headerlink" title="概念解释"></a>概念解释</h2><h3 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h3><p>任务队列就是用于保存等待执行的任务队列。<br>通过前面的介绍我们可以了解到线程池创建线程的流程：</p>
<ul>
<li>当线程数 &lt; corePoolSize 时，线程池会创建一个线程来执行任务，即使其他空闲的核心线程能够执行新任务也会创建线程。</li>
<li>当 corePoolSize =&lt; 线程数 &lt; maximumPoolSize，且任务队列已满时。线程池会创建新线程来处理任务。</li>
<li>当 maximumPoolSize &lt; 线程数时，且任务队列已满时，线程池会拒绝处理任务而抛出异常。</li>
</ul>
<p>因此，任务队列的类型也会影响到线程创建逻辑。<br>在源码中任务队列的类型是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">private final BlockingQueue&lt;Runnable&gt; workQueue;</div></pre></td></tr></table></figure>
<p>通过实现 <code>BlockingQueue</code> 接口，我们可以自定义任务队列。</p>
<ul>
<li>SynchronousQueue：<code>Executors.newCachedThreadPool()</code> 创建的是这种类型的队列。它也是无界队列。它的特点是在某次添加任务后必须等待其他线程取走后才能继续添加。</li>
<li>LinkedBlockingQueue：<code>Executors.newSingleThreadExecutor</code> 和 <code>Executors.newFixedThreadPool</code> 创建的是这种类型的队列。它也是无界队列。使用这种队列有可能造成会堆积大量的请求，从而导致 OOM。</li>
<li>DelayedWorkQueue：<code>Executors.newScheduledThreadPool</code> 创建的是这种类型的队列。</li>
<li>ArrayBlockingQueue：它是有界队列，队列的最大值可以指定，有助于防止资源耗尽。</li>
</ul>
<h3 id="Worker"><a href="#Worker" class="headerlink" title="Worker"></a>Worker</h3><p>Worker 就是线程池中任务的执行者，它的数量为 corePoolSize 的大小。<br>Worker 相当于对任务和线程的一层包装，它可以控制一些在线程执行过程中的中断操作。<br>Worker 继承自 <code>AbstractQueuedSynchronizer</code> 并且实现了 <code>Runnable</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">private final class Worker</div><div class="line">    extends AbstractQueuedSynchronizer</div><div class="line">    implements Runnable</div><div class="line">&#123;</div><div class="line">    private static final long serialVersionUID = 6138294804551838833L;</div><div class="line">    // Worker 运行的线程</div><div class="line">    final Thread thread;</div><div class="line">    // Worker 创建成功后执行的第一个任务。核心线程不为空，非核心线程为空</div><div class="line">    // 那么，如果firstTask执行完后，还会继续获取等待队列中的其他任务来执行。</div><div class="line">    Runnable firstTask;</div><div class="line">    volatile long completedTasks;</div><div class="line"></div><div class="line">    Worker(Runnable firstTask) &#123;</div><div class="line">        setState(-1); // inhibit interrupts until runWorker</div><div class="line">        this.firstTask = firstTask;</div><div class="line">        // 调用线程工厂创建线程</div><div class="line">        this.thread = getThreadFactory().newThread(this);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void run() &#123;</div><div class="line">        // Worker 开始工作</div><div class="line">        runWorker(this);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected boolean isHeldExclusively() &#123;</div><div class="line">        return getState() != 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected boolean tryAcquire(int unused) &#123;</div><div class="line">        if (compareAndSetState(0, 1)) &#123;</div><div class="line">            setExclusiveOwnerThread(Thread.currentThread());</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected boolean tryRelease(int unused) &#123;</div><div class="line">        setExclusiveOwnerThread(null);</div><div class="line">        setState(0);</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void lock()        &#123; acquire(1); &#125;</div><div class="line">    public boolean tryLock()  &#123; return tryAcquire(1); &#125;</div><div class="line">    public void unlock()      &#123; release(1); &#125;</div><div class="line">    public boolean isLocked() &#123; return isHeldExclusively(); &#125;</div><div class="line"></div><div class="line">    void interruptIfStarted() &#123;</div><div class="line">        Thread t;</div><div class="line">        if (getState() &gt;= 0 &amp;&amp; (t = thread) != null &amp;&amp; !t.isInterrupted()) &#123;</div><div class="line">            try &#123;</div><div class="line">                t.interrupt();</div><div class="line">            &#125; catch (SecurityException ignore) &#123;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实核心方法就是 <code>runWorker(Worker w)</code> 方法，这个方法会在后面的源码分析中介绍。</p>
<h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><p>当 <code>ThreadPoolExecutor</code> 创建好后，就会调用 <code>execute(Runnable command)</code> 方法来执行线程。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">public void execute(Runnable command) &#123;</div><div class="line">    if (command == null)</div><div class="line">        throw new NullPointerException();</div><div class="line">    int c = ctl.get();</div><div class="line">    // 如果当前线程池中线程的数量小于 corePoolSize</div><div class="line">    // 那么就直接创建线程添加到worker中，成功后直接返回</div><div class="line">    if (workerCountOf(c) &lt; corePoolSize) &#123;</div><div class="line">        if (addWorker(command, true))</div><div class="line">            return;</div><div class="line">        c = ctl.get();</div><div class="line">    &#125;</div><div class="line">    // 如果任务可以成功的添加到队列中</div><div class="line">    if (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</div><div class="line">        int recheck = ctl.get();</div><div class="line">        // 这里还要做二次确认</div><div class="line">        // 如果线程池不在运行了，而且成功的将该任务移除</div><div class="line">        // 执行拒绝策略</div><div class="line">        if (! isRunning(recheck) &amp;&amp; remove(command))</div><div class="line">            reject(command);</div><div class="line">        // 如果在运行阶段，但是Worker数量为0</div><div class="line">        // 则添加到worker中</div><div class="line">        else if (workerCountOf(recheck) == 0)</div><div class="line">            addWorker(null, false);</div><div class="line">    &#125;</div><div class="line">    // 如果无法添加到队列中，而且无法添加以非核心线程的形式添加 Worker</div><div class="line">    // 则执行拒绝策略</div><div class="line">    else if (!addWorker(command, false))</div><div class="line">        reject(command);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面再来看一下 <code>addWorker</code> 方法，该方法的主要作用就是</p>
<h3 id="创建Worker"><a href="#创建Worker" class="headerlink" title="创建Worker"></a>创建Worker</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">private boolean addWorker(Runnable firstTask, boolean core) &#123;</div><div class="line">    retry:</div><div class="line">    for (;;) &#123;</div><div class="line">        int c = ctl.get();</div><div class="line">        int rs = runStateOf(c);</div><div class="line"></div><div class="line">        // Check if queue empty only if necessary.</div><div class="line">        if (rs &gt;= SHUTDOWN &amp;&amp;</div><div class="line">            ! (rs == SHUTDOWN &amp;&amp;</div><div class="line">               firstTask == null &amp;&amp;</div><div class="line">               ! workQueue.isEmpty()))</div><div class="line">            return false;</div><div class="line"></div><div class="line">        for (;;) &#123;</div><div class="line">            int wc = workerCountOf(c);</div><div class="line">            if (wc &gt;= CAPACITY ||</div><div class="line">                wc &gt;= (core ? corePoolSize : maximumPoolSize))</div><div class="line">                return false;</div><div class="line">            if (compareAndIncrementWorkerCount(c))</div><div class="line">                break retry;</div><div class="line">            c = ctl.get();  // Re-read ctl</div><div class="line">            if (runStateOf(c) != rs)</div><div class="line">                continue retry;</div><div class="line">            // else CAS failed due to workerCount change; retry inner loop</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    boolean workerStarted = false;</div><div class="line">    boolean workerAdded = false;</div><div class="line">    Worker w = null;</div><div class="line">    try &#123;</div><div class="line">        w = new Worker(firstTask);</div><div class="line">        final Thread t = w.thread;</div><div class="line">        if (t != null) &#123;</div><div class="line">            final ReentrantLock mainLock = this.mainLock;</div><div class="line">            mainLock.lock();</div><div class="line">            try &#123;</div><div class="line">                // Recheck while holding lock.</div><div class="line">                // Back out on ThreadFactory failure or if</div><div class="line">                // shut down before lock acquired.</div><div class="line">                int rs = runStateOf(ctl.get());</div><div class="line"></div><div class="line">                if (rs &lt; SHUTDOWN ||</div><div class="line">                    (rs == SHUTDOWN &amp;&amp; firstTask == null)) &#123;</div><div class="line">                    if (t.isAlive()) // precheck that t is startable</div><div class="line">                        throw new IllegalThreadStateException();</div><div class="line">                    workers.add(w);</div><div class="line">                    int s = workers.size();</div><div class="line">                    if (s &gt; largestPoolSize)</div><div class="line">                        largestPoolSize = s;</div><div class="line">                    workerAdded = true;</div><div class="line">                &#125;</div><div class="line">            &#125; finally &#123;</div><div class="line">                mainLock.unlock();</div><div class="line">            &#125;</div><div class="line">            if (workerAdded) &#123;</div><div class="line">                t.start();</div><div class="line">                workerStarted = true;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; finally &#123;</div><div class="line">        if (! workerStarted)</div><div class="line">            addWorkerFailed(w);</div><div class="line">    &#125;</div><div class="line">    return workerStarted;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="执行任务"><a href="#执行任务" class="headerlink" title="执行任务"></a>执行任务</h3><p>执行任务是通过 Worker 的 run 方法发起的，核心方法就是 <code>runWorker(Worker w)</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">final void runWorker(Worker w) &#123;</div><div class="line">    Thread wt = Thread.currentThread();</div><div class="line">    // 获取创建 Worker 时获得的 firstTask</div><div class="line">    Runnable task = w.firstTask;</div><div class="line">    w.firstTask = null;</div><div class="line">    w.unlock(); // allow interrupts</div><div class="line">    boolean completedAbruptly = true;</div><div class="line">    try &#123;</div><div class="line">        // 如果 firstTask 不为空，或者是可以从任务队列中获取任务</div><div class="line">        // getTask() 是个阻塞方法，后面详细介绍</div><div class="line">        while (task != null || (task = getTask()) != null) &#123;</div><div class="line">            w.lock();</div><div class="line">            // 确认线程池和线程的工作状态</div><div class="line">            if ((runStateAtLeast(ctl.get(), STOP) ||</div><div class="line">                 (Thread.interrupted() &amp;&amp;</div><div class="line">                  runStateAtLeast(ctl.get(), STOP))) &amp;&amp;</div><div class="line">                !wt.isInterrupted())</div><div class="line">                wt.interrupt();</div><div class="line">            try &#123;</div><div class="line">                // 执行 beforeExecute 方法，这个方法默认是个空实现</div><div class="line">                // 可以在子类中定制</div><div class="line">                beforeExecute(wt, task);</div><div class="line">                Throwable thrown = null;</div><div class="line">                try &#123;</div><div class="line">                    // 执行任务</div><div class="line">                    task.run();</div><div class="line">                &#125; catch (RuntimeException x) &#123;</div><div class="line">                    thrown = x; throw x;</div><div class="line">                &#125; catch (Error x) &#123;</div><div class="line">                    thrown = x; throw x;</div><div class="line">                &#125; catch (Throwable x) &#123;</div><div class="line">                    thrown = x; throw new Error(x);</div><div class="line">                &#125; finally &#123;</div><div class="line">                    // 执行 beforeExecute 方法，这个方法默认是个空实现</div><div class="line">                    // 可以在子类中定制</div><div class="line">                    afterExecute(task, thrown);</div><div class="line">                &#125;</div><div class="line">            &#125; finally &#123;</div><div class="line">                // 执行执行完毕</div><div class="line">                // task赋值为null</div><div class="line">                task = null;</div><div class="line">                // 增加Worker执行的任务数</div><div class="line">                w.completedTasks++;</div><div class="line">                w.unlock();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        completedAbruptly = false;</div><div class="line">    &#125; finally &#123;</div><div class="line">        processWorkerExit(w, completedAbruptly);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>runWorker(Worker w)</code> 方法的任务就是来执行线程池中的任务，对于核心线程来说，当 firstTask 执行完毕后，它还会通过 <code>getTask()</code> 方法获取等待队列中的任务来执行，该方法会根据 <code>allowCoreThreadTimeOut</code> 的配置和当前核心线程的数量来决定是否阻塞，根据 <code>keepAliveTime</code> 的时间来决定阻塞多久。<br>下面就来看一下 <code>getTask()</code> 方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">private Runnable getTask() &#123;</div><div class="line">    boolean timedOut = false; // 初始值设置 timedOut 为false</div><div class="line"></div><div class="line">    for (;;) &#123;</div><div class="line">        int c = ctl.get();</div><div class="line">        int rs = runStateOf(c);</div><div class="line"></div><div class="line">        // Check if queue empty only if necessary.</div><div class="line">        if (rs &gt;= SHUTDOWN &amp;&amp; (rs &gt;= STOP || workQueue.isEmpty())) &#123;</div><div class="line">            decrementWorkerCount();</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        int wc = workerCountOf(c);</div><div class="line"></div><div class="line">        // 如果设置了 allowCoreThreadTimeOut 或者是 Worker的数量大于 corePoolSize</div><div class="line">        // 才会允许超时返回null</div><div class="line">        boolean timed = allowCoreThreadTimeOut || wc &gt; corePoolSize;</div><div class="line">        // 如果Worker的数量大于 maximumPoolSize 或者是允许超市且已经超时返回过一次</div><div class="line">        // 而且此时Worker数量大于1或者是等待队列已经没有任务了</div><div class="line">        if ((wc &gt; maximumPoolSize || (timed &amp;&amp; timedOut))</div><div class="line">            &amp;&amp; (wc &gt; 1 || workQueue.isEmpty())) &#123;</div><div class="line">            // 此时将 Workder的数量减1，并返回 null，在这种情况下Worker线程会退出。</div><div class="line">            if (compareAndDecrementWorkerCount(c))</div><div class="line">                return null;</div><div class="line">            continue;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        try &#123;</div><div class="line">            // 根据 timed，如果允许超时，则调用 poll 方法，并根据 keepAliveTime</div><div class="line">            // 设置超时返回</div><div class="line">            // 如果不允许超时，那么就调用 take 方法，会一直阻塞，直到由新任务出现</div><div class="line">            Runnable r = timed ?</div><div class="line">                workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :</div><div class="line">                workQueue.take();</div><div class="line">            if (r != null)</div><div class="line">                return r;</div><div class="line">            // 执行到这里说明是超时返回了，进行下一个循环</div><div class="line">            timedOut = true;</div><div class="line">        &#125; catch (InterruptedException retry) &#123;</div><div class="line">            timedOut = false;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      ThreadPoolExecutor 源码解析
    
    </summary>
    
      <category term="Java 并发" scheme="http://yoursite.com/categories/Java-%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="线程池" scheme="http://yoursite.com/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>Java 线程池 -- 线程池基础</title>
    <link href="http://yoursite.com/2015/09/01/java-thread-thread-pool-basic/"/>
    <id>http://yoursite.com/2015/09/01/java-thread-thread-pool-basic/</id>
    <published>2015-09-01T02:00:00.000Z</published>
    <updated>2019-03-14T06:17:34.534Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>谈到 Java 多线程，就不得不提起线程池，线程池的运用为线程生命周期的开销和资源不足问题提供了解决方案。<br>Executor 框架是 Java 线程池的一种实现方案。<br>与 Executor 框架相关的类有：Executor， ExecutorService， AbstractExecutorService， ThreadPoolExecutor， ScheduledExecutorService， ScheduledThreadPoolExecutor， CompletionService， ExecutorCompletionService， Future， Callable ， Executors 等。</p>
<h2 id="Executor-框架"><a href="#Executor-框架" class="headerlink" title="Executor 框架"></a>Executor 框架</h2><p>下面来看一下这些类的关系图：</p>
<p><img src="http://www.plantuml.com/plantuml/svg/XP5BJiOW58NdNGKRe2jmK3KwSAIf6q2uMbBADJoCWt_nVnFQbF8eGpZdWtFl6QnZnlb5TL8xCD-C0tdv1-uTciBL2EPFSkZObtM6SKUuOjQIn-sOseBwEHbWuXrHxVeclAAPtr3gLOh_7_a4mYiGwNEHvncNNmLEeZx_jIEv7i5F2laizS-71xyAEqCURfHceoPd4bpLZ3LXnVh-m0exwKf4TRML-v0kV_tIVouYXuFfCdkwxv2-NaUqT4eBjiQO3IekkEKjpXj5jqUbJUS0MlX5tG40" alt="效果图"></p>
<h3 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h3><p><code>Executor</code> 接口中之定义了一个方法 <code>execute（Runnable command）</code>，该方法接收一个 <code>Runable</code> 实例，它用来执行一个任务，即一个实现了 <code>Runnable</code> 接口的类。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface Executor &#123;</div><div class="line">    void execute(Runnable command);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="ExecutorService"><a href="#ExecutorService" class="headerlink" title="ExecutorService"></a>ExecutorService</h3><p><code>ExecutorService</code> 接口继承自 <code>Executor</code> 接口，它提供了更丰富的实现多线程的方法，比如，<code>ExecutorService</code> 不仅可以执行 <code>Runnable</code> 还可以执行 <code>Callable</code> 任务。<br>它还提供了关闭自己的方法，可以调用 <code>ExecutorService</code> 的 <code>shutdown()</code>方法来平滑地关闭 <code>ExecutorService</code>，调用该方法后，将导致 <code>ExecutorService</code> 停止接受任何新的任务且等待已经提交的任务执行完成(已经提交的任务会分两类：一类是已经在执行的，另一类是还没有开始执行的)，当所有已经提交的任务执行完毕后将会关闭 <code>ExecutorService</code>。<br>因此我们一般用该接口来实现和管理多线程。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public interface ExecutorService extends Executor &#123;</div><div class="line">  void shutdown();</div><div class="line">  List&lt;Runnable&gt; shutdownNow();</div><div class="line">  boolean isShutdown();</div><div class="line">  boolean isTerminated();</div><div class="line">  boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException;</div><div class="line">  &lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task);</div><div class="line">  &lt;T&gt; Future&lt;T&gt; submit(Runnable task, T result);</div><div class="line">  Future&lt;?&gt; submit(Runnable task);</div><div class="line">  &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks) throws InterruptedException;</div><div class="line">  &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks, long timeout, TimeUnit unit) throws InterruptedException;</div><div class="line">  &lt;T&gt; T invokeAny(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks) throws InterruptedException, ExecutionException;</div><div class="line">  &lt;T&gt; T invokeAny(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks, long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="AbstractExecutorService"><a href="#AbstractExecutorService" class="headerlink" title="AbstractExecutorService"></a>AbstractExecutorService</h3><p><code>AbstractExecutorService</code> 实现了 <code>ExecutorService</code> 接口，具体实现了 <code>submit</code>、<code>doInvokeAny</code>、<code>invokeAny</code> 和 <code>invokeAll</code> 方法。<br>它是个抽象类，<code>execute</code> 和 <code>shutdown()</code> 等方法还需要实现类来实现。</p>
<h3 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h3><p><code>ExecutorService</code> 的默认实现。</p>
<h3 id="ScheduledExecutorService"><a href="#ScheduledExecutorService" class="headerlink" title="ScheduledExecutorService"></a>ScheduledExecutorService</h3><p>调度线程池 <code>ScheduledExecutorService</code> 继承自 <code>ExecutorService</code> 接口，增加了 <code>schedule</code>、<code>scheduleAtFixedRate</code>、<code>scheduleWithFixedDelay</code> 方法。<br>它可以实现一些任务的调度工作，比如：实现定时程序、实现循环任务等。</p>
<h3 id="ScheduledThreadPoolExecutor"><a href="#ScheduledThreadPoolExecutor" class="headerlink" title="ScheduledThreadPoolExecutor"></a>ScheduledThreadPoolExecutor</h3><p><code>ScheduledExecutorService</code> 的实现类。</p>
<h3 id="CompletionService"><a href="#CompletionService" class="headerlink" title="CompletionService"></a>CompletionService</h3><p>异步获取并行任务执行结果的线程池接口。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public interface CompletionService&lt;V&gt; &#123;</div><div class="line">    Future&lt;V&gt; submit(Callable&lt;V&gt; task);</div><div class="line">    Future&lt;V&gt; submit(Runnable task, V result);</div><div class="line">    Future&lt;V&gt; take() throws InterruptedException;</div><div class="line">    Future&lt;V&gt; poll();</div><div class="line">    Future&lt;V&gt; poll(long timeout, TimeUnit unit) throws InterruptedException;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="ExecutorCompletionService"><a href="#ExecutorCompletionService" class="headerlink" title="ExecutorCompletionService"></a>ExecutorCompletionService</h3><p>实现了 <code>CompletionService</code> 接口，将 <code>Executor</code>（线程池）和 <code>BlockingQueue</code>（堵塞队列）结合在一起，同一时候使用Callable作为任务的基本单元，整个过程就是生产者不断把 <code>Callable</code> 任务放入堵塞队列，<code>Executor</code> 作为消费者不断把任务取出来运行，并返回结果。</p>
<h3 id="Executors"><a href="#Executors" class="headerlink" title="Executors"></a>Executors</h3><p>提供了一系列工厂方法用于创先线程池，返回的线程池都实现了 <code>ExecutorService</code> 接口。</p>
<ul>
<li>ExecutorService newFixedThreadPool(int nThreads) </li>
<li>ExecutorService newFixedThreadPool(int nThreads, ThreadFactory threadFactory)</li>
<li>ExecutorService newSingleThreadExecutor()</li>
<li>ExecutorService newSingleThreadExecutor(ThreadFactory threadFactory)</li>
<li>ExecutorService newCachedThreadPool()</li>
<li>ExecutorService newCachedThreadPool(ThreadFactory threadFactory)</li>
<li>ScheduledExecutorService newSingleThreadScheduledExecutor()</li>
<li>ScheduledExecutorService newSingleThreadScheduledExecutor(ThreadFactory threadFactory) </li>
<li>ScheduledExecutorService newScheduledThreadPool(int corePoolSize)</li>
<li>ScheduledExecutorService newScheduledThreadPool(int corePoolSize, ThreadFactory threadFactory) {</li>
</ul>
<p>上面的每个方法都有两个重载的方法，不同的是多了个 <code>ThreadFactory</code> 参数。这是个线程工厂类，为什么要使用线程工厂呢？其实就是为了统一在创建线程时设置一些参数，如是否守护线程。线程一些特性等，如优先级。通过这个 <code>TreadFactory</code> 创建出来的线程能保证有相同的特性。它首先是一个接口类，而且方法只有一个。就是创建一个线程。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface ThreadFactory &#123;</div><div class="line">    Thread newThread(Runnable r);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>newFixedThreadPool<ul>
<li>创建固定数目线程的线程池。</li>
<li>线程池中有可以重复使用的线程时就重复使用，没有的话就创建一个，但线程数量不能大于最大线程数。</li>
<li>任意时间点，最多只能有固定数目的活动线程存在，此时如果有新的任务要运行，只能放在另外的队列中等待，直到线程池中某个任务执行完有空闲线程出现。</li>
<li>FixedThreadPool 没有 IDLE 机制。</li>
</ul>
</li>
<li>newSingleThreadExecutor<ul>
<li>创建一个单线程化的Executor。</li>
</ul>
</li>
<li>newCachedThreadPool<ul>
<li>创建一个可缓存的线程池，调用execute将重用以前构造的线程（如果线程可用）。如果现有线程没有可用的，则创建一个新线 程并添加到池中。终止并从缓存中移除那些已有 60 秒钟未被使用的线程。</li>
<li>池线程数支持 0-Integer.MAX_VALUE(显然完全没考虑主机的资源承受能力）。</li>
<li>能重用的线程，必须是 timeout IDLE 内的池中线程，缺省 timeout 是 60s，超过这个 IDLE 时长，空闲线程将被移出线程池。</li>
</ul>
</li>
<li>newScheduledThreadPool<ul>
<li>创建一个可调度线程池</li>
<li>这个池子里的线程可以按 schedule 依次 delay 执行，或周期执行</li>
</ul>
</li>
<li>newSingleThreadScheduledExecutor<ul>
<li>创建一个单线程的可调度线程池</li>
</ul>
</li>
</ul>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="newFixedThreadPool"><a href="#newFixedThreadPool" class="headerlink" title="newFixedThreadPool"></a>newFixedThreadPool</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public void testExecutor() &#123;</div><div class="line">    ExecutorService executorService = Executors.newFixedThreadPool(2);</div><div class="line">    Runnable runnable = new Runnable() &#123;</div><div class="line">        @Override</div><div class="line">        public void run() &#123;</div><div class="line">            Log.e(&quot;Test&quot;,&quot;MyThread run &quot; +Thread.currentThread());</div><div class="line"></div><div class="line">            try &#123;</div><div class="line">                Thread.sleep(1000);</div><div class="line">            &#125; catch (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    for (int i = 0; i &lt; 5; i++) &#123;</div><div class="line">        executorService.execute(runnable);</div><div class="line">        try &#123;</div><div class="line">            Thread.sleep(100);</div><div class="line">        &#125; catch (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">21:58:00.796 E/Test: MyThread run Thread[pool-1-thread-1,5,main]</div><div class="line">21:58:00.896 E/Test: MyThread run Thread[pool-1-thread-2,5,main]</div><div class="line">21:58:01.797 E/Test: MyThread run Thread[pool-1-thread-1,5,main]</div><div class="line">21:58:01.899 E/Test: MyThread run Thread[pool-1-thread-2,5,main]</div><div class="line">21:58:02.799 E/Test: MyThread run Thread[pool-1-thread-1,5,main]</div></pre></td></tr></table></figure>
<p>可以看到，线程池在重复使用两个线程对象，同时只能有2个线程在执行，待执行的线程必须等到线程池中有空闲线程时才能执行。<br>如果把间隔事件改为大于一秒，执行结果为重复使用一个线程。</p>
<h3 id="newCachedThreadPool"><a href="#newCachedThreadPool" class="headerlink" title="newCachedThreadPool"></a>newCachedThreadPool</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">    public void testExecutor2() &#123;</div><div class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</div><div class="line">        Runnable runnable = new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                Log.e(&quot;Test&quot;,&quot;MyThread run &quot; +Thread.currentThread());</div><div class="line"></div><div class="line">                try &#123;</div><div class="line">                    Thread.sleep(1000);</div><div class="line">                &#125; catch (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        for (int i = 0; i &lt; 5; i++) &#123;</div><div class="line">            executorService.execute(runnable);</div><div class="line">//            try &#123;</div><div class="line">//                Thread.sleep(1000  * 5);</div><div class="line">//            &#125; catch (InterruptedException e) &#123;</div><div class="line">//                e.printStackTrace();</div><div class="line">//            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">20:51:31.532 E/Test: MyThread run Thread[pool-1-thread-2,5,main]</div><div class="line">20:51:31.533 E/Test: MyThread run Thread[pool-1-thread-1,5,main]</div><div class="line">20:51:31.538 E/Test: MyThread run Thread[pool-1-thread-3,5,main]</div><div class="line">20:51:31.539 E/Test: MyThread run Thread[pool-1-thread-5,5,main]</div><div class="line">20:51:31.539 E/Test: MyThread run Thread[pool-1-thread-4,5,main]</div></pre></td></tr></table></figure>
<p>添加上面代码中注释的部分，线程池执行任务的间隔为 5 秒，这种情况下当前任务执行完成后，下一个任务才开始执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">20:52:12.837 E/Test: MyThread run Thread[pool-1-thread-1,5,main]</div><div class="line">20:52:17.839 E/Test: MyThread run Thread[pool-1-thread-1,5,main]</div><div class="line">20:52:22.841 E/Test: MyThread run Thread[pool-1-thread-1,5,main]</div><div class="line">20:52:27.842 E/Test: MyThread run Thread[pool-1-thread-1,5,main]</div><div class="line">20:52:32.846 E/Test: MyThread run Thread[pool-1-thread-1,5,main]</div></pre></td></tr></table></figure>
<p>可以看到，线程池中重用第一个线程。<br>下面把间隔事件改为 62 秒，为什么改为62秒呢？因为线程池设定的 IDLE timeout 是 60 秒，这种情况下肯定也是当前任务执行完后下一个任务才开始执行，但是这种情况下并没有重用线程。符合上面的分析，缓存中那些已有 60 秒钟未被使用的线程将被移除出线程池。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">20:45:56.078 E/Test: MyThread run Thread[pool-1-thread-1,5,main]</div><div class="line">20:46:58.081 E/Test: MyThread run Thread[pool-1-thread-2,5,main]</div><div class="line">20:48:00.086 E/Test: MyThread run Thread[pool-1-thread-3,5,main]</div><div class="line">20:49:02.087 E/Test: MyThread run Thread[pool-1-thread-4,5,main]</div><div class="line">20:50:04.088 E/Test: MyThread run Thread[pool-1-thread-5,5,main]</div></pre></td></tr></table></figure>
<h3 id="ScheduledThreadPoolExecutor-1"><a href="#ScheduledThreadPoolExecutor-1" class="headerlink" title="ScheduledThreadPoolExecutor"></a>ScheduledThreadPoolExecutor</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public void testExecutor() &#123;</div><div class="line">    ScheduledThreadPoolExecutor executor = new ScheduledThreadPoolExecutor(2);</div><div class="line">    executor.scheduleAtFixedRate(new Runnable() &#123;</div><div class="line">        @Override</div><div class="line">        public void run() &#123;</div><div class="line">            Log.e(&quot;Test&quot;,&quot;MyThread run &quot; +Thread.currentThread());</div><div class="line">            try &#123;</div><div class="line">                Thread.sleep(2000);</div><div class="line">            &#125; catch (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;, 0, 1000, TimeUnit.MILLISECONDS);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">22:58:28.472 E/Test: MyThread run Thread[pool-1-thread-1,5,main]</div><div class="line">22:58:30.474 E/Test: MyThread run Thread[pool-1-thread-1,5,main]</div><div class="line">22:58:32.477 E/Test: MyThread run Thread[pool-1-thread-1,5,main]</div><div class="line">22:58:34.480 E/Test: MyThread run Thread[pool-1-thread-1,5,main]</div><div class="line">22:58:36.483 E/Test: MyThread run Thread[pool-1-thread-1,5,main]</div><div class="line">......</div></pre></td></tr></table></figure>
<h2 id="编程规范"><a href="#编程规范" class="headerlink" title="编程规范"></a>编程规范</h2><p>关于多线程，在阿里巴巴出品的《Java 开发手册》中提到：</p>
<ol>
<li><p>创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public class TimerTaskThread extends Thread &#123; </div><div class="line">   public TimerTaskThread() &#123;</div><div class="line">       super.setName(&quot;TimerTaskThread&quot;);</div><div class="line">       ... </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。</p>
<blockquote>
<p>说明:使用线程池的好处是减少在创建和销毁线程上所花的时间以及系统资源的开销，解决资源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者 “过度切换”的问题。</p>
</blockquote>
</li>
<li><p>线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。 </p>
<blockquote>
<p>说明:Executors 返回的线程池对象的弊端如下:<br>1)FixedThreadPool 和 SingleThreadPool:<br>允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。<br>2)CachedThreadPool 和 ScheduledThreadPool:<br>允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。</p>
</blockquote>
</li>
</ol>
<!--  

@startuml
interface Executor
interface ExecutorService
abstract class AbstractExecutorService
class ThreadPoolExecutor
class ForkJoinPool
interface ScheduledExecutorService

interface CompletionService
class ExecutorCompletionService

interface BlockingQueue

Executor <|-- ExecutorService
ExecutorService  <|-- ScheduledExecutorService
ScheduledExecutorService <|.. ScheduledThreadPoolExecutor

ExecutorService <|.. AbstractExecutorService
AbstractExecutorService <|-- ThreadPoolExecutor
AbstractExecutorService <|-- ForkJoinPool
ThreadPoolExecutor <|-- ScheduledThreadPoolExecutor

CompletionService <|.. ExecutorCompletionService
Executor <-- ExecutorCompletionService
AbstractExecutorService <-- ExecutorCompletionService
BlockingQueue <-- ExecutorCompletionService

ThreadPoolExecutor <.. Executors
ScheduledThreadPoolExecutor <.. Executors
@enduml

-->
]]></content>
    
    <summary type="html">
    
      本文介绍 Java 多线程编程中线程池的使用
    
    </summary>
    
      <category term="Java 并发" scheme="http://yoursite.com/categories/Java-%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="线程池" scheme="http://yoursite.com/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>Java 并发编程 -- Exchanger</title>
    <link href="http://yoursite.com/2015/08/08/java-thread-how-to-use-exchanger/"/>
    <id>http://yoursite.com/2015/08/08/java-thread-how-to-use-exchanger/</id>
    <published>2015-08-08T02:00:00.000Z</published>
    <updated>2019-03-14T06:13:58.340Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Exchanger 按字面意思理解是交换的意思。在Java并发编程中，引入了 <code>Exchanger</code> 类来实现不同线程之间数据的就交换。<br>它提供一个同步点，在这个同步点，两个线程可以交换彼此的数据。两个线程各自调用 <code>exchange</code> 方法进行交换，当线程 A 调用 <code>Exchange</code> 对象的 <code>exchange</code> 方法后，它会陷入阻塞状态，直到线程 B 也调用了 <code>exchange</code> 方法，然后以线程安全的方式交换数据，之后线程 A 和 B 继续运行。<br><code>exchange</code> 方法有两个重载实现：</p>
<ul>
<li><code>V exchange(V x)</code>：交换数据，返回从其他线程交换回来的数据。</li>
<li><code>V exchange(V x, long timeout, TimeUnit unit)</code>：可以设置超时时间，如果超过这个时间还没有与其他线程交换数据，则会抛出 <code>TimeoutException</code> 异常。</li>
</ul>
<p>这个类在遇到类似生产者和消费者问题时，是非常有用的。只是 <code>Exchange</code> 类只能同步2个线程，所以你只能在你的生产者和消费者问题中只有一个生产者和一个消费者时使用这个类。<br><code>Exchanger</code>可以用于遗传算法，遗传算法里需要选出两个人作为交配对象，这时候会交换两人的数据，并使用交叉规则得出2个交配结果。<br>它还可以用于校对工作，比如银行需要将银行流水录入电子银行流水，为了避免错误，采用AB两人进行录入，录入之后再加载两人的数据进行校对，看录入是否一致。</p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">public static void testExchanger() &#123;</div><div class="line">    Exchanger&lt;String&gt; exchanger = new Exchanger&lt;&gt;();</div><div class="line">    new Tomato(exchanger).start();</div><div class="line">    new Potato(exchanger).start();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static class Tomato extends Thread &#123;</div><div class="line">    private Exchanger mExchanger;</div><div class="line">    public Tomato (Exchanger exchanger) &#123;</div><div class="line">        mExchanger = exchanger;</div><div class="line">        setName(&quot;Tomato&quot;);</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        Log.e(getName() + &quot;Test&quot;,&quot;enter &quot;);</div><div class="line">        try &#123;</div><div class="line">            Thread.sleep(2000);</div><div class="line">        &#125; catch (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        Log.e(&quot;Test&quot;,getName() + &quot; after sleep &quot;);</div><div class="line">        try &#123;</div><div class="line">            Log.e(&quot;Test&quot;,getName() + &quot; exchanger =  &quot;+mExchanger.exchange(&quot;Tomato&quot;));</div><div class="line">        &#125; catch (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static class Potato extends Thread &#123;</div><div class="line">    private Exchanger mExchanger;</div><div class="line">    public Potato (Exchanger exchanger) &#123;</div><div class="line">        mExchanger = exchanger;</div><div class="line">        setName(&quot;Potato&quot;);</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        Log.e(getName() + &quot;Test&quot;,&quot;enter &quot;);</div><div class="line">        try &#123;</div><div class="line">            Thread.sleep(1000);</div><div class="line">        &#125; catch (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        Log.e(&quot;Test&quot;,getName() + &quot; after sleep &quot;);</div><div class="line">        try &#123;</div><div class="line">            Log.e(&quot;Test&quot;,getName() + &quot; exchanger =  &quot;+mExchanger.exchange(&quot;Potato&quot;));</div><div class="line">        &#125; catch (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">14:04:18.911 E/TomatoTest: enter </div><div class="line">14:04:18.911 E/PotatoTest: enter </div><div class="line">14:04:19.911 E/Test: Potato after sleep </div><div class="line">14:04:20.911 E/Test: Tomato after sleep </div><div class="line">14:04:20.911 E/Test: Tomato exchanger =  Potato</div><div class="line">14:04:20.911 E/Test: Potato exchanger =  Tomato</div></pre></td></tr></table></figure>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2>]]></content>
    
    <summary type="html">
    
      本文介绍 Exchanger 的使用
    
    </summary>
    
      <category term="Java 并发" scheme="http://yoursite.com/categories/Java-%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="Java 并发" scheme="http://yoursite.com/tags/Java-%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Java 并发编程 -- Semaphore</title>
    <link href="http://yoursite.com/2015/08/02/java-thread-how-to-use-semaphore/"/>
    <id>http://yoursite.com/2015/08/02/java-thread-how-to-use-semaphore/</id>
    <published>2015-08-02T02:00:00.000Z</published>
    <updated>2019-03-14T06:13:00.688Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在操作系统中，信号量是个很重要的概念，它在控制进程间的协作方面有着非常重要的作用，通过对信号量的不同操作，可以分别实现进程间的互斥与同步。当然它也可以用于多线程的控制，我们完全可以通过使用信号量来自定义实现类似 Java 中的 <code>synchronized</code>、<code>wait</code>、<code>notify</code> 机制。</p>
<p>Java 并发包中的信号量 <code>Semaphore</code> 实际上是一个功能完毕的计数信号量，从概念上讲，它维护了一个许可集合，对控制一定资源的消费与回收有着很重要的意义。<code>Semaphore</code> 可以控制某个资源被同时访问的任务数，它通过 <code>acquire()</code> 获取一个许可，<code>release()</code> 释放一个许可。如果被同时访问的任务数已满，则其他 <code>acquire</code> 的任务进入等待状态，直到有一个任务被 <code>release</code> 掉，它才能得到许可。<br><code>Semaphore</code> 仅仅是对资源的并发访问的任务数进行监控，而不会保证线程安全，因此，在访问的时候，要自己控制线程的安全访问。</p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>下面给出一个采用 <code>Semaphore</code> 控制并发访问数量的示例程序：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">Semaphore mSemaphore = new Semaphore(2);</div><div class="line">public void testSemaphore() &#123;</div><div class="line">    Thread thread1 = new Thread(new MyRunnable());</div><div class="line">    thread1.setName(&quot;Thread1&quot;);</div><div class="line">    Thread thread2 = new Thread(new MyRunnable());</div><div class="line">    thread2.setName(&quot;Thread2&quot;);</div><div class="line">    Thread thread3 = new Thread(new MyRunnable());</div><div class="line">    thread3.setName(&quot;Thread3&quot;);</div><div class="line">    Thread thread4 = new Thread(new MyRunnable());</div><div class="line">    thread4.setName(&quot;Thread4&quot;);</div><div class="line">    Thread thread5 = new Thread(new MyRunnable());</div><div class="line">    thread5.setName(&quot;Thread5&quot;);</div><div class="line"></div><div class="line">    thread1.start();</div><div class="line">    thread2.start();</div><div class="line">    thread3.start();</div><div class="line">    thread4.start();</div><div class="line">    thread5.start();</div><div class="line">&#125;</div><div class="line"></div><div class="line">private class MyRunnable implements Runnable&#123;</div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        try &#123;</div><div class="line">            Log.e(&quot;Test&quot;,&quot;Thread &quot;+Thread.currentThread().getName()+&quot; run&quot;);</div><div class="line">            mSemaphore.acquire();</div><div class="line">            Log.e(&quot;Test&quot;,&quot;Thread &quot;+Thread.currentThread().getName()+&quot; acquire&quot;);</div><div class="line">            Thread.sleep(1000);</div><div class="line">            mSemaphore.release();</div><div class="line">            Log.e(&quot;Test&quot;,&quot;Thread &quot;+Thread.currentThread().getName()+&quot; release&quot;);</div><div class="line">            Thread.sleep(1000);</div><div class="line">            Log.e(&quot;Test&quot;,&quot;Thread &quot;+Thread.currentThread().getName()+&quot; end&quot;);</div><div class="line">        &#125; catch (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">00:08:15.645 E/Test: Thread Thread1 run</div><div class="line">00:08:15.645 E/Test: Thread Thread1 acquire</div><div class="line">00:08:15.645 E/Test: Thread Thread5 run</div><div class="line">00:08:15.645 E/Test: Thread Thread5 acquire</div><div class="line">00:08:15.645 E/Test: Thread Thread3 run</div><div class="line">00:08:15.645 E/Test: Thread Thread4 run</div><div class="line">00:08:15.645 E/Test: Thread Thread2 run</div><div class="line">00:08:16.650 E/Test: Thread Thread1 release</div><div class="line">00:08:16.650 E/Test: Thread Thread5 release</div><div class="line">00:08:16.650 E/Test: Thread Thread3 acquire</div><div class="line">00:08:16.650 E/Test: Thread Thread4 acquire</div><div class="line">00:08:17.652 E/Test: Thread Thread5 end</div><div class="line">00:08:17.652 E/Test: Thread Thread3 release</div><div class="line">00:08:17.652 E/Test: Thread Thread1 end</div><div class="line">00:08:17.652 E/Test: Thread Thread4 release</div><div class="line">00:08:17.652 E/Test: Thread Thread2 acquire</div><div class="line">00:08:18.654 E/Test: Thread Thread3 end</div><div class="line">00:08:18.654 E/Test: Thread Thread4 end</div><div class="line">00:08:18.655 E/Test: Thread Thread2 release</div><div class="line">00:08:19.656 E/Test: Thread Thread2 end</div></pre></td></tr></table></figure>
<p>可以看出，Semaphore 允许并发访问 <code>mSemaphore.acquire()</code> 和 <code>mSemaphore.release()</code> 之间资源的任务数一直为 2。</p>
]]></content>
    
    <summary type="html">
    
      本文介绍 Semaphore 的使用
    
    </summary>
    
      <category term="Java 并发" scheme="http://yoursite.com/categories/Java-%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="Java 并发" scheme="http://yoursite.com/tags/Java-%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Java 并发编程 -- CyclicBarrier</title>
    <link href="http://yoursite.com/2015/07/28/java-thread-how-to-use-cyclicbarrier/"/>
    <id>http://yoursite.com/2015/07/28/java-thread-how-to-use-cyclicbarrier/</id>
    <published>2015-07-28T02:00:00.000Z</published>
    <updated>2019-03-14T06:12:28.532Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>前面的文章我们介绍了 <code>CountDownLatch</code>，本文我们会继续介绍另外一个并发编程中经常遇到的工具 CyclicBarrier。使用它可以使一组线程相互之间等待，达到一个共同点，再继续执行。<br>我们可以把它理解成一个障碍，所有的线程必须到齐后才能一起通过这个障碍。<br>关于它和 <code>CountDownLatch</code>，可以对比我的上一篇关于 <code>CountDownLatch</code> 的博客。<br><code>CountDownLatch</code> 更像是一个计数器，等待线程等待计数器为0后才会继续执行。而 <code>CyclicBarrier</code> 是所有参与的线程都要等待达到某个条件后再一起执行。<br>另外还有重要一点：<code>CountDownLatch</code> 是只触发一次的事件，而 <code>CyclicBarrier</code> 可以多次重用。可以调用 <code>reset()</code> 来实现重用。</p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">public void testCyclicBarrier() &#123;</div><div class="line">    final CyclicBarrier cyclicBarrier = new CyclicBarrier(3, new Runnable() &#123;</div><div class="line">        @Override</div><div class="line">        public void run() &#123;</div><div class="line">            Log.e(&quot;Test&quot;, &quot;run barrier thread&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    Thread thread1 = new Thread(new MyRunnable(cyclicBarrier, 1000));</div><div class="line">    thread1.setName(&quot;Thread1&quot;);</div><div class="line">    Thread thread2 = new Thread(new MyRunnable(cyclicBarrier, 2000));</div><div class="line">    thread2.setName(&quot;Thread2&quot;);</div><div class="line">    Thread thread3 = new Thread(new MyRunnable(cyclicBarrier, 3000));</div><div class="line">    thread3.setName(&quot;Thread3&quot;);</div><div class="line">    thread1.start();</div><div class="line">    thread2.start();</div><div class="line">    thread3.start();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static class MyRunnable implements Runnable&#123;</div><div class="line">    private int mSleepTime;</div><div class="line">    private CyclicBarrier mCyclicBarrier;</div><div class="line">    public MyRunnable(CyclicBarrier cyclicBarrier,int sleepTime) &#123;</div><div class="line">        mSleepTime = sleepTime;</div><div class="line">        mCyclicBarrier = cyclicBarrier;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        try &#123;</div><div class="line">            Log.e(&quot;Test&quot;, &quot;run &quot;+Thread.currentThread().getName());</div><div class="line">            Thread.sleep(mSleepTime);</div><div class="line">            Log.e(&quot;Test&quot;, Thread.currentThread().getName()+&quot; await&quot;);</div><div class="line">            int index = mCyclicBarrier.await();</div><div class="line">            Log.e(&quot;Test&quot;, Thread.currentThread().getName()+&quot; end &quot;+index);</div><div class="line">        &#125; catch (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (BrokenBarrierException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">19:40:23.017 E/Test: run Thread1</div><div class="line">19:40:23.017 E/Test: run Thread2</div><div class="line">19:40:23.017 E/Test: run Thread3</div><div class="line">19:40:24.017 E/Test: Thread1 await</div><div class="line">19:40:25.017 E/Test: Thread2 await</div><div class="line">19:40:26.019 E/Test: Thread3 await</div><div class="line">19:40:26.020 E/Test: run barrier thread</div><div class="line">19:40:26.020 E/Test: Thread3 end 0</div><div class="line">19:40:26.021 E/Test: Thread1 end 2</div><div class="line">19:40:26.024 E/Test: Thread2 end 1</div></pre></td></tr></table></figure>
<p>所有的线程都到达等待点后，会和 Barrier 线程再一起往下执行。</p>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>下面来简单的分析一下源码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div></pre></td><td class="code"><pre><div class="line">public class CyclicBarrier &#123;</div><div class="line">    private static class Generation &#123;</div><div class="line">        // 此变量来表示当前障碍是否突破</div><div class="line">        boolean broken;         // initially false</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //所有方法都通过这个锁来同步。</div><div class="line">    private final ReentrantLock lock = new ReentrantLock();</div><div class="line">    ////通过lock得到的一个状态变量</div><div class="line">    private final Condition trip = lock.newCondition();</div><div class="line">    // 构造方法中传入的总的等待线程的数量</div><div class="line">    private final int parties;</div><div class="line">    //当障碍突破后运行的程序，通过最后一个调用await的线程来执行</div><div class="line">    private final Runnable barrierCommand;</div><div class="line">    //当前的Generation。每当障碍失效或者突破之后都会自动替换掉。</div><div class="line">    //从而实现重置的功能。</div><div class="line">    private Generation generation = new Generation();</div><div class="line">    </div><div class="line">    //当前还未到达屏障的线程数量</div><div class="line">    //当障碍突破或者重置后它的值会被重置为parties</div><div class="line">    private int count;</div><div class="line"></div><div class="line">    //重新生成新的Generation</div><div class="line">    private void nextGeneration() &#123;</div><div class="line">        trip.signalAll();</div><div class="line">        count = parties;</div><div class="line">        generation = new Generation();</div><div class="line">    &#125;</div><div class="line">    // 突破屏障</div><div class="line">    private void breakBarrier() &#123;</div><div class="line">        generation.broken = true;</div><div class="line">        count = parties;</div><div class="line">        trip.signalAll();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private int dowait(boolean timed, long nanos)</div><div class="line">        throws InterruptedException, BrokenBarrierException,</div><div class="line">               TimeoutException &#123;</div><div class="line">        final ReentrantLock lock = this.lock;</div><div class="line">        lock.lock();</div><div class="line">        try &#123;</div><div class="line">            final Generation g = generation;</div><div class="line"></div><div class="line">            if (g.broken)</div><div class="line">                throw new BrokenBarrierException();</div><div class="line"></div><div class="line">            if (Thread.interrupted()) &#123;</div><div class="line">                breakBarrier();</div><div class="line">                throw new InterruptedException();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            int index = --count;</div><div class="line">            // 开始突破障碍</div><div class="line">            if (index == 0) &#123;  // tripped</div><div class="line">                boolean ranAction = false;</div><div class="line">                try &#123;</div><div class="line">                    final Runnable command = barrierCommand;</div><div class="line">                    // 执行参数传入的runnable</div><div class="line">                    if (command != null)</div><div class="line">                        command.run();</div><div class="line">                    ranAction = true;</div><div class="line">                    // 重新生成 Generation</div><div class="line">                    nextGeneration();</div><div class="line">                    return 0;</div><div class="line">                &#125; finally &#123;</div><div class="line">                    if (!ranAction)</div><div class="line">                        breakBarrier();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            // loop until tripped, broken, interrupted, or timed out</div><div class="line">            // </div><div class="line">            for (;;) &#123;</div><div class="line">                try &#123;</div><div class="line">                    // 加入到等待队列并释放锁，让其它线程进入</div><div class="line">                    if (!timed)</div><div class="line">                        trip.await();</div><div class="line">                    else if (nanos &gt; 0L)</div><div class="line">                        nanos = trip.awaitNanos(nanos);</div><div class="line">                &#125; catch (InterruptedException ie) &#123;</div><div class="line">                    if (g == generation &amp;&amp; ! g.broken) &#123;</div><div class="line">                        breakBarrier();</div><div class="line">                        throw ie;</div><div class="line">                    &#125; else &#123;</div><div class="line">                        Thread.currentThread().interrupt();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                if (g.broken)</div><div class="line">                    throw new BrokenBarrierException();</div><div class="line"></div><div class="line">                if (g != generation)</div><div class="line">                    return index;</div><div class="line"></div><div class="line">                if (timed &amp;&amp; nanos &lt;= 0L) &#123;</div><div class="line">                    breakBarrier();</div><div class="line">                    throw new TimeoutException();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; finally &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public CyclicBarrier(int parties, Runnable barrierAction) &#123;</div><div class="line">        if (parties &lt;= 0) throw new IllegalArgumentException();</div><div class="line">        this.parties = parties;</div><div class="line">        this.count = parties;</div><div class="line">        this.barrierCommand = barrierAction;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public CyclicBarrier(int parties) &#123;</div><div class="line">        this(parties, null);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int getParties() &#123;</div><div class="line">        return parties;</div><div class="line">    &#125;</div><div class="line">    // 返回值表示还未到达屏障的线程数量</div><div class="line">    public int await() throws InterruptedException, BrokenBarrierException &#123;</div><div class="line">        try &#123;</div><div class="line">            return dowait(false, 0L);</div><div class="line">        &#125; catch (TimeoutException toe) &#123;</div><div class="line">            throw new Error(toe); // cannot happen</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int await(long timeout, TimeUnit unit)</div><div class="line">        throws InterruptedException,</div><div class="line">               BrokenBarrierException,</div><div class="line">               TimeoutException &#123;</div><div class="line">        return dowait(true, unit.toNanos(timeout));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public boolean isBroken() &#123;</div><div class="line">        final ReentrantLock lock = this.lock;</div><div class="line">        lock.lock();</div><div class="line">        try &#123;</div><div class="line">            return generation.broken;</div><div class="line">        &#125; finally &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 重置屏障</div><div class="line">    public void reset() &#123;</div><div class="line">        final ReentrantLock lock = this.lock;</div><div class="line">        lock.lock();</div><div class="line">        try &#123;</div><div class="line">            breakBarrier();   // break the current generation</div><div class="line">            nextGeneration(); // start a new generation</div><div class="line">        &#125; finally &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    // 已到达屏障的线程数量</div><div class="line">    public int getNumberWaiting() &#123;</div><div class="line">        final ReentrantLock lock = this.lock;</div><div class="line">        lock.lock();</div><div class="line">        try &#123;</div><div class="line">            return parties - count;</div><div class="line">        &#125; finally &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      本文介绍 CyclicBarrier 的使用
    
    </summary>
    
      <category term="Java 并发" scheme="http://yoursite.com/categories/Java-%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="Java 并发" scheme="http://yoursite.com/tags/Java-%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Java 并发编程 -- CountDownLatch</title>
    <link href="http://yoursite.com/2015/07/25/java-thread-how-to-use-countdownlatch/"/>
    <id>http://yoursite.com/2015/07/25/java-thread-how-to-use-countdownlatch/</id>
    <published>2015-07-25T02:00:00.000Z</published>
    <updated>2019-03-14T06:11:46.754Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>CountDownLatch</code> 是我们在并发编程中很常见的工具，我们可以使用它来进行线程的同步。它维护一个计数器，等待 <code>CountDownLatch</code> 的线程必须等到计数器为 0 时才可以继续执行。 </p>
<h2 id="CountDownLatch-的使用"><a href="#CountDownLatch-的使用" class="headerlink" title="CountDownLatch 的使用"></a>CountDownLatch 的使用</h2><p>我们可以在下面场景中使用 <code>CountDownLatch</code>：</p>
<ul>
<li>某个线程等待某个或n个线程执行完某个操作，比如完成某个任务，然后再继续执行</li>
<li>n个线程等待某个或n个线程执行完某个操作，比如满足某个条件，然后再继续执行</li>
</ul>
<p>先来看一下 CountDownLatch 的几个方法：</p>
<ul>
<li>await()：当前线程等待计数器为0；</li>
<li>await(long timeout, TimeUnit unit)：和 await 一样，不同的是添加了一个超时时间</li>
<li>countDown()：计数器减一</li>
<li>getCount()：获取当前计数器的值</li>
</ul>
<p>下面我们通过两个demo来实现一下上面两个场景的应用。</p>
<h3 id="场景一"><a href="#场景一" class="headerlink" title="场景一"></a>场景一</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">public void testCountDownLatch() &#123;</div><div class="line">    final CountDownLatch countDownLatch = new CountDownLatch(3);</div><div class="line">    Thread thread1 = new Thread(new Runnable() &#123;</div><div class="line">        @Override</div><div class="line">        public void run() &#123;</div><div class="line">            try &#123;</div><div class="line">                Log.e(&quot;Test&quot;, &quot;run thread1 0&quot;);</div><div class="line">                Thread.sleep(1000);</div><div class="line">                countDownLatch.countDown();</div><div class="line">                Log.e(&quot;Test&quot;, &quot;run thread1 1&quot;);</div><div class="line">                Thread.sleep(1000);</div><div class="line">                countDownLatch.countDown();</div><div class="line">                Log.e(&quot;Test&quot;, &quot;thread1 end&quot;);</div><div class="line">            &#125; catch (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    Thread thread2 = new Thread(new Runnable() &#123;</div><div class="line">        @Override</div><div class="line">        public void run() &#123;</div><div class="line">            try &#123;</div><div class="line">                Log.e(&quot;Test&quot;, &quot;run thread2 0&quot;);</div><div class="line">                Thread.sleep(3000);</div><div class="line">                countDownLatch.countDown();</div><div class="line">                Log.e(&quot;Test&quot;, &quot;thread2 end&quot;);</div><div class="line">            &#125; catch (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    Thread thread3 = new Thread(new Runnable() &#123;</div><div class="line">        @Override</div><div class="line">        public void run() &#123;</div><div class="line">            try &#123;</div><div class="line">                Log.e(&quot;Test&quot;, &quot;run thread3 0&quot;);</div><div class="line">                countDownLatch.await();</div><div class="line">                Log.e(&quot;Test&quot;, &quot;thread3 end&quot;);</div><div class="line">            &#125; catch (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    thread1.start();</div><div class="line">    thread2.start();</div><div class="line">    thread3.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">22:38:25.283 E/Test: run thread3 0</div><div class="line">22:38:25.283 E/Test: run thread2 0</div><div class="line">22:38:25.284 E/Test: run thread1 0</div><div class="line">22:38:26.287 E/Test: run thread1 1</div><div class="line">22:38:27.291 E/Test: thread1 end</div><div class="line">22:38:28.285 E/Test: thread2 end</div><div class="line">22:38:28.285 E/Test: thread3 end</div></pre></td></tr></table></figure>
<h3 id="场景二"><a href="#场景二" class="headerlink" title="场景二"></a>场景二</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">public void testCountDownLatch() &#123;</div><div class="line">    final CountDownLatch countDownLatch = new CountDownLatch(1);</div><div class="line">    Thread thread1 = new Thread(new Runnable() &#123;</div><div class="line">        @Override</div><div class="line">        public void run() &#123;</div><div class="line">            try &#123;</div><div class="line">                Log.e(&quot;Test&quot;, &quot;run thread1 0&quot;);</div><div class="line">                countDownLatch.await();</div><div class="line">                Log.e(&quot;Test&quot;, &quot;thread1 end&quot;);</div><div class="line">            &#125; catch (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    Thread thread2 = new Thread(new Runnable() &#123;</div><div class="line">        @Override</div><div class="line">        public void run() &#123;</div><div class="line">            try &#123;</div><div class="line">                Log.e(&quot;Test&quot;, &quot;run thread2 0&quot;);</div><div class="line">                countDownLatch.await();</div><div class="line">                Log.e(&quot;Test&quot;, &quot;thread2 end&quot;);</div><div class="line">            &#125; catch (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    Thread thread3 = new Thread(new Runnable() &#123;</div><div class="line">        @Override</div><div class="line">        public void run() &#123;</div><div class="line">            try &#123;</div><div class="line">                Log.e(&quot;Test&quot;, &quot;run thread3 0&quot;);</div><div class="line">                Thread.sleep(2000);</div><div class="line">                countDownLatch.countDown();</div><div class="line">                Log.e(&quot;Test&quot;, &quot;thread3 end&quot;);</div><div class="line">            &#125; catch (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    thread1.start();</div><div class="line">    thread2.start();</div><div class="line">    thread3.start();</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">22:43:56.425 E/Test: run thread1 0</div><div class="line">22:43:56.425 E/Test: run thread2 0</div><div class="line">22:43:56.427 E/Test: run thread3 0</div><div class="line">22:43:58.429 E/Test: thread3 end</div><div class="line">22:43:58.429 E/Test: thread1 end</div><div class="line">22:43:58.429 E/Test: thread2 end</div></pre></td></tr></table></figure>
<h2 id="使用须知"><a href="#使用须知" class="headerlink" title="使用须知"></a>使用须知</h2><p>计数器的值只能在构造方法中初始化一次，之后没有方法再次对其设置值，当 <code>CountDownLatch</code> 使用完毕后，它不能再次被使用。</p>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>知道怎么使用之后，我们就按照惯例来看一下源码，看看它的原理是怎么样的？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">public class CountDownLatch &#123;</div><div class="line">    private static final class Sync extends AbstractQueuedSynchronizer &#123;</div><div class="line">        private static final long serialVersionUID = 4982264981922014374L;</div><div class="line"></div><div class="line">        Sync(int count) &#123;</div><div class="line">            setState(count);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        int getCount() &#123;</div><div class="line">            return getState();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        protected int tryAcquireShared(int acquires) &#123;</div><div class="line">            return (getState() == 0) ? 1 : -1;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        protected boolean tryReleaseShared(int releases) &#123;</div><div class="line">            // Decrement count; signal when transition to zero</div><div class="line">            for (;;) &#123;</div><div class="line">                int c = getState();</div><div class="line">                if (c == 0)</div><div class="line">                    return false;</div><div class="line">                int nextc = c - 1;</div><div class="line">                if (compareAndSetState(c, nextc))</div><div class="line">                    return nextc == 0;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private final Sync sync;</div><div class="line"></div><div class="line">    public CountDownLatch(int count) &#123;</div><div class="line">        if (count &lt; 0) throw new IllegalArgumentException(&quot;count &lt; 0&quot;);</div><div class="line">        this.sync = new Sync(count);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void await() throws InterruptedException &#123;</div><div class="line">        sync.acquireSharedInterruptibly(1);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public boolean await(long timeout, TimeUnit unit)</div><div class="line">        throws InterruptedException &#123;</div><div class="line">        return sync.tryAcquireSharedNanos(1, unit.toNanos(timeout));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void countDown() &#123;</div><div class="line">        sync.releaseShared(1);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public long getCount() &#123;</div><div class="line">        return sync.getCount();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String toString() &#123;</div><div class="line">        return super.toString() + &quot;[Count = &quot; + sync.getCount() + &quot;]&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面就是 <code>CountDownLatch</code> 的全部源码，比较简单，重点在于变量 <code>sync</code>。<br>它是内部类 <code>Sync</code> 的一个对象，<code>Sync</code> 继承自 <code>AbstractQueuedSynchronizer</code>，<code>AbstractQueuedSynchronizer</code> (AQS)提供了一个FIFO队列，可以看做是一个可以用来实现锁以及其他需要同步功能的框架。它的使用依靠继承来完成，子类通过继承并实现所需的方法来管理同步状态。此类我们后面再详细介绍。<br><code>countDown()</code> 方法调用的是 AQS 的 <code>releaseShared(1)</code> 方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public final boolean releaseShared(int arg) &#123;</div><div class="line">    if (tryReleaseShared(arg)) &#123;</div><div class="line">        doReleaseShared();</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line">    return false;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此法方法会首先调用 Sync 实现的 <code>tryReleaseShared(1)</code> 方法，该方法的实现思路是把传入的参数减1,判断是否为0,如果为0,表示可以释放锁。</p>
]]></content>
    
    <summary type="html">
    
      本文介绍 CountDownLatch 的使用
    
    </summary>
    
      <category term="Java 并发" scheme="http://yoursite.com/categories/Java-%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="Java 并发" scheme="http://yoursite.com/tags/Java-%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Java 并发编程 -- ReentrantLock 与 Condition</title>
    <link href="http://yoursite.com/2015/07/20/java-thread-how-to-use-reentrantlock/"/>
    <id>http://yoursite.com/2015/07/20/java-thread-how-to-use-reentrantlock/</id>
    <published>2015-07-20T02:00:00.000Z</published>
    <updated>2019-03-14T06:11:04.551Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>ReentrantLock</code>  顾名思义就是可重入锁，即当前持有该锁的线程能够多次获取该锁，无需等待。</p>
<h2 id="ReentrantLock-和-synchronized-的区别"><a href="#ReentrantLock-和-synchronized-的区别" class="headerlink" title="ReentrantLock 和 synchronized 的区别"></a>ReentrantLock 和 synchronized 的区别</h2><h3 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h3><ul>
<li>都是可重入锁</li>
</ul>
<h3 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h3><ul>
<li><code>synchronized</code> 是依赖于JVM实现的，而 <code>ReenTrantLock</code> 是JDK实现的</li>
<li><code>synchronized</code> 的使用比较方便简洁，并且由编译器去保证锁的加锁和释放，而 <code>ReenTrantLock</code> 需要手工声明来加锁和释放锁，为了避免忘记手工释放锁造成死锁，所以最好在 <code>finally</code> 中声明释放锁。</li>
<li><code>ReenTrantLock</code> 可以指定是公平锁还是非公平锁。而 <code>synchronized</code> 只能是非公平锁。所谓的公平锁就是先等待的线程先获得锁。</li>
<li><code>ReenTrantLock</code> 提供了一个 <code>Condition</code>（条件）类，用来实现分组唤醒需要唤醒的线程们，而不是像 <code>synchronized</code> 要么随机唤醒一个线程要么唤醒全部线程。一个 <code>Condition</code> 对象的 <code>signal</code>（<code>signalAll</code>）方法和该对象的 <code>await</code> 方法是一一对应的，也就是一个 <code>Condition</code> 对象的 <code>signal</code>（<code>signalAll</code>）方法不能唤醒其他 <code>Condition</code> 对象的 <code>await</code> 方法。</li>
<li><code>ReenTrantLock</code> 提供了一种能够中断等待锁的线程的机制，通过 <code>lock.lockInterruptibly()</code> 来实现这个机制。</li>
</ul>
<h2 id="Condition-和-Object的wait和notify-notifyAll-的区别"><a href="#Condition-和-Object的wait和notify-notifyAll-的区别" class="headerlink" title="Condition 和 Object的wait和notify/notifyAll 的区别"></a>Condition 和 Object的wait和notify/notifyAll 的区别</h2><h3 id="类似点"><a href="#类似点" class="headerlink" title="类似点"></a>类似点</h3><ul>
<li><code>Condition</code> 对象的 <code>awiat</code> 方法和 <code>Object</code> 对象的 <code>wait</code> 方法等效。调用时也必须获得锁。</li>
<li><code>Condition</code> 对象的 <code>signal</code> 方法和 <code>Object</code> 对象的 <code>notify</code> 方法等效。调用时也必须获得锁。</li>
<li><code>Condition</code> 对象的 <code>signalAll</code> 方法和 <code>Object</code> 对象的 <code>notifyAll</code> 方法等效。调用时也必须获得锁。</li>
</ul>
<h3 id="不同点-1"><a href="#不同点-1" class="headerlink" title="不同点"></a>不同点</h3><ul>
<li>Condition能够支持多个等待队列（new 多个Condition对象），而Object方式只能支持一个</li>
</ul>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p><code>ReentrantLock(boolean fair)</code> 可以根据传入的参数来创建两种不同的锁：</p>
<ul>
<li>new ReentrantLock(true)：公平锁，线程获取锁的顺序是按照加锁顺序来的</li>
<li>new ReentrantLock(false)：非公平锁，抢锁机制，先lock的线程不一定先获得锁。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">private ReentrantLock mLock = new ReentrantLock();</div><div class="line">public void testReentrantLock() &#123;</div><div class="line">    Runnable runnable = new Runnable() &#123;</div><div class="line">        @Override</div><div class="line">        public void run() &#123;</div><div class="line">            mLock.lock();</div><div class="line">            try &#123;</div><div class="line">                Log.e(&quot;Test&quot;, Thread.currentThread().getName() + &quot; start&quot;);</div><div class="line">                Thread.sleep(1000);</div><div class="line">                Log.e(&quot;Test&quot;, Thread.currentThread().getName() + &quot; end&quot;);</div><div class="line">            &#125; catch (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125; finally &#123;</div><div class="line">                // 最好在finally代码块种释放</div><div class="line">                mLock.unlock();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    Thread thread1 = new Thread(runnable);</div><div class="line">    thread1.setName(&quot;Thread1&quot;);</div><div class="line">    thread1.setPriority(1);</div><div class="line">    Thread thread2 = new Thread(runnable);</div><div class="line">    thread2.setName(&quot;Thread2&quot;);</div><div class="line">    thread2.setPriority(2);</div><div class="line"></div><div class="line">    thread1.start();</div><div class="line">    thread2.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">17:16:01.072 E/Test: Thread1 start</div><div class="line">17:16:02.114 E/Test: Thread1 end</div><div class="line">17:16:02.115 E/Test: Thread2 start</div><div class="line">17:16:03.156 E/Test: Thread2 end</div></pre></td></tr></table></figure>
<p>配合 Condition 使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line">private ReentrantLock mLock = new ReentrantLock(true);</div><div class="line">private Condition condition1 = mLock.newCondition();</div><div class="line">private Condition condition2 = mLock.newCondition();</div><div class="line">public void testReentrantLock() &#123;</div><div class="line">    Thread thread1 = new Thread(new MyRunnable(condition1));</div><div class="line">    thread1.setName(&quot;Thread1&quot;);</div><div class="line">    Thread thread2 = new Thread(new MyRunnable(condition1));</div><div class="line">    thread2.setName(&quot;Thread2&quot;);</div><div class="line">    Thread thread3 = new Thread(new MyRunnable(condition2));</div><div class="line">    thread3.setName(&quot;Thread3&quot;);</div><div class="line">    Thread thread4 = new Thread(new Runnable() &#123;</div><div class="line">        @Override</div><div class="line">        public void run() &#123;</div><div class="line">            mLock.lock();</div><div class="line">            try &#123;</div><div class="line">                Log.e(&quot;Test&quot;, Thread.currentThread().getName() + &quot; start&quot;);</div><div class="line">                Thread.sleep(5000);</div><div class="line">                Log.e(&quot;Test&quot;, Thread.currentThread().getName() + &quot; condition1.signalAll()&quot;);</div><div class="line">                condition1.signalAll();</div><div class="line">                //Log.e(&quot;Test&quot;, Thread.currentThread().getName() + &quot; condition2.signalAll()&quot;);</div><div class="line">                //condition2.signalAll();</div><div class="line">                Thread.sleep(5000);</div><div class="line">                Log.e(&quot;Test&quot;, Thread.currentThread().getName() + &quot; end&quot;);</div><div class="line">            &#125; catch (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125; finally &#123;</div><div class="line">                mLock.unlock();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    thread4.setName(&quot;Thread4&quot;);</div><div class="line"></div><div class="line">    thread1.start();</div><div class="line">    try &#123;</div><div class="line">        Thread.sleep(10);</div><div class="line">    &#125; catch (InterruptedException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    thread2.start();</div><div class="line">    try &#123;</div><div class="line">        Thread.sleep(10);</div><div class="line">    &#125; catch (InterruptedException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    thread3.start();</div><div class="line">    try &#123;</div><div class="line">        Thread.sleep(10);</div><div class="line">    &#125; catch (InterruptedException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    thread4.start();</div><div class="line">&#125;</div><div class="line"></div><div class="line">private class MyRunnable implements Runnable&#123;</div><div class="line"></div><div class="line">    private Condition mCondition;</div><div class="line">    public MyRunnable(Condition condition) &#123;</div><div class="line">        mCondition = condition;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        mLock.lock();</div><div class="line">        try &#123;</div><div class="line">            Log.e(&quot;Test&quot;, Thread.currentThread().getName() + &quot; start&quot;);</div><div class="line">            Thread.sleep(1000);</div><div class="line">            Log.e(&quot;Test&quot;, Thread.currentThread().getName() + &quot; start await&quot;);</div><div class="line">            mCondition.await();</div><div class="line">            Log.e(&quot;Test&quot;, Thread.currentThread().getName() + &quot; end await&quot;);</div><div class="line">            Thread.sleep(1000);</div><div class="line">            Log.e(&quot;Test&quot;, Thread.currentThread().getName() + &quot; end&quot;);</div><div class="line">        &#125; catch (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; finally &#123;</div><div class="line">            mLock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">17:27:52.250 E/Test: Thread1 start</div><div class="line">17:27:53.251 E/Test: Thread1 start await</div><div class="line">17:27:53.252 E/Test: Thread2 start</div><div class="line">17:27:54.254 E/Test: Thread2 start await</div><div class="line">17:27:54.255 E/Test: Thread3 start</div><div class="line">17:27:55.259 E/Test: Thread3 start await</div><div class="line">17:27:55.260 E/Test: Thread4 start</div><div class="line">17:28:00.261 E/Test: Thread4 condition1.signalAll()</div><div class="line">17:28:05.264 E/Test: Thread4 end</div><div class="line">17:28:05.264 E/Test: Thread1 end await</div><div class="line">17:28:06.268 E/Test: Thread1 end</div><div class="line">17:28:06.269 E/Test: Thread2 end await</div><div class="line">17:28:07.273 E/Test: Thread2 end</div></pre></td></tr></table></figure>
<p>从这里可以看出，只调用 <code>condition1.signalAll()</code> 后，Thread3 后面没有被唤醒。<br>下面来看一下在 Thread4 中调用 <code>condition2.signalAll()</code> 的执行情况。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Log.e(&quot;Test&quot;, Thread.currentThread().getName() + &quot; condition1.signalAll()&quot;);</div><div class="line">condition1.signalAll();</div><div class="line">Log.e(&quot;Test&quot;, Thread.currentThread().getName() + &quot; condition2.signalAll()&quot;);</div><div class="line">condition2.signalAll();</div><div class="line">Thread.sleep(5000);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">17:36:23.026 E/Test: Thread1 start</div><div class="line">17:36:24.027 E/Test: Thread1 start await</div><div class="line">17:36:24.028 E/Test: Thread2 start</div><div class="line">17:36:25.031 E/Test: Thread2 start await</div><div class="line">17:36:25.032 E/Test: Thread3 start</div><div class="line">17:36:26.034 E/Test: Thread3 start await</div><div class="line">17:36:26.034 E/Test: Thread4 start</div><div class="line">17:36:31.039 E/Test: Thread4 condition1.signalAll()</div><div class="line">17:36:31.039 E/Test: Thread4 condition2.signalAll()</div><div class="line">17:36:36.044 E/Test: Thread4 end</div><div class="line">17:36:36.044 E/Test: Thread1 end await</div><div class="line">17:36:37.047 E/Test: Thread1 end</div><div class="line">17:36:37.047 E/Test: Thread2 end await</div><div class="line">17:36:38.048 E/Test: Thread2 end</div><div class="line">17:36:38.049 E/Test: Thread3 end await</div><div class="line">17:36:39.050 E/Test: Thread3 end</div></pre></td></tr></table></figure>
<p>Thread3 被唤醒，得到锁后得以继续执行。</p>
]]></content>
    
    <summary type="html">
    
      本文介绍 ReentrantLock 与 Condition 的使用
    
    </summary>
    
      <category term="Java 并发" scheme="http://yoursite.com/categories/Java-%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="Java 并发" scheme="http://yoursite.com/tags/Java-%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Java 并发编程 -- Lock</title>
    <link href="http://yoursite.com/2015/07/15/java-concurrent-interface-lock/"/>
    <id>http://yoursite.com/2015/07/15/java-concurrent-interface-lock/</id>
    <published>2015-07-15T02:00:00.000Z</published>
    <updated>2019-03-14T06:49:29.484Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>锁是用来控制多个线程访问共享资源的方式，一般来说，一个锁能够防止多个线程同时访问共享资源（有些锁可以允许多个线程并发的访问共享资源，比如读写锁）。在 Lock 接口出现之前，Java 程序是靠 synchronized 关键字实现锁功能的，而 Java SE 5 之后，并发包中新增了 Lock 接口（以及相关实现类）用来实现锁功能，它提供了与 synchronized 关键字类似的同步功能，只是在使用时需要显式地获取和释放锁。虽然它缺少了（通过synchronized块或者方法所提供的）隐式获取释放锁的便捷性，但是却拥有了锁获取与释放的便捷性、可中断的获取锁以及超时获取锁等多种 synchronized 关键字所不具备的同步特性。</p>
<h2 id="和-synchronized-区别"><a href="#和-synchronized-区别" class="headerlink" title="和 synchronized 区别"></a>和 synchronized 区别</h2><ul>
<li>尝试非阻塞地获取锁：当前线程尝试获取锁，如果这一时刻锁没有被其他线程获取到，则成功获取并持有锁，如果被其他线程持有，则立即返回false。</li>
<li>能被中断地获取锁：与synchronized 不同，获取到锁的线程能够响应中断，当获取到锁的线程被中断时，中断异常将会被抛出，同时锁会被释放。</li>
<li>超时获取锁：在指定的截止时间之前获取锁，如果截止时间到了仍旧无法获取锁，则返回</li>
</ul>
<h2 id="Lock-接口"><a href="#Lock-接口" class="headerlink" title="Lock 接口"></a>Lock 接口</h2><p>先来看一下 Lock 接口的类关系图：</p>
<p><img src="http://poc98qeya.bkt.clouddn.com/images/main/java-concurrency-interface-lock/interface-lock.png" alt="效果图"></p>
<p>Lock 接口的使用也很简单：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Lock lock = new ReentrantLock();</div><div class="line">lock.lock();</div><div class="line">try &#123;</div><div class="line">    </div><div class="line">&#125; finally &#123;</div><div class="line">    lock.unlock();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在finally块中释放锁，目的是保证在获取到锁之后，最终能够被释放。<br>另外，不要讲获取锁的过程写在try块中，因为如果在获取锁时发生了异常，异常抛出的同时，也会导致锁无故释放。</p>
<p>Lock 是一个接口，它定义了锁获取和释放的基本操作，Lock的API如下：</p>
<ul>
<li>lock()：获取锁，调用该方法后当前线程会获取锁，并返回</li>
<li>lockInterruptibly()：可中断地获取锁，该方法可以相应中断，在锁的获取中可以中断当前线程</li>
<li>tryLock()：尝试非阻塞地获取锁，调用该方法会立刻返回，成功获取锁返回true，否则返回false</li>
<li>tryLock(long time, TimeUnit unit)：超时地获取锁</li>
<li>unlock()：释放锁</li>
<li>newCondition()：获取等待通知组件，该组件和当前的锁绑定，当前线程只有获得了锁，才能调用该组件的wait方法，而调用后，当前线程释放锁</li>
</ul>
<!--
@startuml
Title "Lock关系图"
interface Lock {
  ~ package void lock()
  ~ package void lockInterruptibly()
  ~ package boolean tryLock()
  ~ package boolean tryLock(long time, TimeUnit unit)
  ~ package void unlock()
  ~ package Condition newCondition()
}

interface ReadWriteLock {
  ~ package Lock readLock()
  ~ package Lock writeLock()
}

abstract class AbstractOwnableSynchronizer
abstract class AbstractQueuedSynchronizer
abstract class Sync
class NonfairSync
class FairSync

Lock <|.. ReentrantLock
ReadWriteLock <|.. ReentrantReadWriteLock
Lock <|.. ReadLock
Lock <|.. WriteLock
ReadLock <-- ReentrantReadWriteLock
WriteLock <-- ReentrantReadWriteLock

AbstractOwnableSynchronizer <|-- AbstractQueuedSynchronizer
AbstractQueuedSynchronizer <|-- Sync
Sync <|-- NonfairSync
Sync <|-- FairSync
NonfairSync <-- ReentrantLock
FairSync <-- ReentrantLock
NonfairSync <-- ReentrantReadWriteLock
FairSync <-- ReentrantReadWriteLock
@enduml
-->
<!-- 
http://www.plantuml.com/plantuml/png/ZP3FJiCm3CRlUGfh9v3Ode33458b90HY375EMsz4ovmfTPZ67suy1O-n8n9lC_4Q92lTkYejNApuztrsR0yBbfRTN8knOetGkpJPRFE-_bv_RZw-Ua8Hevt83248y2m0tc0XivcS8ZmQbOFs_EWupYz2jNKBLgbUDKofCHeb0TjLQFs7gWrDWTKSJs3iunqf1kT3v6D7aP7E3UMAbI4WNEuIRteLjHr7AFDxgnWZoswHzOPgsgQsh0hBhZ8jsCgC8TEoAE3iDxrUaamrtgueUx26r1FQDkkDGuTvbpDeednU6Pf8PMiagLAn7U_qPJ204IAnbSG1YTsw4SE1LkiGU0FjRK4iUR_VrgfwTPf4nxdyfxwmuqXnQLyQY0YXJAlB7TAaGZKvJDmuOT8knGeZgoR_y0oHSZVNFm00
-->]]></content>
    
    <summary type="html">
    
      介绍Lock接口
    
    </summary>
    
      <category term="Java 并发" scheme="http://yoursite.com/categories/Java-%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="Java 并发" scheme="http://yoursite.com/tags/Java-%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Java 并发编程 -- synchronized、wait、notify和notifyAll的使用</title>
    <link href="http://yoursite.com/2015/07/12/java-thread-how-to-use-synchronized/"/>
    <id>http://yoursite.com/2015/07/12/java-thread-how-to-use-synchronized/</id>
    <published>2015-07-12T02:00:00.000Z</published>
    <updated>2019-03-14T06:09:39.663Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在并发编程中，多线程同时并发访问的资源叫做临界资源，当多个线程同时访问对象并要求操作相同资源时，分割了原子操作就有可能出现数据的不一致或数据不完整的情况，为避免这种情况的发生，我们会采取同步机制，以确保在某一时刻，方法内只允许有一个线程。它保证了线程对变量访问的<strong>可见性</strong>和<strong>互斥性</strong>。<br>采用 synchronized 修饰符实现的同步机制叫做互斥锁机制，它所获得的锁叫做互斥锁。每个对象都有一个 monitor (锁标记)，当线程拥有这个锁标记时才能访问这个资源，没有锁标记便进入锁池。任何一个对象系统都会为其创建一个互斥锁，这个锁是为了分配给线程的，防止打断原子操作。每个对象的锁只能分配给一个线程，因此叫做互斥锁。<br>synchronized 是可重入锁。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><table>
<thead>
<tr>
<th style="text-align:center">分类</th>
<th style="text-align:center">被锁对象</th>
<th style="text-align:center">代码</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">静态方法</td>
<td style="text-align:center">类对象</td>
<td style="text-align:center">public static synchronized void method() {}</td>
</tr>
<tr>
<td style="text-align:center">实例方法</td>
<td style="text-align:center">类的实例对象</td>
<td style="text-align:center">public synchronized void method() {}</td>
</tr>
<tr>
<td style="text-align:center">实例对象</td>
<td style="text-align:center">类的实例对象</td>
<td style="text-align:center">synchronized (this) {}</td>
</tr>
<tr>
<td style="text-align:center">class对象</td>
<td style="text-align:center">类对象</td>
<td style="text-align:center">synchronized (Demo.class) {}</td>
</tr>
<tr>
<td style="text-align:center">任意实例对象Object</td>
<td style="text-align:center">实例对象Object</td>
<td style="text-align:center">synchronized (mObject) {}</td>
</tr>
</tbody>
</table>
<p>前面两种是针对方法，后面三种是针对代码块。</p>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>synchronized 关键字经过编译后，会在同步块的前后分别形成 monitorenter 和 monitorexit 这两个字节码指令。根据虚拟机规范的要求，在执行 monitorenter 指令时，首先要尝试获取对象的锁，如果获得了锁，把锁的计数器加 1，相应地，在执行 monitorexit 指令时会将锁计数器减 1，当计数器为 0 时，锁便被释放了。由于 synchronized 同步块对同一个线程是可重入的，因此一个线程可以多次获得同一个对象的互斥锁，同样，要释放相应次数的该互斥锁，才能最终释放掉该锁。</p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">public void testSynchronized() &#123;</div><div class="line">    Thread thread1 = new Thread(new MyRunnable());</div><div class="line">    thread1.setName(&quot;Thread1&quot;);</div><div class="line"></div><div class="line">    Thread thread2 = new Thread(new MyRunnable());</div><div class="line">    thread2.setName(&quot;Thread2&quot;);</div><div class="line"></div><div class="line">    Thread thread3 = new Thread(new MyRunnable());</div><div class="line">    thread3.setName(&quot;Thread3&quot;);</div><div class="line"></div><div class="line">    thread1.start();</div><div class="line">    thread2.start();</div><div class="line">    thread3.start();</div><div class="line">&#125;</div><div class="line"></div><div class="line">class MyRunnable implements Runnable&#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        synchronized (mObject) &#123;</div><div class="line">            try &#123;</div><div class="line">                Log.e(&quot;Test&quot;, Thread.currentThread().getName() + &quot; start&quot;);</div><div class="line">                Thread.sleep(1000);</div><div class="line">                Log.e(&quot;Test&quot;, Thread.currentThread().getName() + &quot; end&quot;);</div><div class="line">            &#125; catch (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">03-09 16:54:07.328 Thread1 start</div><div class="line">03-09 16:54:08.329 Thread1 end</div><div class="line">03-09 16:54:08.329 Thread2 start</div><div class="line">03-09 16:54:09.329 Thread2 end</div><div class="line">03-09 16:54:09.330 Thread3 start</div><div class="line">03-09 16:54:10.330 Thread3 end</div></pre></td></tr></table></figure>
<p>可以看到 Thread1 加锁代码块首先执行，首先获得类对象锁，后面 Thread2 和 Thread3 run 方法执行到加锁代码块时进入阻塞状态，Thread1 代码块执行完释放锁之后 Thread2 进入就绪状态并进入运行状态开始执行对应代码块，依次类推 Thead3。3个线程串行执行。</p>
<h2 id="wait、notify和notifyAll"><a href="#wait、notify和notifyAll" class="headerlink" title="wait、notify和notifyAll"></a>wait、notify和notifyAll</h2><p>任意一个 Java 对象，都拥有一组监视器方法（定义在 java.lang.Object 上），主要包括 wait、notify和notifyAll 及其重载的方法，这些方法和 synchronized 同步关键字配合使用，可以用来在多线程间通信，实现等待/通知机制。</p>
<h3 id="方法介绍"><a href="#方法介绍" class="headerlink" title="方法介绍"></a>方法介绍</h3><ul>
<li>wait()：释放当前对象锁，并进入阻塞队列</li>
<li>wait(long millis)：可以设置等待的超时时间</li>
<li>wait(long millis, int nanos)：后面一个参数可以附件设置一个纳秒级别的时间，增加超时时间的精度</li>
<li>notify()：唤醒当前对象阻塞队列里的任一线程（并不保证唤醒哪一个）</li>
<li>notifyAll()：唤醒当前对象阻塞队列里的所有线程</li>
</ul>
<p>这几个方法必须要和 synchronized 一起使用，否则会报错。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java.lang.IllegalMonitorStateException: object not locked by thread before wait()</div></pre></td></tr></table></figure>
<p>再来简单介绍一下这几个方法的特点：</p>
<ul>
<li>wait、notify 和 notifyAll 方法是 Object 的方法，而且是 final 方法，无法被重写。</li>
<li>wait 会使当前的线程进入等待状态，而且它会释放当前的锁，然后让出CPU，进入等待状态。但前提是必须先获得锁。</li>
<li>wait、notify 和 notifyAll 一般是配合 synchronized 使用，用在 synchronized 方法或者代码块内，否则会抛出异常。</li>
<li>当 notify/notifyAll() 被执行时候，才会唤醒一个或多个正处于等待状态的线程，然后继续往下执行，直到执行完 synchronized 代码块的代码或是中途遇到wait() ，再次释放锁。</li>
<li>notify/notifyAll() 的执行只是唤醒沉睡的线程，而不会立即释放锁，调用线程依旧持有锁。锁的释放要看代码块的具体执行情况。因此，线程虽被唤醒，但是仍无法获得锁。直到调用线程退出 synchronized 方法或者代码块，释放锁后，等待线程中的一个才有机会获得锁继续执行。所以在编程中，尽量在使用了notify/notifyAll() 后立即退出 synchronized 临界区，以便其他线程唤醒并获得锁以继续执行。</li>
<li>notify方法只唤醒一个等待（对象的）线程并使该线程开始执行。如果有多个线程等待一个对象，这个方法只会唤醒其中一个线程，选择哪个线程取决于操作系统对多线程管理的实现。notifyAll 会唤醒所有等待(对象的)线程。如果当前情况下有多个线程需要被唤醒，推荐使用notifyAll 方法。</li>
</ul>
<h3 id="代码测试-wait"><a href="#代码测试-wait" class="headerlink" title="代码测试 wait"></a>代码测试 wait</h3><p>创建两个 Runnable 对象，在 Thread2 代码执行中间加入 <code>wait()</code> 方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">public void testSynchronized() &#123;</div><div class="line">    Thread thread1 = new Thread(new MyRunnable1());</div><div class="line">    thread1.setName(&quot;Thread1&quot;);</div><div class="line"></div><div class="line">    Thread thread2 = new Thread(new MyRunnable2());</div><div class="line">    thread2.setName(&quot;Thread2&quot;);</div><div class="line"></div><div class="line">    thread2.start();</div><div class="line">    thread1.start();</div><div class="line">&#125;</div><div class="line"></div><div class="line">class MyRunnable1 implements Runnable&#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        synchronized (mObject) &#123;</div><div class="line">            try &#123;</div><div class="line">                Log.e(&quot;Test&quot;, Thread.currentThread().getName() + &quot; start&quot;);</div><div class="line">                Thread.sleep(1000);</div><div class="line">                Log.e(&quot;Test&quot;, Thread.currentThread().getName() + &quot; end&quot;);</div><div class="line">            &#125; catch (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class MyRunnable2 implements Runnable&#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        synchronized (mObject) &#123;</div><div class="line">            try &#123;</div><div class="line">                Log.e(&quot;Test&quot;, Thread.currentThread().getName() + &quot; start&quot;);</div><div class="line">                Thread.sleep(1000);</div><div class="line">                Log.e(&quot;Test&quot;, Thread.currentThread().getName() + &quot; wait&quot;);</div><div class="line">                mObject.wait();</div><div class="line">                Log.e(&quot;Test&quot;, Thread.currentThread().getName() + &quot; after wait&quot;);</div><div class="line">                Thread.sleep(1000);</div><div class="line">                Log.e(&quot;Test&quot;, Thread.currentThread().getName() + &quot; end&quot;);</div><div class="line">            &#125; catch (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">03-09 17:07:57.816 Thread2 start</div><div class="line">03-09 17:07:58.816 Thread2 wait</div><div class="line">03-09 17:07:58.817 Thread1 start</div><div class="line">03-09 17:07:59.818 Thread1 end</div></pre></td></tr></table></figure>
<p>Thread2 先执行获得锁，Thread1进入阻塞状态等待锁释放，执行到 <code>mObject.wait()</code> 方法 Thread2 进入等待状态并释放锁，此时 Thread1 获得锁自动进入就绪状态并开始执行，Thread1 加锁代码块执行完后由于没有发送 notify 唤醒等待线程， Thread2 仍然保持在等待状态，因此，Thread2 wait 方法后的代码没有执行。</p>
<h3 id="代码测试-notify"><a href="#代码测试-notify" class="headerlink" title="代码测试 notify"></a>代码测试 notify</h3><p>改动一下 Thread1 代码，代码块中加入 <code>mObject.notify()</code>。<br><strong>注意：</strong><code>notify()</code> 方法必须放到 synchronized 代码块中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">public void testSynchronized() &#123;</div><div class="line">    Thread thread1 = new Thread(new MyRunnable1());</div><div class="line">    thread1.setName(&quot;Thread1&quot;);</div><div class="line"></div><div class="line">    Thread thread2 = new Thread(new MyRunnable2());</div><div class="line">    thread2.setName(&quot;Thread2&quot;);</div><div class="line"></div><div class="line">    thread2.start();</div><div class="line">    thread1.start();</div><div class="line">&#125;</div><div class="line"></div><div class="line">class MyRunnable1 implements Runnable&#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        synchronized (mObject) &#123;</div><div class="line">            try &#123;</div><div class="line">                Log.e(&quot;Test&quot;, Thread.currentThread().getName() + &quot; start&quot;);</div><div class="line">                Thread.sleep(1000);</div><div class="line">                Log.e(&quot;Test&quot;, Thread.currentThread().getName() + &quot; notify&quot;);</div><div class="line">                mObject.notify();</div><div class="line">                Thread.sleep(1000);</div><div class="line">                Log.e(&quot;Test&quot;, Thread.currentThread().getName() + &quot; end&quot;);</div><div class="line">            &#125; catch (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class MyRunnable2 implements Runnable&#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        synchronized (mObject) &#123;</div><div class="line">            try &#123;</div><div class="line">                Log.e(&quot;Test&quot;, Thread.currentThread().getName() + &quot; start&quot;);</div><div class="line">                Thread.sleep(1000);</div><div class="line">                Log.e(&quot;Test&quot;, Thread.currentThread().getName() + &quot; wait&quot;);</div><div class="line">                mObject.wait();</div><div class="line">                Log.e(&quot;Test&quot;, Thread.currentThread().getName() + &quot; after wait&quot;);</div><div class="line">                Thread.sleep(1000);</div><div class="line">                Log.e(&quot;Test&quot;, Thread.currentThread().getName() + &quot; end&quot;);</div><div class="line">            &#125; catch (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">03-09 17:17:42.239 Thread2 start</div><div class="line">03-09 17:17:43.239 Thread2 wait</div><div class="line">03-09 17:17:43.240 Thread1 start</div><div class="line">03-09 17:17:44.240 Thread1 notify</div><div class="line">03-09 17:17:45.241 Thread1 end</div><div class="line">03-09 17:17:45.241 Thread2 after wait</div><div class="line">03-09 17:17:46.242 Thread2 end</div></pre></td></tr></table></figure>
<p>wait 前面的流程和上面是一样的，Thread2 先执行获得锁，Thread1进入阻塞状态等待锁释放，执行到 <code>mObject.wait()</code> 方法 Thread2 进入等待状态并释放锁，此时 Thread1 获得锁自动进入就绪状态并开始执行，中间执行 mObject.notify() 方法发出唤醒线程信号，此时 Thread2 被唤醒，注意还不能马上执行，因为 Thread1 还没有真正释放锁，Thread2 进入到阻塞状态，等待锁的释放。等 Thread1 执行完 notify 后面的代码，运行到 synchronized 代码块外面，此时才真正的释放锁，那么Thread2得到锁后进入就绪状态和运行状态，Thread2 wait 后面的代码才得以继续执行。</p>
<h3 id="代码测试-notifyAll"><a href="#代码测试-notifyAll" class="headerlink" title="代码测试 notifyAll"></a>代码测试 notifyAll</h3><p>下面来看一下 <code>notifyAll</code> 的使用情况：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">public void testSynchronized() &#123;</div><div class="line">    Thread thread1 = new Thread(new MyRunnable2());</div><div class="line">    thread1.setName(&quot;Thread1&quot;);</div><div class="line">    thread1.setPriority(10);</div><div class="line"></div><div class="line">    Thread thread2 = new Thread(new MyRunnable2());</div><div class="line">    thread2.setName(&quot;Thread2&quot;);</div><div class="line">    thread2.setPriority(10);</div><div class="line"></div><div class="line">    Thread thread3 = new Thread(new MyRunnable1());</div><div class="line">    thread3.setName(&quot;Thread3&quot;);</div><div class="line">    thread3.setPriority(1);</div><div class="line"></div><div class="line">    thread1.start();</div><div class="line">    thread2.start();</div><div class="line">    thread3.start();</div><div class="line">&#125;</div><div class="line"></div><div class="line">class MyRunnable1 implements Runnable&#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        synchronized (mObject) &#123;</div><div class="line">            try &#123;</div><div class="line">                Log.e(&quot;Test&quot;, Thread.currentThread().getName() + &quot; start&quot;);</div><div class="line">                Thread.sleep(5000);</div><div class="line">                Log.e(&quot;Test&quot;, Thread.currentThread().getName() + &quot; notifyAll&quot;);</div><div class="line">                mObject.notifyAll();</div><div class="line">                Thread.sleep(1000);</div><div class="line">                Log.e(&quot;Test&quot;, Thread.currentThread().getName() + &quot; end&quot;);</div><div class="line">            &#125; catch (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class MyRunnable2 implements Runnable&#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        synchronized (mObject) &#123;</div><div class="line">            try &#123;</div><div class="line">                Log.e(&quot;Test&quot;, Thread.currentThread().getName() + &quot; start&quot;);</div><div class="line">                Thread.sleep(1000);</div><div class="line">                Log.e(&quot;Test&quot;, Thread.currentThread().getName() + &quot; wait&quot;);</div><div class="line">                mObject.wait();</div><div class="line">                Log.e(&quot;Test&quot;, Thread.currentThread().getName() + &quot; after wait&quot;);</div><div class="line">                Thread.sleep(1000);</div><div class="line">                Log.e(&quot;Test&quot;, Thread.currentThread().getName() + &quot; end&quot;);</div><div class="line">            &#125; catch (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">03-09 17:34:10.688 Thread2 start</div><div class="line">03-09 17:34:11.688 Thread2 wait</div><div class="line">03-09 17:34:11.689 Thread1 start</div><div class="line">03-09 17:34:12.690 Thread1 wait</div><div class="line">03-09 17:34:12.691 Thread3 start</div><div class="line">03-09 17:34:17.691 Thread3 notifyAll</div><div class="line">03-09 17:34:18.692 Thread3 end</div><div class="line">03-09 17:34:18.692 Thread2 after wait</div><div class="line">03-09 17:34:19.693 Thread2 end</div><div class="line">03-09 17:34:19.693 Thread1 after wait</div><div class="line">03-09 17:34:20.694 Thread1 end</div></pre></td></tr></table></figure>
<p>上面代码 Thread2 首先获得锁开始执行，wait 释放锁后 Thread1 获得锁，开始执行，wait 释放锁后 Thread3 获得锁，开始执行到 notifyAll 后唤醒所有等待该锁的线程，等到 Thread3 执行完synchronized代码块后释放锁，Thread2 先获得锁，执行完释放锁后，由于 Thread1已经被唤醒，可以得到锁继续执行。<br>上面的执行情况是 Thread1 和 Thread2 都在等待状态的状态下被 Thread3 唤醒，这样三个线程都可以执行完成。<br>再看下面的执行情况，Thread1 先获得锁执行，wait 方法后进行等待状态，然后 Thread3 获得锁开始执行，notifyAll 后并释放锁后， Thread2 开始执行，wait 后进入等待状态释放锁，Thread1 开始执行，执行完毕后并没有唤醒 Thread1，虽然 Thread1 释放了锁，Thread2并没有继续执行。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">03-09 17:32:49.031 Thread1 start</div><div class="line">03-09 17:32:50.032 Thread1 wait</div><div class="line">03-09 17:32:50.033 Thread3 start</div><div class="line">03-09 17:32:55.034 Thread3 notifyAll</div><div class="line">03-09 17:32:56.034 Thread3 end</div><div class="line">03-09 17:32:56.035 Thread2 start</div><div class="line">03-09 17:32:57.036 Thread2 wait</div><div class="line">03-09 17:32:57.036 Thread1 after wait</div><div class="line">03-09 17:32:58.037 Thread1 end</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      本文介绍 synchronized 的使用
    
    </summary>
    
      <category term="Java 并发" scheme="http://yoursite.com/categories/Java-%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="Java 并发" scheme="http://yoursite.com/tags/Java-%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Java 并发编程 -- 锁</title>
    <link href="http://yoursite.com/2015/07/06/java-thread-kinds-of-lock/"/>
    <id>http://yoursite.com/2015/07/06/java-thread-kinds-of-lock/</id>
    <published>2015-07-06T02:00:00.000Z</published>
    <updated>2019-03-14T06:08:20.925Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在并发编程中，多线程同时并发访问的资源叫做临界资源，当多个线程同时访问对象并要求操作相同资源时，分割了原子操作就有可能出现数据的不一致或数据不完整的情况，为避免这种情况的发生，我们会采取同步机制，以确保在某一时刻，方法内只允许有一个线程。那么这种情况下我们就会接触各种类型的锁。本文将对常见的几种类型的锁做一个简要的介绍。</p>
<h2 id="锁的使用"><a href="#锁的使用" class="headerlink" title="锁的使用"></a>锁的使用</h2><p>在编程过程中，如果我们要使用锁，可以使用 synchronized 关键字，也可以使用通过实现 Lock 接口来实现锁功能的类，比如：ReentrantLock，ReadWriteLock，ReentrantReadWriteLock等等。<br>我们为什么要使用锁呢？<br>锁提供了两种主要特性：</p>
<ul>
<li>互斥性（mutual exclusion） </li>
<li>可见性（visibility）</li>
</ul>
<p>互斥即一次只允许一个线程持有某个特定的锁，因此可使用该特性实现对共享数据的协调访问协议，这样，一次就只有一个线程能够使用该共享数据。<br>可见性要更加复杂一些，它必须确保释放锁之前对共享数据做出的更改对于随后获得该锁的另一个线程是可见的 —— 如果没有同步机制提供的这种可见性保证，线程看到的共享变量可能是修改前的值或不一致的值，这将引发许多严重问题。</p>
<h2 id="锁的分类"><a href="#锁的分类" class="headerlink" title="锁的分类"></a>锁的分类</h2><h3 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h3><p>可重入锁，也叫做递归锁，指的是同一线程外层函数获得锁之后 ，内层递归函数仍然可以获取该锁。可重入锁的一个好处是可一定程度避免死锁。<br>可重入锁的代表是 <code>ReentrantLock</code> 和 <code>synchronized</code>。<br>下面通过一个例子来解释一下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public void testSynchronized() &#123;</div><div class="line">    methodA();</div><div class="line">&#125;</div><div class="line">private synchronized void methodA() &#123;</div><div class="line">    Log.e(&quot;Test&quot;,&quot;methodA&quot;);</div><div class="line">    methodB();</div><div class="line">&#125;</div><div class="line">private synchronized void methodB() &#123;</div><div class="line">    Log.e(&quot;Test&quot;,&quot;methodB&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">15:50:30.559 E/Test: methodA</div><div class="line">15:50:30.559 E/Test: methodB</div></pre></td></tr></table></figure>
<p>在用 <code>synchronized</code> 标记的方法 <code>methodA</code> 内调用同样用 <code>synchronized</code> 标记的同步方法 <code>methodB</code>，如果不是可重入锁，<code>methodB</code> 将无法执行，造成死锁。</p>
<h3 id="公平锁和非公平锁"><a href="#公平锁和非公平锁" class="headerlink" title="公平锁和非公平锁"></a>公平锁和非公平锁</h3><p>公平锁是指多个线程等待同一个锁时，将会安装申请锁的顺序来获得。<br>非公平锁时指多个线程获取锁的顺序不是按照申请的先后顺序进行的，新的申请锁的线程会有机会进行抢占锁，如果被加入了等待队列后则跟公平锁没有区别。<br>后面会有专门一篇文章来介绍公平锁和非公平锁的实现原理。<br>公平锁：<code>new ReentrantLock(true)</code><br>非公平锁：<code>new ReentrantLock(false)</code></p>
<h3 id="独占锁和共享锁"><a href="#独占锁和共享锁" class="headerlink" title="独占锁和共享锁"></a>独占锁和共享锁</h3><p>独占锁也可以理解为互斥锁，该锁一次只能被一个线程所持有。比如 <code>ReentrantLock</code> 和 <code>synchronized</code>。<br>共享锁可以同时被多个线程所持有。比如读写锁 <code>ReadWriteLock</code> 中的读锁。</p>
<h3 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h3><p>读写锁分为读锁和写锁。在读的时候，上读锁，在写的时候，上写锁。读和读互不影响，读和写互斥，写和写互斥，提高读写文件的效率。<br>读锁可以理解为共享锁，写锁为独占锁。</p>
<h3 id="内置锁和显式锁"><a href="#内置锁和显式锁" class="headerlink" title="内置锁和显式锁"></a>内置锁和显式锁</h3><p>内置锁没有显式获得锁和释放锁操作，比如 <code>synchronized</code>，进入 <code>synchronized</code> 修饰的代码就获得锁，走出相应的代码就释放锁。<br>显式锁的获得锁和释放锁操作需要显式的进行 lock 以及 unlock 操作。比如 <code>ReentrantLock</code>。</p>
<h3 id="乐观素和悲观锁"><a href="#乐观素和悲观锁" class="headerlink" title="乐观素和悲观锁"></a>乐观素和悲观锁</h3><p>悲观锁：每次获取数据的时候，都会担心数据被修改，所以每次获取数据的时候都会进行加锁，确保在自己使用的过程中数据不会被别人修改，使用完成后进行数据解锁。由于数据进行加锁，期间对该数据进行读写的其他线程都会进行等待。<br>我们经常使用的 <code>syncrhoized</code> 和 <code>ReentrantLock</code> 等都属于悲观锁。<br>乐观锁：每次获取数据的时候，都不会担心数据被修改，所以每次获取数据的时候都不会进行加锁。但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。<br>乐观锁不是锁，是一种策略或者叫概念。</p>
<h3 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h3><p>自旋锁可以使线程在没有取得锁的时候，不被挂起，而转去执行一个空循环，（即所谓的自旋，就是自己执行空循环），若在若干个空循环后，线程如果可以获得锁，则继续执行。若线程依然不能获得锁，才会被挂起。<br>在JDK1.6中，Java虚拟机提供 <code>-XX:+UseSpinning</code> 参数来启用多线程自旋锁优化，使用 <code>-XX:PreBlockSpin</code> 参数来控制多线程自旋锁优化的自旋次数。<br>在JDK1.7开始，自旋锁的参数被取消，虚拟机不再支持由用户配置自旋锁，自旋锁总是会执行，自旋锁次数也由虚拟机自动调整。</p>
<h3 id="阻塞锁"><a href="#阻塞锁" class="headerlink" title="阻塞锁"></a>阻塞锁</h3><p>阻塞锁，与自旋锁不同，改变了线程的运行状态。让线程进入阻塞状态进行等待，当获得相应的信号（唤醒，时间） 时，才可以进入线程的准备就绪状态，准备就绪状态的所有线程，通过竞争，进入运行状态。</p>
<h3 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h3><p>偏向锁是 JDK1.6 提出来的一种锁优化的机制。其核心的思想是，如果程序没有竞争，则取消之前已经取得锁的线程同步操作。也就是说，若某一锁被线程获取后，便进入偏向模式，当线程再次请求这个锁时，就无需再进行相关的同步操作了，从而节约了操作时间，如果在此之间有其他的线程进行了锁请求，则锁退出偏向模式。在JVM中使用 <code>-XX:+UseBiasedLocking</code></p>
]]></content>
    
    <summary type="html">
    
      本文介绍 Java 多线程编程中常用的几种锁
    
    </summary>
    
      <category term="Java 并发" scheme="http://yoursite.com/categories/Java-%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="Java 并发" scheme="http://yoursite.com/tags/Java-%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Java 并发编程 -- volatile 关键字</title>
    <link href="http://yoursite.com/2015/07/05/java-concurrent-volatile/"/>
    <id>http://yoursite.com/2015/07/05/java-concurrent-volatile/</id>
    <published>2015-07-05T02:00:00.000Z</published>
    <updated>2019-03-14T07:23:22.755Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Java 语言中的 volatile 关键字修饰的变量相当于声明该变量是易变的，可能被其他线程修改，因此，对该变量的读取时都会读取它的最新值，这就是说线程能够自动发现 volatile 变量的最新值。（对这个不太理解的同学可以先了解一下 Java 内存模型的知识）<br>volatile 可以被看作是Java虚拟机提供的最轻量级的同步机制。与 synchronized 块相比，volatile 变量所需的编码较少，并且运行时开销也较少，但是它所能实现的功能也仅是 synchronized 的一部分。<br>本文介绍了几种有效使用 volatile 变量的模式，并强调了几种不适合使用 volatile 变量的情形。</p>
<h2 id="volatile-型变量的特性"><a href="#volatile-型变量的特性" class="headerlink" title="volatile 型变量的特性"></a>volatile 型变量的特性</h2><p>被volatile修饰的共享变量，具有了以下两点特性：</p>
<ul>
<li>保证了不同线程对该变量操作的内存可见性；</li>
<li>禁止指令重排序；</li>
</ul>
<p>这里的“可见性”是指当一条线程修改了这个变量的值，新值对于其他线程来说是可以立即得知的。而普通变量不能做到这一点，普通变量的值在线程间传递需要通过主内存来完成。<br>volatile 变量只能保证可见性，不能保证原子性。<br>volatile 型变量的第二个特性是禁止指令重排序，普通变量仅仅会保证该方法的执行过程中所有依赖赋值结果的地方都能获取到正确的结果，而不能保证变量赋值操作的顺序与程序代码的执行顺序一致。</p>
<h2 id="volatile-和-synchronized-区别"><a href="#volatile-和-synchronized-区别" class="headerlink" title="volatile 和 synchronized 区别"></a>volatile 和 synchronized 区别</h2><ul>
<li>volatile 仅能修饰变量；synchronized 可以作用于变量、方法、对象和类。</li>
<li>volatile 仅能保证可见性；synchronized 可以保证可见性和原子性。</li>
<li>volatile不会造成线程的阻塞；synchronized可能会造成线程的阻塞。</li>
<li>volatile 变量所需的编码较少，并且运行时开销也较少。在某些情况下，如果读操作远远大于写操作，volatile 变量还可以提供优于锁的性能优势。 </li>
</ul>
<h2 id="volatile-使用场景"><a href="#volatile-使用场景" class="headerlink" title="volatile 使用场景"></a>volatile 使用场景</h2><p>volatile 变量可用于提供线程安全，在有限的一些情形下使用 volatile 变量替代锁。要使 volatile 变量提供理想的线程安全，必须同时满足下面两个条件：</p>
<ul>
<li>对变量的写操作不依赖于当前值，或者是能够确保只有单一的线程修改变量的值。</li>
<li>该变量没有包含在具有其他变量的不变式中。</li>
</ul>
<p>上面条件限制了：多个变量之间或者某个变量的当前值与修改后值之间没有约束。同时表明，可以被写入 volatile 变量的这些有效值独立于任何程序的状态，包括变量的当前状态。<br>因此，单独使用 volatile 还不能用作线程安全计数器、互斥锁或任何具有与多个变量相关的不变式的类（例如 “start &lt;=end”）。<br>虽然增量操作（x++）看上去类似一个单独操作，实际上它是一个由读取－修改－写入操作序列组成的组合操作，必须以原子方式执行，而 volatile 不能提供必须的原子特性。实现正确的操作需要使 x 的值在操作期间保持不变，而 volatile 变量无法实现这点。（然而，如果将值调整为只从单个线程写入，那么可以忽略第一个条件。） </p>
<h3 id="状态标记位"><a href="#状态标记位" class="headerlink" title="状态标记位"></a>状态标记位</h3><p>比如我们想使用一个布尔值标记某个状态，用于指示发生了一个重要的一次性事件，比如完成初始化或退出某个循环条件等。<br>这种类型的状态标记的一个公共特性是：通常只有一种状态转换，标志从 false 转换为 true，然后程序停止。这种模式也是可以扩展到来回转换的状态标志的（从 false 到 true，再转换到 false）。</p>
<h3 id="一次性安全发布"><a href="#一次性安全发布" class="headerlink" title="一次性安全发布"></a>一次性安全发布</h3><p>比如单例模式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class Manager &#123;</div><div class="line">    private static volatile Manager sInstance;</div><div class="line"></div><div class="line">    public static Manager getInstance() &#123;</div><div class="line">        if(sInstance == null) &#123;</div><div class="line">            synchronized (Manager.class) &#123;</div><div class="line">                if(sInstance == null) &#123;</div><div class="line">                    sInstance = new Manager();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return sInstance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="独立观察"><a href="#独立观察" class="headerlink" title="独立观察"></a>独立观察</h3><p>这种情景是：定期 “发布” 观察结果供程序内部使用。例如，假设有一种环境传感器能够感觉环境温度，一个后台线程可能会每隔几秒读取一次该传感器，并更新到 volatile 变量。然后，其他线程可以读取这个变量，从而随时能够看到最新的温度值。<br>该模式是前面模式的扩展。将某个值发布以在程序内的其他地方使用，但是与一次性事件的发布不同，这是一系列独立事件。这个模式要求被发布的值是有效不可变的 —— 即值的状态在发布后不会更改。使用该值的代码需要清楚该值可能随时发生变化。</p>
<h3 id="“volatile-bean”-模式"><a href="#“volatile-bean”-模式" class="headerlink" title="“volatile bean” 模式"></a>“volatile bean” 模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">@ThreadSafe</div><div class="line">public class Person &#123;</div><div class="line">    private volatile String firstName;</div><div class="line">    private volatile String lastName;</div><div class="line">    private volatile int age;</div><div class="line"> </div><div class="line">    public String getFirstName() &#123; return firstName; &#125;</div><div class="line">    public String getLastName() &#123; return lastName; &#125;</div><div class="line">    public int getAge() &#123; return age; &#125;</div><div class="line"> </div><div class="line">    public void setFirstName(String firstName) &#123; </div><div class="line">        this.firstName = firstName;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    public void setLastName(String lastName) &#123; </div><div class="line">        this.lastName = lastName;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    public void setAge(int age) &#123; </div><div class="line">        this.age = age;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="开销较低的读－写锁策略"><a href="#开销较低的读－写锁策略" class="headerlink" title="开销较低的读－写锁策略"></a>开销较低的读－写锁策略</h3><p> 目前为止，您应该了解了 volatile 的功能还不足以实现计数器。因为 ++x 实际上是三种操作（读、添加、存储）的简单组合，如果多个线程凑巧试图同时对 volatile 计数器执行增量操作，那么它的更新值有可能会丢失。<br>然而，如果读操作远远超过写操作，您可以结合使用内部锁和 volatile 变量来减少公共代码路径的开销。清单 6 中显示的线程安全的计数器使用 synchronized 确保增量操作是原子的，并使用 volatile 保证当前结果的可见性。如果更新不频繁的话，该方法可实现更好的性能，因为读路径的开销仅仅涉及 volatile 读操作，这通常要优于一个无竞争的锁获取的开销。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@ThreadSafe</div><div class="line">public class CheesyCounter &#123;</div><div class="line">    // Employs the cheap read-write lock trick</div><div class="line">    // All mutative operations MUST be done with the &apos;this&apos; lock held</div><div class="line">    @GuardedBy(&quot;this&quot;) private volatile int value;</div><div class="line"> </div><div class="line">    public int getValue() &#123; return value; &#125;</div><div class="line"> </div><div class="line">    public synchronized int increment() &#123;</div><div class="line">        return value++;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>之所以将这种技术称之为 “开销较低的读－写锁” 是因为您使用了不同的同步机制进行读写操作。因为本例中的写操作违反了使用 volatile 的第一个条件，因此不能使用 volatile 安全地实现计数器 —— 您必须使用锁。然而，您可以在读操作中使用 volatile 确保当前值的可见性，因此可以使用锁进行所有变化的操作，使用 volatile 进行只读操作。其中，锁一次只允许一个线程访问值，volatile 允许多个线程执行读操作，因此当使用 volatile 保证读代码路径时，要比使用锁执行全部代码路径获得更高的共享度 —— 就像读－写操作一样。然而，要随时牢记这种模式的弱点：如果超越了该模式的最基本应用，结合这两个竞争的同步机制将变得非常困难。 </p>
<h2 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h2><ul>
<li>在多线程需要访问的变量上使用 volatile</li>
<li>要访问的变量已在synchronized代码块中，或者为常量时，没必要使用volatile</li>
<li>volatile 屏蔽掉了JVM中必要的代码优化，所以在效率上比较低，因此一定在必要时才使用此关键字</li>
</ul>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h3 id="修饰数组"><a href="#修饰数组" class="headerlink" title="修饰数组"></a>修饰数组</h3><p>volatile 可以修饰数组，不过只是一个指向数组的引用，而不是整个数组。如果改变引用指向的数组，将会受到volatile的保护，但是如果多个线程同时改变数组的元素，volatile 修饰符就不能起到之前的保护作用了。</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.ibm.com/developerworks/cn/java/j-jtp06197.html" target="_blank" rel="external">正确使用 Volatile 变量</a><br><!--  
https://www.toutiao.com/i6665566310002328077/?iid=65146341241&app=news_article&group_id=6665566310002328077&timestamp=1552268611
--></p>
]]></content>
    
    <summary type="html">
    
      介绍 volatile 的用法
    
    </summary>
    
      <category term="Java 并发" scheme="http://yoursite.com/categories/Java-%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="Java 并发" scheme="http://yoursite.com/tags/Java-%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Java 并发编程 -- 创建和使用线程</title>
    <link href="http://yoursite.com/2015/07/02/java-thread-how-to-create-thread/"/>
    <id>http://yoursite.com/2015/07/02/java-thread-how-to-create-thread/</id>
    <published>2015-07-02T02:00:00.000Z</published>
    <updated>2019-03-14T06:08:58.376Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线程的概念"><a href="#线程的概念" class="headerlink" title="线程的概念"></a>线程的概念</h2><p>不论是在 Java 或者 Android 编程过程中，我们经常和线程打交道。线程可以理解为在进程中独立运行的子任务。一个进程中正在运行时至少会有一个线程运行，当然也可以同时运行多个子线程，即我们平时说的多线程的概念。<br>那么使用多线程有什么优点呢？使用多线程时这些线程可以同时运行，可以最大限度的利用CPU的空闲时间来处理其它任务，系统的运行效率大大提升。</p>
<h2 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h2><p>线程状态的定义在 Thread 类的 State 枚举中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public enum State &#123;</div><div class="line">    NEW,</div><div class="line">    RUNNABLE,</div><div class="line">    BLOCKED,</div><div class="line">    WAITING,</div><div class="line">    TIMED_WAITING,</div><div class="line">    TERMINATED;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程有6种状态：</p>
<ul>
<li>新建状态(NEW)：线程对象被创建后，就进入了新建状态。例如，Thread thread = new Thread()。</li>
<li>运行状态(RUNNABLE)：Java 中把就绪状态和运行中状态笼统称为运行状态。<ul>
<li>就绪状态(Runnable)：也被称为“可执行状态”。线程对象被创建后，其它线程调用了该对象的start()方法，从而来启动该线程。例如，thread.start()。处于就绪状态的线程，随时可能被CPU调度执行。</li>
<li>运行中状态(Running)：线程获取CPU权限进行执行。需要注意的是，线程只能从就绪状态进入到运行状态。</li>
</ul>
</li>
<li>阻塞状态(BLOCKED)：表示线程阻塞于锁，比如线程在获取synchronized同步锁失败(因为锁被其它线程所占用)，它会进入同步阻塞状态。</li>
<li>等待状态(WAITING)：表示线程进入等待状态，比如调用 wait()方法，进入该状态表示当前线程需要等待其他线程做出一些特定动作（<strong>通知或者中断</strong>）才能退出这个状态</li>
<li>超时等待状态(TIMED_WAITING)：可以在指定的时间自行返回</li>
<li>终止状态(TERMINATED)：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。</li>
</ul>
<p><img src="/images/java-thread-how-to-create-thread/thread-state.jpeg" alt="线程状态图"></p>
<p>从上图中可以看到，线程创建之后，调用 start() 方法开始运行。<br>当线程执行 wait() 方法之后，线程进入等待状态。进入等待状态的线程需要依靠其他线程的通知或者调用 interrupt 方法才能返回到运行状态，而超时等待状态相当于在等待状态基础上增加了超时机制，也就是超时时间到达时会返回到运行状态。<br>等待状态下的线程不会被分配CPU执行时间，它们要等待被显式地唤醒，否则会处于无限期等待的状态。<br>超时等待状态下的线程也不会被分配CPU执行时间。在达到一定时间后它们会自动唤醒。<br>当线程调用同步方法时，在没有获取到锁的情况下，线程会进入到阻塞状态。<br>线程在执行 Runnable 的 run() 方法之后将进入到终止状态。</p>
<h2 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h2><p>创建线程的方法有多种，下面逐一来分析一下。</p>
<h3 id="继承-Thread-类"><a href="#继承-Thread-类" class="headerlink" title="继承 Thread 类"></a>继承 Thread 类</h3><p>实现一个继承 <code>Thread</code> 的类，并实现其 <code>run</code> 方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    MyThread thread = new MyThread();</div><div class="line">    thread.start();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class MyThread extends Thread&#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        Log.e(&quot;Test&quot;,&quot;run my thread&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="实现-Runnable-接口"><a href="#实现-Runnable-接口" class="headerlink" title="实现 Runnable 接口"></a>实现 Runnable 接口</h3><p>如果要创建的线程类已经有父类来，那么我们就不能通过继承 <code>Thread</code> 类的方式来创建线程来，因为 Java 是不支持多继承的。那么这种情况下我们可以实现 <code>Runnable</code> 接口的方式来创建线程。<br>该如何使用呢？我们先来看一下 <code>Thread</code> 类的几个构造函数：</p>
<ul>
<li>Thread()</li>
<li>Thread(Runnable target)</li>
<li>Thread(ThreadGroup group, Runnable target)</li>
<li>Thread(String name)</li>
<li>Thread(ThreadGroup group, String name)</li>
<li>Thread(Runnable target, String name)</li>
<li>Thread(ThreadGroup group, Runnable target, String name)</li>
<li>Thread(ThreadGroup group, Runnable target, String name, long stackSize)</li>
</ul>
<p>一共提供来这8个构造函数，其中第2、3、6、7、8构造方法都一个 <code>Runnable</code> 参数，这个参数会通过 <code>init()</code> 方法赋值给成员变量 <code>target</code>，然后会在 <code>run()</code> 方法中调用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void run() &#123;</div><div class="line">    if (target != null) &#123;</div><div class="line">        target.run();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因此只要通过构造方法把 <code>Runnable</code> 赋值给 <code>target</code>，可以运行一个线程。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    Thread thread = new Thread(new MyRunnable());</div><div class="line">    thread.start();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class MyRunnable implements Runnable&#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        Log.e(&quot;Test&quot;,&quot;run my thread&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另外需要说明一点是 <code>Thread</code> 类也是实现类 <code>Runnable</code> 接口的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">public class Thread implements Runnable &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那也就是说构造函数 <code>Thread(Runnable target)</code> 不光可以传 <code>Runnable</code> 对象，还可以传 <code>Thread</code> 对象，这样做就是把 <code>Thread</code> 的 <code>run()</code> 方法交给其它线程进行调用。</p>
<h3 id="使用-Callable、Future-或者-FutureTask"><a href="#使用-Callable、Future-或者-FutureTask" class="headerlink" title="使用 Callable、Future 或者 FutureTask"></a>使用 Callable、Future 或者 FutureTask</h3><p>前面我们介绍了通过继承 <code>Thread</code> 类和实现 <code>Runnable</code> 接口的方式来创建线程，但是这两种方式都无法解决两个问题：</p>
<ul>
<li>无法在任务完成后直接获取执行结果</li>
<li>run 方法无法抛出异常，因为在 <code>Thread</code> 和 <code>Runnable</code> 的 <code>run</code> 方法中没有抛出异常，重写的 run 方法自然也无法抛出异常</li>
</ul>
<p>从Java 1.5开始提供了 <code>Callable</code> 和 <code>Future</code> 两个接口，通过这两个接口来进行并发编程，能解决上面提到的两个问题。</p>
<h4 id="Callable-和-Future"><a href="#Callable-和-Future" class="headerlink" title="Callable 和 Future"></a>Callable 和 Future</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface Callable&lt;V&gt; &#123;</div><div class="line">    V call() throws Exception;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Callable</code> 接口只声明了一个 <code>call()</code>，类似 <code>Runnable</code> 接口，作为线程的执行方法存在，它是可以抛出异常的，而且有返回值。<br>再来看一下 <code>Future</code> 接口，它的作用是拿到 <code>Callable</code> 的执行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public interface Future&lt;V&gt; &#123;</div><div class="line"></div><div class="line">    //取消任务的执行。参数指定是否立即中断任务执行，或者等等任务结束</div><div class="line">    boolean cancel(boolean mayInterruptIfRunning);</div><div class="line"></div><div class="line">    //任务是否已经取消，任务正常完成前将其取消，则返回 true</div><div class="line">    boolean isCancelled();</div><div class="line"></div><div class="line">    //任务是否已经完成。需要注意的是如果任务正常终止、异常或取消，都将返回true</div><div class="line">    boolean isDone();</div><div class="line"></div><div class="line">    //等待任务执行结束，然后获得V类型的结果。InterruptedException 线程被中断异常， ExecutionException任务执行异常，如果任务被取消，还会抛出CancellationException</div><div class="line">    //该方法具有阻塞性，如果调用该方法时任务没有完成，则会阻塞直到执行完成</div><div class="line">    V get() throws InterruptedException, ExecutionException;</div><div class="line"></div><div class="line">    //同上面的get功能一样，多了设置超时时间。参数timeout指定超时时间，uint指定时间的单位，在枚举类TimeUnit中有相关的定义。如果计算超时，将抛出TimeoutException</div><div class="line">    V get(long timeout, TimeUnit unit)</div><div class="line">        throws InterruptedException, ExecutionException, TimeoutException;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们一般来使用 <code>ExecutorService</code> 接口来配合 <code>Callable</code> 和 <code>Future</code> 的使用。<br><code>ExecutorService</code> 声明了下面几个重载的 <code>submit</code> 方法：</p>
<ul>
<li><code>&lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task)</code></li>
<li><code>&lt;T&gt; Future&lt;T&gt; submit(Runnable task, T result)</code></li>
<li><code>Future&lt;?&gt; submit(Runnable task)</code></li>
<li><code>&lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</code></li>
</ul>
<p>那么我们这里又发现，其实通过 <code>ExecutorService</code> 和 <code>Future</code>，<code>Runnable</code> 也可以被包装成一个 <code>Callable</code> 来使用，但是在使用过程中你会发现，这个返回值似乎没什么作用，我们知道 <code>Runnable</code> 的 <code>run</code> 方法并不能返回结果，而且在运行过程中又不能操作 result，通过源码我们也发现，返回的结果就是我们传进去的参数 result，并未做修改。<br>下面运行一个例子来熟悉一下它们的用法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public void testFuture() &#123;</div><div class="line">    ExecutorService threadPool = Executors.newSingleThreadExecutor();</div><div class="line">    Future&lt;Integer&gt; future = threadPool.submit(new Callable&lt;Integer&gt;() &#123;</div><div class="line">        public Integer call() throws Exception &#123;</div><div class="line">            Log.e(&quot;Test&quot;,&quot;start thread1&quot;);</div><div class="line">            Thread.sleep(2000);</div><div class="line">            Log.e(&quot;Test&quot;,&quot;end thread1&quot;);</div><div class="line">            return 100;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    Log.e(&quot;Test&quot;,&quot;main thread&quot;);</div><div class="line">    try &#123;</div><div class="line">        Thread.sleep(3000);</div><div class="line">        Log.e(&quot;Test&quot;,&quot;get result&quot;);</div><div class="line">        Log.e(&quot;Test&quot;,&quot;result = &quot;+future.get());</div><div class="line">    &#125; catch (InterruptedException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; catch (ExecutionException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">22:20:39.918  E/Test: main thread</div><div class="line">22:20:39.918  E/Test: start thread1</div><div class="line">22:20:41.920  E/Test: end thread1</div><div class="line">22:20:42.920  E/Test: get result</div><div class="line">22:20:42.920  E/Test: result = 100</div></pre></td></tr></table></figure>
<p>下面我们来测试一下 <code>Future.get</code> 方法的阻塞性。我们把主线程的 <code>Thread.sleep(3000);</code> 去掉，来看一下执行结果。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">22:24:04.899 E/Test: main thread</div><div class="line">22:24:04.899 E/Test: get result</div><div class="line">22:24:04.899 E/Test: start thread1</div><div class="line">22:24:06.900 E/Test: end thread1</div><div class="line">22:24:06.902 E/Test: result = 100</div></pre></td></tr></table></figure>
<p>确实是阻塞在 get 方法这里，子线程执行完之后才会接着执行。</p>
<h4 id="FutureTask"><a href="#FutureTask" class="headerlink" title="FutureTask"></a>FutureTask</h4><p>接下来再来看一下 <code>FutureTask</code>，先来看一下它的继承关系。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">public class FutureTask&lt;V&gt; implements RunnableFuture&lt;V&gt; &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface RunnableFuture&lt;V&gt; extends Runnable, Future&lt;V&gt; &#123;</div><div class="line">    void run();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>相当于 <code>FutureTask</code> 同时实现了 <code>Runnable</code> 和 <code>Future</code> 接口，那么就兼具他们的特性。<br><code>FutureTask</code> 除了像上面的例子一样结合 <code>Callable</code> 和 <code>ExecutorService</code> 使用，也可以像 <code>Runnable</code> 一样结合 <code>Thread</code> 使用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public void testFutureTask() &#123;</div><div class="line">    FutureTask&lt;Integer&gt; futureTask = new FutureTask&lt;Integer&gt;(new Callable&lt;Integer&gt;() &#123;</div><div class="line">        @Override</div><div class="line">        public Integer call() throws Exception &#123;</div><div class="line">            Log.e(&quot;Test&quot;,&quot;start thread1&quot;);</div><div class="line">            Thread.sleep(2000);</div><div class="line">            Log.e(&quot;Test&quot;,&quot;end thread1&quot;);</div><div class="line">            return 100;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    Log.e(&quot;Test&quot;,&quot;main thread&quot;);</div><div class="line">    new Thread(futureTask).start();</div><div class="line">    try &#123;</div><div class="line">        Log.e(&quot;Test&quot;,&quot;get result&quot;);</div><div class="line">        Log.e(&quot;Test&quot;,&quot;result = &quot;+futureTask.get());</div><div class="line">    &#125; catch (InterruptedException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; catch (ExecutionException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">22:35:12.488 E/Test: main thread</div><div class="line">22:35:12.488 E/Test: get result</div><div class="line">22:35:12.488 E/Test: start thread1</div><div class="line">22:35:14.489 E/Test: end thread1</div><div class="line">22:35:14.496 E/Test: result = 100</div></pre></td></tr></table></figure>
<h2 id="Thread-类"><a href="#Thread-类" class="headerlink" title="Thread 类"></a>Thread 类</h2><h3 id="setPriority"><a href="#setPriority" class="headerlink" title="setPriority"></a>setPriority</h3><p>我们在使用 Thread 时，可以使用 <code>setPriority</code> 方法来设置线程的优先级，线程的优先级分为1-10这10个等级，数值越大，优先级越高。如果小于1或大于10，则抛出 <code>IllegalArgumentException</code> 异常，默认是5。<br>线程的优先级仍然无法保障线程的执行次序。只不过，优先级高的线程获取CPU资源的概率较大</p>
<h3 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h3><p>yield() 可以使当前线程从“运行状态”变“就绪状态”，调用该方法后，该线程就会把CPU时间让掉，让其他或者自己的线程执行（也就是谁先抢到谁执行）。</p>
<h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><p>join()方法可以使得一个线程在另一个线程（调用 join 方法的线程）结束后再执行。如果join()方法在一个线程实例上调用，当前运行着的线程将阻塞直到这个线程实例完成了执行。比如在线程t1运行过程中调用了线程t2的 join 方法，那么 t1 线程就会在此处进入阻塞状态，知道 t2 线程运行结束再继续执行。</p>
<h3 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h3><p>sleep 方法的作用是让当前线程休眠，即当前线程会从“运行状态”进入到“休眠(阻塞)状态”。sleep()会指定休眠时间，线程休眠的时间会大于/等于该休眠时间；在线程重新被唤醒时，它会由“阻塞状态”变成“就绪状态”，从而等待cpu的调度执行。<br>sleep 和 Object 对象的 wait 方法区别：它们都可以使当前线程由“运行状态”进入到“休眠(阻塞)状态”。但是，wait()会释放对象的同步锁，而sleep()则不会释放锁。</p>
<h3 id="interrupt"><a href="#interrupt" class="headerlink" title="interrupt"></a>interrupt</h3><p>设置线程的中断标记位。注意，interrupt 并不能终止线程的执行，如果线程在调用 wait、sleep、join方法处于阻塞状态，那么调用它的 interrupt 方法后，该线程会抛出一个  InterruptedException 异常，并中断阻塞状态。<br>如果线程想中断执行退出，那么就要在 run 方法中查询 isInterrupted() 来决定是否退出。</p>
]]></content>
    
    <summary type="html">
    
      本文介绍 Java 中线程的创建和使用
    
    </summary>
    
      <category term="Java 并发" scheme="http://yoursite.com/categories/Java-%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="Java 并发" scheme="http://yoursite.com/tags/Java-%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Android  应该了解的知识系列 - 关于 Style 命名和继承方式的那些事儿</title>
    <link href="http://yoursite.com/2015/05/06/android-knowledge-style-extends/"/>
    <id>http://yoursite.com/2015/05/06/android-knowledge-style-extends/</id>
    <published>2015-05-06T02:00:00.000Z</published>
    <updated>2018-11-13T05:04:50.797Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Style-的继承方式"><a href="#Style-的继承方式" class="headerlink" title="Style 的继承方式"></a>Style 的继承方式</h2><p>在面向对象编码中我们对继承是司空见惯的，在 Android 主题风格的使用上我们也是可以使用继承的，否则，每种主题都要我们重新配置属性的话效率会非常低。<br>对于 style 的下面两种书写方式我们很常见：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;style name=&quot;CustomTheme&quot; parent=&quot;Theme.AppCompat.Light.DarkActionBar&quot;&gt;</div><div class="line"></div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;style name=&quot;Theme.AppCompat.Light.DarkActionBar.CustomTheme&quot;&gt;</div><div class="line"></div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<p>这其实就是 style 的两种继承方式：</p>
<ul>
<li>通过 . 来继承</li>
<li>通过 parent 属性来继承</li>
</ul>
<p>命名的 sytle 中点有 . 的 style，这种绝不是命名上的偏好，而是通过 . 的方式来继承父 sytle 的属性。<br>因此，我们要确保每个 . 之前的 style 是确实存在的，否则编译器会用红色的字体来警告你，而且这时也是编译不过的。<br>会报下面错误：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">    &lt;style name=&quot;MyTheme.Custom.Test&quot;&gt;</div><div class="line"></div><div class="line">    &lt;/style&gt;</div><div class="line">    </div><div class="line">    </div><div class="line">Error:(1497) Error retrieving parent for item: No resource found that matches the given name &apos;MyTheme.Custom&apos;.</div></pre></td></tr></table></figure>
<h3 id="属性的自定义"><a href="#属性的自定义" class="headerlink" title="属性的自定义"></a>属性的自定义</h3><p>下面的代码是我们继承了系统提供的 NoActionBar 主题。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;style name=&quot;MyTheme&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt;</div><div class="line"></div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<p>如果我们想在这个基础上做一些自定义，比如现在我们想把 ActionBar 给显示出来，可以这样做：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;style name=&quot;MyTheme&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt;</div><div class="line">    &lt;!-- Customize your theme here. --&gt;</div><div class="line"></div><div class="line">    &lt;item name=&quot;windowActionBar&quot;&gt;true&lt;/item&gt;</div><div class="line">    &lt;item name=&quot;windowNoTitle&quot;&gt;false&lt;/item&gt;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<h3 id="继承的优先级"><a href="#继承的优先级" class="headerlink" title="继承的优先级"></a>继承的优先级</h3><p>上面的属性自定义中可以得出的结论是：<strong>自定义的属性会覆盖父 style 中的属性</strong>。<br>那么如果我们同时用 . 继承和 parent 继承方式呢？<br>下面我们做个测试：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;style name=&quot;Theme.AppCompat.Light.NoActionBar.MyTheme&quot; parent=&quot;Theme.AppCompat.Light.DarkActionBar&quot;&gt;</div><div class="line"></div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<p>最后显示的 DarkActionBar 的主题。<br>最后再添加下面的代码，又会把 ActionBar 去掉：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;style name=&quot;Theme.AppCompat.Light.NoActionBar.MyTheme&quot; parent=&quot;Theme.AppCompat.Light.DarkActionBar&quot;&gt;</div><div class="line">    &lt;item name=&quot;windowActionBar&quot;&gt;false&lt;/item&gt;</div><div class="line">    &lt;item name=&quot;windowNoTitle&quot;&gt;true&lt;/item&gt;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<p>因此我们可以得到下面的结论：</p>
<p><strong>parent 继承会覆盖 . 继承的主题，而自定义的属性又会覆盖前面两者定义的属性。</strong><br>自定义 &gt; parent 继承 &gt; . 继承</p>
<!-- 
https://blog.csdn.net/chenak74u/article/details/41213761
https://blog.csdn.net/mingli198611/article/details/7254275
https://blog.csdn.net/lskycity/article/details/41774651
https://blog.csdn.net/daweibalang717/article/details/40738073
-->
]]></content>
    
    <summary type="html">
    
      介绍关于 Style 命名和继承方式的知识
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Java InvocationHandler 实现动态代理</title>
    <link href="http://yoursite.com/2015/04/10/java-dynamic-proxy-invocationhandler-demo/"/>
    <id>http://yoursite.com/2015/04/10/java-dynamic-proxy-invocationhandler-demo/</id>
    <published>2015-04-10T02:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>代理是设计模式的一种，设计模式是指调用者并不直接调用实际的对象，而是通过调用代理，来间接的调用实际的对象。代理类与真正实现的类都是继承或者实现一个相同的类或这接口，这样的好处在于代理类可以与实际的类有相同的方法，可以保证客户端使用的透明性。<br>既然有动态代理，那么相对应的肯定也存在静态代理。</p>
<ul>
<li>静态代理：由程序员手工编写代理类。</li>
<li>动态代理：在程序运行时运用反射机制动态创建生成代理类。</li>
</ul>
<p>静态代理略去不介绍，下面介绍一下动态代理的实现。我们可以使用JDK的 InvocationHandler 和 Proxy 实现，也可以通过 CGLIB 来实现，他们的区别后面介绍，这里之介绍 InvocationHandler 和 Proxy 的实现。</p>
<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>Java的动态代理主要涉及两个类，<code>Proxy</code> 和 <code>InvocationHandler</code>。</p>
<ul>
<li><code>Proxy</code> 用于为接口生成动态代理类及其对象。</li>
<li><code>InvocationHandler</code> 提供了 <code>invoke</code> 方法，负责集中处理动态代理类上的所有方法调用。</li>
</ul>
<p>代理类会负责将所有的方法调用分派到委托对象上反射执行，在分派执行的过程中，开发人员还可以按需调整委托类对象及其功能，这是一套非常灵活有弹性的代理框架。<br>下面通过一个实例来演示一下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Fruit</span> </span>&#123;</div><div class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">implements</span> <span class="title">Fruit</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.e(<span class="string">"Test"</span>,<span class="string">"I am apple!"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="string">"Apple"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testProxy</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> Apple apple = <span class="keyword">new</span> Apple();</div><div class="line"></div><div class="line">    InvocationHandler invocationHandler = <span class="keyword">new</span> InvocationHandler() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">            <span class="keyword">if</span>(<span class="string">"getName"</span>.equals(method.getName()))&#123;</div><div class="line">                Log.e(<span class="string">"Test"</span>,<span class="string">"Let Apple introduce himself."</span>);</div><div class="line">                <span class="comment">// 返回方法的执行结果</span></div><div class="line">                Object result = method.invoke(apple, args);</div><div class="line">                Log.e(<span class="string">"Test"</span>,<span class="string">"Thank you!"</span>);</div><div class="line">                <span class="keyword">return</span> result;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    Fruit newApple = (Fruit) Proxy.newProxyInstance(invocationHandler.getClass().getClassLoader(),</div><div class="line">            apple.getClass().getInterfaces(),invocationHandler);</div><div class="line">    String name = newApple.getName();</div><div class="line">    Log.e(<span class="string">"Test"</span>,newApple.getClass().getName() + <span class="string">",name = "</span> + name);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">E/Test: Let Apple introduce himself.</div><div class="line">E/Test: I am apple!</div><div class="line">E/Test: Thank you!</div><div class="line">E/Test: $Proxy0,name = Apple</div></pre></td></tr></table></figure>
<p>实现动态代理的方法：</p>
<ol>
<li>获取需要代理的类的实例。</li>
<li>实现 InvocationHandler 接口创建自己的调用处理器，实现 invoke 方法，通过 <code>method.invoke(apple, args)</code> 调用被代理类。</li>
<li>通过 Proxy.newProxyInstance 方法并指定 ClassLoader 对象和一组 interface 以及 指定 invocationHandler 对象来创建动态代理类。</li>
<li>通过反射机制获得动态代理类的构造函数。</li>
<li>通过构造函数创建动态代理类实例，构造时调用处理器对象作为参数被传入。</li>
</ol>
<p>其中 <code>Proxy.newProxyInstance()</code> 方法封装了 3~5 步骤的实现。下面一节将会简单介绍它的原理。</p>
<h2 id="动态代理原理"><a href="#动态代理原理" class="headerlink" title="动态代理原理"></a>动态代理原理</h2><p>下来看一下 <code>Proxy.newProxyInstance()</code> 源码。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader, Class&lt;?&gt;[] interfaces,</span></span></div><div class="line">                                      InvocationHandler invocationHandler)</div><div class="line">        <span class="keyword">throws</span> IllegalArgumentException &#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (invocationHandler == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"invocationHandler == null"</span>);</div><div class="line">    &#125;</div><div class="line">    Exception cause;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">// getProxyClass 获得与指定类装载器和一组接口相关的代理类类型对象</span></div><div class="line">        <span class="comment">// getConstructor 通过反射获取构造函数对象</span></div><div class="line">        <span class="comment">// newInstance 生成代理类实例</span></div><div class="line">        <span class="keyword">return</span> getProxyClass(loader, interfaces)</div><div class="line">                .getConstructor(InvocationHandler.class)</div><div class="line">                .newInstance(invocationHandler);</div><div class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</div><div class="line">        cause = e;</div><div class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">        cause = e;</div><div class="line">    &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</div><div class="line">        cause = e;</div><div class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</div><div class="line">        cause = e;</div><div class="line">    &#125;</div><div class="line">    AssertionError error = <span class="keyword">new</span> AssertionError();</div><div class="line">    error.initCause(cause);</div><div class="line">    <span class="keyword">throw</span> error;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>来看一下 <code>Proxy.getProxyClass()</code>这个方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; getProxyClass(ClassLoader loader, Class&lt;?&gt;... interfaces)</div><div class="line">        <span class="keyword">throws</span> IllegalArgumentException &#123;</div><div class="line">    <span class="keyword">if</span> (loader == <span class="keyword">null</span>) &#123;</div><div class="line">        loader = ClassLoader.getSystemClassLoader();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (interfaces == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"interfaces == null"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> List&lt;Class&lt;?&gt;&gt; interfaceList = <span class="keyword">new</span> ArrayList&lt;Class&lt;?&gt;&gt;(interfaces.length);</div><div class="line">    Collections.addAll(interfaceList, interfaces);</div><div class="line"></div><div class="line">    <span class="keyword">final</span> Set&lt;Class&lt;?&gt;&gt; interfaceSet = <span class="keyword">new</span> HashSet&lt;Class&lt;?&gt;&gt;(interfaceList);</div><div class="line">    <span class="keyword">if</span> (interfaceSet.contains(<span class="keyword">null</span>)) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"interface list contains null: "</span> + interfaceList);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (interfaceSet.size() != interfaces.length) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"duplicate interface in list: "</span> + interfaceList);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">synchronized</span> (loader.proxyCache) &#123;</div><div class="line">        Class&lt;?&gt; proxy = loader.proxyCache.get(interfaceList);</div><div class="line">        <span class="keyword">if</span> (proxy != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> proxy;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    String commonPackageName = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">for</span> (Class&lt;?&gt; c : interfaces) &#123;</div><div class="line">        <span class="comment">// 如果不是interface，抛出异常</span></div><div class="line">        <span class="keyword">if</span> (!c.isInterface()) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(c + <span class="string">" is not an interface"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 判断是否对类装载器可见</span></div><div class="line">        <span class="keyword">if</span> (!isVisibleToClassLoader(loader, c)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(c + <span class="string">" is not visible from class loader"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!Modifier.isPublic(c.getModifiers())) &#123;</div><div class="line">            String packageName = c.getPackageName$();</div><div class="line">            <span class="keyword">if</span> (packageName == <span class="keyword">null</span>) &#123;</div><div class="line">                packageName = <span class="string">""</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (commonPackageName != <span class="keyword">null</span> &amp;&amp; !commonPackageName.equals(packageName)) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</div><div class="line">                        <span class="string">"non-public interfaces must be in the same package"</span>);</div><div class="line">            &#125;</div><div class="line">            commonPackageName = packageName;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    List&lt;Method&gt; methods = getMethods(interfaces);</div><div class="line">    Collections.sort(methods, ORDER_BY_SIGNATURE_AND_SUBTYPE);</div><div class="line">    validateReturnTypes(methods);</div><div class="line">    List&lt;Class&lt;?&gt;[]&gt; exceptions = deduplicateAndGetExceptions(methods);</div><div class="line"></div><div class="line">    ArtMethod[] methodsArray = <span class="keyword">new</span> ArtMethod[methods.size()];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; methodsArray.length; i++) &#123;</div><div class="line">        methodsArray[i] = methods.get(i).getArtMethod();</div><div class="line">    &#125;</div><div class="line">    Class&lt;?&gt;[][] exceptionsArray = exceptions.toArray(<span class="keyword">new</span> Class&lt;?&gt;[exceptions.size()][]);</div><div class="line"></div><div class="line">    <span class="comment">// 确定类名</span></div><div class="line">    String baseName = commonPackageName != <span class="keyword">null</span> &amp;&amp; !commonPackageName.isEmpty()</div><div class="line">            ? commonPackageName + <span class="string">".$Proxy"</span></div><div class="line">            : <span class="string">"$Proxy"</span>;</div><div class="line"></div><div class="line">    Class&lt;?&gt; result;</div><div class="line">    <span class="keyword">synchronized</span> (loader.proxyCache) &#123;</div><div class="line">        result = loader.proxyCache.get(interfaceSet);</div><div class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</div><div class="line">            String name = baseName + nextClassNameIndex++;</div><div class="line">            <span class="comment">// 生成代理类</span></div><div class="line">            result = generateProxy(name, interfaces, loader, methodsArray, exceptionsArray);</div><div class="line">            <span class="comment">// 放入缓存</span></div><div class="line">            loader.proxyCache.put(interfaceList, result);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>Proxy 虽然使用起来很方便，但它的设计使得它只能支持 interface 的代理，Java 的继承机制注定了动态代理类无法实现对 class 的动态代理，因为多继承在 Java 中本质上就行不通。因为代理类需要继承 Proxy 类，这样它就不能再继承其他的类了。因此不支持实现类的代理，只支持接口的代理。<br>但是目前也有了针对 class 的动态代理解决方案，比如 CGLib。</p>
<h2 id="相关推荐文章"><a href="#相关推荐文章" class="headerlink" title="相关推荐文章"></a>相关推荐文章</h2><p><a href="https://www.ibm.com/developerworks/cn/java/j-lo-proxy1/" target="_blank" rel="external">https://www.ibm.com/developerworks/cn/java/j-lo-proxy1/</a><br><a href="http://blog.csdn.net/chjttony/article/details/7934776" target="_blank" rel="external">http://blog.csdn.net/chjttony/article/details/7934776</a><br><a href="http://blog.csdn.net/rock_ray/article/details/22491763" target="_blank" rel="external">http://blog.csdn.net/rock_ray/article/details/22491763</a><br><a href="http://rejoy.iteye.com/blog/1627405" target="_blank" rel="external">http://rejoy.iteye.com/blog/1627405</a><br><a href="http://www.cnblogs.com/xiaoluo501395377/p/3383130.html" target="_blank" rel="external">http://www.cnblogs.com/xiaoluo501395377/p/3383130.html</a></p>
]]></content>
    
    <summary type="html">
    
      介绍使用 InvocationHandler 实现 Java 动态代理及其原理介绍
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="动态代理" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Android实用技巧之adb命令：am 命令的使用</title>
    <link href="http://yoursite.com/2015/03/26/android-development-skills-adb-am/"/>
    <id>http://yoursite.com/2015/03/26/android-development-skills-adb-am/</id>
    <published>2015-03-26T02:00:00.000Z</published>
    <updated>2018-11-11T12:08:47.867Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在 adb shell 中，您可以使用 Activity Manager (am) 工具发出命令以执行各种系统操作，如启动 Activity、强行停止进程、广播 intent、修改设备屏幕属性及其他操作。在 shell 中，此语法为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">am &lt;command&gt;</div></pre></td></tr></table></figure>
<p>您也可以直接从 adb 发出 Activity Manager 命令，无需进入远程 shell。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell am start -a android.intent.action.VIEW</div></pre></td></tr></table></figure>
<p>可用的 am 命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div></pre></td><td class="code"><pre><div class="line">usage: am [subcommand] [options]</div><div class="line">usage: am start [-D] [-N] [-W] [-P &lt;FILE&gt;] [--start-profiler &lt;FILE&gt;]</div><div class="line">               [--sampling INTERVAL] [-R COUNT] [-S]</div><div class="line">               [--track-allocation] [--user &lt;USER_ID&gt; | current] &lt;INTENT&gt;</div><div class="line">       am startservice [--user &lt;USER_ID&gt; | current] &lt;INTENT&gt;</div><div class="line">       am stopservice [--user &lt;USER_ID&gt; | current] &lt;INTENT&gt;</div><div class="line">       am force-stop [--user &lt;USER_ID&gt; | all | current] &lt;PACKAGE&gt;</div><div class="line">       am kill [--user &lt;USER_ID&gt; | all | current] &lt;PACKAGE&gt;</div><div class="line">       am kill-all</div><div class="line">       am broadcast [--user &lt;USER_ID&gt; | all | current] &lt;INTENT&gt;</div><div class="line">       am instrument [-r] [-e &lt;NAME&gt; &lt;VALUE&gt;] [-p &lt;FILE&gt;] [-w]</div><div class="line">               [--user &lt;USER_ID&gt; | current]</div><div class="line">               [--no-window-animation] [--abi &lt;ABI&gt;] &lt;COMPONENT&gt;</div><div class="line">       am profile start [--user &lt;USER_ID&gt; current] [--sampling INTERVAL] &lt;PROCESS&gt; &lt;FILE&gt;</div><div class="line">       am profile stop [--user &lt;USER_ID&gt; current] [&lt;PROCESS&gt;]</div><div class="line">       am dumpheap [--user &lt;USER_ID&gt; current] [-n] &lt;PROCESS&gt; &lt;FILE&gt;</div><div class="line">       am set-debug-app [-w] [--persistent] &lt;PACKAGE&gt;</div><div class="line">       am clear-debug-app</div><div class="line">       am set-watch-heap &lt;PROCESS&gt; &lt;MEM-LIMIT&gt;</div><div class="line">       am clear-watch-heap</div><div class="line">       am bug-report [--progress]</div><div class="line">       am monitor [--gdb &lt;port&gt;]</div><div class="line">       am hang [--allow-restart]</div><div class="line">       am restart</div><div class="line">       am idle-maintenance</div><div class="line">       am screen-compat [on|off] &lt;PACKAGE&gt;</div><div class="line">       am package-importance &lt;PACKAGE&gt;</div><div class="line">       am to-uri [INTENT]</div><div class="line">       am to-intent-uri [INTENT]</div><div class="line">       am to-app-uri [INTENT]</div><div class="line">       am switch-user &lt;USER_ID&gt;</div><div class="line">       am start-user &lt;USER_ID&gt;</div><div class="line">       am unlock-user &lt;USER_ID&gt; [TOKEN_HEX]</div><div class="line">       am stop-user [-w] [-f] &lt;USER_ID&gt;</div><div class="line">       am stack start &lt;DISPLAY_ID&gt; &lt;INTENT&gt;</div><div class="line">       am stack movetask &lt;TASK_ID&gt; &lt;STACK_ID&gt; [true|false]</div><div class="line">       am stack resize &lt;STACK_ID&gt; &lt;LEFT,TOP,RIGHT,BOTTOM&gt;</div><div class="line">       am stack resize-animated &lt;STACK_ID&gt; &lt;LEFT,TOP,RIGHT,BOTTOM&gt;</div><div class="line">       am stack resize-docked-stack &lt;LEFT,TOP,RIGHT,BOTTOM&gt; [&lt;TASK_LEFT,TASK_TOP,TASK_RIGHT,TASK_BOTTOM&gt;]</div><div class="line">       am stack size-docked-stack-test: &lt;STEP_SIZE&gt; &lt;l|t|r|b&gt; [DELAY_MS]</div><div class="line">       am stack move-top-activity-to-pinned-stack: &lt;STACK_ID&gt; &lt;LEFT,TOP,RIGHT,BOTTOM&gt;</div><div class="line">       am stack positiontask &lt;TASK_ID&gt; &lt;STACK_ID&gt; &lt;POSITION&gt;</div><div class="line">       am stack list</div><div class="line">       am stack info &lt;STACK_ID&gt;</div><div class="line">       am stack remove &lt;STACK_ID&gt;</div><div class="line">       am task lock &lt;TASK_ID&gt;</div><div class="line">       am task lock stop</div><div class="line">       am task resizeable &lt;TASK_ID&gt; [0 (unresizeable) | 1 (crop_windows) | 2 (resizeable) | 3 (resizeable_and_pipable)]</div><div class="line">       am task resize &lt;TASK_ID&gt; &lt;LEFT,TOP,RIGHT,BOTTOM&gt;</div><div class="line">       am task drag-task-test &lt;TASK_ID&gt; &lt;STEP_SIZE&gt; [DELAY_MS] </div><div class="line">       am task size-task-test &lt;TASK_ID&gt; &lt;STEP_SIZE&gt; [DELAY_MS] </div><div class="line">       am get-config</div><div class="line">       am suppress-resize-config-changes &lt;true|false&gt;</div><div class="line">       am set-inactive [--user &lt;USER_ID&gt;] &lt;PACKAGE&gt; true|false</div><div class="line">       am get-inactive [--user &lt;USER_ID&gt;] &lt;PACKAGE&gt;</div><div class="line">       am send-trim-memory [--user &lt;USER_ID&gt;] &lt;PROCESS&gt;</div><div class="line">               [HIDDEN|RUNNING_MODERATE|BACKGROUND|RUNNING_LOW|MODERATE|RUNNING_CRITICAL|COMPLETE]</div><div class="line">       am get-current-user</div><div class="line"></div><div class="line">am start: start an Activity.  Options are:</div><div class="line">    -D: enable debugging</div><div class="line">    -N: enable native debugging</div><div class="line">    -W: wait for launch to complete</div><div class="line">    --start-profiler &lt;FILE&gt;: start profiler and send results to &lt;FILE&gt;</div><div class="line">    --sampling INTERVAL: use sample profiling with INTERVAL microseconds</div><div class="line">        between samples (use with --start-profiler)</div><div class="line">    -P &lt;FILE&gt;: like above, but profiling stops when app goes idle</div><div class="line">    -R: repeat the activity launch &lt;COUNT&gt; times.  Prior to each repeat,</div><div class="line">        the top activity will be finished.</div><div class="line">    -S: force stop the target app before starting the activity</div><div class="line">    --track-allocation: enable tracking of object allocations</div><div class="line">    --user &lt;USER_ID&gt; | current: Specify which user to run as; if not</div><div class="line">        specified then run as the current user.</div><div class="line">    --stack &lt;STACK_ID&gt;: Specify into which stack should the activity be put.</div><div class="line">am startservice: start a Service.  Options are:</div><div class="line">    --user &lt;USER_ID&gt; | current: Specify which user to run as; if not</div><div class="line">        specified then run as the current user.</div><div class="line"></div><div class="line">am stopservice: stop a Service.  Options are:</div><div class="line">    --user &lt;USER_ID&gt; | current: Specify which user to run as; if not</div><div class="line">        specified then run as the current user.</div><div class="line"></div><div class="line">am force-stop: force stop everything associated with &lt;PACKAGE&gt;.</div><div class="line">    --user &lt;USER_ID&gt; | all | current: Specify user to force stop;</div><div class="line">        all users if not specified.</div><div class="line"></div><div class="line">am kill: Kill all processes associated with &lt;PACKAGE&gt;.  Only kills.</div><div class="line">  processes that are safe to kill -- that is, will not impact the user</div><div class="line">  experience.</div><div class="line">    --user &lt;USER_ID&gt; | all | current: Specify user whose processes to kill;</div><div class="line">        all users if not specified.</div><div class="line"></div><div class="line">am kill-all: Kill all background processes.</div><div class="line"></div><div class="line">am broadcast: send a broadcast Intent.  Options are:</div><div class="line">    --user &lt;USER_ID&gt; | all | current: Specify which user to send to; if not</div><div class="line">        specified then send to all users.</div><div class="line">    --receiver-permission &lt;PERMISSION&gt;: Require receiver to hold permission.</div><div class="line"></div><div class="line">am instrument: start an Instrumentation.  Typically this target &lt;COMPONENT&gt;</div><div class="line">  is the form &lt;TEST_PACKAGE&gt;/&lt;RUNNER_CLASS&gt; or only &lt;TEST_PACKAGE&gt; if there </div><div class="line">  is only one instrumentation.  Options are:</div><div class="line">    -r: print raw results (otherwise decode REPORT_KEY_STREAMRESULT).  Use with</div><div class="line">        [-e perf true] to generate raw output for performance measurements.</div><div class="line">    -e &lt;NAME&gt; &lt;VALUE&gt;: set argument &lt;NAME&gt; to &lt;VALUE&gt;.  For test runners a</div><div class="line">        common form is [-e &lt;testrunner_flag&gt; &lt;value&gt;[,&lt;value&gt;...]].</div><div class="line">    -p &lt;FILE&gt;: write profiling data to &lt;FILE&gt;</div><div class="line">    -w: wait for instrumentation to finish before returning.  Required for</div><div class="line">        test runners.</div><div class="line">    --user &lt;USER_ID&gt; | current: Specify user instrumentation runs in;</div><div class="line">        current user if not specified.</div><div class="line">    --no-window-animation: turn off window animations while running.</div><div class="line">    --abi &lt;ABI&gt;: Launch the instrumented process with the selected ABI.</div><div class="line">        This assumes that the process supports the selected ABI.</div><div class="line"></div><div class="line">am trace-ipc: Trace IPC transactions.</div><div class="line">  start: start tracing IPC transactions.</div><div class="line">  stop: stop tracing IPC transactions and dump the results to file.</div><div class="line">    --dump-file &lt;FILE&gt;: Specify the file the trace should be dumped to.</div><div class="line"></div><div class="line">am profile: start and stop profiler on a process.  The given &lt;PROCESS&gt; argument</div><div class="line">  may be either a process name or pid.  Options are:</div><div class="line">    --user &lt;USER_ID&gt; | current: When supplying a process name,</div><div class="line">        specify user of process to profile; uses current user if not specified.</div><div class="line"></div><div class="line">am dumpheap: dump the heap of a process.  The given &lt;PROCESS&gt; argument may</div><div class="line">  be either a process name or pid.  Options are:</div><div class="line">    -n: dump native heap instead of managed heap</div><div class="line">    --user &lt;USER_ID&gt; | current: When supplying a process name,</div><div class="line">        specify user of process to dump; uses current user if not specified.</div><div class="line"></div><div class="line">am set-debug-app: set application &lt;PACKAGE&gt; to debug.  Options are:</div><div class="line">    -w: wait for debugger when application starts</div><div class="line">    --persistent: retain this value</div><div class="line"></div><div class="line">am clear-debug-app: clear the previously set-debug-app.</div><div class="line"></div><div class="line">am set-watch-heap: start monitoring pss size of &lt;PROCESS&gt;, if it is at or</div><div class="line">    above &lt;HEAP-LIMIT&gt; then a heap dump is collected for the user to report</div><div class="line"></div><div class="line">am clear-watch-heap: clear the previously set-watch-heap.</div><div class="line"></div><div class="line">am bug-report: request bug report generation; will launch a notification</div><div class="line">    when done to select where it should be delivered. Options are: </div><div class="line">   --progress: will launch a notification right away to show its progress.</div><div class="line"></div><div class="line">am monitor: start monitoring for crashes or ANRs.</div><div class="line">    --gdb: start gdbserv on the given port at crash/ANR</div><div class="line"></div><div class="line">am hang: hang the system.</div><div class="line">    --allow-restart: allow watchdog to perform normal system restart</div><div class="line"></div><div class="line">am restart: restart the user-space system.</div><div class="line"></div><div class="line">am idle-maintenance: perform idle maintenance now.</div><div class="line"></div><div class="line">am screen-compat: control screen compatibility mode of &lt;PACKAGE&gt;.</div><div class="line"></div><div class="line">am package-importance: print current importance of &lt;PACKAGE&gt;.</div><div class="line"></div><div class="line">am to-uri: print the given Intent specification as a URI.</div><div class="line"></div><div class="line">am to-intent-uri: print the given Intent specification as an intent: URI.</div><div class="line"></div><div class="line">am to-app-uri: print the given Intent specification as an android-app: URI.</div><div class="line"></div><div class="line">am switch-user: switch to put USER_ID in the foreground, starting</div><div class="line">  execution of that user if it is currently stopped.</div><div class="line"></div><div class="line">am start-user: start USER_ID in background if it is currently stopped,</div><div class="line">  use switch-user if you want to start the user in foreground.</div><div class="line"></div><div class="line">am stop-user: stop execution of USER_ID, not allowing it to run any</div><div class="line">  code until a later explicit start or switch to it.</div><div class="line">  -w: wait for stop-user to complete.</div><div class="line">  -f: force stop even if there are related users that cannot be stopped.</div><div class="line"></div><div class="line">am stack start: start a new activity on &lt;DISPLAY_ID&gt; using &lt;INTENT&gt;.</div><div class="line"></div><div class="line">am stack movetask: move &lt;TASK_ID&gt; from its current stack to the top (true) or   bottom (false) of &lt;STACK_ID&gt;.</div><div class="line"></div><div class="line">am stack resize: change &lt;STACK_ID&gt; size and position to &lt;LEFT,TOP,RIGHT,BOTTOM&gt;.</div><div class="line"></div><div class="line">am stack resize-docked-stack: change docked stack to &lt;LEFT,TOP,RIGHT,BOTTOM&gt;</div><div class="line">   and supplying temporary different task bounds indicated by</div><div class="line">   &lt;TASK_LEFT,TOP,RIGHT,BOTTOM&gt;</div><div class="line"></div><div class="line">am stack size-docked-stack-test: test command for sizing docked stack by</div><div class="line">   &lt;STEP_SIZE&gt; increments from the side &lt;l&gt;eft, &lt;t&gt;op, &lt;r&gt;ight, or &lt;b&gt;ottom</div><div class="line">   applying the optional [DELAY_MS] between each step.</div><div class="line"></div><div class="line">am stack move-top-activity-to-pinned-stack: moves the top activity from</div><div class="line">   &lt;STACK_ID&gt; to the pinned stack using &lt;LEFT,TOP,RIGHT,BOTTOM&gt; for the</div><div class="line">   bounds of the pinned stack.</div><div class="line"></div><div class="line">am stack positiontask: place &lt;TASK_ID&gt; in &lt;STACK_ID&gt; at &lt;POSITION&gt;</div><div class="line">am stack list: list all of the activity stacks and their sizes.</div><div class="line"></div><div class="line">am stack info: display the information about activity stack &lt;STACK_ID&gt;.</div><div class="line"></div><div class="line">am stack remove: remove stack &lt;STACK_ID&gt;.</div><div class="line"></div><div class="line">am task lock: bring &lt;TASK_ID&gt; to the front and don&apos;t allow other tasks to run.</div><div class="line"></div><div class="line">am task lock stop: end the current task lock.</div><div class="line"></div><div class="line">am task resizeable: change resizeable mode of &lt;TASK_ID&gt;.</div><div class="line">   0 (unresizeable) | 1 (crop_windows) | 2 (resizeable) | 3 (resizeable_and_pipable)</div><div class="line"></div><div class="line">am task resize: makes sure &lt;TASK_ID&gt; is in a stack with the specified bounds.</div><div class="line">   Forces the task to be resizeable and creates a stack if no existing stack</div><div class="line">   has the specified bounds.</div><div class="line"></div><div class="line">am task drag-task-test: test command for dragging/moving &lt;TASK_ID&gt; by</div><div class="line">   &lt;STEP_SIZE&gt; increments around the screen applying the optional [DELAY_MS]</div><div class="line">   between each step.</div><div class="line"></div><div class="line">am task size-task-test: test command for sizing &lt;TASK_ID&gt; by &lt;STEP_SIZE&gt;   increments within the screen applying the optional [DELAY_MS] between</div><div class="line">   each step.</div><div class="line"></div><div class="line">am get-config: retrieve the configuration and any recent configurations</div><div class="line">  of the device.</div><div class="line">am suppress-resize-config-changes: suppresses configuration changes due to</div><div class="line">  user resizing an activity/task.</div><div class="line"></div><div class="line">am set-inactive: sets the inactive state of an app.</div><div class="line"></div><div class="line">am get-inactive: returns the inactive state of an app.</div><div class="line"></div><div class="line">am send-trim-memory: send a memory trim event to a &lt;PROCESS&gt;.</div><div class="line"></div><div class="line">am get-current-user: returns id of the current foreground user.</div><div class="line"></div><div class="line"></div><div class="line">&lt;INTENT&gt; specifications include these flags and arguments:</div><div class="line">    [-a &lt;ACTION&gt;] [-d &lt;DATA_URI&gt;] [-t &lt;MIME_TYPE&gt;]</div><div class="line">    [-c &lt;CATEGORY&gt; [-c &lt;CATEGORY&gt;] ...]</div><div class="line">    [-e|--es &lt;EXTRA_KEY&gt; &lt;EXTRA_STRING_VALUE&gt; ...]</div><div class="line">    [--esn &lt;EXTRA_KEY&gt; ...]</div><div class="line">    [--ez &lt;EXTRA_KEY&gt; &lt;EXTRA_BOOLEAN_VALUE&gt; ...]</div><div class="line">    [--ei &lt;EXTRA_KEY&gt; &lt;EXTRA_INT_VALUE&gt; ...]</div><div class="line">    [--el &lt;EXTRA_KEY&gt; &lt;EXTRA_LONG_VALUE&gt; ...]</div><div class="line">    [--ef &lt;EXTRA_KEY&gt; &lt;EXTRA_FLOAT_VALUE&gt; ...]</div><div class="line">    [--eu &lt;EXTRA_KEY&gt; &lt;EXTRA_URI_VALUE&gt; ...]</div><div class="line">    [--ecn &lt;EXTRA_KEY&gt; &lt;EXTRA_COMPONENT_NAME_VALUE&gt;]</div><div class="line">    [--eia &lt;EXTRA_KEY&gt; &lt;EXTRA_INT_VALUE&gt;[,&lt;EXTRA_INT_VALUE...]]</div><div class="line">        (mutiple extras passed as Integer[])</div><div class="line">    [--eial &lt;EXTRA_KEY&gt; &lt;EXTRA_INT_VALUE&gt;[,&lt;EXTRA_INT_VALUE...]]</div><div class="line">        (mutiple extras passed as List&lt;Integer&gt;)</div><div class="line">    [--ela &lt;EXTRA_KEY&gt; &lt;EXTRA_LONG_VALUE&gt;[,&lt;EXTRA_LONG_VALUE...]]</div><div class="line">        (mutiple extras passed as Long[])</div><div class="line">    [--elal &lt;EXTRA_KEY&gt; &lt;EXTRA_LONG_VALUE&gt;[,&lt;EXTRA_LONG_VALUE...]]</div><div class="line">        (mutiple extras passed as List&lt;Long&gt;)</div><div class="line">    [--efa &lt;EXTRA_KEY&gt; &lt;EXTRA_FLOAT_VALUE&gt;[,&lt;EXTRA_FLOAT_VALUE...]]</div><div class="line">        (mutiple extras passed as Float[])</div><div class="line">    [--efal &lt;EXTRA_KEY&gt; &lt;EXTRA_FLOAT_VALUE&gt;[,&lt;EXTRA_FLOAT_VALUE...]]</div><div class="line">        (mutiple extras passed as List&lt;Float&gt;)</div><div class="line">    [--esa &lt;EXTRA_KEY&gt; &lt;EXTRA_STRING_VALUE&gt;[,&lt;EXTRA_STRING_VALUE...]]</div><div class="line">        (mutiple extras passed as String[]; to embed a comma into a string,</div><div class="line">         escape it using &quot;\,&quot;)</div><div class="line">    [--esal &lt;EXTRA_KEY&gt; &lt;EXTRA_STRING_VALUE&gt;[,&lt;EXTRA_STRING_VALUE...]]</div><div class="line">        (mutiple extras passed as List&lt;String&gt;; to embed a comma into a string,</div><div class="line">         escape it using &quot;\,&quot;)</div><div class="line">    [--f &lt;FLAG&gt;]</div><div class="line">    [--grant-read-uri-permission] [--grant-write-uri-permission]</div><div class="line">    [--grant-persistable-uri-permission] [--grant-prefix-uri-permission]</div><div class="line">    [--debug-log-resolution] [--exclude-stopped-packages]</div><div class="line">    [--include-stopped-packages]</div><div class="line">    [--activity-brought-to-front] [--activity-clear-top]</div><div class="line">    [--activity-clear-when-task-reset] [--activity-exclude-from-recents]</div><div class="line">    [--activity-launched-from-history] [--activity-multiple-task]</div><div class="line">    [--activity-no-animation] [--activity-no-history]</div><div class="line">    [--activity-no-user-action] [--activity-previous-is-top]</div><div class="line">    [--activity-reorder-to-front] [--activity-reset-task-if-needed]</div><div class="line">    [--activity-single-top] [--activity-clear-task]</div><div class="line">    [--activity-task-on-home]</div><div class="line">    [--receiver-registered-only] [--receiver-replace-pending]</div><div class="line">    [--receiver-foreground]</div><div class="line">    [--selector]</div><div class="line">    [&lt;URI&gt; | &lt;PACKAGE&gt; | &lt;COMPONENT&gt;]</div></pre></td></tr></table></figure>
<h2 id="Intent-参数规范"><a href="#Intent-参数规范" class="headerlink" title="Intent 参数规范"></a>Intent 参数规范</h2><p>由于好几个 <code>am</code> 命令都可以带 <code>Intent</code> 参数，比如 <code>am start</code>、<code>am broadcast</code> 等，这里就先介绍一下 Intent 参数规范。<br><a href="https://developer.android.com/studio/command-line/adb#IntentSpec" target="_blank" rel="external">可以参考官方文档</a></p>
<ul>
<li><code>[-a &lt;ACTION&gt;]</code>：指定 intent 的 Action（setAction()方法），如“android.intent.action.VIEW”。此指定只能声明一次。 <code>am start -a android.intent.action.hq.TEST_AM</code></li>
<li><code>[-d &lt;DATA_URI&gt;]</code>：指定 intent 的 Data（setData()方法），如“content://contacts/people/1”。此指定只能声明一次。</li>
<li><code>[-t &lt;MIME_TYPE&gt;]</code>：指定 intent MIME 类型，如“image/png”。此指定只能声明一次。 </li>
<li><code>[-c &lt;CATEGORY&gt; [-c &lt;CATEGORY&gt;] ...]</code>：指定 intent 类别（addCategory(String category)），如“android.intent.category.APP_CONTACTS”。 </li>
<li><code>[-n &lt;COMPONENT&gt;]</code>：指定带有包名前缀的组件名称以创建显式 intent，如“com.example.heqiang.testsomething/.commontest.OtherTestActivity”。 </li>
<li><code>[--f &lt;FLAG&gt;]</code>：将标志添加到intent</li>
<li><code>[-e|--es &lt;EXTRA_KEY&gt; &lt;EXTRA_STRING_VALUE&gt; ...]</code>：添加一个 null extra。URI intent 不支持此选项。 <code>adb shell am start -a android.intent.action.hq.TEST_AM --es TEST test</code>，如果有多个参数：<code>adb shell am start -a android.intent.action.hq.TEST_AM --es TEST test --es TEST1 test1</code></li>
<li><code>[--esn &lt;EXTRA_KEY&gt; ...]</code>：添加字符串数据作为键值对。 <code>adb shell am start -a android.intent.action.hq.TEST_AM --esn TEST</code></li>
<li><code>[--ez &lt;EXTRA_KEY&gt; &lt;EXTRA_BOOLEAN_VALUE&gt; ...]</code>：添加布尔型数据作为键值对。 <code>adb shell am start -a android.intent.action.hq.TEST_AM --ez TEST true</code></li>
<li><code>[--ei &lt;EXTRA_KEY&gt; &lt;EXTRA_INT_VALUE&gt; ...]</code>：添加整数型数据作为键值对。 </li>
<li><code>[--el &lt;EXTRA_KEY&gt; &lt;EXTRA_LONG_VALUE&gt; ...]</code>：添加长整型数据作为键值对。 </li>
<li><code>[--ef &lt;EXTRA_KEY&gt; &lt;EXTRA_FLOAT_VALUE&gt; ...]</code>：添加浮点型数据作为键值对。 </li>
<li><code>[--eu &lt;EXTRA_KEY&gt; &lt;EXTRA_URI_VALUE&gt; ...]</code>：添加 URI 数据作为键值对。 </li>
<li><code>[--ecn &lt;EXTRA_KEY&gt; &lt;EXTRA_COMPONENT_NAME_VALUE&gt;]</code>：添加组件名称，将其作为 ComponentName 对象进行转换和传递。</li>
<li><code>[--eia &lt;EXTRA_KEY&gt; &lt;EXTRA_INT_VALUE&gt;[,&lt;EXTRA_INT_VALUE...]]</code>：添加整数数组， 转换成Integer[]进行传递</li>
<li><code>[--eial &lt;EXTRA_KEY&gt; &lt;EXTRA_INT_VALUE&gt;[,&lt;EXTRA_INT_VALUE...]]</code>：添加整数数组，转换成List<integer>进行传递</integer></li>
<li><code>[--ela &lt;EXTRA_KEY&gt; &lt;EXTRA_LONG_VALUE&gt;[,&lt;EXTRA_LONG_VALUE...]]</code>：添加长整型数组，转换成Long[]进行传递</li>
<li><code>[--elal &lt;EXTRA_KEY&gt; &lt;EXTRA_LONG_VALUE&gt;[,&lt;EXTRA_LONG_VALUE...]]</code>：添加长整型数组，转换成List<long>进行传递</long></li>
<li><code>[--efa &lt;EXTRA_KEY&gt; &lt;EXTRA_FLOAT_VALUE&gt;[,&lt;EXTRA_FLOAT_VALUE...]]</code>：添加浮点型数组，转换成Float[]进行传递</li>
<li><code>[--efal &lt;EXTRA_KEY&gt; &lt;EXTRA_FLOAT_VALUE&gt;[,&lt;EXTRA_FLOAT_VALUE...]]</code>：添加浮点型数组，转换成List<float>进行传递</float></li>
<li><code>[--esa &lt;EXTRA_KEY&gt; &lt;EXTRA_STRING_VALUE&gt;[,&lt;EXTRA_STRING_VALUE...]]</code>：添加字符串数组，转换成String[]进行传递<code>adb shell am start -a android.intent.action.hq.TEST_AM --esa TEST a,b,c</code></li>
<li><code>[--esal &lt;EXTRA_KEY&gt; &lt;EXTRA_STRING_VALUE&gt;[,&lt;EXTRA_STRING_VALUE...]]</code>：添加字符串数组，转换成List<string>进行传递</string></li>
<li><code>[--grant-read-uri-permission]</code> ：包含标志 FLAG_GRANT_READ_URI_PERMISSION。 </li>
<li><code>[--grant-write-uri-permission]</code>：包含标志 FLAG_GRANT_WRITE_URI_PERMISSION。 </li>
<li><code>[--grant-persistable-uri-permission]</code>：</li>
<li><code>[--grant-prefix-uri-permission]</code>：</li>
<li><code>[--debug-log-resolution]</code>：</li>
<li><code>[--exclude-stopped-packages]</code>：</li>
<li><code>[--include-stopped-packages]</code>：</li>
<li><code>[--activity-brought-to-front]</code>：</li>
<li><code>[--activity-clear-top]</code>：</li>
<li><code>[--activity-clear-when-task-reset]</code>：</li>
<li><code>[--activity-exclude-from-recents]</code>：</li>
<li><code>[--activity-launched-from-history]</code>：</li>
<li><code>[--activity-multiple-task]</code>：</li>
<li><code>[--activity-no-animation]</code>：</li>
<li><code>[--activity-no-history]</code>：</li>
<li><code>[--activity-no-user-action]</code>：</li>
<li><code>[--activity-previous-is-top]</code>：</li>
<li><code>[--activity-reorder-to-front]</code>：</li>
<li><code>[--activity-reset-task-if-needed]</code>：</li>
<li><code>[--activity-single-top]</code>：</li>
<li><code>[--activity-clear-task]</code>：</li>
<li><code>[--activity-task-on-home]</code>：</li>
<li><code>[--receiver-registered-only]</code>：</li>
<li><code>[--receiver-replace-pending]</code>：</li>
<li><code>[--receiver-foreground]</code>：</li>
<li><code>[--selector]</code>：</li>
<li><code>[&lt;URI&gt; | &lt;PACKAGE&gt; | &lt;COMPONENT&gt;]</code>：如果不受上述某一选项的限制，那么就认为是直接指定 URI、包名和组件名称。当参数不受限制时，如果参数包含一个“:”（冒号），则认为参数是一个 URI；如果参数包含一个“/”（正斜杠），则认为参数是一个组件名称；否则认为参数是一个包名。 </li>
</ul>
<h2 id="am-start"><a href="#am-start" class="headerlink" title="am start"></a>am start</h2><p>启动 intent 指定的 Activity：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">am start [-D] [-N] [-W] [-P &lt;FILE&gt;] [--start-profiler &lt;FILE&gt;]</div><div class="line">               [--sampling INTERVAL] [-R COUNT] [-S]</div><div class="line">               [--track-allocation] [--user &lt;USER_ID&gt; | current] &lt;INTENT&gt;</div></pre></td></tr></table></figure>
<p>可以使用一下选项：</p>
<ul>
<li>-D：启用调试。</li>
<li>-N：启用 Natvie 调试。</li>
<li><p>-W：等待启动完成。 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Status: ok</div><div class="line">Activity: com.example.heqiang.testsomething/.commontest.OtherTestActivity</div><div class="line">ThisTime: 131</div><div class="line">TotalTime: 131</div><div class="line">WaitTime: 157</div><div class="line">Complete</div></pre></td></tr></table></figure>
</li>
<li><p>–start-profiler <file>：启动分析器并将结果发送到 file。 </file></p>
</li>
<li>–sampling INTERVAL：制定采样率</li>
<li>-P <file>：类似于 –start-profiler，但当应用进入空闲状态时分析停止。 </file></li>
<li>-R <count>：重复 Activity 启动 count 次数。在每次重复前，将完成顶部 Activity。 </count></li>
<li>-S：启动 Activity 前强行停止目标应用。 </li>
<li>–track-allocation：打开Allocation Tracker用来跟踪内存分配</li>
<li>–user <user_id> | current：指定要作为哪个用户运行；如果未指定，则作为当前用户运行。 </user_id></li>
<li>–stack <stack_id>：指定将Activity放入的栈</stack_id></li>
</ul>
<h2 id="am-startservice"><a href="#am-startservice" class="headerlink" title="am startservice"></a>am startservice</h2><p>启动 intent 指定的 Service：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">am startservice [--user &lt;USER_ID&gt; | current] &lt;INTENT&gt;</div></pre></td></tr></table></figure>
<p>可以使用一下选项：</p>
<ul>
<li>–user <user_id> | current：指定要作为哪个用户运行；如果未指定，则作为当前用户运行。 </user_id></li>
</ul>
<h2 id="am-stopservice"><a href="#am-stopservice" class="headerlink" title="am stopservice"></a>am stopservice</h2><p>停止一个 Service</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">am stopservice [--user &lt;USER_ID&gt; | current] &lt;INTENT&gt;</div></pre></td></tr></table></figure>
<ul>
<li>–user <user_id> | current：指定要作为哪个用户运行；如果未指定，则作为当前用户运行。 </user_id></li>
</ul>
<h2 id="am-force-stop"><a href="#am-force-stop" class="headerlink" title="am force-stop"></a>am force-stop</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">am force-stop [--user &lt;USER_ID&gt; | all | current] &lt;PACKAGE&gt;</div></pre></td></tr></table></figure>
<p>强行停止与 package（应用的包名称）关联的所有应用。 </p>
<h2 id="am-kill"><a href="#am-kill" class="headerlink" title="am kill"></a>am kill</h2><p>终止与 package（应用的包名称）关联的所有进程。此命令仅终止可安全终止且不会影响用户体验的进程。 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">am kill [--user &lt;USER_ID&gt; | all | current] &lt;PACKAGE&gt;</div></pre></td></tr></table></figure>
<h2 id="am-kill-all"><a href="#am-kill-all" class="headerlink" title="am kill-all"></a>am kill-all</h2><p>终止所有后台进程。 </p>
<h2 id="am-broadcast"><a href="#am-broadcast" class="headerlink" title="am broadcast"></a>am broadcast</h2><p>发出广播 intent。 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">am broadcast [--user &lt;USER_ID&gt; | all | current] &lt;INTENT&gt;</div></pre></td></tr></table></figure>
<h2 id="am-stack"><a href="#am-stack" class="headerlink" title="am stack"></a>am stack</h2><ul>
<li><code>am stack start &lt;DISPLAY_ID&gt; &lt;INTENT&gt;</code>：</li>
<li><code>am stack movetask &lt;TASK_ID&gt; &lt;STACK_ID&gt; [true|false]</code>：</li>
<li><code>am stack resize &lt;STACK_ID&gt; &lt;LEFT,TOP,RIGHT,BOTTOM&gt;</code>：</li>
<li><code>am stack resize-animated &lt;STACK_ID&gt; &lt;LEFT,TOP,RIGHT,BOTTOM&gt;</code>：</li>
<li><code>am stack resize-docked-stack &lt;LEFT,TOP,RIGHT,BOTTOM&gt; [&lt;TASK_LEFT,TASK_TOP,TASK_RIGHT,TASK_BOTTOM&gt;]</code>：</li>
<li><code>am stack size-docked-stack-test: &lt;STEP_SIZE&gt; &lt;l|t|r|b&gt; [DELAY_MS]</code>：</li>
<li><code>am stack move-top-activity-to-pinned-stack: &lt;STACK_ID&gt; &lt;LEFT,TOP,RIGHT,BOTTOM&gt;</code>：</li>
<li><code>am stack positiontask &lt;TASK_ID&gt; &lt;STACK_ID&gt; &lt;POSITION&gt;</code>：</li>
<li><code>am stack list</code>：</li>
<li><code>am stack info &lt;STACK_ID&gt;</code>：</li>
<li><code>am stack remove &lt;STACK_ID&gt;</code>：</li>
<li><code>am task lock &lt;TASK_ID&gt;</code>：</li>
<li><code>am task lock stop</code>：</li>
<li><code>am task resizeable &lt;TASK_ID&gt; [0 (unresizeable) | 1 (crop_windows) | 2 (resizeable) | 3 (resizeable_and_pipable)]</code>：</li>
<li><code>am task resize &lt;TASK_ID&gt; &lt;LEFT,TOP,RIGHT,BOTTOM&gt;</code>：</li>
<li><code>am task drag-task-test &lt;TASK_ID&gt; &lt;STEP_SIZE&gt; [DELAY_MS]</code>：</li>
<li><code>am task size-task-test &lt;TASK_ID&gt; &lt;STEP_SIZE&gt; [DELAY_MS]</code>：</li>
</ul>
<h2 id="am-get-config"><a href="#am-get-config" class="headerlink" title="am get-config"></a>am get-config</h2><h2 id="am-send-trim-memory"><a href="#am-send-trim-memory" class="headerlink" title="am send-trim-memory"></a>am send-trim-memory</h2><p>发送回收内存的命令，会调用 Application 和 Activity 的 <code>onTrimMemory(int level)</code> 方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> am send-trim-memory [--user &lt;USER_ID&gt;] &lt;PROCESS&gt;</div><div class="line">[HIDDEN|RUNNING_MODERATE|BACKGROUND|RUNNING_LOW|MODERATE|RUNNING_CRITICAL|COMPLETE]</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell am send-trim-memory com.example.heqiang.testsomething RUNNING_CRITICAL</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      介绍 am 的使用
    
    </summary>
    
      <category term="Android实用技巧" scheme="http://yoursite.com/categories/Android%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="am" scheme="http://yoursite.com/tags/am/"/>
    
  </entry>
  
  <entry>
    <title>Android 文件存储以及获取目录路径方法汇总</title>
    <link href="http://yoursite.com/2015/03/20/android-get-dir-path/"/>
    <id>http://yoursite.com/2015/03/20/android-get-dir-path/</id>
    <published>2015-03-20T02:00:00.000Z</published>
    <updated>2018-09-20T02:11:06.343Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于-Android-存储的基础知识"><a href="#关于-Android-存储的基础知识" class="headerlink" title="关于 Android 存储的基础知识"></a>关于 Android 存储的基础知识</h2><p>Android 开发中经常会使用 Android 存储的相关知识，首先先介绍下面几个知识点。</p>
<h3 id="内部存储和外部存储"><a href="#内部存储和外部存储" class="headerlink" title="内部存储和外部存储"></a>内部存储和外部存储</h3><p>Android 中的文件存储可以分为内部存储和外部存储。<br>内部存储是指这些文件默认是只能被你的应用访问到，且一个应用所创建的所有文件都在和应用包名相同的目录下。也就是说应用创建于内部存储的文件，与这个应用是关联起来的。当一个应用卸载之后，内部存储中的这些文件也被删除。从技术上来讲如果你在创建内部存储文件的时候将文件属性设置成可读，其他app能够访问自己应用的数据，前提是他知道你这个应用的包名，如果一个文件的属性是私有（private），那么即使知道包名其他应用也无法访问。<br>内部存储一般用 <code>Context</code> 来获取和操作。<br>访问内部存储的API方法：</p>
<ul>
<li>Environment.getDataDirectory() </li>
<li>getFilesDir().getAbsolutePath() </li>
<li>getCacheDir().getAbsolutePath() </li>
<li>getDir(“myFile”, MODE_PRIVATE).getAbsolutePath()</li>
</ul>
<p>Android 外部存储可以分为两类：一个是机身存储的外部存储，另外一个是扩展的SD卡。他们统称为外部存储。<br>机身外部存储的路径在 Android4.4 以后是 /storage/emulated/0/，SD卡是 /storage/B3E4-1711/。<br>访问外部存储的API方法：</p>
<ul>
<li>Environment.getExternalStorageDirectory().getAbsolutePath() </li>
<li>Environment.getExternalStoragePublicDirectory(“”).getAbsolutePath()</li>
<li>getExternalFilesDir(“”).getAbsolutePath() </li>
<li>getExternalCacheDir().getAbsolutePath() </li>
</ul>
<h2 id="获取文件存储路径的方法"><a href="#获取文件存储路径的方法" class="headerlink" title="获取文件存储路径的方法"></a>获取文件存储路径的方法</h2><h3 id="Environment中的方法"><a href="#Environment中的方法" class="headerlink" title="Environment中的方法"></a>Environment中的方法</h3><p>先来看一下 <code>Environment</code> 中的一些方法，主要是获取一些系统的目录：</p>
<table>
<thead>
<tr>
<th style="text-align:center">方法名称</th>
<th style="text-align:center">目录路径</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">getDataAppDirectory()</td>
<td style="text-align:center">/data</td>
</tr>
<tr>
<td style="text-align:center">getDataDirectory()</td>
<td style="text-align:center">/cache</td>
</tr>
<tr>
<td style="text-align:center">getExternalStorageDirectory()</td>
<td style="text-align:center">/storage/emulated/0</td>
</tr>
<tr>
<td style="text-align:center">getExternalStoragePublicDirectory(Environment.DIRECTORY_MUSIC)</td>
<td style="text-align:center">/storage/emulated/0/Music</td>
</tr>
<tr>
<td style="text-align:center">getRootDirectory()</td>
<td style="text-align:center">/system</td>
</tr>
</tbody>
</table>
<p><code>getExternalStoragePublicDirectory(String type)</code> 支持的类型有：</p>
<ul>
<li>DIRECTORY_MUSIC</li>
<li>DIRECTORY_PODCASTS</li>
<li>DIRECTORY_RINGTONES</li>
<li>DIRECTORY_ALARMS</li>
<li>DIRECTORY_NOTIFICATIONS</li>
<li>DIRECTORY_PICTURES</li>
<li>DIRECTORY_MOVIES</li>
<li>DIRECTORY_DOWNLOADS</li>
<li>DIRECTORY_DCIM</li>
<li>DIRECTORY_DOCUMENTS</li>
<li>任何在/storage/emulated/0/的目录</li>
</ul>
<h3 id="Context中的方法"><a href="#Context中的方法" class="headerlink" title="Context中的方法"></a>Context中的方法</h3><p>主要是获取一些和应用相关的目录：</p>
<table>
<thead>
<tr>
<th style="text-align:center">方法名称</th>
<th style="text-align:center">目录路径</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">getPackageCodePath()</td>
<td style="text-align:center">/data/app/com.example.hq.testsomething-1/base.apk</td>
</tr>
<tr>
<td style="text-align:center">getPackageResourcePath()</td>
<td style="text-align:center">/data/app/com.example.hq.testsomething-1/base.apk</td>
</tr>
<tr>
<td style="text-align:center">getCacheDir()</td>
<td style="text-align:center">/data/user/0/com.example.hq.testsomething/cache</td>
</tr>
<tr>
<td style="text-align:center">getDatabasePath(“test”)</td>
<td style="text-align:center">/data/user/0/com.example.hq.testsomething/databases/test</td>
</tr>
<tr>
<td style="text-align:center">getDir(“test”, Context.MODE_PRIVATE)</td>
<td style="text-align:center">/data/user/0/com.example.hq.testsomething/app_test</td>
</tr>
<tr>
<td style="text-align:center">getExternalCacheDir()</td>
<td style="text-align:center">/storage/emulated/0/Android/data/com.example.hq.testsomething/cache</td>
</tr>
<tr>
<td style="text-align:center">getExternalFilesDir(Environment.DIRECTORY_MUSIC)</td>
<td style="text-align:center">/storage/emulated/0/Android/data/com.example.hq.testsomething/files/Music</td>
</tr>
<tr>
<td style="text-align:center">getExternalFilesDir(null)</td>
<td style="text-align:center">/storage/emulated/0/Android/data/com.example.hq.testsomething/files</td>
</tr>
<tr>
<td style="text-align:center">getFilesDir()</td>
<td style="text-align:center">/data/user/0/com.example.hq.testsomething/files</td>
</tr>
<tr>
<td style="text-align:center">getObbDir()</td>
<td style="text-align:center">/storage/emulated/0/Android/obb/com.example.hq.testsomething</td>
</tr>
</tbody>
</table>
<p><code>getExternalFilesDir(String type)</code> 的参数类型和前面的 <code>getExternalStoragePublicDirectory(String type)</code> 一样。</p>
<h2 id="Android-不同版本存储路径的区别"><a href="#Android-不同版本存储路径的区别" class="headerlink" title="Android 不同版本存储路径的区别"></a>Android 不同版本存储路径的区别</h2><table>
<thead>
<tr>
<th style="text-align:center">方法名称</th>
<th style="text-align:center">Android 版本</th>
<th style="text-align:center">目录路径</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">getExternalStorageDirectory()</td>
<td style="text-align:center">4.0</td>
<td style="text-align:center">/mnt/sdcard</td>
</tr>
<tr>
<td style="text-align:center">getExternalStorageDirectory()</td>
<td style="text-align:center">4.1</td>
<td style="text-align:center">/storage/sdcard0</td>
</tr>
<tr>
<td style="text-align:center">getExternalStorageDirectory()</td>
<td style="text-align:center">4.4</td>
<td style="text-align:center">/storage/emulated/0</td>
</tr>
<tr>
<td style="text-align:center">getExternalStorageDirectory()</td>
<td style="text-align:center">6.0</td>
<td style="text-align:center">/storage/emulated/0</td>
</tr>
<tr>
<td style="text-align:center">getFilesDir()</td>
<td style="text-align:center">4.0</td>
<td style="text-align:center">/data/data/com.example.hq.testsomething/files</td>
</tr>
<tr>
<td style="text-align:center">getFilesDir()</td>
<td style="text-align:center">4.1</td>
<td style="text-align:center">/data/data/com.example.hq.testsomething/files</td>
</tr>
<tr>
<td style="text-align:center">getFilesDir()</td>
<td style="text-align:center">4.4</td>
<td style="text-align:center">/data/data/com.example.hq.testsomething/files</td>
</tr>
<tr>
<td style="text-align:center">getFilesDir()</td>
<td style="text-align:center">6.0</td>
<td style="text-align:center">/data/user/0/com.example.hq.testsomething/files</td>
</tr>
</tbody>
</table>
<p>因此，我们需要获取文件存储路径时，不要用字符串来写死文件路径，这样容易带来Android版本兼容性文件，而是要用 Android 提供的方法来获取。虽然 Android 为了兼容以前的版本，建立了软连接（sdcard/、mnt/sdcard、storage/emulated/0）来指向外部存储。</p>
]]></content>
    
    <summary type="html">
    
      介绍 Android 中常用的获取目录路径的方法
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Git 常用命令</title>
    <link href="http://yoursite.com/2015/03/07/development-tool-git-command/"/>
    <id>http://yoursite.com/2015/03/07/development-tool-git-command/</id>
    <published>2015-03-07T02:00:00.000Z</published>
    <updated>2018-12-12T01:56:07.191Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h2><ul>
<li><code>git log -p</code>：显示每一次的提交的差异。</li>
<li><code>git log -p -n</code> （n为次数，整数）：指定了显示差异的次数，用 -2 则仅显示最近的两次更新.</li>
<li><code>git log --stat</code>：显示简要的增改行数统计，后面跟次数比如 -2 则仅显示最近的两次更新。</li>
<li><code>git log --author=寒江蓑笠</code>：显示某个作者的提交记录。</li>
<li><code>git log --committer=寒江蓑笠</code>：显示某个提交者的提交记录。</li>
<li><code>git log --since, --after</code>：仅显示指定时间之后的提交。</li>
<li><code>git log --until, --before</code>：仅显示指定时间之前的提交。</li>
<li><code>git log --pretty=oneline</code>：<code>--pretty</code> 选项可以指定使用完全不同于默认格式的方式展示提交历史。比如用 <code>oneline</code> 将 每个提交 放在一行显示，这在提交数很大时非常有用。另外还有 <code>short</code>，<code>full</code> 和 <code>fuller</code> 可以用。 <code>format</code> 可以定制要显示的记录格式，这样的输出便于后期编程提取分析。</li>
<li><code>git log --shortstat</code>：只显示 –stat 中最后的行数修改添加移除统计。</li>
<li><code>git log --name-only</code>：仅在提交信息后显示已修改的文件清单。</li>
<li><code>git log --name-status</code>：显示新增、修改、删除的文件清单。</li>
<li><code>git log --abbrev-commit</code>：仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。</li>
<li><code>git log --relative-date</code>：使用较短的相对时间显示（比如，”2 weeks ago”）。</li>
<li><code>git log --graph</code>：显示 ASCII 图形表示的分支合并历史。</li>
</ul>
<h2 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h2><ul>
<li><code>git checkout -- **(file)</code>：还原对file的修改</li>
<li><code>git checkout -b master remotes/master</code>：在本地建立一个与服务器对应的分支并切换过去</li>
</ul>
<h2 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h2><ul>
<li><code>git branch test</code>：创建一个test的本地分支</li>
<li><code>git branch -d</code>：删除本地分支</li>
<li><code>git branch -D</code>：强行删除本地分支</li>
</ul>
<h2 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h2><ul>
<li><code>git stash</code>：把当前修改保存到暂存区</li>
<li><code>git stash pop</code>：把暂存区的内容恢复到本地</li>
<li><code>git stash list</code>：显示stash 列表</li>
<li><code>git stash apply stash@{1}</code>：取出指定版本号栈中的内容，栈里面的记录仍然保存</li>
<li><code>git stash clear</code>：清楚stash列表</li>
<li><code>git stash save &quot;Test&quot;</code> 为当前的入栈使用指定的说明Test</li>
<li><code>git stash show</code> 查看最近的缓存的文件列表</li>
<li><code>git stash show stash@{0}</code> 查看名为stash{0}缓存的文件列表</li>
<li><code>git stash show -p stash@{0}</code>  查看名为stash{0}缓存的文件差异</li>
<li><code>git stash drop stash@{0}</code> 丢弃名为stash{0}缓存</li>
</ul>
<h2 id="git-config"><a href="#git-config" class="headerlink" title="git config"></a>git config</h2><p>先说一下–local、–global和–system三个参数的区别：</p>
<ol>
<li>–local的作用域最小，仅对当前的git项目的配置</li>
<li>–global的作用域是针对当前用户</li>
<li>–system的作用域最大，是针对整个计算机系统</li>
</ol>
<p>再来说一下他们的优先级，如果在三个级别都有配置，那么优先级为：<br>–local &gt; –global &gt; –system</p>
<ul>
<li>查看配置：git config –local -l</li>
<li>配置用户名和邮箱：git config –local user.name “xx”  git config –global user.email “xx”</li>
</ul>
<h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h2><ul>
<li><code>git reset --mixed</code>：此为默认方式，不带任何参数的<code>git reset</code>，即时这种方式，它回退到某个版本，只保留源码，回退commit和index信息</li>
<li><code>git reset --soft</code>：回退到某个版本，只回退了commit的信息，不会恢复到index file一级。如果还要提交，直接commit即可</li>
<li><code>git reset --hard</code>：彻底回退到某个版本，本地的源码也会变为上一个版本的内容</li>
<li><code>git reset HEAD^</code> ：默认的<code>reset</code>方式，指向HEAD之前最近的一次commit，</li>
<li><code>git reset --hard &lt;commit&gt;</code>：自从<commit>以来在working directory中的任何改变都被丢弃，并把HEAD指向<commit></commit></commit></li>
<li><code>git reset --hard HEAD~2</code>：丢弃最近两次的提交</li>
</ul>
<h3 id="删除远程仓库上最近的提交："><a href="#删除远程仓库上最近的提交：" class="headerlink" title="删除远程仓库上最近的提交："></a>删除远程仓库上最近的提交：</h3><p>先<code>git reset --hard HEAD~2</code>，然后<code>git push -f</code></p>
<h2 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h2><ul>
<li><code>git rm test</code>:删除test文件的跟踪，并且删除本地文件</li>
<li><code>git rm --cached test</code>:删除test文件的跟踪，但是保留在本地</li>
</ul>
<h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h2><ul>
<li><code>git commit --amend</code> ：对最后一次的 commit进行修改</li>
<li><code>git commit --amend -m &quot;Test&quot;</code> 对最后一次的 commit进行修改，并修改提交信息</li>
<li><code>git commit -s</code>：添加 Signed-off-by: 信息</li>
</ul>
<h2 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h2><p>假设<code>mywork</code>是以远程分支<code>origin</code>创建的本地分支。<br><code>rebase</code>个人理解就是重新在base分支提交的意思。<br><code>git rebase</code>用于把一个分支的修改合并到当前分支。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git checkout mywork</div><div class="line">$ git rebase origin</div></pre></td></tr></table></figure></p>
<p>这些命令会把你的”mywork”分支里的每个提交(commit)取消掉，并且把它们临时 保存为补丁(patch)(这些补丁放到<code>.git/rebase</code>目录中),然后把<code>mywork</code>分支更新 为最新的<code>origin</code>分支，最后把保存的这些补丁应用到<code>mywork</code>分支上。相当于在<code>mywork</code>上更新了它的 “base” <code>origin</code>分支。<br>这个要注意和<code>git merge</code>的区别。</p>
<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p><code>git rebase -i</code> 进入编辑模式，可以执行<code>edit</code>，<code>squash</code>等操作。</p>
<ul>
<li><code>pick</code>：<code>git</code>会应用这个补丁，以同样的提交信息（commit message）保存提交。</li>
<li><code>squash</code>：<code>git</code>会把这个提交和前一个提交合并成为一个新的提交。</li>
<li><code>edit</code>：<code>git</code>会完成同样的工作，但是在对<code>edit</code>的提交进行操作之前，它会返回到命令行让你对提交进行修正，或者对提交内容进行修改。可以在这个提交进行<code>amend</code>，分割提交等等修改操作。</li>
<li>丢弃：<code>rebase</code>的最后一个作用是丢弃提交。如果把一行删除而不是指定<code>pick</code>、<code>squash</code>和<code>edit</code>中的任何一个，git会从历史中移除该提交。</li>
</ul>
<h3 id="合并提交"><a href="#合并提交" class="headerlink" title="合并提交"></a>合并提交</h3><p><code>git rebase -i HEAD~10</code>：将前10个提交合并为一个。<br>执行以后进入编辑模式，按提示操作，将第二个及以后的<code>pick</code>修改为<code>squash</code>或者<code>s</code>，然后再按提示操作保存退出。</p>
<h2 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h2><ul>
<li><code>git pull --rebase</code>：表示把你的本地当前分支里的每个提交(commit)取消掉，并且把它们临时 保存为补丁(patch)(这些补丁放到<code>.git/rebase</code>目录中),然后把本地当前分支更新 为最新的<code>origin</code>分支，最后把保存的这些补丁应用到本地当前分支上。</li>
</ul>
<h2 id="patch"><a href="#patch" class="headerlink" title="patch"></a>patch</h2><p><code>git format-patch -n</code>：为前面的n次提交生成一个patch<br>应用patch：<br>先检查patch文件：<code># git apply --stat newpatch.patch</code><br>检查能否应用成功：<code># git apply --check  newpatch.patch</code><br>打补丁：<code># git am --signoff &lt; newpatch.patch</code><br>如果有冲突将会合并不成功<br>可以下面方法：<br><a href="http://blog.chinaunix.net/uid-27714502-id-3479018.html" target="_blank" rel="external">http://blog.chinaunix.net/uid-27714502-id-3479018.html</a><br>先手工 <code>apply patch</code>中没有冲突的部分：<br><code>git apply --reject 0001-test.patch</code><br>这样，就把没有冲突的文件先合并了，剩下有冲突的作了标记。<br>可以看输出，同时，还会产生一个<code>*.rej</code>文件，里面也是上面这段因为冲突无法合并的代码片断。<br>根据apply的输出提示以及<code>mm/sparse.c.rej</code>文件中的描述，手动修正代码。<br>改好之后，用 <code>git add</code> 把文件添加到缓冲区，同时也要把其他没有冲突合并成功了的文件也加进来，因为在作 <code>apply</code> 操作的时候他们也发生了变化。<br><code>git am --resolved</code><br>然后合并提交即可。</p>
<h2 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h2><ul>
<li>git remote: 不带参数，列出已经存在的远程分支</li>
<li>git remote -v | –verbose: 列出详细信息，在每一个名字后面列出其远程url</li>
<li>git remote add <name> <url>: 添加远程仓库</url></name></li>
<li>git remote show <origin>：查看本地和远程分支的状态，origin为远程分支的名称</origin></li>
<li>git remote rename &lt;原名字&gt; &lt;新名字&gt;：重命名远程库</li>
<li>git remote remove <name>：删除添加的远程库</name></li>
</ul>
<h2 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h2><h3 id="git-merge-s-ours"><a href="#git-merge-s-ours" class="headerlink" title="git merge -s ours"></a>git merge -s ours</h3><p>cherry pick 与 git merge</p>
<h2 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h2><h2 id="解-gerrit-冲突"><a href="#解-gerrit-冲突" class="headerlink" title="解 gerrit 冲突"></a>解 gerrit 冲突</h2><!--  https://www.cnblogs.com/xiaoerlang/p/3810206.html -->
<h3 id="解决本地有提交记录的远程冲突"><a href="#解决本地有提交记录的远程冲突" class="headerlink" title="解决本地有提交记录的远程冲突"></a>解决本地有提交记录的远程冲突</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">git fetch origin</div><div class="line">git rebase origin/develop</div><div class="line">//修改冲突文件</div><div class="line">...</div><div class="line">git add .</div><div class="line">git rebase --continue</div><div class="line">git push origin HEAD:refs/changes/&lt;changeID&gt;</div><div class="line">//不会产生新的changes记录，将原changes记录重新review提交即可</div><div class="line">git pull</div></pre></td></tr></table></figure>
<h3 id="解决本地没有提交记录的远程冲突"><a href="#解决本地没有提交记录的远程冲突" class="headerlink" title="解决本地没有提交记录的远程冲突"></a>解决本地没有提交记录的远程冲突</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// 下面的 url 指的是 pull request 对应的地址，比如： ssh://name@test.com:29418/app/ProjectName refs/changes/40/1000/3</div><div class="line">git fetch &lt;url&gt; &amp;&amp; git checkout FETCH_HEAD</div><div class="line">git checkout -b new_branch_name        // 新建一个本地分支用来解冲突</div><div class="line">git fetch origin                       //远程仓库的名称可以用  git remote -v 来查看</div><div class="line">git rebase origin/develop              //rebase 你冲突的代码分支，develop为当前提交代码所在的分支</div><div class="line">修改冲突文件</div><div class="line">git rebase --continue</div><div class="line">git push origin new_branch_name:refs/for/develop</div><div class="line">git checkout develop</div><div class="line">git branch -D new_branch_name</div><div class="line">//不会产生新的 changes 记录，将原 changes 记录重新 review 提交即可，这时在原冲突机器上直接pull会本地冲突，需要</div><div class="line">git reset --hard HEAD^</div><div class="line">//否则会出现cannot do a partial commit during a merge.最后更新下代码</div><div class="line">git pull</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      列举一些常用的Git命令
    
    </summary>
    
      <category term="开发工具" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="开发工具" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Android  应该了解的知识系列 - 资源引用的那些事儿</title>
    <link href="http://yoursite.com/2015/02/20/android-knowledge-using-resources/"/>
    <id>http://yoursite.com/2015/02/20/android-knowledge-using-resources/</id>
    <published>2015-02-20T02:00:00.000Z</published>
    <updated>2018-11-15T01:14:42.551Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Android 开发过程中避免不了的会引用 xml 资源，现在针对资源的引用方式总结如下。</p>
<h2 id="资源引用方式"><a href="#资源引用方式" class="headerlink" title="资源引用方式"></a>资源引用方式</h2><p>先介绍一下下面一些名称代表的意义：</p>
<ul>
<li>package_name：资源文件所在的包名</li>
<li>resource_type：资源文件的类型，比如string、color等</li>
<li>resource_name：资源文件的名称</li>
</ul>
<h3 id="引用自定义资源"><a href="#引用自定义资源" class="headerlink" title="引用自定义资源"></a>引用自定义资源</h3><blockquote>
<p><code>@[&lt;package_name&gt;:]&lt;resource_type&gt;/&lt;resource_name&gt;</code></p>
</blockquote>
<p>比如：</p>
<ul>
<li><code>android:textColor=&quot;@color/Blue_1&quot;</code></li>
</ul>
<p>另外：</p>
<ul>
<li>@+id/资源ID名： 表示创建一个新的资源ID</li>
<li>@id/资源ID名： 应用现有已定义的资源ID，包括系统ID</li>
<li>@android:id/资源ID名：引用系统ID，其等效于@id/资源ID名</li>
</ul>
<h3 id="引用系统资源"><a href="#引用系统资源" class="headerlink" title="引用系统资源"></a>引用系统资源</h3><h4 id="引用-public-资源"><a href="#引用-public-资源" class="headerlink" title="引用 public 资源"></a>引用 public 资源</h4><p> public 资源是指在 <code>&lt;sdk_path&gt;/platforms/android-21/data/res/values/public.xml</code> 中定义的资源</p>
<p>引用方式：</p>
<blockquote>
<p><code>@android:&lt;resource_type&gt;/&lt;resource_name&gt;</code></p>
</blockquote>
<p>比如：</p>
<ul>
<li><code>android:textColor=&quot;@android:color/black&quot;</code></li>
</ul>
<h4 id="引用非-public-资源"><a href="#引用非-public-资源" class="headerlink" title="引用非 public 资源"></a>引用非 public 资源</h4><p>引用方式：</p>
<blockquote>
<p><code>@*android:&lt;resource_type&gt;/&lt;resource_name&gt;</code></p>
</blockquote>
<p>这种引用方式是google不推荐使用的。</p>
<p>如果 Java 代码中引用可以<code>com.android.internal.R.&lt;resource_type&gt;.&lt;resource_name&gt;</code>，但是这种方式第三方应用是不适用的，可以通过反射 <code>com.android.internal.R</code> 的方式实现。<br>或者是通过在 xml 引用，在通过 <code>getResources</code> 方式使用。</p>
<h3 id="引用主题属性"><a href="#引用主题属性" class="headerlink" title="引用主题属性"></a>引用主题属性</h3><blockquote>
<p><code>?[&lt;package_name&gt;:]&lt;resource_type&gt;/&lt;resource_name&gt;</code></p>
</blockquote>
<p>？表示从当前 Theme 中查找引用的资源名，这个 google 叫预定义样式，用在多主题时的场景，属性值会随着主题而改变。这样我们就不必提供具体的值，而可以通过改变主题来改变UI元素的外观。<br>用法：</p>
<ul>
<li><code>android:textColor=&quot;?color&quot;</code>：引用自定义的</li>
<li><code>android:textColor=&quot;?attr/color&quot;</code>：引用自定义的，和上面等效</li>
<li><code>android:textColor=&quot;?android:colorButtonNormal&quot;</code>：引用系统的</li>
<li><code>android:textColor=&quot;?android:attr/colorButtonNormal&quot;</code>：引用系统的，和上面等效</li>
<li><code>android:textColor=&quot;?attr/android:colorButtonNormal&quot;</code>：引用系统的，和上面等效</li>
</ul>
]]></content>
    
    <summary type="html">
    
      介绍Android 中资源引用的几种方法
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android IPC 之 Messenger</title>
    <link href="http://yoursite.com/2015/02/02/android-ipc-messenger/"/>
    <id>http://yoursite.com/2015/02/02/android-ipc-messenger/</id>
    <published>2015-02-02T02:00:00.000Z</published>
    <updated>2018-12-21T05:59:54.700Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>说起 Android 进程间通信，大家第一时间的想法可能是编写AIDL文件，但是Android上面还有另外一种简单方便的实现方式：<code>Messenger</code>，也就是这篇文章的主角。</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>我们现在通过一个实例来介绍<code>Messenger</code>的使用方法。<br>实例中用到了两个APK，MessengerClient和MessengerServer。</p>
<h3 id="Server端"><a href="#Server端" class="headerlink" title="Server端"></a>Server端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessengerService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_ADD = <span class="number">0</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Messenger  mMessenger = <span class="keyword">new</span> Messenger(<span class="keyword">new</span> ServiceHandler());</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MessengerService</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        Log.e(<span class="string">"Test"</span>,<span class="string">"MessengerService onBind"</span>);</div><div class="line">        <span class="keyword">return</span> mMessenger.getBinder();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span></span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="keyword">switch</span> (msg.what)&#123;</div><div class="line">                <span class="keyword">case</span> MSG_ADD:</div><div class="line">                    Message messageTo = Message.obtain();</div><div class="line">                    messageTo.arg1 = msg.arg1 + msg.arg2;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        msg.replyTo.send(messageTo);</div><div class="line">                    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line"></div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                    <span class="keyword">super</span>.handleMessage(msg);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>AndroidManifest.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">service</span></span></div><div class="line">    <span class="attr">android:name</span>=<span class="string">".MessengerService"</span></div><div class="line">    <span class="attr">android:enabled</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">android:exported</span>=<span class="string">"true"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.android.hq.messenger"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>可以看到Server端代码很简单，就是一个 <code>Service</code>，只需要去声明一个 <code>Messenger</code> 对象，然后 <code>onBind</code> 方法返回 <code>mMessenger.getBinder()</code>。</p>
<h3 id="Client端"><a href="#Client端" class="headerlink" title="Client端"></a>Client端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MainActivity"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_ADD = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Messenger mService = <span class="keyword">null</span>;</div><div class="line">    <span class="comment">// 缓存在bindService之前请求发送的消息</span></div><div class="line">    <span class="keyword">private</span> ArrayList&lt;Runnable&gt; mPendingTask = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATUS_UNBIND = <span class="number">0</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATUS_BINDING = <span class="number">1</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATUS_BOUND = <span class="number">2</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mBindStatus = STATUS_UNBIND;</div><div class="line">    <span class="keyword">private</span> IBinder.DeathRecipient mDeathRecipient;</div><div class="line">    <span class="keyword">private</span> ServiceConnection mServiceConnection;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        mDeathRecipient = <span class="keyword">new</span> IBinder.DeathRecipient()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">binderDied</span><span class="params">()</span> </span>&#123;</div><div class="line">                Log.d(TAG,<span class="string">"binderDied"</span>);</div><div class="line">                mServiceConnection.onServiceDisconnected(<span class="keyword">null</span>);</div><div class="line">                doBindService();</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        doBindService();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        <span class="keyword">if</span> (mBindStatus == STATUS_BOUND &amp;&amp; mServiceConnection != <span class="keyword">null</span>) &#123;</div><div class="line">            unbindService(mServiceConnection);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doBindService</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(mBindStatus == STATUS_UNBIND)&#123;</div><div class="line">            mBindStatus = STATUS_BINDING;</div><div class="line">            Intent intent = <span class="keyword">new</span> Intent();</div><div class="line">            intent.setAction(<span class="string">"com.android.hq.messenger"</span>);</div><div class="line">            intent.setPackage(<span class="string">"com.android.hq.messengerserver"</span>);</div><div class="line"><span class="comment">//            intent.setClassName("com.android.hq.messengerserver", "com.android.hq.messengerserver.MessengerService");</span></div><div class="line">            bindService(intent, getServiceConnection(), Context.BIND_AUTO_CREATE);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAddClick</span><span class="params">(View v)</span></span>&#123;</div><div class="line">        Message message = Message.obtain(<span class="keyword">null</span>, MSG_ADD, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line">        message.replyTo = mMessenger;</div><div class="line">        sendMessage(message);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(<span class="keyword">final</span> Message message)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(message == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">if</span> (mService == <span class="keyword">null</span>) &#123;</div><div class="line">            doBindService();</div><div class="line">            <span class="keyword">synchronized</span> (mPendingTask) &#123;</div><div class="line">                mPendingTask.add(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                        sendMessage(message);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                mService.send(message);</div><div class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> ServiceConnection <span class="title">getServiceConnection</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mServiceConnection == <span class="keyword">null</span>) &#123;</div><div class="line">            mServiceConnection = <span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class="line">                    mBindStatus = STATUS_BOUND;</div><div class="line">                    mService = <span class="keyword">new</span> Messenger(service);</div><div class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"onServiceConnected"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        service.linkToDeath(mDeathRecipient, <span class="number">0</span>);</div><div class="line">                    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                        Log.d(TAG, <span class="string">"linkToDeath"</span>, e);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">synchronized</span> (mPendingTask) &#123;</div><div class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mPendingTask.size(); i++) &#123;</div><div class="line">                            mPendingTask.get(i).run();</div><div class="line">                        &#125;</div><div class="line">                        mPendingTask.clear();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</div><div class="line">                    mService = <span class="keyword">null</span>;</div><div class="line">                    mBindStatus = STATUS_UNBIND;</div><div class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"onServiceDisconnected"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> mServiceConnection;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Messenger mMessenger = <span class="keyword">new</span> Messenger(<span class="keyword">new</span> Handler()&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="keyword">switch</span> (msg.what)&#123;</div><div class="line">                <span class="keyword">case</span> MSG_ADD:</div><div class="line">                    <span class="keyword">int</span> result = msg.arg1;</div><div class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"result = "</span>+result, Toast.LENGTH_LONG).show();</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                    <span class="keyword">super</span>.handleMessage(msg);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>看一下<code>Messenger</code>的源码，首先看一下它的构造函数：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Messenger</span><span class="params">(Handler target)</span> </span>&#123;</div><div class="line">    mTarget = target.getIMessenger();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Messenger</span><span class="params">(IBinder target)</span> </span>&#123;</div><div class="line">    mTarget = IMessenger.Stub.asInterface(target);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们先来分析第一个，看看这个<code>getIMessenger()</code>是怎么实现的，在Handler.java类中，它是这么实现的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> IMessenger <span class="title">getIMessenger</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">synchronized</span> (mQueue) &#123;</div><div class="line">        <span class="keyword">if</span> (mMessenger != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> mMessenger;</div><div class="line">        &#125;</div><div class="line">        mMessenger = <span class="keyword">new</span> MessengerImpl();</div><div class="line">        <span class="keyword">return</span> mMessenger;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>那么这个<code>MessengerImpl()</code>类又是什么呢？<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MessengerImpl</span> <span class="keyword">extends</span> <span class="title">IMessenger</span>.<span class="title">Stub</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">        msg.sendingUid = Binder.getCallingUid();</div><div class="line">        Handler.<span class="keyword">this</span>.sendMessage(msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>咦！<code>IMessenger.Stub</code>，似曾相识的感觉！是的，我们平时写aidl文件，就会生成一个<code>IXXX.Stub</code>的类，那么是不是也有个<code>IMessenger.aidl</code>的文件呢？哈，还真有，<br>frameworks/base/core/java/android/os/IMessenger.aidl：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> android.os;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.Message;</div><div class="line"></div><div class="line"><span class="comment">/** <span class="doctag">@hide</span> */</span></div><div class="line">oneway <span class="class"><span class="keyword">interface</span> <span class="title">IMessenger</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">send</span><span class="params">(in Message msg)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>到这里大家应该明白了，<code>Messenger</code>和我们用aidl文件的方式实现进程间通信其实是异曲同工的，它也是依赖aidl文件生成的类，继承了IMessenger.Stub类，实现了send方法，send方法中参数会通过客户端传递过来，最终发送给handler进行处理。<br>其实在它的另一个构造函数中已经体现出来了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Messenger</span><span class="params">(IBinder target)</span> </span>&#123;</div><div class="line">    mTarget = IMessenger.Stub.asInterface(target);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Messenger和AIDL区别"><a href="#Messenger和AIDL区别" class="headerlink" title="Messenger和AIDL区别"></a>Messenger和AIDL区别</h2><p>Messenger是以串行的方式处理客户端发来的消息，如果有大量的消息同时发送到服务端，服务端仍然只能一个一个的处理，如果有大量并发请求，Messenger就不太适用了。Messenger的作用主要是为了传递消息，很多时候我们可能需要跨进程调用服务端的方法，这种情形Messenger就无法做到了，这个时候可以直接使用AIDL来实现。</p>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>在个别手机上会出现跨进程<code>bindService</code>失败的问题，可能是个别定制rom默认禁止掉了跨进程<code>bindService</code>这种方式，在原生系统里面是可以的。<br>或者是在手机管家里面设置允许应用后台运行即可。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://blog.csdn.net/lmj623565791/article/details/47017485" target="_blank" rel="external">http://blog.csdn.net/lmj623565791/article/details/47017485</a></p>
]]></content>
    
    <summary type="html">
    
      介绍Messenger的使用
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Messenger" scheme="http://yoursite.com/tags/Messenger/"/>
    
  </entry>
  
  <entry>
    <title>Android IPC 之 AIDL</title>
    <link href="http://yoursite.com/2015/02/01/android-ipc-aidl/"/>
    <id>http://yoursite.com/2015/02/01/android-ipc-aidl/</id>
    <published>2015-02-01T02:00:00.000Z</published>
    <updated>2018-08-31T14:44:25.885Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>AIDL是Android Interface Definition Language的简称，也就是Android接口定义语言，通过它我们可以定义进程间的通信接口。</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>我们现在通过一个实例来介绍 AIDL 的使用方法。实例中服务端维护了一个<code>Student</code>列表，客户端可以通过跨进程调用来向列表添加和查询数据。</p>
<h3 id="创建AIDL接口"><a href="#创建AIDL接口" class="headerlink" title="创建AIDL接口"></a>创建AIDL接口</h3><p>AIDL文件支持的数据类型：</p>
<ul>
<li>基本数据类型（int, long, boolean, float, double）；</li>
<li>String和CharSequence；</li>
<li>List或Map类型：List或Map中的所有元素必须是AIDL支持的类型之一，或者是一个其他AIDL生成的接口，或者是定义的<code>parcelable</code>。</li>
</ul>
<p>如果我们需要使用非默认支持的数据类型，就要我们自己定义一个<code>parcelable</code>对象。</p>
<p>AIDL文件的创建方法如图所示：</p>
<p><img src="/images/android-ipc-aidl/add-aidl.png" alt="效果图"></p>
<p>创建完AIDL文件，工程的目录会变成下图所示的样子，多了一个aidl包，和java在同一个层级之下。并且aidl文件的包和java文件的包是一样的。</p>
<p><img src="/images/android-ipc-aidl/add-aidl-structure.png" alt="效果图"></p>
<p>在这里有两个AIDL文件：</p>
<ul>
<li>Student.aidl：用来定义进程间需要传输的数据对象的parcelable类，以供其他AIDL文件使用AIDL中非默认支持的数据类型的。</li>
<li>StudentManager.aidl：用来定义一些来完成跨进程通信的接口的类。</li>
</ul>
<p>下面来看这两个接口的实现：</p>
<p>Student.aidl<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.android.hq.aidldemo;</div><div class="line"></div><div class="line">parcelable Student;</div></pre></td></tr></table></figure></p>
<p>StudentManager.aidl<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.android.hq.aidldemo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.android.hq.aidldemo.Student;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">StudentManager</span> </span>&#123;</div><div class="line">    <span class="function">List&lt;Student&gt;  <span class="title">getStudents</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">//传参时除了Java基本类型以及String，CharSequence之外的类型，都需要在前面指定定向tag，具体加什么根据自己需要</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addStudent</span><span class="params">(inout Student student)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里，虽然Studet.java和StudentManager.aidl在同一个包下面，但<code>Studet</code>不是系统默认支持的数据类型，使用的时候必须添加<code>import</code>进来。</p>
<p>Student.java<br><code>Student</code>是用于跨进程传输数据使用的，因此必须进行序列化，选择的序列化方式是实现 <code>Parcelable</code> 接口。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> grade;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Student</span><span class="params">(Parcel in)</span> </span>&#123;</div><div class="line">        <span class="comment">// 注意读取的顺序要和写入顺序一致</span></div><div class="line">        name = in.readString();</div><div class="line">        age = in.readInt();</div><div class="line">        grade = in.readInt();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getGrade</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> grade;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGrade</span><span class="params">(<span class="keyword">int</span> grade)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.grade = grade;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Creator&lt;Student&gt; CREATOR = <span class="keyword">new</span> Creator&lt;Student&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Student <span class="title">createFromParcel</span><span class="params">(Parcel in)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Student(in);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> Student[] newArray(<span class="keyword">int</span> size) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Student[size];</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel dest, <span class="keyword">int</span> flags)</span> </span>&#123;</div><div class="line">        <span class="comment">// 注意写入的顺序要和读取顺序一致</span></div><div class="line">        dest.writeString(name);</div><div class="line">        dest.writeInt(age);</div><div class="line">        dest.writeInt(grade);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 因为Student在StudentManager.aidl中被申明为inout类型，这里必须实现这个方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFromParcel</span><span class="params">(Parcel dest)</span> </span>&#123;</div><div class="line">        <span class="comment">// 注意读取的顺序要和写入顺序一致</span></div><div class="line">        name = dest.readString();</div><div class="line">        age = dest.readInt();</div><div class="line">        grade = dest.readInt();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"name = "</span>+name+<span class="string">", age = "</span>+age+<span class="string">", grade = "</span>+grade;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这里注意一下，我们知道如果是要在不同的应用中进行进程通信，两个应用必须要相同的 aidl 文件（包名也要一样）。或者是 Client 端 BookManager.aidl 定义的接口在 Service 端必须存在，即 Service 端的接口大于或等于 Client 端的接口。<br>这里为了方便移植，我们把进程通信需要的文件都放在 aidl 目录下面，当然也包括了 Student.java 这个java文件，但是Android Studio默认是只在<code>src/main/java</code>找源文件的，因此需要进行下面的配置，在 build.gradle 文件的<code>android{}</code>里面加上下面代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sourceSets &#123;</div><div class="line">    main &#123;</div><div class="line">        java.srcDirs = [&apos;src/main/java&apos;, &apos;src/main/aidl&apos;]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>添加之后编译，工程变成下图现实，aidl也就显示在源文件下面了：</p>
<p><img src="/images/android-ipc-aidl/add-source-structure.png" alt="效果图"></p>
<p>编译过之后，会生成下面的文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app/build/generated/source/aidl/debug/com/android/hq/aidldemo/StudentManager.java</div></pre></td></tr></table></figure>
<p>StudentManager.aidl 这里<code>void addStudent(inout Student student);</code>的参数类型必须指定定向tag，否则编译会报下面的错误，这里我们指定的是<code>inout</code>类型。一旦申明为<code>inout</code>这个类型，<code>Student</code>类就必须实现<code>readFromParcel()</code>方法。具体<code>inout</code>类型介绍可以参考我的下一篇博客。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">17:18:23.963 [ERROR] [org.gradle.api.Task] aidl E  8954  8954 type_namespace.cpp:130] In file /home/heqiang/AndroidStudioProjects/AIDLDemo/app/src/main/aidl/com/android/hq/aidldemo/StudentManager.aidl line 8 parameter student (argument 1):</div><div class="line">aidl E  8954  8954 type_namespace.cpp:130]     &apos;Student&apos; can be an out type, so you must declare it as in, out or inout.</div><div class="line"></div><div class="line">17:18:23.967 [DEBUG] [org.gradle.api.internal.tasks.execution.ExecuteAtMostOnceTaskExecuter] Finished executing task &apos;:app:compileDebugAidl&apos;</div><div class="line">17:18:23.967 [LIFECYCLE] [class org.gradle.TaskExecutionLogger] :app:compileDebugAidl FAILED</div><div class="line">17:18:23.968 [INFO] [org.gradle.execution.taskgraph.AbstractTaskPlanExecutor] :app:compileDebugAidl (Thread[Daemon worker,5,main]) completed. Took 0.202 secs.</div><div class="line">17:18:23.968 [DEBUG] [org.gradle.execution.taskgraph.AbstractTaskPlanExecutor] Task worker [Thread[Daemon worker,5,main]] finished, busy: 0.578 secs, idle: 0.01 secs</div><div class="line">17:18:23.974 [ERROR] [org.gradle.BuildExceptionReporter] </div><div class="line">17:18:23.975 [ERROR] [org.gradle.BuildExceptionReporter] FAILURE: Build failed with an exception.</div><div class="line">17:18:23.975 [ERROR] [org.gradle.BuildExceptionReporter] </div><div class="line">17:18:23.975 [ERROR] [org.gradle.BuildExceptionReporter] * What went wrong:</div><div class="line">17:18:23.975 [ERROR] [org.gradle.BuildExceptionReporter] Execution failed for task &apos;:app:compileDebugAidl&apos;.</div><div class="line">17:18:23.975 [ERROR] [org.gradle.BuildExceptionReporter] &gt; java.lang.RuntimeException: com.android.ide.common.process.ProcessException: Error while executing &apos;/home/heqiang/install/android-studio/android-sdk-linux/build-tools/25.0.2/aidl&apos; with arguments &#123;-p/home/heqiang/install/android-studio/android-sdk-linux/platforms/android-25/framework.aidl -o/home/heqiang/AndroidStudioProjects/AIDLDemo/app/build/generated/source/aidl/debug -I/home/heqiang/AndroidStudioProjects/AIDLDemo/app/src/main/aidl -I/home/heqiang/AndroidStudioProjects/AIDLDemo/app/src/debug/aidl -I/home/heqiang/AndroidStudioProjects/AIDLDemo/app/build/intermediates/exploded-aar/com.android.support/appcompat-v7/25.2.0/aidl -I/home/heqiang/AndroidStudioProjects/AIDLDemo/app/build/intermediates/exploded-aar/com.android.support/support-v4/25.2.0/aidl -I/home/heqiang/AndroidStudioProjects/AIDLDemo/app/build/intermediates/exploded-aar/com.android.support/support-fragment/25.2.0/aidl -I/home/heqiang/AndroidStudioProjects/AIDLDemo/app/build/intermediates/exploded-aar/com.android.support/support-media-compat/25.2.0/aidl -I/home/heqiang/AndroidStudioProjects/AIDLDemo/app/build/intermediates/exploded-aar/com.android.support/support-core-ui/25.2.0/aidl -I/home/heqiang/AndroidStudioProjects/AIDLDemo/app/build/intermediates/exploded-aar/com.android.support/support-core-utils/25.2.0/aidl -I/home/heqiang/AndroidStudioProjects/AIDLDemo/app/build/intermediates/exploded-aar/com.android.support/animated-vector-drawable/25.2.0/aidl -I/home/heqiang/AndroidStudioProjects/AIDLDemo/app/build/intermediates/exploded-aar/com.android.support/support-vector-drawable/25.2.0/aidl -I/home/heqiang/AndroidStudioProjects/AIDLDemo/app/build/intermediates/exploded-aar/com.android.support/support-compat/25.2.0/aidl -d/tmp/aidl1017216491494308629.d /home/heqiang/AndroidStudioProjects/AIDLDemo/app/src/main/aidl/com/android/hq/aidldemo/StudentManager.aidl&#125;</div><div class="line">17:18:23.975 [ERROR] [org.gradle.BuildExceptionReporter] </div><div class="line">17:18:23.976 [ERROR] [org.gradle.BuildExceptionReporter] * Try:</div><div class="line">17:18:23.976 [ERROR] [org.gradle.BuildExceptionReporter] Run with --stacktrace option to get the stack trace. </div><div class="line">17:18:23.977 [LIFECYCLE] [org.gradle.BuildResultLogger] </div><div class="line">17:18:23.977 [LIFECYCLE] [org.gradle.BuildResultLogger] BUILD FAILED</div><div class="line">17:18:23.977 [LIFECYCLE] [org.gradle.BuildResultLogger]</div></pre></td></tr></table></figure>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>AndroidManifest.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">package</span>=<span class="string">"com.android.hq.aidldemo"</span></span></div><div class="line">          <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span></div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">        </div><div class="line">        <span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">".AIDLService"</span></span></div><div class="line">            <span class="attr">android:process</span>=<span class="string">":remote"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;/<span class="name">service</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
<p>MainActivity.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String TAG = <span class="string">"Client"</span>;</div><div class="line">    <span class="keyword">private</span> StudentManager mStudentManager;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mConnected = <span class="keyword">false</span>;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        <span class="keyword">if</span>(!mConnected)&#123;</div><div class="line">            bindService();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        <span class="keyword">if</span>(mConnected)&#123;</div><div class="line">            unbindService(mServiceConnection);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bindService</span><span class="params">()</span></span>&#123;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent();</div><div class="line">        intent.setClassName(<span class="string">"com.android.hq.aidldemo"</span>,<span class="string">"com.android.hq.aidldemo.AIDLService"</span>);</div><div class="line">        bindService(intent, mServiceConnection, Context.BIND_AUTO_CREATE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addStudent</span><span class="params">(View view)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(mStudentManager == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        Student student = <span class="keyword">new</span> Student();</div><div class="line">        student.setName(<span class="string">"James"</span>);</div><div class="line">        student.setAge(<span class="number">7</span>);</div><div class="line">        student.setGrade(<span class="number">2</span>);</div><div class="line">        Log.d(TAG, <span class="string">"addStudent : "</span>+student);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            mStudentManager.addStudent(student);</div><div class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        Log.d(TAG, <span class="string">"addStudent end"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getStudent</span><span class="params">(View view)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(mStudentManager == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        List&lt;Student&gt; list = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            list = mStudentManager.getStudents();</div><div class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        Log.d(TAG, <span class="string">"getStudent. student list is : "</span>+list);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ServiceConnection mServiceConnection = <span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class="line">            mStudentManager = StudentManager.Stub.asInterface(service);</div><div class="line">            mConnected = <span class="keyword">true</span>;</div><div class="line">            <span class="keyword">if</span>(mStudentManager != <span class="keyword">null</span>)&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    List&lt;Student&gt; list = mStudentManager.getStudents();</div><div class="line">                    Log.d(TAG, <span class="string">"onServiceConnected. student list is : "</span>+list);</div><div class="line">                &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</div><div class="line">            mConnected = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">if</span>(mStudentManager != <span class="keyword">null</span>)&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    List&lt;Student&gt; list = mStudentManager.getStudents();</div><div class="line">                    Log.d(TAG, <span class="string">"onServiceDisconnected. student list is : "</span>+list);</div><div class="line">                &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>AIDLService.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AIDLService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String TAG = <span class="string">"AIDLService"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MyStudentManager mStudentManager = <span class="keyword">new</span> MyStudentManager();</div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        Log.d(TAG, <span class="string">"called onBind"</span>);</div><div class="line">        <span class="keyword">return</span> mStudentManager;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStudentManager</span> <span class="keyword">extends</span> <span class="title">StudentManager</span>.<span class="title">Stub</span></span>&#123;</div><div class="line">        <span class="keyword">private</span> List&lt;Student&gt; mStudents = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyStudentManager</span><span class="params">()</span> </span>&#123;</div><div class="line">            Student student = <span class="keyword">new</span> Student();</div><div class="line">            student.setName(<span class="string">"John"</span>);</div><div class="line">            student.setAge(<span class="number">6</span>);</div><div class="line">            student.setGrade(<span class="number">1</span>);</div><div class="line">            mStudents.add(student);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">getStudents</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">            Log.d(TAG, <span class="string">"call getStudents(), student list is :"</span>+mStudents.toString());</div><div class="line">            <span class="keyword">return</span> mStudents;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addStudent</span><span class="params">(Student student)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">            <span class="keyword">if</span>(!mStudents.contains(student))&#123;</div><div class="line">                mStudents.add(student);</div><div class="line">            &#125;</div><div class="line">            Log.d(TAG, <span class="string">"call addStudent(), student list is :"</span>+mStudents.toString());</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Thread.sleep(<span class="number">2000</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            Log.d(TAG, <span class="string">"sleep end !"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>如图所示，Clent和Server是在两个不同的进程中的：</p>
<p><img src="/images/android-ipc-aidl/process.png" alt="效果图"></p>
<p>启动后分别点击添加和获取列表按钮，打印如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">06-08 19:30:10.047 10005 10005 D AIDLService: called onBind</div><div class="line">06-08 19:30:10.072 10005 10017 D AIDLService: call getStudents(), student list is :[name = John, age = 6, grade = 1]</div><div class="line">06-08 19:30:10.073  9991  9991 D Client  : onServiceConnected. student list is : [name = John, age = 6, grade = 1]</div><div class="line"></div><div class="line">06-08 19:32:51.814  9991  9991 D Client  : addStudent : name = James, age = 7, grade = 2</div><div class="line">06-08 19:32:51.815 10005 10016 D AIDLService: call addStudent(), student list is :[name = John, age = 6, grade = 1, name = James, age = 7, grade = 2]</div><div class="line"></div><div class="line">06-08 19:33:09.875 10005 10017 D AIDLService: call getStudents(), student list is :[name = John, age = 6, grade = 1, name = James, age = 7, grade = 2]</div><div class="line">06-08 19:33:09.876  9991  9991 D Client  : getStudent. student list is : [name = John, age = 6, grade = 1, name = James, age = 7, grade = 2]</div></pre></td></tr></table></figure></p>
<p>成功的进行了进程间通信。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="Android进程间通信是异步的还是同步的？"><a href="#Android进程间通信是异步的还是同步的？" class="headerlink" title="Android进程间通信是异步的还是同步的？"></a>Android进程间通信是异步的还是同步的？</h3><p>我们可以在程序中验证这个问题。<br>我们在<code>AIDLService</code>类的<code>mStudentManager</code>实现的方法<code>addStudent()</code>中添加一个延时：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addStudent</span><span class="params">(Student student)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">    <span class="keyword">if</span>(!mStudents.contains(student))&#123;</div><div class="line">        mStudents.add(student);</div><div class="line">    &#125;</div><div class="line">    Log.d(TAG, <span class="string">"call addStudent(), student list is :"</span>+mStudents.toString());</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        Thread.sleep(<span class="number">2000</span>);</div><div class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    Log.d(TAG, <span class="string">"sleep end !"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们在客户端调用<code>addStudent()</code>方法的结尾添加打印，这样可以得到函数调用结束的信息：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addStudent</span><span class="params">(View view)</span></span>&#123;</div><div class="line">    ......</div><div class="line">    Log.d(TAG, <span class="string">"addStudent : "</span>+student);</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        mStudentManager.addStudent(student);</div><div class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    Log.d(TAG, <span class="string">"addStudent end"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看到打印：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">06-08 19:42:28.505 20807 20807 D Client  : addStudent : name = James, age = 7, grade = 2</div><div class="line">06-08 19:42:28.506 20822 20833 D AIDLService: call addStudent(), student list is :[name = John, age = 6, grade = 1, name = James, age = 7, grade = 2]</div><div class="line">06-08 19:42:30.506 20822 20833 D AIDLService: sleep end !</div><div class="line">06-08 19:42:30.506 20807 20807 D Client  : addStudent end</div></pre></td></tr></table></figure></p>
<p>看到客户端等服务端调用完毕才会往下走，因此我们可以得到这样的结论：<br><strong>Android进程间通信默认是同步的</strong>，这里为什么说默认呢？难道还有其他情况，是的，也可以是异步的，为什么呢？<br>看 StudentManager.java 中的 <code>addStudent</code> 方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addStudent</span><span class="params">(com.android.hq.aidldemo.Student student)</span> <span class="keyword">throws</span> android.os.RemoteException</span></div><div class="line">&#123;</div><div class="line">...</div><div class="line">mRemote.transact(Stub.TRANSACTION_addStudent, _data, _reply, <span class="number">0</span>);</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再来看一下 <code>IBinder</code> 中对这个方法的介绍：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Perform a generic operation with the object.</div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span> code The action to perform.  This should</div><div class="line"> * be a number between &#123;<span class="doctag">@link</span> #FIRST_CALL_TRANSACTION&#125; and</div><div class="line"> * &#123;<span class="doctag">@link</span> #LAST_CALL_TRANSACTION&#125;.</div><div class="line"> * <span class="doctag">@param</span> data Marshalled data to send to the target.  Must not be null.</div><div class="line"> * If you are not sending any data, you must create an empty Parcel</div><div class="line"> * that is given here.</div><div class="line"> * <span class="doctag">@param</span> reply Marshalled data to be received from the target.  May be</div><div class="line"> * null if you are not interested in the return value.</div><div class="line"> * <span class="doctag">@param</span> flags Additional operation flags.  Either 0 for a normal</div><div class="line"> * RPC, or &#123;<span class="doctag">@link</span> #FLAG_ONEWAY&#125; for a one-way RPC.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">transact</span><span class="params">(<span class="keyword">int</span> code, Parcel data, Parcel reply, <span class="keyword">int</span> flags)</span></span></div><div class="line">    <span class="keyword">throws</span> RemoteException;</div></pre></td></tr></table></figure>
<p><code>flags</code> 为0时是普通的RPC调用，为 <code>FLAG_ONEWAY</code> 时是 one-way RPC，是单向调用，执行后立即返回，无需等待Server端 <code>transact()</code> 返回。这个时候就是异步执行了。</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h3 id="Server-端-AIDL-文件升级问题"><a href="#Server-端-AIDL-文件升级问题" class="headerlink" title="Server 端 AIDL 文件升级问题"></a>Server 端 AIDL 文件升级问题</h3><p>当我们把 AIDL 公开接口给外部第三方应用时，通常的做法是会将 AIDL 以及对应 Java 文件打包给第三方使用，这样做没有任何问题。但要注意的是在后续升级这个接口的时候，得保持接口中方法顺序不变，即只能在aidl的后面添加新方法，而不能在中间插入新方法。否则 Client 端后调用错乱导致调用不成功。<br>为什么呢？因为编译器会给我们自动根据 AILD 文件生成对应的 Java 文件，在这个 Java 文件中的 <code>onTransact</code> 方法中，自动为我们分配好了每一个方法的 code，这个code 的分配顺序是按照 AIDL 文件中的声明顺序来进行的，详细请看下面的代码。通过分析 android 进程间通信 binder 机制可以知道，则是客户端最后是通过调用 transact 方法，并传递这个 code 给 server 端，来完成调用。如果中间插入新的接口，会导致这个 code 错乱，调用的不是我们想要的方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">static final int TRANSACTION_testAIDL1 = (android.os.IBinder.FIRST_CALL_TRANSACTION + 0);</div><div class="line">static final int TRANSACTION_testAIDL2 = (android.os.IBinder.FIRST_CALL_TRANSACTION + 1);</div></pre></td></tr></table></figure>
<h3 id="Client-和-Server-AIDL-对应问题"><a href="#Client-和-Server-AIDL-对应问题" class="headerlink" title="Client 和 Server AIDL 对应问题"></a>Client 和 Server AIDL 对应问题</h3><p>从上面的分析得到一个结论，Client 端和 Server 端的 AIDL 可以不一致，Client 端的 AIDL 文件的接口可以是 Server 端的AILD 接口的一个子集，但这个子集必须是前面所有连续的接口的一个子集，方法顺序不能变。<br>另外，Client 端和 Server 端的 AIDL 的包名必须一致。</p>
<h3 id="AIDL-接口不能重载"><a href="#AIDL-接口不能重载" class="headerlink" title="AIDL 接口不能重载"></a>AIDL 接口不能重载</h3><p>从上面的代码中可以看到，接口 code 的分配是根据方法名来分配的，没有涉及到参数，因此是不能重载的，如果重载的话编译是会报错的。</p>
]]></content>
    
    <summary type="html">
    
      介绍编写AIDL文件的方式实现进程间通信
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="IPC" scheme="http://yoursite.com/tags/IPC/"/>
    
      <category term="AIDL" scheme="http://yoursite.com/tags/AIDL/"/>
    
  </entry>
  
  <entry>
    <title>Android ContentProvider 使用以及源码分析</title>
    <link href="http://yoursite.com/2015/01/26/android-knowledge-about-contentprovider/"/>
    <id>http://yoursite.com/2015/01/26/android-knowledge-about-contentprovider/</id>
    <published>2015-01-26T02:00:00.000Z</published>
    <updated>2019-01-09T08:57:31.438Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/heqiangflytosky/AndroidDBDemo" target="_blank" rel="external">ContentProvider + SQLite 使用Demo GitHub 源码</a></p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>ContentProvider 内容提供者，作为 Android 的四大组件之一，我们会经常使用到。它是 Android 中提供的用于数据共享的组件，你可以跨进城、跨应用来访问这些数据。除了跨进城访问数据，ContentProvider 还可以进行跨进程方法调用。<br>对于数据的存储，Android 提供了多种方式供我们选择：SQLite 数据库、Shared Preferences、文件存储等。如果在同一个应用中我们可以直接共享使用这些数据，但是如果时不同的应用需要共享这些数据，那么就需要借助于 ContentProvider。我们平时最常见的是 ContentProvider + SQLite 数据库的组合，当然 ContentProvider 也可以和其他的数据存储方式相结合。<br>当外部应用需要对 ContentProvider 里面的数据进行增删改查操作时就需要用到 ContentResolver，Andriod 的 Context 提供了 getContentResolver() 方法来获取 ContentResolver 对象。<br>如果我们使用比如 ContentProvider + Shared Preferences 的组合时，你可能需要将数据转换为 Cursor 返回给 ContentProvider 提供给其他应用查询，那么本文也将介绍如果创建一个 Cursor，通常我们使用 MatrixCursor。<br>我们也可以使用 ContentProvider + File 的方式来直接操作文件，其他的应用可以通过该方式读写当前应用的私有文件。 这时我们要重写 openFile 等方法来实现。<br>另外，我们也可以使用 ContentProvider 进行跨进程方法调用。这时我们需要重写 call 方法。根据该方法的参数来调用相对应地方法。</p>
<h2 id="ContentProvider"><a href="#ContentProvider" class="headerlink" title="ContentProvider"></a>ContentProvider</h2><h3 id="注册-ContentProvider"><a href="#注册-ContentProvider" class="headerlink" title="注册 ContentProvider"></a>注册 ContentProvider</h3><p>创建我们自己的 ContentProvider 需要在 AndroidManifest.xml 中对 ContentProvider 进行注册</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;provider</div><div class="line">    android:authorities=&quot;hq.testprovider&quot;</div><div class="line">    android:name=&quot;.contentprovider.MyContentProvider&quot;</div><div class="line">    android:exported=&quot;true&quot;/&gt;</div></pre></td></tr></table></figure>
<ul>
<li>android:authorities：ContentProvider 的唯一标识符，外部应用可以通过URI中的此属性值来找到想要访问的 ContentProvider，建议用包名来标示，当然你也可以随意指定，但要有唯一性。</li>
<li>android:name： ContentProvider 的类名</li>
<li>android:exported：是否允许其他应用访问该 ContentProvider，true为允许，false为禁止。</li>
<li>android:multiProcess：是否允许在调用者进程启动 ContentProvider。一般情况下，ContentProvider 都是在创建者的进程启动的，如果该进程没有启动，那么会把该进程启动。如果设置了这个属性，就可以在调用者进程启动。但前提是调用者和创建者的 android:sharedUserId 相同才行，否则还是不能在调用者进程启动 ContentProvider。</li>
</ul>
<h3 id="封装数据库或者-Shared-Preferences"><a href="#封装数据库或者-Shared-Preferences" class="headerlink" title="封装数据库或者 Shared Preferences"></a>封装数据库或者 Shared Preferences</h3><p>创建我们自己的 ContentProvider 通常需要继承 ContentProvider 类并实现它的六个抽象方法。<br>ContentProvider 提供了下面的四个抽象方法进行增删改查操作，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public abstract @Nullable Uri insert(@NonNull Uri uri, @Nullable ContentValues values);</div><div class="line">public abstract int delete(@NonNull Uri uri, @Nullable String selection,</div><div class="line">            @Nullable String[] selectionArgs);</div><div class="line">public abstract int update(@NonNull Uri uri, @Nullable ContentValues values,</div><div class="line">            @Nullable String selection, @Nullable String[] selectionArgs);</div><div class="line">public abstract @Nullable Cursor query(@NonNull Uri uri, @Nullable String[] projection,</div><div class="line">            @Nullable String selection, @Nullable String[] selectionArgs,</div><div class="line">            @Nullable String sortOrder);</div></pre></td></tr></table></figure>
<p>还有下面两个抽象方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">public abstract boolean onCreate();</div><div class="line">public abstract @Nullable String getType(@NonNull Uri uri);</div></pre></td></tr></table></figure>
<ul>
<li>insert：添加数据。</li>
<li>delete：删除数据。</li>
<li>update：更新数据。</li>
<li>query：查询数据。</li>
<li>onCreate：ContentProvider 初始化时调用，一般做一些初始化操作。</li>
<li>getType：返回参数中 uri 对应的 MIME 类型，格式比较固定：单条记录为 vnd.android.cursor.item/ 开头的字符串，多条记录为 vnd.android.cursor.dir/ 开头的字符串。一般情况下可以不用去关注，返回null即可。在使用 Intent 时有用。</li>
</ul>
<p>增删改查方法参数说明：</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数名字</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">是否可以为空</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">uri</td>
<td style="text-align:left">为数据资源的位置，比如想查询某个表的数据或者想执行某个操作：content://hq.testprovider/table1/</td>
<td style="text-align:left">不能为空</td>
</tr>
<tr>
<td style="text-align:left">values</td>
<td style="text-align:left">想要增加或更新的数据实体</td>
<td style="text-align:left">是</td>
</tr>
<tr>
<td style="text-align:left">projection</td>
<td style="text-align:left">相当于 SQL 语法中 SELECT 后面的语句。来表示查询数据时要返回数据的列。比如获取 Student 表中的数据时我们只想要 Student 的名字和地址，那么 projection参数就可以如下表示：<code>new String []{DBOpenHelper.StudentTAB.NAME,DBOpenHelper.StudentTAB.ADDR}</code>，那么返回的 Cursor 中的数据就只有名字和地址两列。</td>
<td style="text-align:left">可以为空，表示查询所有列</td>
</tr>
<tr>
<td style="text-align:left">selection</td>
<td style="text-align:left">相当于 SQL 语法中 WHERE 后面的语句。设置的筛选条件，表示接下来的删改查操作只针对符合条件的行进行。这里可以写一些 SQL 语句。<code>DBOpenHelper.StudentTAB.COUNTRY + &quot;=? AND &quot; + DBOpenHelper.StudentTAB.GENDER + &quot;=?&quot;</code> 表示指操作指定国家或者性别的行。或者 <code>DBOpenHelper.StudentTAB.COUNTRY + &quot;=&#39;China&#39; AND &quot; + DBOpenHelper.StudentTAB.GENDER + &quot;=&#39;male&#39;&quot;</code>，或者 <code>id BETWEEN 10 AND 20</code> 用 between 子句查询某个区间的值。</td>
<td style="text-align:left">可以为空，表示，不进行筛选，查询所有列</td>
</tr>
<tr>
<td style="text-align:left">selectionArgs</td>
<td style="text-align:left">配合 selection 使用的参数，将会替换掉 selection 参数中的 <code>?</code>：<code>new String []{&quot;China&quot;, &quot;male&quot;}</code> 。当然也可以写在 selection，效果也是一样的。</td>
<td style="text-align:left">可以为空</td>
</tr>
<tr>
<td style="text-align:left">sortOrder</td>
<td style="text-align:left">相当于 SQL 语法中 ORDER BY 后面的语句。为返回数据的排序方式，比如是升序还是降序，还可以添加一些其他的 SQL 字句，比如 <code>updateTime DESC LIMIT 1 OFFSET 1</code>，这个下面会具体介绍</td>
<td style="text-align:left">可以为空</td>
</tr>
</tbody>
</table>
<p>依据这些参数，方法的调用后面基本都可以翻译成下的 SQL 语句：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SELECT column1, column2....columnN</div><div class="line">FROM   table_name</div><div class="line">WHERE  column_name BETWEEN val-1 AND val-2 LIMIT [no of rows] OFFSET [row num]</div><div class="line">ORDER BY column_name &#123;ASC|DESC&#125; LIMIT [no of rows] OFFSET [row num];</div></pre></td></tr></table></figure>
<p>等等。</p>
<h3 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h3><p>ContentProvider 提供了下面的方法来实现文件共享功能：</p>
<ul>
<li><code>openAssetFile(@NonNull Uri uri, @NonNull String mode)</code></li>
<li><code>openFile(@NonNull Uri uri, @NonNull String mode)</code></li>
</ul>
<h3 id="跨进程方法调用"><a href="#跨进程方法调用" class="headerlink" title="跨进程方法调用"></a>跨进程方法调用</h3><p>ContentProvider 提供了下面的方法来跨进程方法调用：</p>
<ul>
<li><code>call(@NonNull String method, @Nullable String arg, @Nullable Bundle extras)</code></li>
</ul>
<h2 id="ContentResolver"><a href="#ContentResolver" class="headerlink" title="ContentResolver"></a>ContentResolver</h2><p>我们使用 ContentResolver 来对 ContentProvider 的数据进行增删改查的操作。<br>ContentResolver 对象可以通过 <code>Context.getContentResolver()</code> 来获取，它提供了一系列针对 ContentProvider 操作的方法，和 ContentProvider 里面的方法一一对应。<br>ContentResolver 提供了 openOutputStream 和 openInputStream 等方法来实现对共享文件的读写。<br>ContentResolver 提供了 call 方法来对 ContentProvider 提供的方法进行跨进程调用。</p>
<h3 id="SQLite-语法"><a href="#SQLite-语法" class="headerlink" title="SQLite 语法"></a>SQLite 语法</h3><p><a href="http://www.runoob.com/sqlite/sqlite-tutorial.html" target="_blank" rel="external">SQLite 教程</a></p>
<h4 id="LIMIT-和-OFFSET-字句"><a href="#LIMIT-和-OFFSET-字句" class="headerlink" title="LIMIT 和 OFFSET 字句"></a>LIMIT 和 OFFSET 字句</h4><p><a href="http://www.runoob.com/sqlite/sqlite-limit-clause.html" target="_blank" rel="external">SQLite Limit 子句</a></p>
<p><code>LIMIT &lt;skip&gt;, &lt;count&gt;</code><br>等价于<br><code>LIMIT &lt;count&gt; OFFSET &lt;skip&gt;</code></p>
<p><code>LIMIT &lt;跳过的数据数目&gt;, &lt;取数据数目&gt;</code><br>等价于<br><code>LIMIT &lt;取数据数目&gt; OFFSET &lt;跳过的数据数目&gt;</code></p>
<p>其实可以通过 orderby 作假来加上limit offset，反正最后其实也是由db的query去拼接的sql的，如orderby变为 <code>updateTime DESC LIMIT 10 OFFSET 5</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getContentResolver().query(uri,null,null,null,&quot;updateTime DESC LIMIT 10 OFFSET 5&quot;);</div></pre></td></tr></table></figure>
<p>等价于 <code>select * from &lt;table&gt; order by updateTime DESC LIMIT 10 OFFSET 5</code></p>
<p>LIMIT 和 OFFSET 字句也可以添加在 WHERE 子句后面。</p>
<h4 id="BETWEEN-字句"><a href="#BETWEEN-字句" class="headerlink" title="BETWEEN 字句"></a>BETWEEN 字句</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SELECT column1, column2....columnN</div><div class="line">FROM   table_name</div><div class="line">WHERE  column_name BETWEEN val-1 AND val-2;</div></pre></td></tr></table></figure>
<h4 id="IN-字句"><a href="#IN-字句" class="headerlink" title="IN 字句"></a>IN 字句</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SELECT column1, column2....columnN</div><div class="line">FROM   table_name</div><div class="line">WHERE  column_name IN (val-1, val-2,...val-N);</div></pre></td></tr></table></figure>
<h2 id="SQLiteOpenHelper"><a href="#SQLiteOpenHelper" class="headerlink" title="SQLiteOpenHelper"></a>SQLiteOpenHelper</h2><p>数据库操作帮助类，如果我们的 ContentProvider 时结合 SQLite 数据库来实现，那么就会用到这个类。</p>
<h2 id="URI"><a href="#URI" class="headerlink" title="URI"></a>URI</h2><p>上面介绍的几个 ContentProvider 几个方法中，大多都有一个 URI 的参数，它表示我们想操作的数据资源的位置。比如：<code>content://hq.testprovider/table1/</code>。<br>完整的 URI 一般由下面三部分组成：<br><code>&lt;standard_prefix&gt;://&lt;authority&gt;/&lt;data_path&gt;/</code></p>
<ul>
<li>standard_prefix：URI 的前缀，ContentProvider 的前缀为 content://</li>
<li>authority：URI 的标识，用于唯一标识这个 ContentProvider。指的是我们在 AndroidManifest.xml 定义的 android:authorities 属性。</li>
<li>data_path：路径。一般为要执行的操作的名称或者数据库中的表的名字，也可以自己定义，只要在使用时保持一致就行了。</li>
</ul>
<p>因此，URI 中的数据包含了需要操作哪个 ContentProvider、以及对 ContentProvider 中哪些数据进行操作的信息。<br>如果我们是使用 SQLite 来存储数据，那么我们数据库中可能包含多个表，那么 URI 就既要包含操作哪个数据库，也要包含操作数据库中的哪个表。<br>我们需要执行的一些动作或者调用的方法也可以包含在 URI 中。<br>那么如何确定一个 UIR 是要执行哪项操作呢？这里需要用到 UriMatcher 来帮忙了。</p>
<h2 id="MatrixCursor"><a href="#MatrixCursor" class="headerlink" title="MatrixCursor"></a>MatrixCursor</h2><p>如果我们数据存储用的不是数据库，我们就需要把数据封装成 Cursor 来提供给 ContentProvider。<br>当我们需要自己创建 Cursor 时，可以使用 Android 为我们提供的 MatrixCursor 类。<br>下面的例子演示了如何创建一个 MatrixCursor 实例。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">MatrixCursor cursor = new MatrixCursor(new String[]&#123;&quot;NAME&quot;, &quot;COUNTRY&quot;, &quot;TELEPHONE&quot;&#125;);</div><div class="line">cursor.addRow(new Object[] &#123;&quot;ZhangSan&quot;,&quot;China&quot;,13800000000L&#125;);</div><div class="line">cursor.addRow(new Object[] &#123;&quot;James&quot;,&quot;USA&quot;,13900000000L&#125;);</div></pre></td></tr></table></figure>
<h2 id="UriMatcher"><a href="#UriMatcher" class="headerlink" title="UriMatcher"></a>UriMatcher</h2><p>UriMatcher 就是用来匹配 URI 的，我们可以在 ContentProvider 中使用 UriMatcher 来注册URI，然后使用 UriMatcher 来匹配 URI 对应的执行动作或者数据表。<br>UriMatcher 只有两个方法：</p>
<ul>
<li>addURI(String authority, String path, int code)</li>
<li><p>match(Uri uri)</p>
<p>比如用下面的方法注册 URI：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">static final UriMatcher URI_MATCHER = new UriMatcher(UriMatcher.NO_MATCH);</div><div class="line">static &#123;</div><div class="line">    final UriMatcher matcher = URI_MATCHER;</div><div class="line">    matcher.addURI(&quot;hq.testprovider&quot;, &quot;students&quot;, 0x0001);</div><div class="line">    matcher.addURI(&quot;hq.testprovider&quot;, &quot;teachers&quot;, 0x0002);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后，根据 URI 来执行对应的动作或者获取对应的数据表进行操作：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">int match = URI_MATCHER.match(uri);</div></pre></td></tr></table></figure>
<h2 id="ContentProviderOperation"><a href="#ContentProviderOperation" class="headerlink" title="ContentProviderOperation"></a>ContentProviderOperation</h2><p>为了使批量更新、插入、删除数据更加方便，android系统引入了 ContentProviderOperation类。<br>在官方开发文档中推荐使用ContentProviderOperations，有以下原因：</p>
<ul>
<li>所有的操作都在一个事务中执行，这样可以保证数据完整性</li>
<li>由于批量操作在一个事务中执行，只需要打开和关闭一个事务，比多次打开关闭多个事务性能要好些</li>
<li>使用批量操作和多次单个操作相比，减少了应用和ContentProvider之间的上下文切换，这样也会提升应用的性能，并且减少占用CPU的时间，当然也会减少电量的消耗。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;ContentProviderOperation&gt; ops = new ArrayList&lt;ContentProviderOperation&gt;();</div><div class="line">ContentProviderOperation operation = ContentProviderOperation.newDelete(uri)</div><div class="line">        .withSelection(&quot;name=?&quot;,new String[]&#123;&quot;James&quot;&#125;)</div><div class="line">        .build();</div><div class="line">ops.add(operation);</div><div class="line">ContentProviderOperation operation2 = ContentProviderOperation.newDelete(uri)</div><div class="line">        .withSelection(&quot;name=?&quot;,new String[]&#123;&quot;Wade&quot;&#125;)</div><div class="line">        .build();</div><div class="line">ops.add(operation2);</div><div class="line"></div><div class="line">try &#123;</div><div class="line">    getContentResolver().applyBatch(uri.getAuthority(), ops);</div><div class="line">&#125; catch (RemoteException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125; catch (OperationApplicationException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ContentProvider-源码分析"><a href="#ContentProvider-源码分析" class="headerlink" title="ContentProvider 源码分析"></a>ContentProvider 源码分析</h2><!--  


https://www.baidu.com/s?word=android++contentprovider&tn=50000021_hao_pg&ie=utf-8&sc=UWd1pgw-pA7EnHc1FMfqnHRYn1bLrjTYnW0knBuW5y99U1Dznzu9m1YznWR4nWDvPH61&ssl_sample=s_11%2Cs_109&srcqid=2634579022130942498&H123Tmp=nu
https://blog.csdn.net/zhang_jun_ling/article/details/51288441
https://blog.csdn.net/f2006116/article/details/78386870
https://mp.weixin.qq.com/s?__biz=MzA3NTYzODYzMg==&mid=2653579366&idx=1&sn=49361b16d275db8e7f18af44c894e2e8&chksm=84b3ba61b3c4337789c87a7249eb6185765b1fbe80846661965c44c9084976b7e26bdea607ec&mpshare=1&scene=23&srcid=10134b55yuq4SR3vfPyzdGuI#rd

-->
]]></content>
    
    <summary type="html">
    
      本文介绍 ContentProvider 的基本使用
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="ContentProvider" scheme="http://yoursite.com/tags/ContentProvider/"/>
    
  </entry>
  
  <entry>
    <title>Android 图形系统 -- Canvas使用</title>
    <link href="http://yoursite.com/2015/01/16/android-graphic-system-canvas-sample/"/>
    <id>http://yoursite.com/2015/01/16/android-graphic-system-canvas-sample/</id>
    <published>2015-01-16T02:00:00.000Z</published>
    <updated>2018-08-12T09:06:02.899Z</updated>
    
    <content type="html"><![CDATA[<p>Canvas顾名思义就是一块画布，可以在上面画一些你想要的东西。<br>创建一个Canvas有一下两种方法：</p>
<ul>
<li>Canvas():创建一个空的画布，可以使用setBitmap()方法来设置绘制的具体画布； </li>
<li>Canvas(Bitmap bitmap):以bitmap对象创建一个画布，则将内容都绘制在bitmap上，bitmap不得为null; </li>
</ul>
<h2 id="使用Canvas来截图"><a href="#使用Canvas来截图" class="headerlink" title="使用Canvas来截图"></a>使用Canvas来截图</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">private ImageView mImageView1;</div><div class="line">private ImageView mImageView2;</div><div class="line">private TextView mTextVew;</div><div class="line">@Override</div><div class="line">protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">    super.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">    mImageView1 = (ImageView) findViewById(R.id.imageview1);</div><div class="line">    mImageView2 = (ImageView) findViewById(R.id.imageview2);</div><div class="line">    mTextVew = (TextView) findViewById(R.id.textView);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public void buttonClick(View v)&#123;</div><div class="line">    Bitmap capture = Bitmap.createBitmap(300,300, Bitmap.Config.ARGB_8888);</div><div class="line">    capture.eraseColor(Color.TRANSPARENT);</div><div class="line">    Canvas c = new Canvas(capture);</div><div class="line">    //c.scale(0.8f,0.8f);</div><div class="line">    c.drawColor(Color.LTGRAY);//设置背景颜色</div><div class="line">    mImageView1.draw(c);//绘制图片</div><div class="line">    mTextVew.draw(c);//绘制文字</div><div class="line"></div><div class="line">    mImageView2.setImageBitmap(capture);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码的效果就是：创建了一个尺寸是300*300的Bitmap，使用它作为Canvas操作的对象。首先使用了c.drawColor(Color.LTGRAY)绘制截图的背景颜色，mImageView1.draw(c)把图片绘制在Canvas上，mTextVew.draw(c)把自体绘制在Canvas上，最后用mImageView2把最终绘制的结果显示出来了，如果去掉c.drawColor(Color.LTGRAY)和mTextVew.draw(c)，其实就是mImageView1的一个截图，我们可以用截图来保存本地等其他操作。</p>
<p><img src="/images/android-graphic-system-canvas-sample/image1.png" alt="这里写图片描述"></p>
<h2 id="通过onDraw在View中实现各种操作"><a href="#通过onDraw在View中实现各种操作" class="headerlink" title="通过onDraw在View中实现各种操作"></a>通过onDraw在View中实现各种操作</h2><p>例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void onDraw(Canvas canvas) &#123;</div><div class="line">    super.onDraw(canvas);</div><div class="line">    canvas.save();</div><div class="line"></div><div class="line">    Paint paint = new Paint();</div><div class="line">    paint.setColor(0xffff0000);</div><div class="line">    paint.setStrokeWidth(6);</div><div class="line">    paint.setTextSize(64);</div><div class="line"></div><div class="line">    //画线</div><div class="line">    canvas.drawLine(0, 50, 200, 50, paint);</div><div class="line">    //画矩形</div><div class="line">    canvas.drawRect(80, 80, 200, 200, paint);</div><div class="line">    //画圆</div><div class="line">    canvas.drawCircle(400,150,80,paint);</div><div class="line">    //写字</div><div class="line">    canvas.drawText(&quot;Hello&quot;,80, 300,paint);</div><div class="line"></div><div class="line">    canvas.restore();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果：</p>
<p><img src="/images/android-graphic-system-canvas-sample/image2.png" alt="这里写图片描述"></p>
<p>下面再看一个有意思的例子：</p>
<p><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2012/1212/703.html" target="_blank" rel="external">http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2012/1212/703.html</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void onDraw(Canvas canvas) &#123;</div><div class="line">    Paint paint = new Paint(); //设置一个笔刷大小是3的黄色的画笔</div><div class="line">    paint.setColor(Color.YELLOW);</div><div class="line">    paint.setStrokeJoin(Paint.Join.ROUND);</div><div class="line">    paint.setStrokeCap(Paint.Cap.ROUND);</div><div class="line">    paint.setStrokeWidth(3);</div><div class="line"></div><div class="line">    paint.setAntiAlias(true);</div><div class="line">    paint.setStyle(Paint.Style.STROKE);</div><div class="line">    canvas.translate(canvas.getWidth()/2, 200); //将位置移动画纸的坐标点:150,150</div><div class="line">    canvas.drawCircle(0, 0, 100, paint); //画圆圈</div><div class="line"></div><div class="line">    //使用path绘制路径文字</div><div class="line">    canvas.save();</div><div class="line">    canvas.translate(-75, -75);</div><div class="line">    Path path = new Path();</div><div class="line">    path.addArc(new RectF(0,0,150,150), -180, 180);</div><div class="line">    Paint citePaint = new Paint(paint);</div><div class="line">    citePaint.setTextSize(14);</div><div class="line">    citePaint.setStrokeWidth(1);</div><div class="line">    canvas.drawTextOnPath(&quot;http://blog.csdn.net/heqiangflytosky&quot;, path, 5, 0, citePaint);</div><div class="line">    canvas.restore();</div><div class="line"></div><div class="line">    Paint tmpPaint = new Paint(paint); //小刻度画笔对象</div><div class="line">    tmpPaint.setStrokeWidth(1);</div><div class="line"></div><div class="line">    float  y=100;</div><div class="line">    int count = 60; //总刻度数</div><div class="line"></div><div class="line">    for(int i=0 ; i &lt;count ; i++)&#123;</div><div class="line">        if(i%5 == 0)&#123;</div><div class="line">            canvas.drawLine(0f, y, 0, y+12f, paint);</div><div class="line">            canvas.drawText(String.valueOf(i/5+1), -4f, y+25f, tmpPaint);</div><div class="line"></div><div class="line">        &#125;else&#123;</div><div class="line">            canvas.drawLine(0f, y, 0f, y +5f, tmpPaint);</div><div class="line">        &#125;</div><div class="line">        canvas.rotate(360/count,0f,0f); //旋转画纸</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //绘制指针</div><div class="line">    tmpPaint.setColor(Color.GRAY);</div><div class="line">    tmpPaint.setStrokeWidth(4);</div><div class="line">    canvas.drawCircle(0, 0, 7, tmpPaint);</div><div class="line">    tmpPaint.setStyle(Paint.Style.FILL);</div><div class="line">    tmpPaint.setColor(Color.YELLOW);</div><div class="line">    canvas.drawCircle(0, 0, 5, tmpPaint);</div><div class="line">    canvas.drawLine(0, 10, 0, -65, paint);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果：</p>
<p><img src="/images/android-graphic-system-canvas-sample/image3.png" alt="clock"></p>
<h2 id="Canvas剪切操作"><a href="#Canvas剪切操作" class="headerlink" title="Canvas剪切操作"></a>Canvas剪切操作</h2><p>例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    public </div><div class="line">    TestView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        canvas.save();</div><div class="line"></div><div class="line">        Paint paint = new Paint();</div><div class="line">        paint.setColor(0xffff0000);</div><div class="line">        Rect rect = new Rect(0,0,300,300);</div><div class="line">        Rect clipRect = new Rect(40,40,200,200);</div><div class="line">        //显示clipRect与rect相交区域</div><div class="line">        //canvas.clipRect(clipRect);</div><div class="line">        //显示clipRect与rect相交以外区域</div><div class="line">        canvas.clipRect(clipRect,Region.Op.XOR);</div><div class="line">        canvas.drawRect(rect,paint);</div><div class="line"></div><div class="line">        canvas.restore();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果：<br>不剪切</p>
<p><img src="/images/android-graphic-system-canvas-sample/image4.png" alt="noclip"></p>
<p>剪切</p>
<p><img src="/images/android-graphic-system-canvas-sample/image5.png" alt="clip"></p>
<p>XOR剪切</p>
<p><img src="/images/android-graphic-system-canvas-sample/image6.png" alt="这里写图片描述"></p>
<p>Region.Op还提供一下参数供选择：</p>
<pre><code>DIFFERENCE(0),   //相减
INTERSECT(1),
UNION(2),        //并集
XOR(3),          //异或
REVERSE_DIFFERENCE(4),   //逆向差集
REPLACE(5);
</code></pre><p>还可以参考APIDEMO</p>
]]></content>
    
    <summary type="html">
    
      介绍 Android 图形系统
    
    </summary>
    
      <category term="Android 图形系统" scheme="http://yoursite.com/categories/Android-%E5%9B%BE%E5%BD%A2%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Android 图形系统" scheme="http://yoursite.com/tags/Android-%E5%9B%BE%E5%BD%A2%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Android  应该了解的知识系列 - 关于广播</title>
    <link href="http://yoursite.com/2015/01/10/android-knowledge-about-broadcast/"/>
    <id>http://yoursite.com/2015/01/10/android-knowledge-about-broadcast/</id>
    <published>2015-01-10T02:00:00.000Z</published>
    <updated>2019-02-22T13:00:33.793Z</updated>
    
    <content type="html"><![CDATA[<h2 id="广播的类型"><a href="#广播的类型" class="headerlink" title="广播的类型"></a>广播的类型</h2><p>广播从发送方式上分可以分为下面三类：</p>
<ol>
<li>普通广播</li>
<li>有序广播</li>
<li>粘性广播</li>
</ol>
<p>另外，从注册的方式上分可以分为两类：</p>
<ol>
<li>静态广播：通过 AndroidManifest.xml 的标签来申明的 BroadcastReceiver。</li>
<li>动态广播：通过 registerReceiver() 方式注册的 BroadcastReceiver，动态注册更为灵活，可在不需要时通过 unregisterReceiver() 取消注册。</li>
</ol>
<h3 id="普通广播"><a href="#普通广播" class="headerlink" title="普通广播"></a>普通广播</h3><p>这类广播我们经常使用，是一种无序的广播机制，理论上，所有的接受者几乎同时会获得该 intent 的消息，接受者之间不存在先后顺序，不能截断和修改 intent 的数据。<br>发送方式：<code>sendBroadcast(intent)</code></p>
<h3 id="有序广播"><a href="#有序广播" class="headerlink" title="有序广播"></a>有序广播</h3><p>所有接受者都可以设置 priority ， 按照 priority 的先后顺序进行传递， 上一个优先级的接受者，可以截断（abortBroadcast()）和修改 intent 里面的数据。 同时，也可以设置一个最后接收者（总是在最后一个接收到这个 intent，用来做一些特定的功能）。<br>发送方式：<code>sendOrderedBroadcast(intent)</code><br>对于接收同一个广播，在相同优先级的情况下，动态注册优先级别高于静态注册。在动态注册中，最早动态注册优先级别最高；在静态注册中，最早安装的程序，静态注册优先级别最高（安装 APK 会解析 manifest.xml,把其加入队列）。</p>
<h3 id="粘性广播"><a href="#粘性广播" class="headerlink" title="粘性广播"></a>粘性广播</h3><p>粘性广播没有周期限制， 一般的 intent 只能发送给当前已经注册了这个监听的 receiver，一旦发送完毕就会失去作用周期，而粘性广播没有这个限制，即便后来注册的 intent 也可以收到这个广播。 需要注意的一点是 这种发送方式不会导致 ANR， 因为它没有发送时间的限制。<br>发送方式：<code>sendStickyBroadcast(intent)</code></p>
<h3 id="前台广播和后台广播"><a href="#前台广播和后台广播" class="headerlink" title="前台广播和后台广播"></a>前台广播和后台广播</h3><p>Android系统关于广播有两个广播队列——前台广播队列mFgBroadcastQueue和后台广播队列mBgBroadcastQueue。在发送方发送广播时，默认是放置在后台广播队列的。但是发送方在给intent设置FLAG_RECEIVER_FOREGROUND标记后，发送的广播就会被放置在前台广播队列。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Intent intent = new Intent(); </div><div class="line">intent.setAction(&quot;xxxxxx&quot;); </div><div class="line">intent.addFlags(Intent.FLAG_RECEIVER_FOREGROUND);//前台广播（默认是后台广播） </div><div class="line">sendBroadcast(intent);</div></pre></td></tr></table></figure>
<p>前台广播和后台广播的区别在于它们的超时时间不同：</p>
<ul>
<li>前台广播超时时间为10秒</li>
<li>后台广播超时时间为60秒</li>
</ul>
<p>一旦出现超时，就会出现我们熟知的 ANR。</p>
<h2 id="应用内广播"><a href="#应用内广播" class="headerlink" title="应用内广播"></a>应用内广播</h2><p>App应用内广播可以理解成一种局部广播的形式，广播的发送者和接收者都同属于一个App。实际的业务需求中，App应用内广播确实可能需要用到。同时，之所以使用应用内广播时，而不是使用全局广播的形式，更多的考虑到的是Android广播机制中的安全性问题以及效率问题。<br>相比于全局广播，App应用内广播优势体现在：</p>
<ol>
<li>安全性更高；</li>
<li>更加高效。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//注册应用内广播接收器</div><div class="line">localBroadcastManager = LocalBroadcastManager.getInstance(this);</div><div class="line">localBroadcastManager.registerReceiver(mBroadcastReceiver, intentFilter);</div><div class="line">        </div><div class="line">//取消注册应用内广播接收器</div><div class="line">localBroadcastManager.unregisterReceiver(mBroadcastReceiver);</div><div class="line"></div><div class="line">//发送应用内广播</div><div class="line">localBroadcastManager.sendBroadcast(intent);</div></pre></td></tr></table></figure>
<h2 id="sendBroadcastAsUser"><a href="#sendBroadcastAsUser" class="headerlink" title="sendBroadcastAsUser"></a>sendBroadcastAsUser</h2><p>android 4.2 之后加入了多用户:</p>
<ul>
<li>UserHandle.ALL</li>
<li>UserHandle.CURRENT</li>
<li>UserHandle.CURRENT_OR_SELF</li>
<li>UserHandle.OWNER</li>
</ul>
<p>这就造就了另外一个发送函数 <code>sendBroadcastAsUser()</code> 用来区分不同的用户。</p>
<h2 id="FLAG-INCLUDE-STOPPED-PACKAGES-和-FLAG-EXCLUDE-STOPPED-PACKAGES"><a href="#FLAG-INCLUDE-STOPPED-PACKAGES-和-FLAG-EXCLUDE-STOPPED-PACKAGES" class="headerlink" title="FLAG_INCLUDE_STOPPED_PACKAGES 和 FLAG_EXCLUDE_STOPPED_PACKAGES"></a>FLAG_INCLUDE_STOPPED_PACKAGES 和 FLAG_EXCLUDE_STOPPED_PACKAGES</h2><p>从Android 3.1开始，给Intent定义了两个新的Flag，分别为FLAG_INCLUDE_STOPPED_PACKAGES和FLAG_EXCLUDE_STOPPED_PACKAGES，用来控制Intent是否要对处于停止状态的App起作用，顾名思义：</p>
<ul>
<li>FLAG_INCLUDE_STOPPED_PACKAGES：表示包含未启动的App</li>
<li>FLAG_EXCLUDE_STOPPED_PACKAGES：表示不包含未启动的App</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Intent intent = new Intent(&quot;android.hq.action.TEST&quot;);</div><div class="line">intent.addFlags(Intent.FLAG_INCLUDE_STOPPED_PACKAGES);</div><div class="line">intent.putExtra(&quot;test&quot;, &quot;TEST&quot;);</div><div class="line">sendBroadcast(intent);</div></pre></td></tr></table></figure>
<p>值得注意的是，Android 3.1开始，系统向所有Intent的广播添加了 <code>FLAG_EXCLUDE_STOPPED_PACKAGES</code> 标志。这样做是为了防止广播无意或不必要地开启未启动App的后台服务。如果要强制调起未启动的App，后台服务或应用程序可以通过向广播Intent添加 <code>FLAG_INCLUDE_STOPPED_PACKAGES</code> 标志来唤醒。<br>还需要注意的是，在一些手机厂商的ROM中需要设置允许应用后台允许这个设置才能生效。</p>
<h2 id="Android-O-上对广播的限制"><a href="#Android-O-上对广播的限制" class="headerlink" title="Android O 上对广播的限制"></a>Android O 上对广播的限制</h2><p>先来了解一下显式广播和隐式广播。<br>显式广播就是通过显式 Intent 发送的广播。<br>隐式广播是通过隐式 Intent 发送的广播。<br>在  Android O 以后，除了有限的例外之外，应用无法使用清单注册（静态注册）的方式来接收隐式广播。但对于这些隐式广播，可以通过运行时注册（动态注册）的方式注册。对于显式广播，则依然可以通过清单注册（静态注册）的方式监听。</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>在《阿里巴巴Android开发手册》中对广播的使用提到：</p>
<p>1.避免在 <code>BroadcastReceiver#onReceive()</code> 中执行耗时操作，如果有耗时工作， 应该创建 <code>IntentService</code> 完成，而不应该在 <code>BroadcastReceiver</code> 内创建子线程去做。<br>说明:<br>由于该方法是在主线程执行，如果执行耗时操作会导致 UI不流畅。可以使用 <code>IntentService</code> 、 创 建 <code>HandlerThread</code> 或 者 调 用 <code>Context#registerReceiver(BroadcastReceiver, IntentFilter, String, Handler)</code> 方法等方式，在其他 Wroker 线程执行 <code>onReceive</code> 方法。<code>BroadcastReceiver#onReceive()</code> 方法耗时超过 10 秒钟，可能会被系统杀死。</p>
<p>2.避免使用隐式 <code>Intent</code> 广播敏感信息，信息可能被其他注册了对应 <code>BroadcastReceiver 的 App</code> 接收。<br>说明:<br>通过 <code>Context#sendBroadcast()</code> 发送的隐式广播会被所有感兴趣的 receiver 接收，恶 意应用注册监听该广播的 receiver 可能会获取到 Intent 中传递的敏感信息，并进行其他危险操作。如果发送的广播为使用<code>Context#sendOrderedBroadcast()</code> 方法发送的有序广播，优先级较高的恶意 receiver 可能直接丢弃该广播，造成服务不可用，或者向广播结果塞入恶意数据。<br>如果广播仅限于应用内，则可以使用<code>LocalBroadcastManager#sendBroadcast()</code> 实现，避免敏感信息外泄和 Intent 拦截的风险。</p>
<!--  
https://www.cnblogs.com/lwbqqyumidi/p/4168017.html
-->
]]></content>
    
    <summary type="html">
    
      介绍广播的一些基础知识
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android ActivityGroup简介</title>
    <link href="http://yoursite.com/2015/01/08/android-compnent-activitygroup/"/>
    <id>http://yoursite.com/2015/01/08/android-compnent-activitygroup/</id>
    <published>2015-01-08T02:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ActivityGroup简介"><a href="#ActivityGroup简介" class="headerlink" title="ActivityGroup简介"></a>ActivityGroup简介</h2><p><code>ActivityGroup</code>可以看作是<code>Activity</code>的容器，可以包含多个嵌套进来的<code>Activity</code>。<br>我们只需要知道有这个类就可以了，现在这个类现在已经不推荐使用了，是<code>deprecated</code>状态的，一般情况下是可以被<code>Fragment</code>取代的，但是在一些特殊场合下仍然是被需要的。<br>下面通过一个Demo来介绍<code>ActivityGroup</code>的使用。</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>MainActivity.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">ActivityGroup</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ViewGroup mLeft;</div><div class="line">    <span class="keyword">private</span> ViewGroup mRight;</div><div class="line">    <span class="keyword">private</span> LocalActivityManager manager;</div><div class="line">    <span class="keyword">private</span> View mRoot;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> WeakReference&lt;MainActivity&gt; mInstance;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        mInstance = <span class="keyword">new</span> WeakReference&lt;MainActivity&gt;(<span class="keyword">this</span>);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        manager = getLocalActivityManager();</div><div class="line">        mRoot = findViewById(R.id.container_main);</div><div class="line">        mLeft = (ViewGroup) findViewById(R.id.container_left);</div><div class="line">        mRight = (ViewGroup) findViewById(R.id.container_right);</div><div class="line"></div><div class="line">        startLeftActivity();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MainActivity <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> mInstance != <span class="keyword">null</span> ? mInstance.get() : <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startLeftActivity</span><span class="params">()</span></span>&#123;</div><div class="line">        mLeft.removeAllViews();</div><div class="line">        Intent i = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, LeftActivity.class);</div><div class="line">        mLeft.addView(manager.startActivity(<span class="string">"LeftActivity"</span>, i).getDecorView());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startRightActivity</span><span class="params">()</span></span>&#123;</div><div class="line">        mRight.removeAllViews();</div><div class="line">        Intent i = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, RightActivity.class);</div><div class="line">        mRight.addView(manager.startActivity(<span class="string">"RightActivity"</span>, i).getDecorView());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>activity_main.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/container_main"</span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></div><div class="line">    <span class="attr">android:showDividers</span>=<span class="string">"middle"</span></div><div class="line">    <span class="attr">android:divider</span>=<span class="string">"?android:attr/dividerHorizontal"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.android.hq.testapplication.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/container_left"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"150dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_weight</span>=<span class="string">"0"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/container_right"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"Empty"</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>LeftActivity.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeftActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_left);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startRightActivity</span><span class="params">(View v)</span></span>&#123;</div><div class="line">        MainActivity.getInstance().startRightActivity();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>在启动右边的<code>Activity</code>之前，右边区域是空的：<br><img src="/images/android-compnent-activitygroup/image1.png" width="360" height="620"><br>点击按钮启动右边<code>Activity</code>：<br><img src="/images/android-compnent-activitygroup/image2.png" width="360" height="620"></p>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>从源码中我们可以看到<code>ActivityGroup</code>类的父类是<code>Activity</code>，也就是说二者具有相同的方法和生命周期。在<code>ActivityGroup</code>有成员变量<code>protected LocalActivityManager mLocalActivityManager</code>，那么<code>ActivityGroup</code>对<code>Activity</code>的管理就要以来这个变量来管理了。<br>在<code>ActivityGroup</code>的<code>onCreate``onResume``onPause</code>等生命周期函数里面分别调用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Bundle states = savedInstanceState != <span class="keyword">null</span></div><div class="line">        ? (Bundle) savedInstanceState.getBundle(STATES_KEY) : <span class="keyword">null</span>;</div><div class="line">mLocalActivityManager.dispatchCreate(states);</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mLocalActivityManager.dispatchResume();</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mLocalActivityManager.dispatchPause(isFinishing());</div></pre></td></tr></table></figure>
<p>来保证子<code>Activity</code>的生命周期与<code>ActivityGroup</code>一致。<br><code>LocalActivityManager</code>通过<code>startActivity(String id,Intent intent)</code>这个方法获取当前<code>Window</code>对象，再然后调用<code>getDecorView()</code>方法获取当前<code>Activity</code>对应的<code>View</code>，这个就把多个<code>Activity</code>添加到一个<code>RootView</code>里面了。<br>具体是怎么获得我们需要<code>Activity</code>的<code>DecorView</code>的呢？我们就要看一下<code>LocalActivityManager</code>的<code>startActivity</code>这个方法了。<br>首先要获取主线程的<code>mActivityThread</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mActivityThread = ActivityThread.currentActivityThread();</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">r.activity = mActivityThread.startActivityNow(</div><div class="line">        mParent, r.id, r.intent, r.activityInfo, r, r.instanceState, instance);</div><div class="line"><span class="keyword">if</span> (r.activity == <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line">r.window = r.activity.getWindow();</div></pre></td></tr></table></figure>
<p>这里调用了<code>mActivityThread.startActivityNow</code>方法，在<code>startActivityNow</code>内部会调用<code>ActivityThread.performLaunchActivity</code>来装载这个<code>Activity</code>，然后通过<code>activity.getWindow()</code>获得<code>Window</code>对象，在通过<code>Window</code>获得<code>DecorView</code>。</p>
]]></content>
    
    <summary type="html">
    
      介绍ActivityGroup的使用
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="ActivityGroup" scheme="http://yoursite.com/tags/ActivityGroup/"/>
    
  </entry>
  
  <entry>
    <title>Java 基础 -- 反射</title>
    <link href="http://yoursite.com/2014/11/02/java-basic-reflect/"/>
    <id>http://yoursite.com/2014/11/02/java-basic-reflect/</id>
    <published>2014-11-02T02:00:00.000Z</published>
    <updated>2019-02-16T09:16:30.663Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>什么叫反射？<br>在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种运行时动态获取信息以及动态调用对象方法的功能称为 Java 语言的反射机制。<br>反射可以“看透”程序的运行情况，可以让我们在运行期知晓一个类或者实例的运行状况，可以动态地加载和调用，虽然有一定的性能忧患，但它带给我们的便利远远大于其性能缺陷。</p>
<p>实现反射的几个步骤：</p>
<ul>
<li>获取 Class 类</li>
<li>通过 Class 创建对象</li>
<li>获取类中的方法</li>
<li>获取类中的属性、属性值或者类型</li>
</ul>
<h2 id="反射相关的类"><a href="#反射相关的类" class="headerlink" title="反射相关的类"></a>反射相关的类</h2><p>要实现反射机制一般要使用下面四个类：</p>
<ul>
<li>Class</li>
<li>Constructor</li>
<li>Method</li>
<li>Field</li>
</ul>
<h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h3><p>理解 Class 对象：<br><a href="https://blog.csdn.net/javazejian/article/details/70768369?utm_source=gold_browser_extension" target="_blank" rel="external">https://blog.csdn.net/javazejian/article/details/70768369?utm_source=gold_browser_extension</a><br><a href="https://www.cnblogs.com/yaoyinglong/p/Class%E5%AF%B9%E8%B1%A1.html" target="_blank" rel="external">https://www.cnblogs.com/yaoyinglong/p/Class%E5%AF%B9%E8%B1%A1.html</a></p>
<p>Java 语言是先把 Java 源文件编译成后缀为 class 的字节码文件，然后再通过 ClassLoader 机制把这些类文件加载到内存中，最后生成实例来执行的，这是 Java 处理的基本机制，但是加载到内存中的数据是如何描述一个类的呢？比如 Dog.class 文件中定义的是一个 Dog 类，那么它在内存中是如何展现的呢？<br>Java 使用一个元类（MetaClass）来描述加载到内存中的类数据，这就是 Class 类，它是一个描述类的类对象，比如 Dog.classs 文件加载到内存中后就会一个Class 的实例对象来描述它。因为Class类是“类中类”，也就预示着它有很多特殊的地方：</p>
<ul>
<li>无构造函数：Java 中的类一般都有构造函数，用于创建实例对象。但是 Class 类却没有构造函数，不能实例化，Class 对象是在加载类时由 Java 虚拟机通过调用类的加载器中的defineClass方法自动构造的。</li>
<li>可以描述基本类型：虽然8个基本类型在 JVM 中并不是一个对象，它们一般存在于栈内存中，但是 Class 类仍然可以描述它们。例如：可以使用 int.class 标识int类型的类对象。</li>
<li>其对象都是单例模式：一个Class的实例对象描述一个类，并且只描述一个类，反过来也成立，一个类只有一个Class实例对象。</li>
</ul>
<p>下面的代码都是返回true的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 类的属性class所引用的对象与实例对象的getClass返回值相同</div><div class="line">String.class.equals(new String().class);</div><div class="line">&quot;ABC&quot;.getClass.equals(String.class);</div><div class="line">// class 实例对象不区分泛型</div><div class="line">ArrayList.class.equals(new ArrayList&lt;String&gt;().getClass());</div></pre></td></tr></table></figure>
<p>Class 类是 Java 反射的入口，只有在获得了一个类的描述对象后才能动态地加载、调用。<br>下面介绍一下获取 Class 的三种方法：</p>
<p>第一种方式：通过对象的 getClass 方法获取：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">OuterClass outerClass = new OuterClass();</div><div class="line">Class cls = outerClass.getClass();</div></pre></td></tr></table></figure>
<p>第二种方式：直接通过类名获取，也就是通过类属性的方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Class cls = OuterClass.class;</div></pre></td></tr></table></figure>
<p>第三种方式：通过类的全称获取，使用 forName 方法加载：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">try &#123;</div><div class="line">    Class cls = Class.forName(&quot;com.example.hq.testsomething.OuterClass&quot;);</div><div class="line">&#125; catch (ClassNotFoundException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>获得了 Class 对象后，就可以通过下面Class 的几个方法来获取构造方法、属性、方法以及注解，为后续的反射代码铺平了道路：</p>
<ul>
<li>getConstructors()/getDeclaredConstructors()：获取类中所有的构造方法</li>
<li>getFields()/getDeclaredFields()：获取类中所有的属性</li>
<li>getMethods()/getDeclaredMethods()：获取类中所有的方法</li>
<li>getAnnotations()/getDeclaredAnnotationsv()：获取类所有的注解</li>
<li>getSuperclass()：获取直接继承的父类</li>
<li>getGenericSuperclass()：获取直接继承的父类（包含泛型参数）</li>
</ul>
<h3 id="get-和-getDeclared-方法的区别"><a href="#get-和-getDeclared-方法的区别" class="headerlink" title="get* 和 getDeclared* 方法的区别"></a><code>get*</code> 和 <code>getDeclared*</code> 方法的区别</h3><p>Java Class 类提供了很多的 <code>get*</code> 和 <code>getDeclared*</code> 方法，比如 getDeclaredMethods() 和 getMethods()，那么它们之间有什么差别呢？<br>getMethods() 方法获取的是所有的 public 访问级别的方法，包括从父类继承的方法。<br>getDeclaredMethods() 方法获得的是自身类的所有方法，包括公用方法、私有方法等，而且不受限于访问权限。但不包括继承的方法。<br>getDeclaredField（s）和getField（s）同上。<br>Java 之所以如此处理，是因为反射本身只是正常代码逻辑的一种补充，而不是让正常代码逻辑产生翻天覆地的变动，所以public得属性和方法最容易获取，私有属性和方法也可以获取，但要先定本类。</p>
<h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><p>Method 的几个方法：</p>
<ul>
<li>getModifiers()：获取方法修饰符，比如Modifier.PUBLIC、Modifier.STATIC等</li>
<li>getDeclaringClass()：返回表示声明由此Method对象表示的方法的类的Class对象</li>
</ul>
<h3 id="Field"><a href="#Field" class="headerlink" title="Field"></a>Field</h3><p>Field 的几个方法：</p>
<ul>
<li>getDeclaringClass()：返回表示声明由Field对象表示的字段的类或接口的 Class 对象。比如 mName 是 Student 类的对象，那么这个方法就返回 Student 对应的 Class 对象。</li>
<li>getClass()：返回 Field Class 对象。</li>
<li>getType()：返回一个Class对象，用于标识Field对象所表示的字段的声明类型。比如 mName 是String 类型的，那么就返回 String 对应的 Class 对象。</li>
</ul>
<h2 id="实例化对象"><a href="#实例化对象" class="headerlink" title="实例化对象"></a>实例化对象</h2><p>实例化对象的方法：</p>
<ul>
<li>Class.newInstance()：只能够调用无参的构造函数，即默认的构造函数。要求被调用的构造函数是可见的，也即必须是public类型的。</li>
<li>Constructor.newInstance()：可以根据传入的参数，调用任意构造构造函数。可以调用私有的构造函数，需要通过setAccessible（true）实现。</li>
</ul>
<p>通过 Class.newInstance 方法实例化对象：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">try &#123;</div><div class="line">    OuterClass oc = (OuterClass) cls.newInstance();</div><div class="line">&#125; catch (InstantiationException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125; catch (IllegalAccessException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过 Constructor.newInstance() 方法实例化对象：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">try &#123;</div><div class="line">    Constructor constructor = cls.getDeclaredConstructor(int.class, String.class);</div><div class="line">    constructor.setAccessible(true);</div><div class="line">    OuterClass oc = (OuterClass) constructor.newInstance(&quot;1&quot;,&quot;test&quot;);</div><div class="line">&#125; catch (NoSuchMethodException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125; catch (InstantiationException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125; catch (IllegalAccessException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125; catch (InvocationTargetException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="关于-setAccessible"><a href="#关于-setAccessible" class="headerlink" title="关于 setAccessible"></a>关于 setAccessible</h2><p>我们平时在反射代码时，尤其时反射调用私有的 Field 或者 Method 时，会设置 <code>setAccessible(true)</code>，如果不设置，就会抛出异常：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java.lang.IllegalAccessException: Class java.lang.Class&lt;com.example.heqiang.testsomething.commontest.OtherTestActivity&gt; cannot access private  field boolean com.example.heqiang.testsomething.reflect.TestA.mTestBoolean of class java.lang.Class&lt;com.example.heqiang.testsomething.reflect.TestA&gt;</div></pre></td></tr></table></figure>
<p>那么可能大家就会认为 Accessible 代表的是访问权限的控制。其实并不是这样，我们可以访问一个公有public的属性或者方法，不去设置 <code>setAccessible(true)</code>，此时是可以访问或者执行的。但是我们打印下面的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">field.isAccessible()</div><div class="line">method.isAccessible()</div></pre></td></tr></table></figure>
<p>发现返回的是 false。<br>为什么返回了 false 还能执行呢？这也说明，属性和方法对象的Accessible属性并不是用来决定是否可以访问的。<br>Accessible 其实指的是是否更容易获得，是否进行安全检查。<br>我们知道，动态修改一个类或者方法或者执行方法时都会受到Java安全体系的制约，而安全的处理是非常消耗资源的（性能非常低），因此对于运行期要执行的方法或要修改的属性就提供了 Accessible 可选项：由开发者决定是否要逃避安全体系的检查。<br>查看源码，我们发现 Field 、Method 和 Constructor 都是继承自 AccessibleObject 的，isAccessible() 和 setAccessible 都是 AccessibleObject 的方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public class AccessibleObject implements AnnotatedElement &#123;</div><div class="line">    boolean override;</div><div class="line">    </div><div class="line">    public void setAccessible(boolean flag) throws SecurityException &#123;</div><div class="line">        SecurityManager sm = System.getSecurityManager();</div><div class="line">        if (sm != null) sm.checkPermission(ACCESS_PERMISSION);</div><div class="line">        setAccessible0(this, flag);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /* Check that you aren&apos;t exposing java.lang.Class.&lt;init&gt;. */</div><div class="line">    private static void setAccessible0(AccessibleObject obj, boolean flag)</div><div class="line">        throws SecurityException</div><div class="line">    &#123;</div><div class="line">        if (obj instanceof Constructor &amp;&amp; flag == true) &#123;</div><div class="line">            Constructor&lt;?&gt; c = (Constructor&lt;?&gt;)obj;</div><div class="line">            if (c.getDeclaringClass() == Class.class) &#123;</div><div class="line">                throw new SecurityException(&quot;Can not make a java.lang.Class&quot; +</div><div class="line">                                            &quot; constructor accessible&quot;);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        obj.override = flag;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>设置 setAccessible 其实就是设置 override 属性。<br>再来看一下 Method 的 invoke 方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">    public Object invoke(Object obj, Object... args)</div><div class="line">        throws IllegalAccessException, IllegalArgumentException,</div><div class="line">           InvocationTargetException</div><div class="line">    &#123;</div><div class="line">        if (!override) &#123;</div><div class="line">            if (!Reflection.quickCheckMemberAccess(clazz, modifiers)) &#123;</div><div class="line">                Class&lt;?&gt; caller = Reflection.getCallerClass(1);</div><div class="line"></div><div class="line">                checkAccess(caller, clazz, obj, modifiers);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        MethodAccessor ma = methodAccessor;             // read volatile</div><div class="line">        if (ma == null) &#123;</div><div class="line">            ma = acquireMethodAccessor();</div><div class="line">        &#125;</div><div class="line">        return ma.invoke(obj, args);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果 override 为 true，那么就不需要执行安全检查，这就可以大幅度地提升了系统性能（当然，由于取消了安全检查，也就可以允许private方法，访问private私有属性了）。经过有人测试，在大量的反射情况下，设置 Accessible 为true可以提升性能 20 倍以上。<br>因此，我们在进行反射编程时，设置 Accessible 为true，不仅仅是因为操作习惯的问题，这是在为我们的系统性能考虑。</p>
<h2 id="是否需要太关注反射效率"><a href="#是否需要太关注反射效率" class="headerlink" title="是否需要太关注反射效率"></a>是否需要太关注反射效率</h2><p>我们平时编程，总会有人经常说：反射的效率是非常低的，不到万不得已就不要使用。事实上，这句话的前半句是对的，后半句是错的。<br>反射的效率相对于正常的代码执行确实效率低很多（有人经过测试，相差15倍左右），但它是一个非常有效的运行期工具类，只要代码结构清晰、可读性好那就先开发起来，等到性能测试时证明此处性能确实有问题再修改也不迟（一般情况下反射并不是性能的终极杀手，而代码结构混乱、可读性差则很可能埋下性能隐患）。很少有项目是因为反射问题引起系统效率故障的。而根据二八原则，80%的性能消耗在20%的代码上，这20%的代码才是我们关注的重点，不要单单把反射作为重点关注对象。</p>
<h2 id="反射实现代码"><a href="#反射实现代码" class="headerlink" title="反射实现代码"></a>反射实现代码</h2><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><p>TestA</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public class TestA &#123;</div><div class="line">    private TestB mTestB;</div><div class="line">    private boolean mTestBoolean = false;</div><div class="line">    public TestA()&#123;</div><div class="line">        mTestB = new TestB();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void getTestBoolean()&#123;</div><div class="line">        Log.e(&quot;Test&quot;,&quot;mTestBoolean = &quot;+mTestBoolean);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void testPrivateMethod()&#123;</div><div class="line">        Log.e(&quot;Test&quot;,&quot;testPrivateMethod!&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private String testPrivateMethodWithArgs(String arg1,int arg2)&#123;</div><div class="line">        Log.e(&quot;Test&quot;,&quot;testPrivateMethodWithArgs! arg1 = &quot;+arg1+&quot;,arg2 = &quot;+arg2);</div><div class="line">        return &quot;return &quot;+arg1;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>TestB</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class TestB &#123;</div><div class="line">    public TestB()&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void functionA()&#123;</div><div class="line">        Log.e(&quot;Test&quot;,&quot;functionA()&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>OutterClass</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class OuterClass &#123;</div><div class="line">    private InnerClass mInnerClass;</div><div class="line">    public OuterClass()&#123;</div><div class="line">        mInnerClass = new InnerClass();</div><div class="line">        mInnerClass.printInt();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private class InnerClass&#123;</div><div class="line">        private int mInt = 1;</div><div class="line">        private String mStr = &quot;Test&quot;;</div><div class="line">        public void printInt()&#123;</div><div class="line">            Log.d(&quot;Test&quot;,&quot;mInt = &quot;+mInt);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="获取属性值"><a href="#获取属性值" class="headerlink" title="获取属性值"></a>获取属性值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">public void getFiled()&#123;</div><div class="line">    TestA a = new TestA();</div><div class="line"></div><div class="line">    try &#123;</div><div class="line">        //或者a.getClass().getDeclaredField(&quot;mTestBoolean&quot;);</div><div class="line">        Field field = TestA.class.getDeclaredField(&quot;mTestBoolean&quot;);</div><div class="line">        field.setAccessible(true);</div><div class="line">        Object value = field.get(a);</div><div class="line">        if(value != null &amp;&amp; value instanceof Boolean)&#123;</div><div class="line">            Log.e(&quot;Test&quot;,&quot; value = &quot;+value);</div><div class="line">        &#125;</div><div class="line">    &#125; catch (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public void getFiled1()&#123;</div><div class="line">    TestA a = new TestA();</div><div class="line"></div><div class="line">    try &#123;</div><div class="line">        Class classObj = Class.forName(&quot;com.example.heqiang.testsomething.TestA&quot;);</div><div class="line">        Field field = classObj.getDeclaredField(&quot;mTestBoolean&quot;);</div><div class="line">        field.setAccessible(true);</div><div class="line">        Object value = field.get(a);</div><div class="line">        if(value != null &amp;&amp; value instanceof Boolean)&#123;</div><div class="line">            Log.e(&quot;Test&quot;,&quot; value = &quot;+value);</div><div class="line">        &#125;</div><div class="line">    &#125; catch (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="修改属性值"><a href="#修改属性值" class="headerlink" title="修改属性值"></a>修改属性值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public void setField()&#123;</div><div class="line">    TestA a = new TestA();</div><div class="line">    a.getTestBoolean();</div><div class="line"></div><div class="line">    try &#123;</div><div class="line">        Field field = TestA.class.getDeclaredField(&quot;mTestBoolean&quot;);</div><div class="line">        field.setAccessible(true);</div><div class="line">        field.set(a,true);</div><div class="line">    &#125; catch (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    a.getTestBoolean();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public void invokeMethod()&#123;</div><div class="line">    TestA a = new TestA();</div><div class="line">    try &#123;</div><div class="line">        Method method = TestA.class.getDeclaredMethod(&quot;testPrivateMethod&quot;);</div><div class="line">        method.setAccessible(true);</div><div class="line">        method.invoke(a);</div><div class="line">    &#125; catch (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="调用带参数方法并获取返回值"><a href="#调用带参数方法并获取返回值" class="headerlink" title="调用带参数方法并获取返回值"></a>调用带参数方法并获取返回值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public void invokeMethodWithArgs()&#123;</div><div class="line">    TestA a = new TestA();</div><div class="line">    Object result = null;</div><div class="line">    try &#123;</div><div class="line">        Method method = TestA.class.getDeclaredMethod(&quot;testPrivateMethodWithArgs&quot;,String.class,int class);</div><div class="line">        method.setAccessible(true);</div><div class="line">        result = method.invoke(a,&quot;Test&quot;,1);</div><div class="line">    &#125; catch (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    if(result != null &amp;&amp; result instanceof String)&#123;</div><div class="line">        Log.e(&quot;Test&quot;,&quot; result = &quot;+result);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="调用私有属性的方法"><a href="#调用私有属性的方法" class="headerlink" title="调用私有属性的方法"></a>调用私有属性的方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public void invokePirvateFieldMethod()&#123;</div><div class="line">    TestA a = new TestA();</div><div class="line">    Method functionA = null;</div><div class="line">    try &#123;</div><div class="line">        Field field = TestA.class.getDeclaredField(&quot;mTestB&quot;);</div><div class="line">        field.setAccessible(true);</div><div class="line">        Object testB = field.get(a);</div><div class="line">        if(testB != null)&#123;</div><div class="line">            Class testBClass = testB.getClass();</div><div class="line">            functionA = testBClass.getDeclaredMethod(&quot;functionA&quot;);</div><div class="line">            functionA.setAccessible(true);</div><div class="line">            if(functionA != null)&#123;</div><div class="line">                functionA.invoke(testB);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; catch (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public void testReflectInnerClass()&#123;</div><div class="line">    OuterClass outerClass = new OuterClass();</div><div class="line">    try&#123;</div><div class="line">        Field outerInnerClassFiled =Class.forName(&quot;com.example.heqiang.testsomething.OuterClass&quot;).getDeclaredField(&quot;mInnerClass&quot;);</div><div class="line">        outerInnerClassFiled.setAccessible(true);</div><div class="line">        Class innerClass = Class.forName(&quot;com.example.heqiang.testsomething.OuterClass$InnerClass&quot;);</div><div class="line">        Object outerInnerClassObject = outerInnerClassFiled.get(outerClass);</div><div class="line">        if (outerInnerClassObject.getClass().getName().equals(innerClass.getName()))&#123;</div><div class="line">            Field innerIntFiled =innerClass.getDeclaredField(&quot;mInt&quot;);</div><div class="line">            innerIntFiled.setAccessible(true);</div><div class="line">            Field innerStrFiled =innerClass.getDeclaredField(&quot;mStr&quot;);</div><div class="line">            innerStrFiled.setAccessible(true);</div><div class="line">            Method innerFucMethod =innerClass.getDeclaredMethod(&quot;printInt&quot;);</div><div class="line">            innerFucMethod.setAccessible(true);</div><div class="line"></div><div class="line">            innerFucMethod.invoke(outerInnerClassObject);</div><div class="line">            innerIntFiled.set(outerInnerClassObject, 8);</div><div class="line">            innerFucMethod.invoke(outerInnerClassObject);</div><div class="line"></div><div class="line">            Object innerStrObject = innerStrFiled.get(outerInnerClassObject);</div><div class="line">            Log.e(&quot;Test&quot;,&quot;mStr length = &quot;+((String)innerStrObject).length());</div><div class="line">        &#125;</div><div class="line">    &#125;catch (Exception e)&#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="获取方法的类型和参数"><a href="#获取方法的类型和参数" class="headerlink" title="获取方法的类型和参数"></a>获取方法的类型和参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class ReflectTest &#123;</div><div class="line">    public static void testFunc(String grg0,int arg1)&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public final int testFunc1()&#123;</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public void testRefect()&#123;</div><div class="line">    Method[] methods = ReflectTest.class.getMethods();</div><div class="line">    for (Method method : methods) &#123;</div><div class="line">        Log.d(&quot;Test&quot;,&quot;----------------------&gt;&quot;);</div><div class="line">        String methodName = method.getName();</div><div class="line">        Log.d(&quot;Test&quot;,&quot;methodName = &quot;+methodName);</div><div class="line">        int modifiers = method.getModifiers();</div><div class="line">        if((modifiers &amp; Modifier.PUBLIC) != 0)</div><div class="line">            Log.d(&quot;Test&quot;,&quot;public&quot;);</div><div class="line">        if((modifiers &amp; Modifier.PRIVATE) != 0)</div><div class="line">            Log.d(&quot;Test&quot;,&quot;private&quot;);</div><div class="line">        if((modifiers &amp; Modifier.STATIC) != 0)</div><div class="line">            Log.d(&quot;Test&quot;,&quot;static&quot;);</div><div class="line">        if((modifiers &amp; Modifier.FINAL) != 0)</div><div class="line">            Log.d(&quot;Test&quot;,&quot;final&quot;);</div><div class="line">        Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();</div><div class="line">        Log.d(&quot;Test&quot;,&quot;parameter num = &quot;+parameterTypes.length);</div><div class="line">        for(Class c : parameterTypes)&#123;</div><div class="line">            Log.d(&quot;Test&quot;,&quot;parameter name = &quot;+c.getName());</div><div class="line">        &#125;</div><div class="line">        Log.d(&quot;Test&quot;,&quot;&lt;----------------------&gt;&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">D/Test    (23196): ----------------------&gt;</div><div class="line">D/Test    (23196): methodName = equals</div><div class="line">D/Test    (23196): public</div><div class="line">D/Test    (23196): parameter num = 1</div><div class="line">D/Test    (23196): parameter name = java.lang.Object</div><div class="line">D/Test    (23196): &lt;----------------------&gt;</div><div class="line">D/Test    (23196): ----------------------&gt;</div><div class="line">D/Test    (23196): methodName = getClass</div><div class="line">D/Test    (23196): public</div><div class="line">D/Test    (23196): final</div><div class="line">D/Test    (23196): parameter num = 0</div><div class="line">D/Test    (23196): &lt;----------------------&gt;</div><div class="line">D/Test    (23196): ----------------------&gt;</div><div class="line">D/Test    (23196): methodName = hashCode</div><div class="line">D/Test    (23196): public</div><div class="line">D/Test    (23196): parameter num = 0</div><div class="line">D/Test    (23196): &lt;----------------------&gt;</div><div class="line">D/Test    (23196): ----------------------&gt;</div><div class="line">D/Test    (23196): methodName = notify</div><div class="line">D/Test    (23196): public</div><div class="line">D/Test    (23196): final</div><div class="line">D/Test    (23196): parameter num = 0</div><div class="line">D/Test    (23196): &lt;----------------------&gt;</div><div class="line">D/Test    (23196): ----------------------&gt;</div><div class="line">D/Test    (23196): methodName = notifyAll</div><div class="line">D/Test    (23196): public</div><div class="line">D/Test    (23196): final</div><div class="line">D/Test    (23196): parameter num = 0</div><div class="line">D/Test    (23196): &lt;----------------------&gt;</div><div class="line">D/Test    (23196): ----------------------&gt;</div><div class="line">D/Test    (23196): methodName = testFunc</div><div class="line">D/Test    (23196): public</div><div class="line">D/Test    (23196): static</div><div class="line">D/Test    (23196): parameter num = 2</div><div class="line">D/Test    (23196): parameter name = java.lang.String</div><div class="line">D/Test    (23196): parameter name = int</div><div class="line">D/Test    (23196): &lt;----------------------&gt;</div><div class="line">D/Test    (23196): ----------------------&gt;</div><div class="line">D/Test    (23196): methodName = testFunc1</div><div class="line">D/Test    (23196): public</div><div class="line">D/Test    (23196): final</div><div class="line">D/Test    (23196): parameter num = 0</div><div class="line">D/Test    (23196): &lt;----------------------&gt;</div><div class="line">D/Test    (23196): ----------------------&gt;</div><div class="line">D/Test    (23196): methodName = toString</div><div class="line">D/Test    (23196): public</div><div class="line">D/Test    (23196): parameter num = 0</div><div class="line">D/Test    (23196): &lt;----------------------&gt;</div><div class="line">D/Test    (23196): ----------------------&gt;</div><div class="line">D/Test    (23196): methodName = wait</div><div class="line">D/Test    (23196): public</div><div class="line">D/Test    (23196): final</div><div class="line">D/Test    (23196): parameter num = 0</div><div class="line">D/Test    (23196): &lt;----------------------&gt;</div><div class="line">D/Test    (23196): ----------------------&gt;</div><div class="line">D/Test    (23196): methodName = wait</div><div class="line">D/Test    (23196): public</div><div class="line">D/Test    (23196): final</div><div class="line">D/Test    (23196): parameter num = 1</div><div class="line">D/Test    (23196): parameter name = long</div><div class="line">D/Test    (23196): &lt;----------------------&gt;</div><div class="line">D/Test    (23196): ----------------------&gt;</div><div class="line">D/Test    (23196): methodName = wait</div><div class="line">D/Test    (23196): public</div><div class="line">D/Test    (23196): final</div><div class="line">D/Test    (23196): parameter num = 2</div><div class="line">D/Test    (23196): parameter name = long</div><div class="line">D/Test    (23196): parameter name = int</div><div class="line">D/Test    (23196): &lt;----------------------&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      介绍反射的用法
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Android实用技巧之adb命令：getprop，setprop，watchprops命令的使用</title>
    <link href="http://yoursite.com/2014/10/18/android-development-skills-props/"/>
    <id>http://yoursite.com/2014/10/18/android-development-skills-props/</id>
    <published>2014-10-18T02:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="getprop"><a href="#getprop" class="headerlink" title="getprop"></a>getprop</h2><h3 id="getprop简介"><a href="#getprop简介" class="headerlink" title="getprop简介"></a>getprop简介</h3><p><code>getprop</code>命令的作用就是从系统的各种配置文件中读取一些设备的信息。这些文件在我们的手机设备中是可以找到的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">init.rc</div><div class="line">default.prop</div><div class="line">/system/build.prop</div></pre></td></tr></table></figure></p>
<h3 id="查询所有的配置"><a href="#查询所有的配置" class="headerlink" title="查询所有的配置"></a>查询所有的配置</h3><p>输入命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell getprop</div></pre></td></tr></table></figure></p>
<p>就会列出所有的配置信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">[aricent_ims_op_status]: [1]</div><div class="line">[aricent_ims_type]: [1]</div><div class="line">[config.disable_bluetooth]: [false]</div><div class="line">[dalvik.vm.dex2oat-Xms]: [64m]</div><div class="line">[dalvik.vm.dex2oat-Xmx]: [512m]</div><div class="line">[dalvik.vm.dex2oat-filter]: [speed]</div><div class="line">[dalvik.vm.dexopt-flags]: [m=y]</div><div class="line">[dalvik.vm.heapgrowthlimit]: [256m]</div><div class="line">[dalvik.vm.heapsize]: [512m]</div><div class="line">[dalvik.vm.image-dex2oat-Xms]: [64m]</div><div class="line">[dalvik.vm.image-dex2oat-Xmx]: [64m]</div><div class="line">[dalvik.vm.image-dex2oat-filter]: [speed]</div><div class="line">[dalvik.vm.isa.arm.features]: [div]</div><div class="line">[dalvik.vm.isa.arm64.features]: [default]</div><div class="line">[dalvik.vm.stack-trace-file]: [/data/anr/traces.txt]</div><div class="line">[debug.force_rtl]: [0]</div><div class="line">[debug.hwc.force_gpu]: [0]</div><div class="line">[debug.hwc.winupdate]: [1]</div><div class="line">[debug.hwui.render_dirty_regions]: [true]</div><div class="line">[dev.bootcomplete]: [1]</div><div class="line">[dhcp.wlan0.dns1]: [172.17.16.99]</div><div class="line">[dhcp.wlan0.dns2]: [172.17.16.98]</div><div class="line">[dhcp.wlan0.dns3]: []</div><div class="line">[dhcp.wlan0.dns4]: []</div><div class="line">[dhcp.wlan0.domain]: [meizu.com]</div><div class="line">[dhcp.wlan0.gateway]: [172.17.100.1]</div><div class="line">[dhcp.wlan0.ipaddress]: [172.17.100.29]</div><div class="line">[dhcp.wlan0.leasetime]: [28800]</div><div class="line">[dhcp.wlan0.mask]: [255.255.252.0]</div><div class="line">[dhcp.wlan0.mtu]: []</div><div class="line">[dhcp.wlan0.pid]: [7115]</div><div class="line">[dhcp.wlan0.reason]: [BOUND]</div><div class="line">[dhcp.wlan0.result]: [ok]</div><div class="line">[dhcp.wlan0.server]: [1.1.1.2]</div><div class="line">[dhcp.wlan0.vendorInfo]: []</div><div class="line">[drm.service.enabled]: [true]</div><div class="line">[exynos.modempath]: [/system/vendor/firmware/modem.bin]</div><div class="line">[exynos.telephony.feature]: [true]</div><div class="line">[gsm.current.phone-type]: [1,1]</div><div class="line">[gsm.defaultpdpcontext.active]: [true]</div><div class="line">[gsm.network.type]: [Unknown,LTE]</div><div class="line"></div><div class="line">……</div><div class="line"></div><div class="line">[sys.usb.bicr]: [no]</div><div class="line">[sys.usb.charging]: [no]</div><div class="line">[sys.usb.config]: [mtp,adb]</div><div class="line">[sys.usb.state]: [mtp,adb]</div><div class="line">[sys.usb.vid]: [2A45]</div><div class="line">[vold.post_fs_data_done]: [1]</div><div class="line">[wifi.interface]: [wlan0]</div><div class="line">[wlan.driver.status]: [ok]</div></pre></td></tr></table></figure></p>
<p>这些配置中以<code>ro</code>开头的是只读属性。</p>
<h3 id="查看单个配置信息"><a href="#查看单个配置信息" class="headerlink" title="查看单个配置信息"></a>查看单个配置信息</h3><p>可以在<code>adb shell getprop</code>后面加属性名称来输出单个配置信息：<br>命令格式：<code>getprop [key]</code><br>比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ adb shell getprop dalvik.vm.heapgrowthlimit</div><div class="line">256m</div></pre></td></tr></table></figure></p>
<p>表示进程默认虚拟机最大堆内存。<br>如果你对某个属性名称不是那么确定的话就用下面的命令来过滤：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ adb shell getprop | grep dalvik</div><div class="line">[dalvik.vm.dex2oat-Xms]: [64m]</div><div class="line">[dalvik.vm.dex2oat-Xmx]: [512m]</div><div class="line">[dalvik.vm.dex2oat-filter]: [speed]</div><div class="line">[dalvik.vm.dexopt-flags]: [m=y]</div><div class="line">[dalvik.vm.heapgrowthlimit]: [256m]</div><div class="line">[dalvik.vm.heapsize]: [512m]</div><div class="line">[dalvik.vm.image-dex2oat-Xms]: [64m]</div><div class="line">[dalvik.vm.image-dex2oat-Xmx]: [64m]</div><div class="line">[dalvik.vm.image-dex2oat-filter]: [speed]</div><div class="line">[dalvik.vm.isa.arm.features]: [div]</div><div class="line">[dalvik.vm.isa.arm64.features]: [default]</div><div class="line">[dalvik.vm.stack-trace-file]: [/data/anr/traces.txt]</div><div class="line">[ro.dalvik.vm.native.bridge]: [0]</div></pre></td></tr></table></figure></p>
<h2 id="setprop"><a href="#setprop" class="headerlink" title="setprop"></a>setprop</h2><p><code>setprop</code>可以对手机一些配置进行设置，当然这些配置必须是可写的。<br>命令格式：<code>setprop [key] [value]</code><br>如果你想修改进程默认分配的可使用堆内存大小：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell setprop dalvik.vm.heapgrowthlimit 512m</div></pre></td></tr></table></figure></p>
<h2 id="watchprops"><a href="#watchprops" class="headerlink" title="watchprops"></a>watchprops</h2><p><code>watchprops</code>命令用来监听系统属性的变化，如果期间系统的属性发生变化则把变化的值显示出来。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ adb shell watchprops</div><div class="line">1491476973 dalvik.vm.heapgrowthlimit = &apos;512m&apos;</div><div class="line">1491476323 init.svc.debuggerd = &apos;running&apos;</div><div class="line">1491476323 init.svc.debuggerd64 = &apos;running&apos;</div><div class="line">1491476323 init.svc.debuggerd = &apos;restarting&apos;</div><div class="line">1491476323 init.svc.debuggerd64 = &apos;restarting&apos;</div><div class="line">1491476980 gsm.operator.alpha = &apos;&apos;</div><div class="line">1491476980 gsm.operator.numeric = &apos;&apos;</div><div class="line">1491476980 gsm.operator.iso-country = &apos;&apos;</div><div class="line">1491476980 gsm.operator.isroaming = &apos;false,false&apos;</div></pre></td></tr></table></figure></p>
<h2 id="一些参数说明"><a href="#一些参数说明" class="headerlink" title="一些参数说明"></a>一些参数说明</h2><ul>
<li>dalvik.vm.heapgrowthlimit：默认给进程分配的可使用堆内存</li>
<li>dalvik.vm.heapsize：设置了<code>android:largeHeap</code>以后可使用的内存大小</li>
<li>ro.product.brand：手机品牌</li>
<li>ro.product.device：设备名称</li>
<li>ro.product.model：设备内部代号</li>
<li>ro.product.name：设备名称</li>
<li>ro.product.manufacturer：设备制造商</li>
<li>ro.serialno：设备序列号</li>
<li>ro.sf.lcd_density：设备屏幕密度</li>
<li>ro.config.ringtone：默认来电铃声</li>
<li>ro.config.notification_sound：默认通知铃声</li>
<li>ro.config.alarm_alert：默认闹钟铃声</li>
<li>dalvik.vm.stack-trace-file：trace文件放置目录</li>
</ul>
]]></content>
    
    <summary type="html">
    
      介绍dumpsys的使用
    
    </summary>
    
      <category term="Android实用技巧" scheme="http://yoursite.com/categories/Android%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="getprop" scheme="http://yoursite.com/tags/getprop/"/>
    
      <category term="setprop" scheme="http://yoursite.com/tags/setprop/"/>
    
      <category term="watchprops" scheme="http://yoursite.com/tags/watchprops/"/>
    
  </entry>
  
  <entry>
    <title>Android实用技巧之adb命令：dumpsys命令的使用</title>
    <link href="http://yoursite.com/2014/10/15/android-development-skills-dumpsys/"/>
    <id>http://yoursite.com/2014/10/15/android-development-skills-dumpsys/</id>
    <published>2014-10-15T02:00:00.000Z</published>
    <updated>2018-09-20T01:08:29.046Z</updated>
    
    <content type="html"><![CDATA[<h2 id="dumpsys概述"><a href="#dumpsys概述" class="headerlink" title="dumpsys概述"></a>dumpsys概述</h2><p>Android提供的<code>dumpsys</code>工具可以用于查看手机中的应用程序和系统服务信息与状态，能够熟练使用<code>dumpsys</code>工具以及对它的输出内容进行理解是Android开发人员的必备技能，使用它我们不仅能够对方便的获取一些当前的平台的一些信息，而且能够对Android性能优化、Bug分析与调试带来很大的帮助。<br>手机连接电脑后可以直接命令行执行<code>adb shell dumpsy</code>查看所有支持的<code>Service</code>，但是这样输出的太多，可以通过<code>dumpsys | grep &quot;DUMP OF SERVICE&quot;</code> 仅显示主要的<code>Service</code>的信息。<br>关于这个命令的使用方法在这里做一下记录，以备使用。<br>关于<code>adb shell dumpsy</code> 命令的源码分析请参考我的博客<a href="http://www.heqiangfly.com/2017/06/13/android-source-code-analysis-dumpsys/" target="_blank" rel="external">Android 深入理解 dumpsys </a>。</p>
<h2 id="dumpsys支持的所有命令"><a href="#dumpsys支持的所有命令" class="headerlink" title="dumpsys支持的所有命令"></a>dumpsys支持的所有命令</h2><p>输入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell dumpsys -l</div></pre></td></tr></table></figure>
<p>可以查看当前支持的所有系统服务列表：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">DockObserver</div><div class="line">GuiExtService</div><div class="line">SurfaceFlinger</div><div class="line">access_control</div><div class="line">accessibility</div><div class="line">account</div><div class="line">activity</div><div class="line">......</div><div class="line">meminfo</div><div class="line">mount</div><div class="line">move_window</div><div class="line">netpolicy</div><div class="line">netstats</div><div class="line">network_management</div><div class="line">network_score</div><div class="line">networkmanagement_service_flyme</div><div class="line">notification</div><div class="line">package</div><div class="line">permission</div><div class="line">persistent_data_block</div><div class="line">power</div><div class="line">pppoe</div><div class="line">......</div><div class="line">trust</div><div class="line">uimode</div><div class="line">updatelock</div><div class="line">usagestats</div><div class="line">usb</div><div class="line">user</div><div class="line">vibrator</div><div class="line">voiceinteraction</div><div class="line">wallpaper</div><div class="line">webviewupdate</div><div class="line">wifi</div><div class="line">wifip2p</div><div class="line">wifiscanner</div><div class="line">window</div></pre></td></tr></table></figure>
<p>输入 <code>adb shell dumpsys</code> 命令可以输出所有的系统服务信息。可以通过<code>adb shell dumpsys | grep DUMP</code>过滤输出当前服务列表。</p>
<h2 id="具体命令如何查看帮助"><a href="#具体命令如何查看帮助" class="headerlink" title="具体命令如何查看帮助"></a>具体命令如何查看帮助</h2><p>从上面可以看出可以查看的<code>Service</code>非常多，<code>adb shell dumpsys -l</code>所列举的服务都可以直接通过 <code>dumpsys + &lt;service&gt;</code> 查看相关信息，具体每一个如何使用有一种通用的查看帮助的办法。<br>查看每一个命令的使用帮助，以下以<code>activity</code>为例演示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">$ adb shell dumpsys activity -h</div><div class="line"></div><div class="line">Activity manager dump options:</div><div class="line">  [-a] [-c] [-h] [cmd] ...</div><div class="line">  cmd may be one of:</div><div class="line">    a[ctivities]: activity stack state</div><div class="line">    b[roadcasts] [PACKAGE_NAME] [history [-s]]: broadcast state</div><div class="line">    i[ntents] [PACKAGE_NAME]: pending intent state</div><div class="line">    p[rocesses] [PACKAGE_NAME]: process state</div><div class="line">    o[om]: out of memory management</div><div class="line">    prov[iders] [COMP_SPEC ...]: content provider state</div><div class="line">    provider [COMP_SPEC]: provider client-side state</div><div class="line">    s[ervices] [COMP_SPEC ...]: service state</div><div class="line">    service [COMP_SPEC]: service client-side state</div><div class="line">    package [PACKAGE_NAME]: all state related to given package</div><div class="line">    all: dump all activities</div><div class="line">    top: dump the top activity</div><div class="line">  cmd may also be a COMP_SPEC to dump activities.</div><div class="line">  COMP_SPEC may be a component name (com.foo/.myApp),</div><div class="line">    a partial substring in a component name, a</div><div class="line">    hex object identifier.</div><div class="line">  -a: include all available server state.</div><div class="line">  -c: include client state.</div></pre></td></tr></table></figure></p>
<p>这样就可以清楚每个命名的使用方法以及对应输出内容的信息查看方法。<br>以<code>window</code>为例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">$ adb shell dumpsys window -h</div><div class="line"></div><div class="line">Window manager dump options:</div><div class="line">  [-a] [-h] [cmd] ...</div><div class="line">  cmd may be one of:</div><div class="line">    i[input]: input subsystem state</div><div class="line">    p[policy]: policy state</div><div class="line">    s[essions]: active sessions</div><div class="line">    surfaces: active surfaces (debugging enabled only)</div><div class="line">    d[isplays]: active display contents</div><div class="line">    t[okens]: token list</div><div class="line">    w[indows]: window list</div><div class="line">  cmd may also be a NAME to dump windows.  NAME may</div><div class="line">    be a partial substring in a window name, a</div><div class="line">    Window hex object identifier, or</div><div class="line">    &quot;all&quot; for all windows, or</div><div class="line">    &quot;visible&quot; for the visible windows.</div><div class="line">  -a: include all available server state.</div><div class="line">  -d list                     list the all of debug zones</div><div class="line">  -d enable  &lt;zone zone ...&gt;  enable the debug zone</div><div class="line">  -d disable &lt;zone zone ...&gt;  disable the debug zone</div><div class="line">  zone usage : </div><div class="line">    0  : DEBUG</div><div class="line">    1  : DEBUG_FOCUS</div><div class="line">    2  : DEBUG_ANIM</div><div class="line">    3  : DEBUG_LAYOUT</div><div class="line">    4  : DEBUG_RESIZE</div><div class="line">    5  : DEBUG_LAYERS</div><div class="line">    6  : DEBUG_INPUT</div><div class="line">    7  : DEBUG_INPUT_METHOD</div><div class="line">    8  : DEBUG_VISIBILITY</div><div class="line">    9  : DEBUG_WINDOW_MOVEMENT</div><div class="line">    10 : DEBUG_ORIENTATION</div><div class="line">    11 : DEBUG_CONFIGURATION</div><div class="line">    12 : DEBUG_APP_TRANSITIONS</div><div class="line">    13 : DEBUG_STARTING_WINDOW</div><div class="line">    14 : DEBUG_REORDER</div><div class="line">    15 : DEBUG_WALLPAPER</div><div class="line">    16 : DEBUG_WALLPAPER_LIGHT</div><div class="line">    17 : SHOW_TRANSCATIONS</div><div class="line">    18 : HIDE_STACK_CRAWLS</div><div class="line">    19 : PROFILE_ORIENTATION</div><div class="line">    20 : DEBUG_TASK_MOVEMENT</div><div class="line">    21 : DEBUG_ADD_REMOVE</div><div class="line">    22 : DEBUG_TOKEN_MOVEMENT</div><div class="line">    23 : DEBUG_APP_ORIENTATION</div><div class="line">    24 : DEBUG_DRAG</div><div class="line">    25 : DEBUG_SCREEN_ON</div><div class="line">    26 : DEBUG_SCREENSHOT</div><div class="line">    27 : DEBUG_BOOT</div><div class="line">    28 : SHOW_SURFACE_ALLOC</div><div class="line">    29 : SHOW_LIGHT_TRANSACTIONS</div><div class="line">    30 : DEBUG_LAYOUT_REPEATS</div><div class="line">    31 : DEBUG_SURFACE_TRACE</div><div class="line">    32 : DEBUG_WINDOW_TRACE</div><div class="line">    33 : DEBUG_WINDOW</div><div class="line">    34 : DEBUG_STACK</div><div class="line">    35 : DEBUG_DIM_LAYER</div><div class="line">    36 : DEBUG_KEYGUARD</div></pre></td></tr></table></figure></p>
<p>比如<code>adb shell dumpsys window -d enable 10</code>就是打开<code>DEBUG_ORIENTATION</code>，这样就把代码中的关于屏幕方向旋转相关的Log打印出来。</p>
<h2 id="一些常用命令解释"><a href="#一些常用命令解释" class="headerlink" title="一些常用命令解释"></a>一些常用命令解释</h2><ul>
<li>adb shell dumpsys activity： 显示activity的相关信息，包括任务栈等</li>
<li>adb shell dumpsys activity top：查看当前应用的 activity 信息</li>
<li>adb shell dumpsys meminfo：查看各个进程内存使用情况。（<code>meminfo $package_name or $pid</code> 使用程序的包名或者进程id显示内存信息比如浏览器：<code>adb shell dumpsys meminfo com.android.browser</code>）</li>
<li>adb shell dumpsys SurfaceFlinger： 查看UI绘制的各个层级信息</li>
<li>adb shell dumpsys window： 显示键盘，窗口和它们的关系</li>
<li>adb shell dumpsys package &lt;包名&gt;： 查看该包的具体信息</li>
<li>adb shell dumpsys statusbar： 显示状态栏相关信息</li>
<li>adb shell dumpsys usagestats： 每个应用的启动次数和时间</li>
<li>adb shell dumpsys battery： 电池信息</li>
<li>adb shell dumpsys diskstats： 磁盘相关信息</li>
<li>adb shell dumpsys alarm： 显示Alarm信息</li>
<li>adb shell dumpsys wifi： 显示wifi信息</li>
<li>adb shell dumpsys user：查看当前的用户情况</li>
<li>adb shell dumpsys dbinfo &lt;包名&gt;：查看指定包名应用的数据库存储信息（包括存储的SQL语句）</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.open-open.com/lib/view/open1405061994872.html" target="_blank" rel="external">http://www.open-open.com/lib/view/open1405061994872.html</a><br><a href="https://source.android.com/devices/tech/input/dumpsys.html" target="_blank" rel="external">https://source.android.com/devices/tech/input/dumpsys.html</a></p>
]]></content>
    
    <summary type="html">
    
      介绍dumpsys的使用
    
    </summary>
    
      <category term="Android实用技巧" scheme="http://yoursite.com/categories/Android%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="dumpsys" scheme="http://yoursite.com/tags/dumpsys/"/>
    
  </entry>
  
  <entry>
    <title>Android实用技巧之adb命令：logcat命令的使用</title>
    <link href="http://yoursite.com/2014/10/10/android-development-skills-adb-logcat/"/>
    <id>http://yoursite.com/2014/10/10/android-development-skills-adb-logcat/</id>
    <published>2014-10-10T02:00:00.000Z</published>
    <updated>2019-03-06T12:01:46.728Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>adb logcat</code> 是作为一个 Android 开发者最经常接触到的一个命令，我们在程序中打印的各种日志都可以通过它来呈现出来，对于我们查看程序运行情况和解决定位问题非常有帮助。<br>下面介绍的日志的命令行可以自由组合使用。<br>比如，输出指定等级日志到文件：<br><code>adb logcat *:S ActivityManager:D KeyguardUpdateMonitor:D -f /sdcard/log.txt</code></p>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p><code>adb logcat</code>：就可以把 main log 和 system log打印出来，输出完成后阻塞终端，后面输出的log会及时更新到终端。<br><code>adb logcat -d</code>：输出完日之后退出，不会阻塞。</p>
<h2 id="帮助信息"><a href="#帮助信息" class="headerlink" title="帮助信息"></a>帮助信息</h2><p><code>adb logcat -h</code> 可以打印用户帮助信息 </p>
<h2 id="日志过滤"><a href="#日志过滤" class="headerlink" title="日志过滤"></a>日志过滤</h2><h3 id="输出指定标签日志"><a href="#输出指定标签日志" class="headerlink" title="输出指定标签日志"></a>输出指定标签日志</h3><p><code>adb logcat -s ActivityManager</code><br><code>adb logcat *:S ActivityManager</code></p>
<h3 id="过滤指定等级日志"><a href="#过滤指定等级日志" class="headerlink" title="过滤指定等级日志"></a>过滤指定等级日志</h3><p><code>adb logcat *:D</code>：只输出Debug等级（包含）以上的日志</p>
<h3 id="过滤指定等级指定标签日志"><a href="#过滤指定等级指定标签日志" class="headerlink" title="过滤指定等级指定标签日志"></a>过滤指定等级指定标签日志</h3><p><code>adb logcat *:S ActivityManager:D</code>：只输出 ActivityManager 标签的Debug等级（包含）以上的日志</p>
<h3 id="过滤多个标签的指定等级日志"><a href="#过滤多个标签的指定等级日志" class="headerlink" title="过滤多个标签的指定等级日志"></a>过滤多个标签的指定等级日志</h3><p><code>adb logcat *:S ActivityManager:D KeyguardUpdateMonitor:D</code>：输出 ActivityManager 和 KeyguardUpdateMonitor  标签的Debug等级（包含）以上的日志</p>
<h3 id="使用管道过滤日志"><a href="#使用管道过滤日志" class="headerlink" title="使用管道过滤日志"></a>使用管道过滤日志</h3><p><code>adb logcat |grep ActivityManager</code>：输出包含指定字符串的行</p>
<h3 id="正则表达式匹配"><a href="#正则表达式匹配" class="headerlink" title="正则表达式匹配"></a>正则表达式匹配</h3><p>这个可以使用管道自由发挥，属于 linux 命令行知识范畴。</p>
<h2 id="指定输出日志数量"><a href="#指定输出日志数量" class="headerlink" title="指定输出日志数量"></a>指定输出日志数量</h2><p><code>adb logcat -m 8</code>：输出 8 条日志后退出，只输出缓冲区中最开始的8条记录<br><code>adb logcat -t 8</code>：输出最近的８条日之后退出。</p>
<h2 id="清空日志缓冲区"><a href="#清空日志缓冲区" class="headerlink" title="清空日志缓冲区"></a>清空日志缓冲区</h2><p><code>adb logcat -c</code></p>
<h2 id="输出日志到指定文件"><a href="#输出日志到指定文件" class="headerlink" title="输出日志到指定文件"></a>输出日志到指定文件</h2><p><code>adb logcat -f /sdcard/log.txt</code>：将日志输出到手机的/sdcard/log.txt，注意是手机上。<br><code>adb logcat &gt; ~/log.txt</code>：将日志输出到终端所在电脑的 ~/log.txt 文件。</p>
<h2 id="指定日志输出格式"><a href="#指定日志输出格式" class="headerlink" title="指定日志输出格式"></a>指定日志输出格式</h2><p>主要介绍 <code>adb logcat -v &lt;format&gt;</code> 选项的使用。</p>
<h2 id="指定缓冲区"><a href="#指定缓冲区" class="headerlink" title="指定缓冲区"></a>指定缓冲区</h2><p><code>adb logcat -b &lt;system, radio, events, main(default)&gt;</code>，默认输出main buffer里面的日志<br><code>adb logcat -b events</code>：输出 event log。</p>
<h2 id="查看日志缓冲区"><a href="#查看日志缓冲区" class="headerlink" title="查看日志缓冲区"></a>查看日志缓冲区</h2><p><code>adb logcat -g</code></p>
]]></content>
    
    <summary type="html">
    
      介绍logcat的使用
    
    </summary>
    
      <category term="Android实用技巧" scheme="http://yoursite.com/categories/Android%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="logcat" scheme="http://yoursite.com/tags/logcat/"/>
    
  </entry>
  
  <entry>
    <title>数据结构 -- 堆</title>
    <link href="http://yoursite.com/2014/07/05/data-structure-basic-heap/"/>
    <id>http://yoursite.com/2014/07/05/data-structure-basic-heap/</id>
    <published>2014-07-05T02:00:00.000Z</published>
    <updated>2019-01-02T09:41:28.329Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>堆也是一种树形结构，我们平时接触到的堆一般时二叉堆，它是二叉树的一种。除了二叉堆，还有二项堆，斐波那契堆等等。本文下面说的堆都是指二叉堆。</p>
<p>二叉堆具有如下的特点：</p>
<ul>
<li>堆是一种完全二叉树</li>
<li>它的子结点的值大于或者等于父结点的值，或者子结点的值小于或者等于父结点的值</li>
</ul>
<p>堆是局部有序的，任何一个结点与其兄弟结点之间都没有必然的顺序关系，但它与其父子结点有大小顺序关系。<br>根据它的特点我们可以将堆分为两类：</p>
<ul>
<li>最大堆：根结点的值是所有堆结点值中最大的</li>
<li>最小堆：根结点的值是所有堆结点值中最小的</li>
</ul>
<p><img src="/images/data-structure-basic-heap/big-small-heap.png" alt="效果图"></p>
<p>堆是左平衡的树，所以随着结点的增加，树会逐级从左至右增长，因此对于堆来说，一个比较好的表示左平衡二叉树的方式是，将结点通过水平遍历的方式存储到一个数组中。数组中处于i处的结点，其父结点位于(i-1)/2处。其左右子结点分别位于2i+1和2i+2位置上。这样的组织结构对于堆来说非常重要，因为通过它我们能迅速定位堆的最后一个结点：最后一个结点指处于树中最深层最右端的结点，这在实现某些堆操作时非常重要。<br>比如，上图中的最大堆我们可以用数组来表示：</p>
<p><img src="/images/data-structure-basic-heap/heap-array.png" alt="效果图"></p>
<h2 id="堆的操作"><a href="#堆的操作" class="headerlink" title="堆的操作"></a>堆的操作</h2><p>堆的操作可以分为下面几种：</p>
<ul>
<li>创建堆</li>
<li>插入结点</li>
<li>删除结点</li>
<li>堆排序</li>
</ul>
<h2 id="创建堆"><a href="#创建堆" class="headerlink" title="创建堆"></a>创建堆</h2><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p>首先，假设给定无序数列如下，并用数组如下表示：</p>
<p><img src="/images/data-structure-basic-heap/heap-int-1.png" alt="效果图"></p>
<p>接着，从最后一个非叶子结点开始，即下图中的第 10/2 - 1 = 4 个结点，从右到左，从下到上进行调整。如图1所示。<br>先和它的左右叶子结点中的最大值即第10个结点进行比较，发现比第10个小，那么交换他们的位置，那么较大的值13位置上移。如图2所示。<br>接着看第3个结点，它和它的左右叶子结点大小符合最大堆特征，不用交换。<br>接着看第2个结点，按照前面的方法交换第2、5结点。如图3所示。<br>接着看第1个结点，先和它的叶子中最大值也就是左叶子结点交换，如图4所示。<br>交换后，对左子树的最大堆特性造成了影响，那么就要对左子树进行重新构建，交换第3、8结点后，符合了最大堆特性。如图5所示。<br>继续进行排列，直到进行到根节点位置。如图6所示。构造最大堆完成。<br><strong>注意</strong>：一定要牢记，每次交换都要把改变了的那个节点所在的树重新构建一下直到符合最大堆特性。</p>
<p><img src="/images/data-structure-basic-heap/heap-int-2.png" alt="效果图"></p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">private void heapInit(int[] array) &#123;</div><div class="line">    // 根据数组构造一个最大堆</div><div class="line">    // 从最后一个非叶子结点开始，对堆进行调整。最后一个非叶子结点的右结点为 2*i+1 = array.length</div><div class="line">    // 这个调整是自上而下的，意思是针对某个结点进行调整时，它的左右子树的已经符合最大堆特性</div><div class="line">    for(int i = array.length/2 - 1; i &gt;=0; i--) &#123;</div><div class="line">        heapAdjust(array, i, array.length);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">private void heapAdjust(int[] array, int parent, int length) &#123;</div><div class="line">    int tmp = 0;</div><div class="line"></div><div class="line">    int j = 2 * parent + 1;// 左子结点</div><div class="line"></div><div class="line">    while (j &lt; length) &#123;</div><div class="line">        if(j + 1 &lt; length &amp;&amp; array[j + 1] &gt; array[j]) &#123;</div><div class="line">            j++;</div><div class="line">        &#125;</div><div class="line">        // 如果顺序已经排好，跳出循环，表示当前子树已经排好序</div><div class="line">        if (array[parent] &gt;= array[j]) &#123;</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        //较小节点下移</div><div class="line">        tmp = array[parent];</div><div class="line">        array[parent] = array[j];</div><div class="line">        array[j] = tmp;</div><div class="line"></div><div class="line">        // 交换数据后，可能对子树的顺序产生影响，因此还要继续对子树进行调整</div><div class="line">        // 将即将进行调整的子树的父结点设置为前面被交换的子结点</div><div class="line">        parent = j;</div><div class="line">        // 被移动结点的左子树</div><div class="line">        j = 2 * parent +1;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="插入结点"><a href="#插入结点" class="headerlink" title="插入结点"></a>插入结点</h2><p>对于堆的插入，处理思想很简单，首先在堆的最后添加一个新结点，然后对这个新的堆重新调整即可。这个过程涉及结点的向上筛选，直到新结点找到自己合适的位置为止。</p>
<h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><p>针对最大堆的代码实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">private void shiftUp(int[] array, int position) &#123;</div><div class="line">    int num = array[position];</div><div class="line">    int father = (position - 1)/2;</div><div class="line"></div><div class="line">    while (position &gt; 0 &amp;&amp; array[father] &lt; num) &#123;</div><div class="line">        array[position] = array[father];</div><div class="line">        position = father;</div><div class="line">        father = (position - 1)/2;</div><div class="line">    &#125;</div><div class="line">    array[position] = num;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="删除结点"><a href="#删除结点" class="headerlink" title="删除结点"></a>删除结点</h2><p>堆的结点删除的处理思想是把堆尾元素剪切，覆盖到删除的结点位置，然后对堆进行一轮调整，这个过程涉及到元素的向下筛选，知道该堆尾元素重新找到自己的位置。</p>
<h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><p>针对最大堆的代码实现，可以利用前面的构建堆时的 heapAdjust 方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">private void shiftDown(int[] array, int position) &#123;</div><div class="line">    array[position] = array[array.length - 1];</div><div class="line">    array[array.length - 1] = -1;</div><div class="line">    heapAdjust(array, position, array.length - 1);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>参考 <a href="http://www.heqiangfly.com/2014/06/02/algorithms-basic-sort/" target="_blank" rel="external">算法系列 – 排序算法</a> 一文中的堆排序。</p>
<!-- 
https://blog.csdn.net/qq_41117236/article/details/81029618
https://blog.csdn.net/u013384984/article/details/79496052

-->]]></content>
    
    <summary type="html">
    
      介绍堆的基础知识
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>算法系列 -- 排序算法</title>
    <link href="http://yoursite.com/2014/06/02/algorithms-basic-sort/"/>
    <id>http://yoursite.com/2014/06/02/algorithms-basic-sort/</id>
    <published>2014-06-02T02:00:00.000Z</published>
    <updated>2019-01-02T09:33:21.306Z</updated>
    
    <content type="html"><![CDATA[<h2 id="各种排序算法的时间复杂度"><a href="#各种排序算法的时间复杂度" class="headerlink" title="各种排序算法的时间复杂度"></a>各种排序算法的时间复杂度</h2><table>
<thead>
<tr>
<th style="text-align:center">排序算法</th>
<th style="text-align:center">时间复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">冒泡排序</td>
<td style="text-align:center">O(n²)</td>
</tr>
<tr>
<td style="text-align:center">选择排序</td>
<td style="text-align:center">O(n²)</td>
</tr>
<tr>
<td style="text-align:center">插入排序</td>
<td style="text-align:center">O(n²)</td>
</tr>
<tr>
<td style="text-align:center">希尔排序</td>
<td style="text-align:center">O(n1.5)</td>
</tr>
<tr>
<td style="text-align:center">快速排序</td>
<td style="text-align:center">O(N*logN)</td>
</tr>
<tr>
<td style="text-align:center">归并排序</td>
<td style="text-align:center">O(N*logN)</td>
</tr>
<tr>
<td style="text-align:center">堆排序</td>
<td style="text-align:center">O(N*logN)</td>
</tr>
</tbody>
</table>
<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>冒泡排序是一种简单直观的排序算法，它要重复地走访要排序的数列，依次比较两个相邻数的大小，如果它们的顺序不符合我们预期，那么就交换他们。<br>重复地走访数列，直到没有必要再进行交换为止。那么数列的排序工作就完成了。<br><strong>注意</strong>：这里的走访进行到“直到没有必要再进行交换为止”是需要我们优化的点。<br>经过这样逐轮进行排序，最大或者最小的数就排到了数列的末尾或者队首。</p>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>按照升序排列，从数列队首开始进行排序：</p>
<ul>
<li>第一轮，比较相邻的元素。如果第一个比第二个大，就交换他们两个。经过第一轮，最大的数就移动到了数列的末尾。</li>
<li>重复第一轮，只进行到倒数第二个，那么就把第二大的数排到了倒数第二。</li>
<li>依次进行，直到某轮再没有进行过数据的交换。表示已经排列好。</li>
</ul>
<h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p><img src="http://www.runoob.com/wp-content/uploads/2015/09/1240" alt="效果图"></p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">private void bubbleSort(int [] array) &#123;</div><div class="line">    int tmp;</div><div class="line">    boolean sort = false;</div><div class="line">    for(int i = 0;i&lt;array.length;i++)&#123;</div><div class="line">        sort = false;</div><div class="line">        for (int j = 0; j&lt;array.length - 1 - i; j++) &#123;</div><div class="line">            if (array[j] &gt; array[j+1]) &#123;</div><div class="line">                tmp = array[j+1];</div><div class="line">                array[j+1] = array[j];</div><div class="line">                array[j] = tmp;</div><div class="line"></div><div class="line">                sort = true;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        if(!sort) &#123;</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><h3 id="基本思想-1"><a href="#基本思想-1" class="headerlink" title="基本思想"></a>基本思想</h3><p>选择排序也是一种简单直观的排序算法。排序过程中可以把数列分为两部分，前面部分是已经排序好的数列，后部分是无序数列。它需要N次遍历无序数列部分，取到最大或者最小的数与无序数列队首的数进行交换。这种遍历只在无序数列部分进行。</p>
<h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h3><p>按升序排序来讲解：</p>
<ul>
<li>第一轮从第二个元素开始，找出第二个到第N个元素中最小的数与第一个数交换，这样总数列中最小的数就排到了队首第一个。</li>
<li>第二轮从三个元素开始，找出第三个到第N个元素中最小的数与第二个数交换，这样第二小的数就排到了第二个为止。</li>
<li>重复进行N-1轮排序。</li>
</ul>
<h3 id="图解-1"><a href="#图解-1" class="headerlink" title="图解"></a>图解</h3><p><img src="http://www.runoob.com/wp-content/uploads/2015/09/12401" alt="效果图"></p>
<h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">private void selectionSort(int [] array) &#123;</div><div class="line">    for(int i = 0;i&lt;array.length - 1;i++) &#123;</div><div class="line">        int k = i;</div><div class="line">        for(int j = i+1;j&lt;array.length;j++)&#123;</div><div class="line">            if (array[j] &lt; array[k]) &#123;</div><div class="line">                k = j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        int tmp;</div><div class="line">        if (k != i) &#123;</div><div class="line">            tmp = array[i];</div><div class="line">            array[i] = array[k];</div><div class="line">            array[k] = tmp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><h3 id="基本思想-2"><a href="#基本思想-2" class="headerlink" title="基本思想"></a>基本思想</h3><p>插入排序在排序过程中也把数列分为两部分，依次把前面i个数排好顺序，那么第n+1个数就按给定的顺序插入到前面i个数中。进行 n 轮的循环，直到把所有 n 个数全部排到指定位置。<br>如果数列是基本有序的数列，那么用插入排序会比较高效。</p>
<h3 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤"></a>步骤</h3><p>按升序排列：</p>
<ul>
<li>第一轮先将第二个数和第一个数比较，如果第二个数小于第一个数，那么交换他们位置。否则不交换。</li>
<li>第二轮先从第三个数和第二个数比较，如果需要交换，交换后第二个再和第一个数比较。否则结束本次循环。</li>
<li>重复前面的比较规则，注意当i个数和i-1个数不需要交换时，说明找到插入的位置了，这时结束本次循环。</li>
<li>n轮比较后，所有数列排好序。</li>
</ul>
<h3 id="图解-2"><a href="#图解-2" class="headerlink" title="图解"></a>图解</h3><p><img src="http://www.runoob.com/wp-content/uploads/2015/09/33403" alt="效果图"></p>
<p>就像我们平时的打扑克一样：</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2015/09/22402" alt="效果图"></p>
<h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">private void insertionSort(int [] array) &#123;</div><div class="line">    for(int i = 1;i&lt;array.length; i++) &#123;</div><div class="line">        for(int j = i; j &gt; 0; j--) &#123;</div><div class="line">            if (array[j-1] &gt; array[j]) &#123;</div><div class="line">                int tmp = array[j];</div><div class="line">                array[j] = array[j-1];</div><div class="line">                array[j-1] = tmp;</div><div class="line">            &#125; else &#123;</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">private void insertionSort2(int [] array) &#123;</div><div class="line">    for(int i = 1;i&lt;array.length; i++) &#123;</div><div class="line">        int t = array[i];</div><div class="line">        int j;</div><div class="line">        for(j = i; j &gt; 0 &amp;&amp; t &lt; array[j-1]; j--) &#123;</div><div class="line">            array[j] = array[j-1];</div><div class="line">        &#125;</div><div class="line">        array[j] = t;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>希尔排序是插入排序的一种，又称“缩小增量排序”。是直接插入排序算法的一种更高效的改进版本。</p>
<h3 id="基本思想-3"><a href="#基本思想-3" class="headerlink" title="基本思想"></a>基本思想</h3><p>希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，此时的数列基本变的有序，然后再执行一次插入排序，由于数列基本有序，此时的插入算法会非常高效。此次排完序后算法便终止。</p>
<h3 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤"></a>步骤</h3><p>进行8个数的数列的升序排列：</p>
<ul>
<li>第一步，将8个数字平均分成8/2=4个组，第1、5个数字一组，2、6，3、7，4、8这样分成四组，然后小组内按插入排序法排序。</li>
<li>第二步，将8个数字分成4/2=2个组，第1、3、5、7一组，2、4、6、8一组，小组内按插入排序法排序。</li>
<li>第三部，将8个数组分成2/2=1个组，这是数字基本是有序的，然后再按照插入排序排序一次。结束排序。</li>
</ul>
<h3 id="图解-3"><a href="#图解-3" class="headerlink" title="图解"></a>图解</h3><p><img src="http://www.runoob.com/wp-content/uploads/2015/09/44404" alt="效果图"></p>
<h3 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">private void shellSort(int [] array) &#123;</div><div class="line">    int n = array.length/2;</div><div class="line">    while (n&gt;0)&#123;</div><div class="line">        for (int i = 0; i &lt; n;i++)&#123;</div><div class="line">            for(int j = n; j &lt; array.length; j ++) &#123;</div><div class="line">                for (int k = j; k &gt; 0 &amp;&amp; k - n &gt;= 0; k --) &#123;</div><div class="line">                    if (array[k - n] &gt; array[k]) &#123;</div><div class="line">                        int tmp = array[k];</div><div class="line">                        array[k] = array[k - n];</div><div class="line">                        array[k - n] = tmp;</div><div class="line">                    &#125; else &#123;</div><div class="line">                        break;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        n/=2;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>快速排序是对冒泡排序的一种改进。是分治法的一种应用。</p>
<h3 id="基本思想-4"><a href="#基本思想-4" class="headerlink" title="基本思想"></a>基本思想</h3><p>首先找到一个基准值（通常可以指定最左边的数据），通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比基准值小，另外一部分的所有数据都要大，然后再按此方法对这两部分数据分别进行快速排序。</p>
<h3 id="步骤-4"><a href="#步骤-4" class="headerlink" title="步骤"></a>步骤</h3><p>基准值为最左边数的升序排列：</p>
<ul>
<li>选最左边为基准值，标记left为第1个数，right为n-1个数。从right开始和基准值比较，直到遇到比基准值小的数，把这个数放到基准值的位置，然后标记这个空位置为j。再从left开始和基准值比较，知道遇到比基准值大的数，把这个数放到j的位置，然后标记这个空位置为i；然后再从j-1处开始比较重复上面做法。直到 i==j，然后把基准值放到这个位置。</li>
<li>第二轮，把上面排好的序列分为 [left，i-1]，[i+1,right]两个序列进行上面的排序步骤。</li>
<li>分为四个序列进行排序。</li>
<li>直到各个子序列不能再分位置。排序结束。 </li>
</ul>
<h3 id="图解-4"><a href="#图解-4" class="headerlink" title="图解"></a>图解</h3><h3 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h3><p>递归法实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">private void quickSort(int [] array, int left, int right) &#123;</div><div class="line">    if (left &gt;= right)&#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    int base = array[left];</div><div class="line">    int i = left, j = right;</div><div class="line">    while (i &lt; j) &#123;</div><div class="line">        while (i&lt;j &amp;&amp; array[j] &gt; base) &#123;</div><div class="line">            j--;</div><div class="line">        &#125;</div><div class="line">        if (i&lt;j) &#123;</div><div class="line">            array[i] = array[j];</div><div class="line">            i++ ;</div><div class="line">        &#125;</div><div class="line">        while (i &lt; j &amp;&amp; array[i] &lt; base) &#123;</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">        if (i &lt; j) &#123;</div><div class="line">            array[j] = array[i];</div><div class="line">            j--;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    array[i] = base;</div><div class="line">    quickSort(array, left, i-1);</div><div class="line">    quickSort(array, i+1,right);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>栈实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">private void quickSort2(int [] array) &#123;</div><div class="line">    Stack&lt;Integer&gt; stack = new Stack&lt;&gt;();</div><div class="line">    stack.push(0);</div><div class="line">    stack.push(array.length - 1);</div><div class="line">    while (!stack.isEmpty()) &#123;</div><div class="line">        int right = stack.pop();</div><div class="line">        int left = stack.pop();</div><div class="line"></div><div class="line">        int i = left, j = right;</div><div class="line">        int base = array[i];</div><div class="line">        while (i &lt; j) &#123;</div><div class="line">            while (i &lt; j &amp;&amp; array[j] &gt; base) &#123;</div><div class="line">                j--;</div><div class="line">            &#125;</div><div class="line">            if (i &lt; j) &#123;</div><div class="line">                array[i] = array[j];</div><div class="line">                i++ ;</div><div class="line">            &#125;</div><div class="line">            while (i &lt; j &amp;&amp; array[i] &lt; base) &#123;</div><div class="line">                i++;</div><div class="line">            &#125;</div><div class="line">            if (i &lt; j) &#123;</div><div class="line">                array[j] = array[i];</div><div class="line">                j--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        array[i] = base;</div><div class="line"></div><div class="line">        if(i - 1 &gt; left)&#123;</div><div class="line">            stack.push(left);</div><div class="line">            stack.push(i - 1);</div><div class="line">        &#125;</div><div class="line">        if(i + 1 &lt; right)&#123;</div><div class="line">            stack.push(i +1);</div><div class="line">            stack.push(right);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>归并排序是分治法的一种应用。</p>
<h3 id="基本思想-5"><a href="#基本思想-5" class="headerlink" title="基本思想"></a>基本思想</h3><p>归并操作就是将已有序的子序列合并，得到完全有序的序列。那么首先就要把序列分为多个有序的序列。我们采用的方法是将序列从中间进行切割，然后再将得到的子序列从中间进行切割，直到子序列变成只有两个元素的子序列位置，然后把这个两个元素的子序列进行排序。</p>
<h3 id="步骤-5"><a href="#步骤-5" class="headerlink" title="步骤"></a>步骤</h3><p>升序排列：</p>
<ul>
<li>首先，把原序列从中间一分为二，如果得到子序列元素大于2，继续切分，直到子序列变为2个元素。</li>
<li>首先对这些2个元素的序列排序。</li>
<li>在对相邻的两个有序子序列进行合并，得到一个有序子序列。</li>
<li>直到所有的子序列完全合并。</li>
</ul>
<h3 id="图解-5"><a href="#图解-5" class="headerlink" title="图解"></a>图解</h3><p><img src="https://images2015.cnblogs.com/blog/1024555/201612/1024555-20161218163120151-452283750.png" alt="效果图"></p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/c/c5/Merge_sort_animation2.gif" alt="效果图"></p>
<h3 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h3><p>递归实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">private void mergeSort(int [] array) &#123;</div><div class="line">    int [] tmp = new int[array.length];</div><div class="line">    doMergeSort(array, tmp, 0, array.length -1);</div><div class="line">&#125;</div><div class="line">private void doMergeSort(int [] array, int [] tmp, int first, int end) &#123;</div><div class="line">    if (first &gt;= end)&#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    int middle = (first + end)/2;</div><div class="line">    doMergeSort(array, tmp, first, middle);</div><div class="line">    doMergeSort(array, tmp, middle + 1, end);</div><div class="line"></div><div class="line">    // 合并数组</div><div class="line">    int i = first,l = first,  j = middle + 1;</div><div class="line">    while(i &lt;= middle &amp;&amp; j &lt;= end) &#123;</div><div class="line">        if (array[i] &lt;= array[j]) &#123;</div><div class="line">            tmp[l++] = array[i++];</div><div class="line">        &#125; else &#123;</div><div class="line">            tmp[l++] = array[j++];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    while (i &lt;= middle)&#123;</div><div class="line">        tmp[l++] = array[i++];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    while (j &lt;= end) &#123;</div><div class="line">        tmp[l++] = array[j++];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    for (i = first; i &lt;= end; i++) &#123;</div><div class="line">        array[i] = tmp[i];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><h3 id="基本思想-6"><a href="#基本思想-6" class="headerlink" title="基本思想"></a>基本思想</h3><p>堆排序利用了最大堆和最小堆特性，现将根据数列构建的最大堆或者最小堆的根结点元素和最后一个结点进行数据交换，这个最大值或者最小值就排到了队尾。然后再对剩余的元素构建最大堆或者最小堆，然后再把根结点和当前堆的最后一个元素交换，重复进行，直到堆只剩一个元素。那么此时已经是一个有序的数组。</p>
<h3 id="步骤-6"><a href="#步骤-6" class="headerlink" title="步骤"></a>步骤</h3><p>降序排序：</p>
<ul>
<li>把数列构建一个最小堆</li>
<li>把根节点和堆的最后一个元素交换，那么最小元素就排到了数列的最后一个位置</li>
<li>再把剩余的 n-1 个树构建一个最小堆</li>
<li>然后再把跟结点和当前堆的最后一个元素交换，即第 n-1 个元素交换，那么有把当前堆最小元素排到了倒数第二的位置</li>
<li>重复进行，直到堆只剩下一个元素</li>
<li>那么数组已经是一个有序的数组</li>
</ul>
<h3 id="图解-6"><a href="#图解-6" class="headerlink" title="图解"></a>图解</h3><p>假设带排序的数列为：[72,6,57,88,60,42,83,73,48,85]<br>首先根据数列构建一个最大堆，如下图1。</p>
<p>把根节点的值和最后一个叶子结点交换，那么，最大值就放在了数列的尾部。如下图2.</p>
<p>这时，原来的堆已经不符合最大堆的特性，那么需要重新构建最大堆。此时最后一个结点已经是数列的最大值，可以不参与最大堆的构建。方法是从根节点开始，比较它和左右子树的大小，把最大值放在根位置，如果期间发生交换，那么需要重新对发生交换的子树进行构建。如下图3.</p>
<p>再次交换剩余堆的根节点和最后一个叶子结点。如下图4。</p>
<p>然后对除去最后一个叶子结点之外的结点重新构建最大堆。如下图5。</p>
<p>直到只剩余最后一个结点。如下图6。</p>
<p>此时数列已经按照预期排好顺序。</p>
<p><img src="/images/algorithms-basic-sort/heapSort1.png" alt="效果图"></p>
<h3 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">private void heapSort(int [] array) &#123;</div><div class="line">    // 根据数组构造一个最大堆</div><div class="line">    // 从最后一个非叶子结点开始，对堆进行调整。最后一个非叶子结点的右结点为 2*i+1 = array.length</div><div class="line">    // 这个调整是自上而下的，意思是针对某个结点进行调整时，它的左右子树的已经符合最大堆特性</div><div class="line">    for(int i = array.length/2 - 1; i &gt;=0; i--) &#123;</div><div class="line">        heapAdjust(array, i, array.length);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 开始进行排序，从最后一个元素开始，由于前面已经是最大堆，先交换根节点的元素和数组最后一个元素</div><div class="line">    // 这样最大的元素就排到了数组最后面</div><div class="line">    // 然后再对除去最后一个元素的剩余元素组成的堆进行调整</div><div class="line">    // ......直到剩余最后一个元素</div><div class="line">    int tmp = 0;</div><div class="line">    for (int j = array.length - 1; j &gt; 0; j--) &#123;</div><div class="line">        // 元素交换，把根节点的元素即最大元素和当前最大堆的最后一个元素交换</div><div class="line">        tmp = array[0];</div><div class="line">        array[0] = array[j];</div><div class="line">        array[j] = tmp;</div><div class="line"></div><div class="line">        // 从根结点开始再进行一轮的调整</div><div class="line">        heapAdjust(array, 0, j);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">private void heapAdjust(int[] array, int parent, int length) &#123;</div><div class="line">    int tmp = 0;</div><div class="line"></div><div class="line">    int j = 2 * parent + 1;// 左子结点</div><div class="line"></div><div class="line">    while (j &lt; length) &#123;</div><div class="line">        if(j + 1 &lt; length &amp;&amp; array[j + 1] &gt; array[j]) &#123;</div><div class="line">            j++;</div><div class="line">        &#125;</div><div class="line">        // 如果顺序已经排好，跳出循环，表示当前子树已经排好序</div><div class="line">        if (array[parent] &gt;= array[j]) &#123;</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        //较小节点下移</div><div class="line">        tmp = array[parent];</div><div class="line">        array[parent] = array[j];</div><div class="line">        array[j] = tmp;</div><div class="line"></div><div class="line">        // 交换数据后，可能对子树的顺序产生影响，因此还要继续对子树进行调整</div><div class="line">        // 将即将进行调整的子树的父结点设置为前面被交换的子结点</div><div class="line">        parent = j;</div><div class="line">        // 被移动结点的左子树</div><div class="line">        j = 2 * parent +1;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<!-- 
http://www.runoob.com/w3cnote/sort-algorithm-summary.html
https://blog.csdn.net/u013384984/article/details/79496052

-->
]]></content>
    
    <summary type="html">
    
      介绍常用的排序算法，面试必备系列
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Android 常用调试知识</title>
    <link href="http://yoursite.com/2014/04/10/android-knowledge-debug-skill-one/"/>
    <id>http://yoursite.com/2014/04/10/android-knowledge-debug-skill-one/</id>
    <published>2014-04-10T02:00:00.000Z</published>
    <updated>2018-06-03T06:25:50.583Z</updated>
    
    <content type="html"><![CDATA[<h2 id="运行过程中等待调试器"><a href="#运行过程中等待调试器" class="headerlink" title="运行过程中等待调试器"></a>运行过程中等待调试器</h2><p>我们常常有这样的需求，在应用启动过程中进行调试，那么就要运用等待调试器功能。<br>有两种方法可以实现：</p>
<ol>
<li>在设置里面进行设置<ol>
<li>进入设置–&gt;辅助功能–&gt;开发者选项；如果没有打开开发者模式，在拨号里面输入<em>#</em>#6961#<em>#</em>；</li>
<li>找到选择调试应用，打开选择你要调试的应用；</li>
<li>再把等待调试器选项打开；</li>
<li>这样你要选择调试的应用在启动过程中就自动进入了调试模式；</li>
</ol>
</li>
<li>代码中设置 <code>android.os.Debug.waitForDebugger()</code>，这里当程序执行到这里时会等待调试器，如果我们连接调试器后才会继续执行。</li>
</ol>
<h2 id="修改eclipse-debug的代码源文件的查找路径"><a href="#修改eclipse-debug的代码源文件的查找路径" class="headerlink" title="修改eclipse debug的代码源文件的查找路径"></a>修改eclipse debug的代码源文件的查找路径</h2><p>进入Debug窗口，选中debug的项目，右键单击，在弹出的菜单中选择“Edit Source Lookup ……”，选择Add，在弹出框中选择project，就可以在里面改动和添加了源文件的查找路径了。</p>
<h2 id="强制执行onTrimMemory-回收应用内存"><a href="#强制执行onTrimMemory-回收应用内存" class="headerlink" title="强制执行onTrimMemory()回收应用内存"></a>强制执行onTrimMemory()回收应用内存</h2><ul>
<li><code>adb shell dumpsys gfxinfo com.android.test -cmd trim 80</code></li>
<li><code>am send-trim-memory [--user &lt;USER_ID&gt;] &lt;PROCESS&gt;
[HIDDEN|RUNNING_MODERATE|BACKGROUND|RUNNING_LOW|MODERATE|RUNNING_CRITICAL|COMPLETE]</code></li>
</ul>
<h2 id="App-Crash没有打印"><a href="#App-Crash没有打印" class="headerlink" title="App Crash没有打印"></a>App Crash没有打印</h2><p>如果App在某种情况下一言不合的挂掉了，而且没有任何Crash堆栈的打印，不要怀疑了，赶快看看是不是触发了finish()导致的，本人已踩坑。</p>
<h2 id="调试SystemUI进程等后台进程时自动断开的问题"><a href="#调试SystemUI进程等后台进程时自动断开的问题" class="headerlink" title="调试SystemUI进程等后台进程时自动断开的问题"></a>调试SystemUI进程等后台进程时自动断开的问题</h2><p>断点调试SystemUI时你会发现进程会自己挂掉，打开 开发者选项-&gt;显示所有“应用无响应”(ANR) 选项就好了。</p>
<h2 id="使用Android-Studio来查看依赖列表"><a href="#使用Android-Studio来查看依赖列表" class="headerlink" title="使用Android Studio来查看依赖列表"></a>使用Android Studio来查看依赖列表</h2><p>有时候我们应用在编译的时候会遇到类似的问题：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Error:Error converting bytecode to dex:</div><div class="line">Cause: com.android.dex.DexException: Multiple dex files define Landroid/support/v4/accessibilityservice/AccessibilityServiceInfoCompat$AccessibilityServiceInfoVersionImpl;</div></pre></td></tr></table></figure>
<p>或者：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Error:java.io.IOException: Duplicate zip entry [support-annotations-25.2.0.jar:android/support/annotation/ColorRes.class]</div></pre></td></tr></table></figure>
<p>这种问题一般就是引用的第三方库里面重复应用了一些包导致的问题，这个时候我们就需要知道是哪些包重复引用了。<br>我们除了可以用命令行 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gradlew &lt;projectname&gt;:dependencies --configuration compile</div></pre></td></tr></table></figure>
<p>projectname 为 settings.gradle 里面配置的各个 project，如果没有配置，直接运行 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gradlew dependencies --configuration compile</div></pre></td></tr></table></figure>
<p>比如 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gradlew app:dependencies --configuration compile</div></pre></td></tr></table></figure>
<p>来查看项目的依赖列表之外，还可以在 Android Studio 里面查看。<br>方法如图：</p>
<p><img src="/images/android-knowledge-debug-skill-one/android-debug-skill-show-dependencies.png" alt="效果图"></p>
<p>就可以在Gradle Console窗口里面看到项目的依赖库列表。<br><a href="http://stackoverflow.com/questions/20989317/multiple-dex-files-define-landroid-support-v4-accessibilityservice-accessibility" target="_blank" rel="external">参考</a></p>
]]></content>
    
    <summary type="html">
    
      一些 Android 常用调试知识汇总
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Java 基础 -- 范型</title>
    <link href="http://yoursite.com/2014/02/14/java-basic-knowledge-generic/"/>
    <id>http://yoursite.com/2014/02/14/java-basic-knowledge-generic/</id>
    <published>2014-02-14T02:00:00.000Z</published>
    <updated>2018-11-12T01:16:30.018Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>所谓范型，就是允许在定义类、接口、方法时使用类型形参，这个类型形参将在声明变量、创建对象、调用方法时动态地指定（即传入实际的类型参数，也可称为类型实参）。<br>范型可以减少强制类型的转换，可以规范集合的元素类型，还可以提高代码的安全性和可读性，正是因为有这些优点，自从 Java 引入范型后，项目的编码规则上便多了一条：优先使用范型。</p>
<h2 id="范型的使用"><a href="#范型的使用" class="headerlink" title="范型的使用"></a>范型的使用</h2><h3 id="类型参数"><a href="#类型参数" class="headerlink" title="类型参数"></a>类型参数</h3><p>类型参数就是我们在定义泛型类或者方法是动态指定的参数。</p>
<h4 id="类型参数的命名规则"><a href="#类型参数的命名规则" class="headerlink" title="类型参数的命名规则"></a>类型参数的命名规则</h4><p>类型参数名称命名为单个大写字母，比如 <code>Collection&lt;E&gt;</code>。<br>但是这个命名规则我们一般会遵循一般的约定，以便可以在使用普通类或接口名称时能够容易地区分类型参数，增加代码的可读性。<br>以下是常用的类型参数名称列表：</p>
<ul>
<li>E：元素 Element，主要由Java集合(Collections)框架使用。</li>
<li>K：键 Key，主要用于表示映射中的键的参数类型。</li>
<li>V：值 Value，主要用于表示映射中的值的参数类型。</li>
<li>N：数字 Number，主要用于表示数字。</li>
<li>T：类型，主要用于表示第一类通用型参数。</li>
<li>S：类型，主要用于表示第二类通用类型参数。</li>
<li>U：类型，主要用于表示第三类通用类型参数。</li>
<li>V：类型，主要用于表示第四个通用类型参数。</li>
</ul>
<h3 id="类型通配符"><a href="#类型通配符" class="headerlink" title="类型通配符"></a>类型通配符</h3><p>类型通配符一般是使用 <code>?</code> 代替具体的类型参数，表示未知类型。例如 <code>List&lt;?&gt;</code> 在逻辑上是 <code>List&lt;String&gt;</code>，<code>List&lt;Integer&gt;</code> 等所有 <code>List&lt;具体类型实参&gt;</code> 的父类。<br>类型通配符的形式有 <code>&lt;?&gt;</code>、 <code>&lt;? extends Class&gt;</code> 和 <code>&lt;? super Class&gt;</code></p>
<h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>为了表示各种范型 List 的父类，我们需要使用类型通配符，类型的通配符就是一个问号 ?，将它作为类型实参传给 List集合：<code>List&lt;?&gt;</code>，就标示未知类型元素的 List，它的元素类型可以匹配任何类型。<br>比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public void testGeneric() &#123;</div><div class="line">    List&lt;String&gt; name = new ArrayList&lt;String&gt;();</div><div class="line">    List&lt;Integer&gt; age = new ArrayList&lt;Integer&gt;();</div><div class="line">    List&lt;Shape&gt; shape = new ArrayList&lt;Shape&gt;();</div><div class="line"></div><div class="line">    name.add(&quot;icon&quot;);</div><div class="line">    age.add(18);</div><div class="line">    shape.add(new Shape());</div><div class="line"></div><div class="line">    getData(name);</div><div class="line">    getData(age);</div><div class="line">    getData(shape);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static void getData(List&lt;?&gt; data) &#123;</div><div class="line">    Log.e(&quot;Test&quot;,&quot;data :&quot; + data.get(0));</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static class Shape &#123;</div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        return &quot;Shape&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译没问题，运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">E/Test: data :icon</div><div class="line">E/Test: data :18</div><div class="line">E/Test: data :Shape</div></pre></td></tr></table></figure>
<p>因为 <code>getData()</code> 方法的参数是 <code>List</code> 类型的，所以 name，age，shape 都可以作为这个方法的实参，这就是通配符的作用。</p>
<blockquote>
<p>上面程序中使用的 <code>List&lt;?&gt;</code>，其实这种写法可以适用于任何支持范型声明的接口和类，比如 <code>Set&lt;?&gt;</code>、<code>Map&lt;?,?&gt;</code>等。</p>
</blockquote>
<h4 id="设定类型通配符的上限"><a href="#设定类型通配符的上限" class="headerlink" title="设定类型通配符的上限"></a>设定类型通配符的上限</h4><p>假设有下面的使用场景，我们不想使 <code>List&lt;?&gt;</code> 使任何范型 List 的父类，只想表示它是某一类范型List的父类，这时候我们就要限定通配符的上限了。<br><code>&lt;? extends Class&gt;</code> 表示该通配符所代表的类型是 Class 类型本身或者它的子类。或者 <code>&lt;? extends T&gt;</code><br>把上面的 <code>getData</code> 方法修改一下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">public void testGeneric() &#123;</div><div class="line">    List&lt;String&gt; name = new ArrayList&lt;String&gt;();</div><div class="line">    List&lt;Integer&gt; age = new ArrayList&lt;Integer&gt;();</div><div class="line">    List&lt;Shape&gt; shape = new ArrayList&lt;Shape&gt;();</div><div class="line">    List&lt;Circle&gt; circle = new ArrayList&lt;Circle&gt;();</div><div class="line"></div><div class="line">    name.add(&quot;icon&quot;);</div><div class="line">    age.add(18);</div><div class="line">    shape.add(new Shape());</div><div class="line"></div><div class="line">    getData(name);  // 编译报错</div><div class="line">    getData(age);   // 编译报错</div><div class="line">    getData(shape); // 编译通过</div><div class="line">    getData(circle);// 编译通过</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static void getData(List&lt;? extends Shape&gt; data) &#123;</div><div class="line">    Log.e(&quot;Test&quot;,&quot;data :&quot; + data.get(0));</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static class Shape &#123;</div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        return &quot;Shape&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static class Circle extends Shape &#123;</div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        return &quot;Circle&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>前面两个用法就会报错：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Error:(74, 17) 错误: 不兼容的类型: List&lt;String&gt;无法转换为List&lt;? extends Shape&gt;</div><div class="line">Error:(75, 17) 错误: 不兼容的类型: List&lt;Integer&gt;无法转换为List&lt;? extends Shape&gt;</div></pre></td></tr></table></figure>
<h4 id="设定类型通配符的下限"><a href="#设定类型通配符的下限" class="headerlink" title="设定类型通配符的下限"></a>设定类型通配符的下限</h4><p><code>&lt;? super Class&gt;</code> 表示该通配符所代表的类型是 Class 类本身或者它的父类。<br>把上面的 <code>getData</code> 方法再修改一下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public static void getData(List&lt;? super Shape&gt; data) &#123;</div><div class="line">    Log.e(&quot;Test&quot;,&quot;data :&quot; + data.get(0));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">getData(name);  // 编译报错</div><div class="line">getData(age);   // 编译报错</div><div class="line">getData(shape); // 编译通过</div><div class="line">getData(circle);// 编译报错</div></pre></td></tr></table></figure>
<h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><p>范型方法就是在声明方法时定义一个或多个类型形参，该方法在调用时可以接收不同类型的参数。根据传递给泛型方法的参数类型，编译器适当地处理每一个方法调用。<br>范型方法的类型作用域是整个方法。<br>范型方法的用法格式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">修饰符 &lt;T, S&gt; 返回值类型 方法名 (形参列表) &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面是定义泛型方法的规则：</p>
<ul>
<li>所有泛型方法声明都有一个类型参数声明部分（由尖括号分隔），该类型参数声明部分在方法返回类型之前（在上面例子中的<code>&lt;T, S&gt;</code>）。</li>
<li>每一个类型参数声明部分包含一个或多个类型参数，参数间用逗号隔开。一个泛型参数，也被称为一个类型变量，是用于指定一个泛型类型名称的标识符。</li>
<li>类型参数可以用来声明方法参数。</li>
<li>类型参数能被用来声明返回值类型。</li>
</ul>
<p>先来看一个范型参数来声明方法参数的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public &lt;T&gt; String getData(T t) &#123;</div><div class="line">    return String.valueOf(t);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再来看一个范型参数来声明返回值类型的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">private Map&lt;String, Object&gt; mDatas = new ArrayMap&lt;&gt;();</div><div class="line"></div><div class="line">public &lt;T&gt; T getData(String name) &#123;</div><div class="line">    return (T) mDatas.get(name);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><p>泛型类的声明和非泛型类的声明类似，除了在类名后面添加了类型参数声明部分。<br>和泛型方法一样，泛型类的类型参数声明部分也包含一个或多个类型参数，参数间用逗号隔开。<br>一个泛型参数，也被称为一个类型变量，是用于指定一个泛型类型名称的标识符。因为他们接受一个或多个参数，这些类被称为参数化的类或参数化的类型。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class Box&lt;T&gt; &#123;</div><div class="line">    private T t;</div><div class="line">    public void add(T t) &#123;</div><div class="line">        this.t = t;</div><div class="line">    &#125;</div><div class="line">    public T get() &#123;</div><div class="line">        return t;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="限定类型参数上限"><a href="#限定类型参数上限" class="headerlink" title="限定类型参数上限"></a>限定类型参数上限</h3><p>Java 范型不仅允许在使用通配符形参时设定上限，而且也可以在定义类型参数时设定上限，用于表示传给该类型形参的实际类型要么是该类型上限，要么使该类型的子类。<br>这种做法可以用在范型方法和范型类中。<br>用法：<code>&lt;U, T extends Class1&gt;</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public &lt;T extends Shape &amp; Serializable&gt; String getData(T t) &#123;</div><div class="line">    return String.valueOf(t);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static class Shape &#123;</div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        return &quot;Shape&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>形如 <code>&lt;U, T extends Class1 &amp; Interface1&gt;</code> 表示 T 是继承了 Class1 的类以及实现了 Interface1，后面的接口可以有多个，因为 Java 是单继承，因此父类只能有1个。类要写在接口的前面。</p>
<h3 id="自定义泛型T和类型通配符-的区别"><a href="#自定义泛型T和类型通配符-的区别" class="headerlink" title="自定义泛型T和类型通配符?的区别"></a>自定义泛型T和类型通配符?的区别</h3><p>首先他们都表示不确定的类型。<br>自定义泛型 T 可以在方法体内进行各种操作，比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">T t = it.next();</div><div class="line">System.out.println(t);</div></pre></td></tr></table></figure>
<p>也可以方法返回值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public  static &lt;T&gt; T getData(List&lt;T&gt; data)&#123;</div><div class="line">    Log.e(&quot;Test&quot;,&quot;data :&quot; + data.get(0));</div><div class="line">    return data.get(0);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也就是说，当你仅仅想表达一种不确定类型时可以用类型通配符?，但你如果相对类型参数进行操作或者是想表达两个类型参数之间或者参数与返回值之间关系时，这时就要用自定义泛型 T。</p>
<h2 id="范型的特点"><a href="#范型的特点" class="headerlink" title="范型的特点"></a>范型的特点</h2><h3 id="范型是类型擦除的"><a href="#范型是类型擦除的" class="headerlink" title="范型是类型擦除的"></a>范型是类型擦除的</h3><p>Java 的范型在编译器有效，在运行期被删除，也就是说所有的反省参数类型在编译期后都会被清除掉。<br>下面看一段代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public void listMethod(List&lt;String&gt; strings) &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">public void listMethod(List&lt;Integer&gt; strings) &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码是否能编译呢？<br>事实上，这段代码时无法编译的，编译时报错信息如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`listMethod(List&lt;String&gt;)` clashes with `listMethod(List&lt;Integer&gt;)`; both methods have same erasure</div></pre></td></tr></table></figure>
<p>此错误信息是说 <code>listMethod(List&lt;String&gt;)</code> 方法在编译时擦除类型后的方法是 <code>listMethod(List&lt;E&gt;)</code>，它与另一个方法相冲突。这就是 Java 范型擦除引起的问题：在编译后所有的范型类型都会做相应的转化：<br>转化规则如下：</p>
<ul>
<li><code>List&lt;String&gt;</code>、<code>List&lt;Integer&gt;</code>、<code>List&lt;T&gt;</code>擦除后的类型为<code>List</code></li>
<li><code>List&lt;String&gt;[]</code>擦除后的类型为<code>List[]</code></li>
<li><code>List&lt;? extends E&gt;、List&lt;? super E&gt;</code> 擦除后的类型为 <code>List&lt;E&gt;</code></li>
<li><code>List&lt;T extends Serializable &amp; Cloneable&gt;</code> 擦除后为 <code>List&lt;Serializable&gt;</code></li>
</ul>
<p>范型的擦除还表现在当把一个具有范型信息的对象赋给另一个没有范型信息的变量时，所有再尖括号之间的类型信息都将被扔掉。<br>比如：一个 <code>List&lt;String&gt;</code> 类型被转换为 <code>List</code>，则该 <code>List</code> 对集合元素的类型检查变成了类型变量的上限（即 Object）。<br>下面用一个例子来示范这种擦除：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">public void testGenericErasure() &#123;</div><div class="line">    // 传入 Integer 作为类型形参的值</div><div class="line">    Box&lt;Integer&gt; box = new Box&lt;&gt;(8);</div><div class="line">    // box 的 get 方法返回 Integer 对象</div><div class="line">    Integer size = box.get();</div><div class="line">    // 把 box 对象赋值给b变量，此时会丢失&lt;&gt;里的类型信息</div><div class="line">    Box b = box;</div><div class="line">    //这个代码会引起编译错误</div><div class="line">    Integer size1 = b.get();</div><div class="line">    // b只知道size的类型是Number，但具体是Number的哪个子类就不清楚了。</div><div class="line">    //下面的用法是正确的</div><div class="line">    Number size2 = b.get();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Box&lt;T extends Number&gt; &#123;</div><div class="line"></div><div class="line">    private T size;</div><div class="line">    public Box(T size) &#123;</div><div class="line">        this.size = size;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void add(T size) &#123;</div><div class="line">        this.size = size;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public T get() &#123;</div><div class="line">        return size;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>类型转换：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public void testGenericConvert() &#123;</div><div class="line">    List&lt;Integer&gt; li = new ArrayList&lt;&gt;();</div><div class="line">    li.add(8);</div><div class="line">    // 类型擦除</div><div class="line">    List list = li;</div><div class="line">    // 类型转换</div><div class="line">    List&lt;String&gt; ls = list;</div><div class="line">    // 下面的代码会引起运行时异常</div><div class="line">    // Caused by: java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.String</div><div class="line">    Log.e(&quot;Test&quot;,ls.get(0));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>明白了这些，对下面的代码就容易理解了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; stringList = new ArrayList&lt;&gt;();</div><div class="line">List&lt;Integer&gt; integerList = new ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">Log.e(&quot;Test&quot;,&quot;&quot;+stringList.getClass().equals(integerList.getClass()));</div></pre></td></tr></table></figure>
<p>返回结果为 true。 <code>List&lt;String&gt;</code> 和 <code>List&lt;Integer&gt;</code> 擦除后的类型都是 List，没有任何区别。<br>之所以设计成可擦除的，有下面两个原因：</p>
<ul>
<li>避免JVM大换血。由于范型是Java5以后才支持的，如果JVM也把范型类型延续到运行期，那么JVM就需要进行大量的重构工作了。也就是说，Java 中的泛型机制其实就是一颗语法糖，并不涉及JVM的改动。</li>
<li>版本兼容问题。在编译器擦除可以更好地支持原生类型，在Java5或者Java6平台上，即使声明一个List这样的原生类型也是支</li>
</ul>
<h3 id="不能创建一个范型类型实例"><a href="#不能创建一个范型类型实例" class="headerlink" title="不能创建一个范型类型实例"></a>不能创建一个范型类型实例</h3><p>如果 T 是一个类型变量，那么下面的语句是非法的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">T obj = new T();</div></pre></td></tr></table></figure>
<p>T 由它的限界代替，这可能是 Object，或者是抽象类，因此对 <code>new T()</code> 的调用没有意义。</p>
<h3 id="不能初始化范型数组"><a href="#不能初始化范型数组" class="headerlink" title="不能初始化范型数组"></a>不能初始化范型数组</h3><p>数组元素的类型不能包含类型变量或者类型形参，除非是无上限的类型通配符。但是可以声明元素类型包含类型变量或类型形参的数据。<br>也就是说，下面的代码是OK的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt;[] stringList ;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public class Box&lt;T extends Number&gt; &#123;</div><div class="line"></div><div class="line">    private List&lt;T&gt; list = new ArrayList&lt;T&gt;();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面的代码，等号后面的代码是非法的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt;[] stringList = new ArrayList&lt;String&gt;[10];</div></pre></td></tr></table></figure>
<h3 id="基本类型不能做类型参数"><a href="#基本类型不能做类型参数" class="headerlink" title="基本类型不能做类型参数"></a>基本类型不能做类型参数</h3><p>因此，<code>List&lt;int&gt;</code> 是非法的，我们必须使用包装类。</p>
<h3 id="static-的语境不能引用类型变量"><a href="#static-的语境不能引用类型变量" class="headerlink" title="static 的语境不能引用类型变量"></a>static 的语境不能引用类型变量</h3><p>在一个范型类中，static 方法和 static 域均不可以引用类的类型变量，因为类型擦除后类型变量就不存在了。而且，static 域在该类的诸范型实例之间是共享的。因此，static 的语境不能引用类型变量。</p>
]]></content>
    
    <summary type="html">
    
      本文介绍 Java 范型的特点和使用方法
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java范型" scheme="http://yoursite.com/tags/Java%E8%8C%83%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java 基础 -- 关于自动装箱和拆箱机制</title>
    <link href="http://yoursite.com/2014/02/12/java-basic-knowledge-auto-boxing/"/>
    <id>http://yoursite.com/2014/02/12/java-basic-knowledge-auto-boxing/</id>
    <published>2014-02-12T02:00:00.000Z</published>
    <updated>2018-06-05T11:37:46.039Z</updated>
    
    <content type="html"><![CDATA[<h2 id="先看一段代码"><a href="#先看一段代码" class="headerlink" title="先看一段代码"></a>先看一段代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Integer f1 = 127, f2 = 127, f3 = 128, f4 = 128;</div><div class="line">Integer f5 = new Integer(10);</div><div class="line">Integer f6 = new Integer(10);</div><div class="line"></div><div class="line">int i1 = f1, i2 = f2, i3 = f3, i4 = f4;</div><div class="line"></div><div class="line">System.out.println(f1 == f2);</div><div class="line">System.out.println(f3 == f4);</div><div class="line">System.out.println(f5 == f6);</div><div class="line">System.out.println(i1 == i2);</div><div class="line">System.out.println(i3 == i4);</div></pre></td></tr></table></figure>
<p>结果是：true false false true true</p>
<h2 id="自动装箱和拆箱的概念"><a href="#自动装箱和拆箱的概念" class="headerlink" title="自动装箱和拆箱的概念"></a>自动装箱和拆箱的概念</h2><p>Java 中引入了基本数据类型，针对着集中基本数据类型，又引入了相对应的包装类型。<br>Java 为每个原始类型提供了包装类型：</p>
<ul>
<li>原始类型: boolean，char，byte，short，int，long，float，double</li>
<li>包装类型：Boolean，Character，Byte，Short，Integer，Long，Float，Double</li>
</ul>
<p>从Java 5开始引入了自动装箱/拆箱机制，使得原始类型和包装类型可以相互转换。<br>前面代码中就用到了自动装箱/拆箱机制：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Integer f1 = 127, f2 = 127, f3 = 128, f4 = 128; // 自动装箱成Integer类型</div><div class="line">int i1 = f1, i2 = f2, i3 = f3, i4 = f4;//自动拆箱成int类型</div></pre></td></tr></table></figure>
<p>自动装箱来得到一个引用数据类型时，jvm 实际上调用了 <code>valueOf()</code> 方法</p>
<h2 id="问题解析"><a href="#问题解析" class="headerlink" title="问题解析"></a>问题解析</h2><p>因为 == 比较的是两个对象是否相同，明显 f1和f2 指向的是同一个对象，f3 和 f4 指向的不是同一个对象。<br>为什么会这样呢？<br>这就归结于 Java 对于 Integer 与 int 的自动装箱与拆箱的设计，运用了一种设计模式：享元模式。<br>为了加大对简单数字的重利用，java定义：在自动装箱时对于值从–128到127之间的值，它们被装箱为Integer对象后，会存在内存中被重用，始终只存在一个对象。<br>看一下 <code>Integer.valueOf</code> 的代码实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public static Integer valueOf(int i) &#123;</div><div class="line">    if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</div><div class="line">        return IntegerCache.cache[i + (-IntegerCache.low)];</div><div class="line">    return new Integer(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 <code>IntegerCache.low</code> 和 <code>IntegerCache.high</code> 之间的数会直接向缓存池 <code>IntegerCache</code> 中获取缓存对象，如果在这个范围之外则重新创建对象。<br>再来看一下  <code>IntegerCache</code> 的实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">private static class IntegerCache &#123;</div><div class="line">    static final int low = -128;</div><div class="line">    static final int high;</div><div class="line">    static final Integer cache[];</div><div class="line"></div><div class="line">    static &#123;</div><div class="line">        // high value may be configured by property</div><div class="line">        int h = 127;</div><div class="line">        String integerCacheHighPropValue =</div><div class="line">            sun.misc.VM.getSavedProperty(&quot;java.lang.Integer.IntegerCache.high&quot;);</div><div class="line">        if (integerCacheHighPropValue != null) &#123;</div><div class="line">            try &#123;</div><div class="line">                int i = parseInt(integerCacheHighPropValue);</div><div class="line">                i = Math.max(i, 127);</div><div class="line">                // Maximum array size is Integer.MAX_VALUE</div><div class="line">                h = Math.min(i, Integer.MAX_VALUE - (-low) -1);</div><div class="line">            &#125; catch( NumberFormatException nfe) &#123;</div><div class="line">                // If the property cannot be parsed into an int, ignore it.</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        high = h;</div><div class="line"></div><div class="line">        cache = new Integer[(high - low) + 1];</div><div class="line">        int j = low;</div><div class="line">        for(int k = 0; k &lt; cache.length; k++)</div><div class="line">            cache[k] = new Integer(j++);</div><div class="line"></div><div class="line">        // range [-128, 127] must be interned (JLS7 5.1.7)</div><div class="line">        assert IntegerCache.high &gt;= 127;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private IntegerCache() &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实就是创建了个 [-128, 127] 的数字的缓存池。<br>那么，为什么要这么设计呢？一般来说，小数字的使用频率很高，将小数字保存起来，让其始终仅有一个对象可以节约内存，提高效率。<br>而如果超过了从 –128 到 127 之间的值，被装箱后的 <code>Integer</code> 对象并不会被重用，即相当于每次装箱时都新建一个 <code>Integer</code> 对象。这就是为什么 f5 == f6 为false的原因了。<br>以上的现象是由于使用了自动装箱所引起的，如果你没有使用自动装箱，而是跟一般类一样，用 new 来进行实例化，就会每次 new 就都一个新的对象；<br>至于 i1 == i2 和i3 == i4，这属于基本数据类型的比较。</p>
<h2 id="String-类的自动装箱拆箱"><a href="#String-类的自动装箱拆箱" class="headerlink" title="String 类的自动装箱拆箱"></a>String 类的自动装箱拆箱</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">String s1 = &quot;str&quot;, s2 = &quot;str&quot;;</div><div class="line">String s3 = new String(&quot;str&quot;);</div><div class="line">String s4 = new String(&quot;str&quot;);</div><div class="line">System.out.println(s1 == s2);</div><div class="line">System.out.println(s3 == s4);</div></pre></td></tr></table></figure>
<p>结果为 true false。</p>
<p>String 有个字符串常量池 - String Pool，通过自动装箱得到的对象都存储在这个字符串常量池里面，相同的字符串不会重复创建。<br>通过显式 new 出来的对象不在这里面，每次都会创建一个新的对象。</p>
<h2 id="Long-类的自动装箱拆箱"><a href="#Long-类的自动装箱拆箱" class="headerlink" title="Long 类的自动装箱拆箱"></a>Long 类的自动装箱拆箱</h2><p>Long 的自动装箱和 Integer 类似：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public static Long valueOf(long l) &#123;</div><div class="line">    final int offset = 128;</div><div class="line">    if (l &gt;= -128 &amp;&amp; l &lt;= 127) &#123; // will cache</div><div class="line">        return LongCache.cache[(int)l + offset];</div><div class="line">    &#125;</div><div class="line">    return new Long(l);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">private static class LongCache &#123;</div><div class="line">    private LongCache()&#123;&#125;</div><div class="line"></div><div class="line">    static final Long cache[] = new Long[-(-128) + 127 + 1];</div><div class="line"></div><div class="line">    static &#123;</div><div class="line">        for(int i = 0; i &lt; cache.length; i++)</div><div class="line">            cache[i] = new Long(i - 128);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      介绍 Java 的自动装箱和拆箱机制
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 基础 -- 值传递和引用传递</title>
    <link href="http://yoursite.com/2014/02/10/java-basic-knowledge-parameter-passing/"/>
    <id>http://yoursite.com/2014/02/10/java-basic-knowledge-parameter-passing/</id>
    <published>2014-02-10T02:00:00.000Z</published>
    <updated>2018-06-03T15:45:33.617Z</updated>
    
    <content type="html"><![CDATA[<h2 id="值传递和引用传递"><a href="#值传递和引用传递" class="headerlink" title="值传递和引用传递"></a>值传递和引用传递</h2><p>Java 中在参数传递时有2种方式:</p>
<ol>
<li>值传递：值传递是指在调用函数时将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。简单来说就是直接复制了一份数据过去，因为是直接复制，所以这种方式在传递时如果数据量非常大的话，运行效率自然就变低了，所以java在传递数据量很小的数据是值传递，比如java中的各种基本类型：int,float,double,boolean等类型的</li>
<li>引用传递：引用传递其实就弥补了上面说的不足，如果每次传参数的时候都复制一份的话，如果这个参数占用的内存空间太大的话，运行效率会很底下，所以引用传递就是直接把内存地址传过去，也就是说引用传递时，操作的其实都是源数据，这样的话修改有时候会冲突，记得用逻辑弥补下就好了。具体的数据类型就比较多了，比如Object，二维数组，List，Map等除了基本类型的参数都是引用传递。</li>
</ol>
<p>与此对应的，Java 中数据类型我们也把它们分为基本数据类型和引用数据类型。</p>
<ul>
<li>基本数据类型<ul>
<li>整型：byte，short，int，long</li>
<li>浮点型：float，double</li>
<li>字符型：char</li>
<li>布尔型：boolean</li>
</ul>
</li>
<li>引用数据类型<ul>
<li>数组</li>
<li>类</li>
<li>接口</li>
</ul>
</li>
</ul>
<p>一般情况下，在数据做为参数传递的时候，基本数据类型是值传递，引用数据类型是引用传递（地址传递）。</p>
<h2 id="String类型传递"><a href="#String类型传递" class="headerlink" title="String类型传递"></a>String类型传递</h2><p>String 在作为参数传递时比较特殊，我们先来看一段代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class Example&#123;</div><div class="line">    String str=new String(&quot;hello&quot;);</div><div class="line">    char[]ch=&#123;&apos;a&apos;,&apos;b&apos;&#125;;</div><div class="line">    public static void main(String args[])&#123;</div><div class="line">        Example ex=new Example();</div><div class="line">        ex.change(ex.str,ex.ch);</div><div class="line">        System.out.print(ex.str+&quot; and &quot;);</div><div class="line">        System.out.print(ex.ch);</div><div class="line">    &#125;</div><div class="line">    public void change(String str,char ch[])&#123;</div><div class="line">        str=&quot;test ok&quot;;</div><div class="line">        ch[0]=&apos;c&apos;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出的结果是：hello and cb<br>数组输出 cb 很容易理解，数组是引用传递，<code>change</code> 中对数组的操作相当于改变了堆上的数组的值。<br>那么String也是对象，属于引用传递，对它的修改为什么没有改变原来的对象呢？为什么看起来像值传递呢？<br>在 String 的文档中有介绍：<br>Strings are constant; their values cannot be changed after they are created.<br>通过源码我们还会发现 <code>String</code> 类是final类型的，是不能被继承和修改的。每一次内容的更改都是重现创建出来的新对象。<br>文档中还有介绍：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String str = &quot;abc&quot;;</div></pre></td></tr></table></figure></p>
<p>等同于：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">char data[] = &#123;&apos;a&apos;, &apos;b&apos;, &apos;c&apos;&#125;;</div><div class="line">String str = new String(data);</div></pre></td></tr></table></figure></p>
<p>下面用图来解释一下上面的代码：</p>
<p><img src="/images/java-basic-knowledge-parameter-passing/java-parameter.png" alt="效果图"></p>
<p><code>change</code> 方法的 str 参数本来就是 ex.str 所指向地址的一个 copy，当 <code>change</code> 方法执行完毕时，str 所指向的地址值已经改变。而 str 本来的地址值就是copy过来的副本，所以并不能改变 ex.str 这个饮用所指向的对象的值。</p>
<p>String 的参数传递类似：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class Person &#123;</div><div class="line">    String name;</div><div class="line"></div><div class="line">    public Person(String name) &#123;</div><div class="line">        this.name = name;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">public class Test &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Person p = new Person(&quot;张三&quot;);</div><div class="line"></div><div class="line">        change(p);</div><div class="line"></div><div class="line">        System.out.println(p.name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void change(Person p) &#123;</div><div class="line">        Person person = new Person(&quot;李四&quot;);</div><div class="line">        p = person; </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行的结果是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">张三</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>值传递的时候，将实参的值，copy 一份给形参。</li>
<li>引用传递的时候，将实参的地址值，copy 一份给形参。</li>
</ul>
<p>也就是说，不管是值传递还是引用传递，形参拿到的仅仅是实参的副本，而不是实参本身。</p>
]]></content>
    
    <summary type="html">
    
      介绍 Java 值传递和引用传递的知识
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 基础 -- 深入理解 String</title>
    <link href="http://yoursite.com/2014/01/20/java-basic-knowledge-about-string/"/>
    <id>http://yoursite.com/2014/01/20/java-basic-knowledge-about-string/</id>
    <published>2014-01-20T02:00:00.000Z</published>
    <updated>2018-09-24T11:54:13.535Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>String</code> 类是我们在编程过程中经常用到的类，也是面试过程中经常涉及到的类。本文就我们平时遇到的关于 <code>String</code> 类的知识点做个归纳整理。<br><a href="https://code.csdn.net/hty1053240123/jdk-source/tree/master/java/lang/String.java" target="_blank" rel="external">String 源码</a></p>
<h2 id="final-类型"><a href="#final-类型" class="headerlink" title="final 类型"></a>final 类型</h2><p>通过查看 <code>String</code> 源码我们可以看到，该类是 final 类型的，也即意味着 <code>String</code> 类不能被继承。</p>
<h2 id="不可变性"><a href="#不可变性" class="headerlink" title="不可变性"></a>不可变性</h2><p><code>String</code> 对象一旦被创建就是固定不变的了，对 <code>String</code> 对象的任何改变都不影响到原对象。<br><code>String</code> 对象是使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/** The value is used for character storage. */</div><div class="line">private final char value[];</div></pre></td></tr></table></figure>
<p>来存储字符串的，而 <code>value[]</code> 是 <code>final</code> 类型的，一旦赋值后是无法改变的。我们通过查看源码可以发现，<code>String</code> 的 <code>substring</code>、<code>concat</code>、<code>replace</code> 等操作都不是在原有的字符串上进行的，而是重新生成了一个新的字符串对象。也就是说进行这些操作后，最原始的字符串并没有被改变。</p>
<h2 id="字符串常量池"><a href="#字符串常量池" class="headerlink" title="字符串常量池"></a>字符串常量池</h2><p>JVM 为了减少字符串对象的重复创建,其维护了一个特殊的内存,这段内存被成为字符串常量池。<br>可以通过下面的方法使用到常量池：</p>
<ul>
<li>当使用双引号声明 <code>String</code> 对象时，JVM 首先会对这个字面量进行检查，如果字符串常量池中存在相同内容的字符串对象的引用，则将这个引用返回，否则新的字符串对象被创建，然后将这个引用放入字符串常量池，并返回该引用。</li>
<li>当使用 <code>String.intern()</code> 方法时，会从字符串常量池中查询当前字符串是否存在，如果存在， 就会直接返回当前字符串。如果常量池中没有此字符串， 会将此字符串放入常量池中后，再返回该常量池中的字符串。</li>
</ul>
<p>在 Jdk6 以及以前的版本中，字符串的常量池是放在堆的Perm区的，Perm区是一个类静态的区域，主要存储一些加载类的信息，常量池，方法片段等内容，默认大小只有4m，一旦常量池中大量使用 <code>intern</code>  是会直接产生 <code>java.lang.OutOfMemoryError:PermGen space</code> 错误的。<br>在 jdk7 的版本中，字符串常量池已经从 Perm 区移到正常的 Java Heap 区域了。和普通的对象在同一个存储区域中。<br>下面来看哥例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String str1 = &quot;abc&quot;;</div><div class="line">String str2 = &quot;abc&quot;;</div><div class="line">System.out.println(str1 == str2);</div></pre></td></tr></table></figure>
<p>结果是打印了 true。<br>str1 和 str2 指向了同一个字符串常量池中的对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String str1 = new String(&quot;abc&quot;);</div><div class="line">String str2 = new String(&quot;abc&quot;);</div><div class="line">System.out.println(str1 == str2);</div></pre></td></tr></table></figure>
<p>上面的结果时打印了 false。<br>当使用 new 操作符时，总是会创建新的字符串对象。</p>
<h2 id="号操作符"><a href="#号操作符" class="headerlink" title="+ 号操作符"></a>+ 号操作符</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String str1 = &quot;abcdef&quot;;</div><div class="line">String str2 = &quot;abc&quot; + &quot;def&quot;;</div><div class="line">System.out.println(str1 == str2);</div></pre></td></tr></table></figure>
<p>结果是打印了 true。<br>为什么是这个结果呢？<br>我们先来看一下字节码信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Code:</div><div class="line">   0: ldc           #2                  // String abcdef</div><div class="line">   2: astore_1</div><div class="line">   3: ldc           #2                  // String abcdef</div><div class="line">   5: astore_2</div><div class="line">   6: getstatic     #3                  // Field java/lang/System.out:Ljava/io/PrintStream;</div><div class="line">   9: aload_1</div><div class="line">  10: aload_2</div></pre></td></tr></table></figure>
<p>可以看到 str2 在编译期优化成了 <code>str2 = &quot;abcdef&quot;</code>。因此和 str1 是字符串常量池中的同一对象。<br>再来看下面一段代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">String str1 = &quot;abcdef&quot;;</div><div class="line">String abc = &quot;abc&quot;;</div><div class="line">String def = &quot;def&quot;;</div><div class="line">String str2 = abc + def;</div><div class="line">System.out.println(str1 == str2);</div></pre></td></tr></table></figure>
<p>结果是打印了 false。<br>可见，字符串对象的相加和字符串常量的相加是不一样的。<br>先来看一下字节码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Code:</div><div class="line">   0: ldc           #2                  // String abcdef</div><div class="line">   2: astore_1</div><div class="line">   3: ldc           #3                  // String abc</div><div class="line">   5: astore_2</div><div class="line">   6: ldc           #4                  // String def</div><div class="line">   8: astore_3</div><div class="line">   9: new           #5                  // class java/lang/StringBuilder</div><div class="line">  12: dup</div><div class="line">  13: invokespecial #6                  // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</div><div class="line">  16: aload_2</div><div class="line">  17: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</div><div class="line">  20: aload_3</div><div class="line">  21: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</div><div class="line">  24: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</div></pre></td></tr></table></figure>
<p>可见，字符串对象的相加实际上也是通过 <code>StringBuilder</code> 对象来完成的，首先以最左边的字符串为参数创建 <code>StringBuilder</code> 对象，然后依次对右边进行 <code>append</code> 操作，最后将 <code>StringBuilder</code> 对象通过 <code>toString()</code> 方法转换成 <code>String</code> 对象。<br><code>String str2 = abc + def</code> 其实等价于 <code>String str2 = new StringBuilder().append(abc).append(def).toString()</code>。<br>再来看下面的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String e = &quot;e&quot;;</div><div class="line">String str2 = &quot;abc&quot;+&quot;def&quot;+e+&quot;h&quot;+&quot;g&quot;;</div></pre></td></tr></table></figure>
<p>对应字节码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Code:</div><div class="line">   0: ldc           #11                 // String e</div><div class="line">   2: astore_1</div><div class="line">   3: new           #5                  // class java/lang/StringBuilder</div><div class="line">   6: dup</div><div class="line">   7: invokespecial #6                  // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</div><div class="line">  10: ldc           #2                  // String abcdef</div><div class="line">  12: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</div><div class="line">  15: aload_1</div><div class="line">  16: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</div><div class="line">  19: ldc           #12                 // String hg</div><div class="line">  21: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</div><div class="line">  24: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</div></pre></td></tr></table></figure>
<p>这也是编译器进行优化的结果，等价于 <code>String str2 = new StringBuilder().append(&quot;abcdef&quot;).append(e).append(&quot;hg&quot;).toString()</code>。<br>每次这样的赋值操作，编译器都会创建一个 <code>StringBuilder</code> 对象来进行操作。<br>再来看下面一种情况：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String s = null;</div><div class="line">for(int i = 0; i &lt; 5; i++) &#123;</div><div class="line">    s += &quot;a&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种情况下会创建几个 <code>StringBuilder</code> 对象呢？<br>看字节码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Code:</div><div class="line">   0: aconst_null</div><div class="line">   1: astore_1</div><div class="line">   2: iconst_0</div><div class="line">   3: istore_2</div><div class="line">   4: iload_2</div><div class="line">   5: iconst_5</div><div class="line">   6: if_icmpge     35</div><div class="line">   9: new           #5                  // class java/lang/StringBuilder</div><div class="line">  12: dup</div><div class="line">  13: invokespecial #6                  // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</div><div class="line">  16: aload_1</div><div class="line">  17: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</div><div class="line">  20: ldc           #11                 // String a</div><div class="line">  22: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</div><div class="line">  25: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</div><div class="line">  28: astore_1</div><div class="line">  29: iinc          2, 1</div><div class="line">  32: goto          4</div><div class="line">  35: return</div></pre></td></tr></table></figure>
<p>每做一次 + 就产生个 <code>StringBuilder</code> 对象，然后 <code>append</code> 后就扔掉。下次循环再到达时重新产生个 <code>StringBuilder</code> 对象，然后 <code>append</code> 字符串，如此循环直至结束。一共创建了 5 个<code>StringBuilder</code> 对象。<br>如果我们直接采用 <code>StringBuilder</code> 对象进行 <code>append</code> 的话，我们可以节省 4 次创建和销毁对象的时间。<br>所以对于在循环中要进行字符串连接的应用，一般都是用 <code>StringBuffer</code> 或 <code>StringBulider</code> 对象来进行 <code>append</code> 操作。 </p>
<h2 id="intern-方法"><a href="#intern-方法" class="headerlink" title="intern() 方法"></a>intern() 方法</h2><p>前面也介绍过：当使用 <code>String.intern()</code> 方法时，会从字符串常量池中查询当前字符串是否存在，如果存在， 就会直接返回当前字符串。如果常量池中没有此字符串， 会将此字符串放入常量池中后，再返回该常量池中的字符串。<br>我们把前面的例子做一下修改：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String str1 = new String(&quot;abc&quot;).intern();</div><div class="line">String str2 = new String(&quot;abc&quot;).intern();</div><div class="line">System.out.println(str1 == str2);</div></pre></td></tr></table></figure>
<p>打印结果为：true。<br>他们返回的都是字符串常量池中对象的引用。<br>字符串常量池内部是用 Hashtable 来维护的，如果存放的字符串过多，就会造成Hash冲突严重，从而导致链表会很长，而链表长了后直接会造成的影响就是当调用 <code>String.intern</code> 时性能会大幅下降。因此，在一些数据量很大切易变的字符串场景中要谨慎使用，否则会适得其反。</p>
<h2 id="StringBulider-和-StringBuffer"><a href="#StringBulider-和-StringBuffer" class="headerlink" title="StringBulider 和 StringBuffer"></a>StringBulider 和 StringBuffer</h2><p>他们的使用场景前面我们都由介绍，两者的方法基本相同。区别就是 <code>StringBulider</code> 是非线程安全的，<code>StringBuffer</code> 是线程安全的。</p>
]]></content>
    
    <summary type="html">
    
      深入理解 String
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="String" scheme="http://yoursite.com/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>Java 基础 -- HashMap 的使用和原理</title>
    <link href="http://yoursite.com/2013/06/28/java-basic-hashmap/"/>
    <id>http://yoursite.com/2013/06/28/java-basic-hashmap/</id>
    <published>2013-06-28T02:00:00.000Z</published>
    <updated>2019-01-13T16:09:24.619Z</updated>
    
    <content type="html"><![CDATA[<p>本文基于 JDK 1.7 的源码进行分析。</p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>HashMap 是我们经常使用的容器，它是基于哈希表的 Map 实现。HashMap 允许存在 Null 键和 Null 值，它是非线程安全的。此类并不保证映射的顺序，特别是它不保证顺序恒久不变。<br>在 JDK 1.7 中，HashMap 的内部是由数组+链表来实现的。数组是 HashMap 的主体，链表则是为了解决哈希冲突而存在的。也就是说 HashMap 中解决哈希冲突采用了链地址法。</p>
<h2 id="HashMap-原理"><a href="#HashMap-原理" class="headerlink" title="HashMap 原理"></a>HashMap 原理</h2><h3 id="HashMap-的构造方法"><a href="#HashMap-的构造方法" class="headerlink" title="HashMap 的构造方法"></a>HashMap 的构造方法</h3><p>HashMap 有四个构造方法：</p>
<ul>
<li><code>HashMap(int initialCapacity, float loadFactor)</code></li>
<li><code>HashMap(int initialCapacity)</code></li>
<li><code>HashMap()</code></li>
<li><code>HashMap(Map&lt;? extends K, ? extends V&gt; m)</code></li>
</ul>
<p>这里介绍一下两个重要的参数：initialCapacity 初始容量和 loadFactor 加载因子。<br>容量就是哈希表中桶的数量，初始容量就是哈希表在创建时的容量，记载因子就是哈希表在其容量自动增加之前可以达到多满的一种尺度。<br>当哈希表中的条目数超出了加载因子与当前容量的乘积时，则要对该哈希表进行 rehash 操作（即重建内部数据结构），从而哈希表将具有大约两倍的桶数。<br>在 HashMap 中，默认的 DEFAULT_INITIAL_CAPACITY = 16，DEFAULT_LOAD_FACTOR = 0.75f。<br>HashMap 的阈值也就是可以容纳的数据量为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">threshold = (int)Math.min(capacity * loadFactor, MAXIMUM_CAPACITY + 1);</div></pre></td></tr></table></figure>
<h3 id="HashMap-数据存储"><a href="#HashMap-数据存储" class="headerlink" title="HashMap 数据存储"></a>HashMap 数据存储</h3><p>HashMap 中的数据是通过 <code>Entry&lt;K,V&gt;[] table</code> 树组来存储的，它的基本数据单元是 Entry：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">    static class Entry&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;</div><div class="line">        final K key;</div><div class="line">        V value;</div><div class="line">        Entry&lt;K,V&gt; next;</div><div class="line">        int hash;</div><div class="line"></div><div class="line">        /**</div><div class="line">         * Creates new entry.</div><div class="line">         */</div><div class="line">        Entry(int h, K k, V v, Entry&lt;K,V&gt; n) &#123;</div><div class="line">            value = v;</div><div class="line">            next = n;</div><div class="line">            key = k;</div><div class="line">            hash = h;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面也提到过，HashMap 是由数组+链表来实现数据存储，数组中保存的是链表的头部元素。<br>可以用下面的图来直观一点表示：</p>
<p><img src="/images/java-basic-hashmap/hashmap-hash-array.png" alt="效果图"></p>
<h3 id="HashMap-put-方法"><a href="#HashMap-put-方法" class="headerlink" title="HashMap put 方法"></a>HashMap put 方法</h3><p>put 方法的返回值为 HashMap 中已有的该 key 值对应的值，如果没有相同的key，返回 null。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">public V put(K key, V value) &#123;</div><div class="line">    if (key == null)</div><div class="line">        return putForNullKey(value);</div><div class="line">    // 根据 key 获得哈希值</div><div class="line">    int hash = hash(key);</div><div class="line">    // 根据哈希值得到在数组中的存储位置</div><div class="line">    int i = indexFor(hash, table.length);</div><div class="line">    for (Entry&lt;K,V&gt; e = table[i]; e != null; e = e.next) &#123;</div><div class="line">        Object k;</div><div class="line">        //如果该对应数据已存在，执行覆盖操作。用新value替换旧value，并返回旧value</div><div class="line">        if (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</div><div class="line">            V oldValue = e.value;</div><div class="line">            e.value = value;</div><div class="line">            e.recordAccess(this);</div><div class="line">            // 返回旧 value</div><div class="line">            return oldValue;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    modCount++;</div><div class="line">    // 添加新的 Entry</div><div class="line">    addEntry(hash, key, value, i);</div><div class="line">    // 返回null</div><div class="line">    return null;</div><div class="line">&#125;</div><div class="line"></div><div class="line">static int indexFor(int h, int length) &#123;</div><div class="line">    // assert Integer.bitCount(length) == 1 : &quot;length must be a non-zero power of 2&quot;;</div><div class="line">    return h &amp; (length-1);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里涉及下面几个操作：</p>
<ul>
<li>根据key求哈希值；</li>
<li>根据哈希值得到index，也就是在数组中的存储位置</li>
<li>添加新的 Entry</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">    void addEntry(int hash, K key, V value, int bucketIndex) &#123;</div><div class="line">        // 如果数据量大于HashMap阈值，则需要对 HashMap 进行扩容</div><div class="line">        if ((size &gt;= threshold) &amp;&amp; (null != table[bucketIndex])) &#123;</div><div class="line">            // 将容量变为原来数组的两倍</div><div class="line">            resize(2 * table.length);</div><div class="line">            // 求哈希值</div><div class="line">            hash = (null != key) ? hash(key) : 0;</div><div class="line">            // 得到数组中存储位置</div><div class="line">            bucketIndex = indexFor(hash, table.length);</div><div class="line">        &#125;</div><div class="line">        // 生成一个 Entry</div><div class="line">        createEntry(hash, key, value, bucketIndex);</div><div class="line">&#125;</div><div class="line"></div><div class="line">    void createEntry(int hash, K key, V value, int bucketIndex) &#123;</div><div class="line">        // 获取数组中链表头部的元素</div><div class="line">        Entry&lt;K,V&gt; e = table[bucketIndex];</div><div class="line">        // 生成一个新的Entry，并放到链表头部</div><div class="line">        // 链表头部的元素保存着 table 数组中</div><div class="line">        table[bucketIndex] = new Entry&lt;&gt;(hash, key, value, e);</div><div class="line">        // 数据量加1</div><div class="line">        size++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="容量扩容"><a href="#容量扩容" class="headerlink" title="容量扩容"></a>容量扩容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">    void resize(int newCapacity) &#123;</div><div class="line">        Entry[] oldTable = table;</div><div class="line">        int oldCapacity = oldTable.length;</div><div class="line">        // 容量已经为最大容量时，赋值Integer.MAX_VALUE</div><div class="line">        if (oldCapacity == MAXIMUM_CAPACITY) &#123;</div><div class="line">            threshold = Integer.MAX_VALUE;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        // 初始化一个新的数组</div><div class="line">        Entry[] newTable = new Entry[newCapacity];</div><div class="line">        boolean oldAltHashing = useAltHashing;</div><div class="line">        useAltHashing |= sun.misc.VM.isBooted() &amp;&amp;</div><div class="line">                (newCapacity &gt;= Holder.ALTERNATIVE_HASHING_THRESHOLD);</div><div class="line">        // 是否重新计算哈希值</div><div class="line">        boolean rehash = oldAltHashing ^ useAltHashing;</div><div class="line">        // 将原来的数据迁移到新的数组</div><div class="line">        transfer(newTable, rehash);</div><div class="line">        table = newTable;</div><div class="line">        // 重新赋值阈值 threshold</div><div class="line">        threshold = (int)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + 1);</div><div class="line">&#125;</div><div class="line"></div><div class="line">    void transfer(Entry[] newTable, boolean rehash) &#123;</div><div class="line">        int newCapacity = newTable.length;</div><div class="line">        for (Entry&lt;K,V&gt; e : table) &#123;</div><div class="line">            while(null != e) &#123;</div><div class="line">                Entry&lt;K,V&gt; next = e.next;</div><div class="line">                if (rehash) &#123;</div><div class="line">                    e.hash = null == e.key ? 0 : hash(e.key);</div><div class="line">                &#125;</div><div class="line">                int i = indexFor(e.hash, newCapacity);</div><div class="line">                e.next = newTable[i];</div><div class="line">                newTable[i] = e;</div><div class="line">                e = next;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="HashMap-get-方法"><a href="#HashMap-get-方法" class="headerlink" title="HashMap get 方法"></a>HashMap get 方法</h3><p>这个过程也比较简单：</p>
<ul>
<li>根据 key 计算哈希值</li>
<li>根据哈希值获取在数组中的位置</li>
<li>遍历该位置的链表，直到找到该key对应的 Entry，返回 value</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public V get(Object key) &#123;</div><div class="line">    if (key == null)</div><div class="line">        return getForNullKey();</div><div class="line">    Entry&lt;K,V&gt; entry = getEntry(key);</div><div class="line"></div><div class="line">    return null == entry ? null : entry.getValue();</div><div class="line">&#125;</div><div class="line"></div><div class="line">final Entry&lt;K,V&gt; getEntry(Object key) &#123;</div><div class="line">    int hash = (key == null) ? 0 : hash(key);</div><div class="line">    for (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];</div><div class="line">         e != null;</div><div class="line">         e = e.next) &#123;</div><div class="line">        Object k;</div><div class="line">        if (e.hash == hash &amp;&amp;</div><div class="line">            ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</div><div class="line">            return e;</div><div class="line">    &#125;</div><div class="line">    return null;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="HashMap-keySet-entrySet-方法"><a href="#HashMap-keySet-entrySet-方法" class="headerlink" title="HashMap keySet() entrySet() 方法"></a>HashMap keySet() entrySet() 方法</h3><p>keySet() 和 entrySet() 实现原理相同，这里我么只介绍一下 entrySet()。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() &#123;</div><div class="line">    return entrySet0();</div><div class="line">&#125;</div><div class="line"></div><div class="line">private Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet0() &#123;</div><div class="line">    Set&lt;Map.Entry&lt;K,V&gt;&gt; es = entrySet;</div><div class="line">    return es != null ? es : (entrySet = new EntrySet());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里的关键点在 entrySet 变量，但是我们通过看源码发现一个奇怪的事情，代码中对 entrySet 只有读取的操作，并没有发现写入数据的操作。<br>我们来看一下 EntrySet 的实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">private final class EntrySet extends AbstractSet&lt;Map.Entry&lt;K,V&gt;&gt; &#123;</div><div class="line">    public Iterator&lt;Map.Entry&lt;K,V&gt;&gt; iterator() &#123;</div><div class="line">        return newEntryIterator();</div><div class="line">    &#125;</div><div class="line">    public boolean contains(Object o) &#123;</div><div class="line">        if (!(o instanceof Map.Entry))</div><div class="line">            return false;</div><div class="line">        Map.Entry&lt;K,V&gt; e = (Map.Entry&lt;K,V&gt;) o;</div><div class="line">        Entry&lt;K,V&gt; candidate = getEntry(e.getKey());</div><div class="line">        return candidate != null &amp;&amp; candidate.equals(e);</div><div class="line">    &#125;</div><div class="line">    public boolean remove(Object o) &#123;</div><div class="line">        return removeMapping(o) != null;</div><div class="line">    &#125;</div><div class="line">    public int size() &#123;</div><div class="line">        return size;</div><div class="line">    &#125;</div><div class="line">    public void clear() &#123;</div><div class="line">        HashMap.this.clear();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Iterator&lt;Map.Entry&lt;K,V&gt;&gt; newEntryIterator()   &#123;</div><div class="line">    return new EntryIterator();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>找到了问题的重点，EntrySet 类重写了 iterator() 方法，生成了 EntryIterator 对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">private final class EntryIterator extends HashIterator&lt;Map.Entry&lt;K,V&gt;&gt; &#123;</div><div class="line">    public Map.Entry&lt;K,V&gt; next() &#123;</div><div class="line">        return nextEntry();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">private abstract class HashIterator&lt;E&gt; implements Iterator&lt;E&gt; &#123;</div><div class="line">    Entry&lt;K,V&gt; next;        // next entry to return</div><div class="line">    int expectedModCount;   // For fast-fail</div><div class="line">    int index;              // current slot</div><div class="line">    Entry&lt;K,V&gt; current;     // current entry</div><div class="line"></div><div class="line">    HashIterator() &#123;</div><div class="line">        expectedModCount = modCount;</div><div class="line">        if (size &gt; 0) &#123; // advance to first entry</div><div class="line">            Entry[] t = table;</div><div class="line">            while (index &lt; t.length &amp;&amp; (next = t[index++]) == null)</div><div class="line">                ;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public final boolean hasNext() &#123;</div><div class="line">        return next != null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    final Entry&lt;K,V&gt; nextEntry() &#123;</div><div class="line">        if (modCount != expectedModCount)</div><div class="line">            throw new ConcurrentModificationException();</div><div class="line">        Entry&lt;K,V&gt; e = next;</div><div class="line">        if (e == null)</div><div class="line">            throw new NoSuchElementException();</div><div class="line"></div><div class="line">        if ((next = e.next) == null) &#123;</div><div class="line">            Entry[] t = table;</div><div class="line">            while (index &lt; t.length &amp;&amp; (next = t[index++]) == null)</div><div class="line">                ;</div><div class="line">        &#125;</div><div class="line">        current = e;</div><div class="line">        return e;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void remove() &#123;</div><div class="line">        if (current == null)</div><div class="line">            throw new IllegalStateException();</div><div class="line">        if (modCount != expectedModCount)</div><div class="line">            throw new ConcurrentModificationException();</div><div class="line">        Object k = current.key;</div><div class="line">        current = null;</div><div class="line">        HashMap.this.removeEntryForKey(k);</div><div class="line">        expectedModCount = modCount;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>HashIterator 是 HashMap 的一个内部类，实现了 Iterator 接口，对于迭代器的各种操作，都是基于 HashMap 的变量 table 来进行的，这也就是为什么我们发现没有对 EntrySet 写入数据的原因。</p>
<h2 id="HashMap-的遍历"><a href="#HashMap-的遍历" class="headerlink" title="HashMap 的遍历"></a>HashMap 的遍历</h2><p>第一种：获取 keySet 遍历，根据 key 再通过 get 方法获取 value</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">HashMap&lt;String, String&gt; hashMap = new HashMap();</div><div class="line"></div><div class="line">Set&lt;String&gt; entries = hashMap.keySet();</div><div class="line"></div><div class="line">for(String key : entries) &#123;</div><div class="line">    String vallue = hashMap.get(key);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第二种：获取 entrySet，根据Map.Entry 获取key和value，较第一种方法效率高，一次获取可以得到key和value。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">HashMap&lt;String, String&gt; hashMap = new HashMap();</div><div class="line"></div><div class="line">Set&lt;Map.Entry&lt;String, String&gt;&gt; entries = hashMap.entrySet();</div><div class="line"></div><div class="line">for(Map.Entry&lt;String, String&gt; entry : entries) &#123;</div><div class="line">    String key = entry.getKey();</div><div class="line">    String value = entry.getValue();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第三种：获取 entrySet 的迭代器，然后进行遍历，其实 foreach 的实现也是基于迭代器 iterator() 的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Iterator iterator = hashMap.entrySet().iterator();</div><div class="line"></div><div class="line">while (iterator.hasNext()) &#123;</div><div class="line">    Map.Entry&lt;String, String&gt; entry = (Map.Entry) iterator.next();</div><div class="line">    String key = entry.getKey();</div><div class="line">    String value = entry.getValue();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      介绍 HashMap 的使用和原理
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 基础 -- enum</title>
    <link href="http://yoursite.com/2013/06/26/java-basic-enum/"/>
    <id>http://yoursite.com/2013/06/26/java-basic-enum/</id>
    <published>2013-06-26T02:00:00.000Z</published>
    <updated>2019-01-22T02:35:05.727Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>枚举类型是指由一组固定的常量组成合法值的类型，它是在 Java 1.5 引入的一种类型，在此之前，我们只有两种声明常量的方式：类常量和接口常量。<br>枚举的引入改变了常量的声明方式，在枚举之前，我们表示枚举类型的常用模式是声明一组具名的 int 常量，每个类型成员一个常量：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">interface Fruit&#123;</div><div class="line">    int APPLE = 0;</div><div class="line">    int PEAR = 1;</div><div class="line">    int LEMON = 2;</div><div class="line">    int BANANA = 3;</div><div class="line">    int ORANGE = 4;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种方式称为 int 枚举模式，它存在着类型安全性和使用方便性等诸多不足。<br>我们可以用下面方式声明枚举：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">enum Fruit&#123;APPLE, PEAR, LEMON, BANANA,ORANGE&#125;</div></pre></td></tr></table></figure>
<p>使用枚举时，每个枚举项都是该枚举的实例对象。比如 APPLE 就是 Fruit 的一个实例对象。<br>枚举无法被继承，但可以继承其他类或者实现其他接口。</p>
<h2 id="枚举的优势"><a href="#枚举的优势" class="headerlink" title="枚举的优势"></a>枚举的优势</h2><p>我们为什么要使用枚举呢？下面我们来说一下它和静态常量的优势。</p>
<h3 id="枚举常量更简单"><a href="#枚举常量更简单" class="headerlink" title="枚举常量更简单"></a>枚举常量更简单</h3><p>枚举常量只需要定义每个枚举项，不需要定义枚举值，而接口常量或者类常量则必须定义值，否则编译不过，即使我们不需要关心其值是多少也必须定义。<br>其次，虽然两者被引用方式相同（都是类名.属性，比如 Fruit.APPLE），但是枚举表示的是一个枚举项，字面含义是苹果，而接口常量其字面含义也是苹果，但是在运算中我们势必要关注其 int 值。</p>
<h3 id="枚举常量属于稳态型"><a href="#枚举常量属于稳态型" class="headerlink" title="枚举常量属于稳态型"></a>枚举常量属于稳态型</h3><p>如果我们用 switch 语句来使用接口常量，我们必须对输入值进行检查，确定其是否越界，而且容易造成一些在编译期通过，但是运行期产生不符合预期的后果。<br>使用枚举不用关心这些校验问题，它在编译器限定类型，不允许发生越界的情况。</p>
<h3 id="枚举具有内置方法"><a href="#枚举具有内置方法" class="headerlink" title="枚举具有内置方法"></a>枚举具有内置方法</h3><p>枚举的内置方法有：</p>
<ul>
<li>valueOf():返回具有指定名称的枚举类型的枚举常量，比如 Fruit.valueOf(“ORANGE”) 返回的就是枚举值 ORANGE。</li>
<li>values():列出所有枚举项</li>
</ul>
<p>每个枚举都是 java.lang.Enum 的子类，该类也提供了很多方法：</p>
<ul>
<li>ordinal():获得枚举的排序值，从 0 开始的 int 类型；</li>
<li>compareTo()：比较方法</li>
</ul>
<h3 id="枚举可以自定义方法"><a href="#枚举可以自定义方法" class="headerlink" title="枚举可以自定义方法"></a>枚举可以自定义方法</h3><p>枚举不仅可以定义静态方法，还可以定义非静态方法，而且还能够从根本上杜绝常量类被实例化。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public enum Fruit &#123;</div><div class="line">    APPLE(&quot;apple&quot;,3),</div><div class="line">    PEAR(&quot;pear&quot;,4),</div><div class="line">    LEMON(&quot;lemon&quot;,5),</div><div class="line">    BANANA(&quot;banana&quot;,6),</div><div class="line">    ORANGE(&quot;orange&quot;,7);</div><div class="line"></div><div class="line">    private String name;</div><div class="line"></div><div class="line">    //带参数的构造方法</div><div class="line">    Fruit(String name, int id) &#123;</div><div class="line">        this.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static Fruit getFavourite() &#123;</div><div class="line">        return APPLE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getName() &#123;</div><div class="line">        return name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用构造函数协助描述枚举项"><a href="#使用构造函数协助描述枚举项" class="headerlink" title="使用构造函数协助描述枚举项"></a>使用构造函数协助描述枚举项</h2><p>一般来说，我们经常使用的枚举项只有一个属性，即排序号，其默认值是从0、1、2、3……，这一点我们很熟悉。<br>但是枚举还可以有一个或多个属性：枚举描述，它的含义是通过枚举的构造函数，声明每个枚举项（也就是枚举实例）必须具有的属性和行为，这是对枚举项的描述或者补充，目的是使枚举项表述的意义更加清晰准确。<br>比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public enum Fruit &#123;</div><div class="line">    APPLE(&quot;apple&quot;,3),</div><div class="line">    PEAR(&quot;pear&quot;,4),</div><div class="line">    LEMON(&quot;lemon&quot;,5),</div><div class="line">    BANANA(&quot;banana&quot;,6),</div><div class="line">    ORANGE(&quot;orange&quot;,7);</div><div class="line"></div><div class="line">    private String name;</div><div class="line">    private int id;</div><div class="line"></div><div class="line">    //带参数的构造方法</div><div class="line">    Fruit(String name, int id) &#123;</div><div class="line">        this.name = name;</div><div class="line">        this.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getName() &#123;</div><div class="line">        return name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int getID() &#123;</div><div class="line">        return id;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码添加了 name 和 id 的描述信息。</p>
<h2 id="使用枚举实现工厂方法模式"><a href="#使用枚举实现工厂方法模式" class="headerlink" title="使用枚举实现工厂方法模式"></a>使用枚举实现工厂方法模式</h2><p>工厂方法模式是“创建对象的接口，让子类决定实例化哪一个类，并使一个类的实例化延迟到其子类”。<br>工厂方法模式一般可以通过下面实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">interface Car&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">class FordCar implements Car&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">class BuickCar implements Car&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">class CarFactory&#123;</div><div class="line">    public static Car creat(Class&lt;? extends Car&gt; c) &#123;</div><div class="line">        try &#123;</div><div class="line">            return c.newInstance();</div><div class="line">        &#125; catch (InstantiationException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (IllegalAccessException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有了工厂方法模式，我们就不关心一辆车具体是怎么生成的了，只要告诉工厂“我要生产一辆福特汽车”就行了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Car car = CarFactory.creat(FordCar.class);</div></pre></td></tr></table></figure>
<p>其实通过枚举也可以实现工厂方法模式：</p>
<h3 id="枚举非静态方法实现工厂方法模式"><a href="#枚举非静态方法实现工厂方法模式" class="headerlink" title="枚举非静态方法实现工厂方法模式"></a>枚举非静态方法实现工厂方法模式</h3><p>我们知道每个枚举项都是该枚举的实例对象，那是不是定义一个方法可以生成每个枚举项的对应产品来实现此模式呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">enum CarFactory &#123;</div><div class="line">    FordCar,</div><div class="line">    BuickCar;</div><div class="line"></div><div class="line">    public Car create() &#123;</div><div class="line">        switch (this) &#123;</div><div class="line">            case FordCar:</div><div class="line">                return new FordCar();</div><div class="line">            case BuickCar:</div><div class="line">                return new BuickCar();</div><div class="line">            default:</div><div class="line">                // TODO</div><div class="line">                return null;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>create 是一个非静态方法，也就是只有通过 FordCar、BuickCar枚举项才能访问。采用这种方式实现工厂方法模式时，客户端要生产一辆汽车就很简单了，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Car car = CarFactory.FordCar.create();</div></pre></td></tr></table></figure>
<h3 id="通过抽象方法生成成品"><a href="#通过抽象方法生成成品" class="headerlink" title="通过抽象方法生成成品"></a>通过抽象方法生成成品</h3><p>枚举类型虽然不能继承，但是可以用 abstract 修饰其方法，此时就表示该枚举是一个抽象枚举，需要每个枚举项自行实现该方法，也就是说枚举项的类型是该枚举的一个子类：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">enum CarFactory &#123;</div><div class="line">    FordCar &#123;</div><div class="line">        public Car create() &#123;</div><div class="line">            return new FordCar();</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    BuickCar&#123;</div><div class="line">        public Car create() &#123;</div><div class="line">            return new BuickCar();</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    public abstract Car create();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="为什么使用枚举类型的工厂方法"><a href="#为什么使用枚举类型的工厂方法" class="headerlink" title="为什么使用枚举类型的工厂方法"></a>为什么使用枚举类型的工厂方法</h3><p>看了上面的实现，大家可能会问：为什么要使用枚举类型的工厂方法模式呢？<br>那是因为它有下面三个有点：</p>
<h4 id="避免错误调用发生"><a href="#避免错误调用发生" class="headerlink" title="避免错误调用发生"></a>避免错误调用发生</h4><p>一般工厂方法模式中的生产方法可以接收三种类型的参数：类型参数（我们的例子）、String 参数（生产方法根据String参数判断需要生产什么产品）、int 参数（生产方法根据int值判断需要生产什么产品），这三种参数都是宽泛的数据类型，很容易产生错误，而且这种错误编译器不会报警，只有到运行期间才能发现。<br>而使用枚举类型的工厂模式就不存在该问题了，不需要传递任何参数，只需要选择好生产什么类型的产品即可。</p>
<h4 id="使用便捷"><a href="#使用便捷" class="headerlink" title="使用便捷"></a>使用便捷</h4><h4 id="降低类间耦合"><a href="#降低类间耦合" class="headerlink" title="降低类间耦合"></a>降低类间耦合</h4><p>不管生产方法接收的是Class、String还是int，都会成为客户端的负担，这些类并不是客户端需要的，而是因为工厂方法的限制必须输入的，这个违背了最少知识原则：一个对象应该对其他对象有最少的了解。<br>二枚举类型的工厂方法就没有这种问题了，它只需要依赖工厂类就行了，完全可以无视具体汽车类的存在。</p>
<h2 id="使用枚举时需要注意的问题"><a href="#使用枚举时需要注意的问题" class="headerlink" title="使用枚举时需要注意的问题"></a>使用枚举时需要注意的问题</h2><h3 id="小心-switch-带来的空指针异常"><a href="#小心-switch-带来的空指针异常" class="headerlink" title="小心 switch 带来的空指针异常"></a>小心 switch 带来的空指针异常</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    setFruit(null);</div><div class="line">&#125;</div><div class="line"></div><div class="line">private void setFruit(Fruit fruit) &#123;</div><div class="line">    switch (fruit) &#123;</div><div class="line">        case APPLE:</div><div class="line"></div><div class="line">            break;</div><div class="line">        case PEAR:</div><div class="line"></div><div class="line">            break;</div><div class="line">        default:</div><div class="line">            break;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码执行起来会报下面异常：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Caused by: java.lang.NullPointerException: Attempt to invoke virtual method &apos;int java.lang.Enum.ordinal()&apos; on a null object reference</div></pre></td></tr></table></figure>
<p>这里怎么会有空指针呢？这就与枚举和 switch 的特性有关了。<br>我们知道，目前 Java 中的 switch 只能判断 byte、short、char、int<br>String 类型，这是 Java 编译器的限制，那么为什么枚举可以跟在 switch 后面呢？<br>很简单，因为编译时，编译器判断出 switch 语句后的参数时枚举类型，然后就会根据枚举的排序值继续匹配，也就是上面的代码和下面相同：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">private void setFruit(Fruit fruit) &#123;</div><div class="line">    switch (fruit.ordinal()) &#123;</div><div class="line">        case Fruit.APPLE.ordinal():</div><div class="line">            break;</div><div class="line">        case Fruit.PEAR.ordinal():</div><div class="line">            break;</div><div class="line">        default:</div><div class="line">            break;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>明白了吧？switch语句是先计算 fruit 变量的排序值，然后与枚举常量的每个排序值进行比较的。如果我们传入 null 参数，调用 ordinal 方法时就会报空指针了。<br>正确的做法应该在setFruit方法里面对 fruit 参数进行 null 判断。</p>
<h3 id="调用-valueOf-方法注意校验问题"><a href="#调用-valueOf-方法注意校验问题" class="headerlink" title="调用 valueOf 方法注意校验问题"></a>调用 valueOf 方法注意校验问题</h3><p>valueOf 方法会把一个 String 类型的名称转换为枚举项，也就是在枚举项中查找出字面值与该参数相等的枚举项。<br>那么如果我们输入一个不匹配的值会出现什么结果呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Fruit fruit = Fruit.valueOf(&quot;test&quot;);</div></pre></td></tr></table></figure>
<p>会有下面的异常：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Caused by: java.lang.IllegalArgumentException: No enum constant com.example.hq.testsomething.commontest.Fruit.test</div></pre></td></tr></table></figure>
<p>来看一下源码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public static &lt;T extends Enum&lt;T&gt;&gt; T valueOf(Class&lt;T&gt; enumType,</div><div class="line">                                            String name) &#123;</div><div class="line">    if (enumType == null)</div><div class="line">        throw new NullPointerException(&quot;enumType == null&quot;);</div><div class="line">    if (name == null)</div><div class="line">        throw new NullPointerException(&quot;Name is null&quot;);</div><div class="line">    T[] values = getSharedConstants(enumType);</div><div class="line">    T result = null;</div><div class="line">    if (values != null) &#123;</div><div class="line">        for (T value : values) &#123;</div><div class="line">            if (name.equals(value.name())) &#123;</div><div class="line">                result = value;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; else &#123;</div><div class="line">        throw new IllegalArgumentException(enumType.toString() + &quot; is not an enum type.&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if (result != null)</div><div class="line">        return result;</div><div class="line">    throw new IllegalArgumentException(</div><div class="line">        &quot;No enum constant &quot; + enumType.getCanonicalName() + &quot;.&quot; + name);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果找不到匹配值就会抛出异常。<br>下面有两个方法可以解决：</p>
<ul>
<li>使用 try cathc 捕获异常；</li>
<li>扩展枚举类；</li>
</ul>
<p>可以通过增加一个 contains 方法来判断是否包含指定的枚举项，然后再继续进行转换。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">public enum Fruit &#123;</div><div class="line">    APPLE(&quot;apple&quot;,3),</div><div class="line">    PEAR(&quot;pear&quot;,4),</div><div class="line">    LEMON(&quot;lemon&quot;,5),</div><div class="line">    BANANA(&quot;banana&quot;,6),</div><div class="line">    ORANGE(&quot;orange&quot;,7);</div><div class="line"></div><div class="line">    private String name;</div><div class="line">    private int id;</div><div class="line"></div><div class="line">    Fruit(String name, int id) &#123;</div><div class="line">        this.name = name;</div><div class="line">        this.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getName() &#123;</div><div class="line">        return name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int getID() &#123;</div><div class="line">        return id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static boolean contains(String name) &#123;</div><div class="line">        for(Fruit fruit: values()) &#123;</div><div class="line">            if(fruit.name.equals(name)) &#123;</div><div class="line">                return true</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="枚举无法继承"><a href="#枚举无法继承" class="headerlink" title="枚举无法继承"></a>枚举无法继承</h2><p>一个枚举常量定义完毕后，除非修改重构，否则无法扩展。而接口常量或者类常量则可通过继承进行扩展。但是可以通过上面的方法实现 abstract 方法。</p>
<h2 id="枚举的缺点"><a href="#枚举的缺点" class="headerlink" title="枚举的缺点"></a>枚举的缺点</h2><p>枚举变量非常方便，但不幸的是它会牺牲执行的速度和并大幅增加文件体积。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public class Foo &#123;</div><div class="line"> public enum Fruit &#123; APPLE, PEAR, LEMON &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>会产生一个900字节的 .class 文件(<code>Foo$Fruit.class</code>)。在它被首次调用时，这个类会调用初始化方法来准备每个枚举变量。每个枚举项都会被声明成一个静态变量，并被赋值。然后将这些静态变量放在一个名为 “$VALUES” 的静态数组变量中。而这么一大堆代码，仅仅是为了使用三个整数。<br>这样: <code>Fruit fruit = Fruit.APPLE;</code> 会引起一个对静态变量的引用，如果这个静态变量是final int，那么编译器会直接内联这个常数。<br>一方面说，使用枚举变量可以让你的 API 更出色，并能提供编译时的检查。所以在通常的时候你毫无疑问应该为公共 API 选择枚举变量。但是当性能方面有所限制的时候，你就应该避免这种做法了。尤其是在移动端，对内存的要求比较严格。<br>鉴于 Enum 会比使用常量带来更大的内存开销，因此 Android 官方也建议，不是在必要的情况下应尽量避免过多使用 Enum，下面介绍使用注解来代替 Enum 的方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public static final int APPLE = 0;</div><div class="line">public static final int PEAR = 1;</div><div class="line">public static final int LEMON = 2;</div><div class="line">public static final int BANANA = 3;</div><div class="line">public static final int ORANGE = 4;</div><div class="line"></div><div class="line">@IntDef (&#123;APPLE, PEAR, LEMON, BANANA, ORANGE&#125;)</div><div class="line">@Retention(RetentionPolicy.SOURCE)</div><div class="line">public @interface Fruit&#123;&#125;</div><div class="line"></div><div class="line">private @Fruit int mFruit;</div><div class="line"></div><div class="line">……</div><div class="line">&#123;</div><div class="line">        mFruit = APPLE;</div><div class="line">&#125;</div><div class="line"></div><div class="line">private void setFruit(@Fruit int fruit) &#123;</div><div class="line">    mFruit = fruit;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      介绍 enum 的用法
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 基础 -- ArrayList 的使用和原理</title>
    <link href="http://yoursite.com/2013/06/20/java-basic-arraylist/"/>
    <id>http://yoursite.com/2013/06/20/java-basic-arraylist/</id>
    <published>2013-06-20T02:00:00.000Z</published>
    <updated>2019-01-03T09:25:14.546Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>ArrayList 实现了 List 接口，是我们经常使用的一个数据集合，我们通常把它当成一个可变长度的树组使用。长度可变是说我们可以在创建 ArrayList 时不指定它的长度，添加数据时只需要添加就行了，ArrayList 会动态的扩充容量。<br>ArrayList 内部是通过一个对象数组来存储数据元素的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">transient Object[] elementData;</div></pre></td></tr></table></figure>
<p>这种底层存储数据结构决定了ArrayList的添加删除操作效率是不高的，而随机访问效率很高。</p>
<h2 id="数组构造"><a href="#数组构造" class="headerlink" title="数组构造"></a>数组构造</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public ArrayList(int initialCapacity) &#123;</div><div class="line">    super();</div><div class="line">    if (initialCapacity &lt; 0)</div><div class="line">        throw new IllegalArgumentException(&quot;Illegal Capacity: &quot;+</div><div class="line">                                           initialCapacity);</div><div class="line">    // 根据指定的容量大小创建树组</div><div class="line">    this.elementData = new Object[initialCapacity];</div><div class="line">&#125;</div><div class="line"></div><div class="line">public ArrayList() &#123;</div><div class="line">    super();</div><div class="line">    // 将空的树组赋值给 elementData</div><div class="line">    this.elementData = EMPTY_ELEMENTDATA;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">// 通过给定集合创建树组</div><div class="line">public ArrayList(Collection&lt;? extends E&gt; c) &#123;</div><div class="line">    elementData = c.toArray();</div><div class="line">    size = elementData.length;</div><div class="line">    if (elementData.getClass() != Object[].class)</div><div class="line">        elementData = Arrays.copyOf(elementData, size, Object[].class);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="元素添加和扩容"><a href="#元素添加和扩容" class="headerlink" title="元素添加和扩容"></a>元素添加和扩容</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public boolean add(E e) &#123;</div><div class="line">    ensureCapacityInternal(size + 1);  // Increments modCount!!</div><div class="line">    elementData[size++] = e;</div><div class="line">    return true;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在真正添加数据前，首先要检查一下当前数组是否可以容纳数据的添加，如果容量不够，就要进行扩容。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">private void ensureCapacityInternal(int minCapacity) &#123;</div><div class="line">    // 如果是调用的没有指定初始容量的构造方法</div><div class="line">    // 那么就把容量设置为 DEFAULT_CAPACITY = 10</div><div class="line">    if (elementData == EMPTY_ELEMENTDATA) &#123;</div><div class="line">        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ensureExplicitCapacity(minCapacity);</div><div class="line">&#125;</div><div class="line"></div><div class="line">private void ensureExplicitCapacity(int minCapacity) &#123;</div><div class="line">    // modCount 记录了集合的修改次数，是父类 AbstractList 的成员变量</div><div class="line">    modCount++;</div><div class="line"></div><div class="line">    // 如果需要的最小空间大于当前树组的长度，那么就需要扩容了</div><div class="line">    if (minCapacity - elementData.length &gt; 0)</div><div class="line">        grow(minCapacity);</div><div class="line">&#125;</div><div class="line"></div><div class="line">private void grow(int minCapacity) &#123;</div><div class="line">    // 原数组的长度</div><div class="line">    int oldCapacity = elementData.length;</div><div class="line">    // 扩展到原来的 1.5 倍大小</div><div class="line">    int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);</div><div class="line">    // 如果扩充到1.5倍还是不够，那么就直接扩充到要求的 minCapacity 大小</div><div class="line">    if (newCapacity - minCapacity &lt; 0)</div><div class="line">        newCapacity = minCapacity;</div><div class="line">    // 如果比 MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8 还要大</div><div class="line">    // 则设置为 Integer.MAX_VALUE</div><div class="line">    if (newCapacity - MAX_ARRAY_SIZE &gt; 0)</div><div class="line">        newCapacity = hugeCapacity(minCapacity);</div><div class="line">    // 以 newCapacity 大小创建一个新的树组，并将数组复制到新的数组中</div><div class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里的 ensureCapacityInternal 方法只有在添加数组时才会被调用的，因此，在构造 ArrayList 时你没有制定容量大小，它不会立即把树组大小设置为10，除非有添加操作时才会进行设置。</p>
<h2 id="是否包含元素"><a href="#是否包含元素" class="headerlink" title="是否包含元素"></a>是否包含元素</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public boolean contains(Object o) &#123;</div><div class="line">    return indexOf(o) &gt;= 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public int indexOf(Object o) &#123;</div><div class="line">    if (o == null) &#123;</div><div class="line">        for (int i = 0; i &lt; size; i++)</div><div class="line">            if (elementData[i]==null)</div><div class="line">                return i;</div><div class="line">    &#125; else &#123;</div><div class="line">        for (int i = 0; i &lt; size; i++)</div><div class="line">            if (o.equals(elementData[i]))</div><div class="line">                return i;</div><div class="line">    &#125;</div><div class="line">    return -1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可见，ArrayList 判断是否包含元素采用的时遍历树组的方法，使用 equals 来判断。<br>所以我们要重写元素的 equals 方法。<br>而且，这里的遍历方式为顺序遍历，如果数据量很大，那么就会有很大的性能问题。</p>
<h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public E remove(int index) &#123;</div><div class="line">    // 边界检查</div><div class="line">    if (index &gt;= size)</div><div class="line">        throw new IndexOutOfBoundsException(outOfBoundsMsg(index));</div><div class="line">    // 记录修改次数</div><div class="line">    modCount++;</div><div class="line">    // 获取当前位置的元素</div><div class="line">    E oldValue = (E) elementData[index];</div><div class="line"></div><div class="line">    int numMoved = size - index - 1;</div><div class="line">    // 执行数据复制，覆盖需要删除位置的元素</div><div class="line">    if (numMoved &gt; 0)</div><div class="line">        System.arraycopy(elementData, index+1, elementData, index,</div><div class="line">                         numMoved);</div><div class="line">    elementData[--size] = null; // 置空便于GC回收</div><div class="line"></div><div class="line">    return oldValue;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">// 元素删除操作也是顺序遍历数据进行</div><div class="line">public boolean remove(Object o) &#123;</div><div class="line">    if (o == null) &#123;</div><div class="line">        for (int index = 0; index &lt; size; index++)</div><div class="line">            if (elementData[index] == null) &#123;</div><div class="line">                fastRemove(index);</div><div class="line">                return true;</div><div class="line">            &#125;</div><div class="line">    &#125; else &#123;</div><div class="line">        for (int index = 0; index &lt; size; index++)</div><div class="line">            if (o.equals(elementData[index])) &#123;</div><div class="line">                fastRemove(index);</div><div class="line">                return true;</div><div class="line">            &#125;</div><div class="line">    &#125;</div><div class="line">    return false;</div><div class="line">&#125;</div><div class="line">// fastRemove 仅仅是少了边界检查</div><div class="line">private void fastRemove(int index) &#123;</div><div class="line">    modCount++;</div><div class="line">    int numMoved = size - index - 1;</div><div class="line">    if (numMoved &gt; 0)</div><div class="line">        System.arraycopy(elementData, index+1, elementData, index,</div><div class="line">                         numMoved);</div><div class="line">    elementData[--size] = null; // clear to let GC do its work</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">// 删除相同元素</div><div class="line">public boolean removeAll(Collection&lt;?&gt; c) &#123;</div><div class="line">    return batchRemove(c, false);</div><div class="line">&#125;</div><div class="line">// 删除不同元素，求交集</div><div class="line">public boolean retainAll(Collection&lt;?&gt; c) &#123;</div><div class="line">    return batchRemove(c, true);</div><div class="line">&#125;</div><div class="line"></div><div class="line">private boolean batchRemove(Collection&lt;?&gt; c, boolean complement) &#123;</div><div class="line">    final Object[] elementData = this.elementData;</div><div class="line">    int r = 0, w = 0;</div><div class="line">    boolean modified = false;</div><div class="line">    try &#123;</div><div class="line">        for (; r &lt; size; r++)</div><div class="line">            // 这里通过contains来判断，如果列表很大，效率不高</div><div class="line">            if (c.contains(elementData[r]) == complement)</div><div class="line">                elementData[w++] = elementData[r];</div><div class="line">    &#125; finally &#123;</div><div class="line">        // Preserve behavioral compatibility with AbstractCollection,</div><div class="line">        // even if c.contains() throws.</div><div class="line">        if (r != size) &#123;</div><div class="line">            System.arraycopy(elementData, r,</div><div class="line">                             elementData, w,</div><div class="line">                             size - r);</div><div class="line">            w += size - r;</div><div class="line">        &#125;</div><div class="line">        if (w != size) &#123;</div><div class="line">            // clear to let GC do its work</div><div class="line">            for (int i = w; i &lt; size; i++)</div><div class="line">                elementData[i] = null;</div><div class="line">            modCount += size - w;</div><div class="line">            size = w;</div><div class="line">            modified = true;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return modified;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public Iterator&lt;E&gt; iterator() &#123;</div><div class="line">    return new Itr();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public ListIterator&lt;E&gt; listIterator() &#123;</div><div class="line">    return new ListItr(0);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">private class Itr implements Iterator&lt;E&gt; &#123;</div><div class="line">    protected int limit = ArrayList.this.size;</div><div class="line"></div><div class="line">    int cursor;       // index of next element to return</div><div class="line">    int lastRet = -1; // index of last element returned; -1 if no such</div><div class="line">    int expectedModCount = modCount;</div><div class="line"></div><div class="line">    public boolean hasNext() &#123;</div><div class="line">        return cursor &lt; limit;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @SuppressWarnings(&quot;unchecked&quot;)</div><div class="line">    public E next() &#123;</div><div class="line">        if (modCount != expectedModCount)</div><div class="line">            throw new ConcurrentModificationException();</div><div class="line">        int i = cursor;</div><div class="line">        if (i &gt;= limit)</div><div class="line">            throw new NoSuchElementException();</div><div class="line">        Object[] elementData = ArrayList.this.elementData;</div><div class="line">        if (i &gt;= elementData.length)</div><div class="line">            throw new ConcurrentModificationException();</div><div class="line">        cursor = i + 1;</div><div class="line">        return (E) elementData[lastRet = i];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void remove() &#123;</div><div class="line">        if (lastRet &lt; 0)</div><div class="line">            throw new IllegalStateException();</div><div class="line">        if (modCount != expectedModCount)</div><div class="line">            throw new ConcurrentModificationException();</div><div class="line"></div><div class="line">        try &#123;</div><div class="line">            ArrayList.this.remove(lastRet);</div><div class="line">            cursor = lastRet;</div><div class="line">            lastRet = -1;</div><div class="line">            // 对 expectedModCount 重新赋值</div><div class="line">            expectedModCount = modCount;</div><div class="line">            limit--;</div><div class="line">        &#125; catch (IndexOutOfBoundsException ex) &#123;</div><div class="line">            throw new ConcurrentModificationException();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里主要说明一下迭代器的 expectedModCount 变量，它被赋予初始值 modCount，也就是 ArrayList 记录修改次数的变量。在 next() 和 remove() 都回去检查 modCount 和 expectedModCount 变量是否相等，否则就抛出 ConcurrentModificationException 异常。<br>对于这个异常我们可能并不陌生。比如下面的用法就会抛出这个异常：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Iterator iterator = list.iterator();</div><div class="line">while(iterator.hasNext())&#123;</div><div class="line">    String str = (String) iterator.next();</div><div class="line">    list.remove(str);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在上面的用法中，在使用迭代器遍历集合的时候同时调用集合的方法修改集合元素。这回导致 <code>modCount != expectedModCount</code> 不相等，从而抛出异常。<br>那么正确的做法应该要怎么样呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Iterator iterator = list.iterator();</div><div class="line">while(iterator.hasNext())&#123;</div><div class="line">    String str = (String) iterator.next();</div><div class="line">    iterator.remove(str);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为在迭代器的 remove 方法中，在调用完 ArrayList 的 remove 方法后，会重新对 expectedModCount 赋值，从而保持 expectedModCount == modCount。</p>
]]></content>
    
    <summary type="html">
    
      介绍 ArrayList 的使用和原理
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 基础 -- 算法类 Arrays 和 Collections</title>
    <link href="http://yoursite.com/2013/06/08/java-basic-arrays-collections/"/>
    <id>http://yoursite.com/2013/06/08/java-basic-arrays-collections/</id>
    <published>2013-06-08T02:00:00.000Z</published>
    <updated>2018-11-21T08:48:08.413Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>Arrays</code> 和 <code>Collections</code> 是 Java 提供的工具类，提供了一些算法类的方法，比如：排序、搜索等。它们都在 java.util.* 包下面。<code>Arrays</code> 用来操作数组，<code>Collections</code> 用来操作集合。<br>本文就对这两个类做一些介绍。</p>
<h2 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h2><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p><code>Arrays</code> 提供了两种排序的方法：</p>
<ul>
<li><code>sort(T[])：所有的对象都必须实现</code>Comparable` 接口，它用来确定对象之间的大小关系。</li>
<li><code>sort(T[], Comparator)</code>：对象不必实现 <code>Comparable</code> 接口，由 <code>Comparator</code> 来确定对象之间的大小关系。使用这种方式我们可以自定义排序的比较方式。</li>
</ul>
<p>另外在 JDK 1.8 以后还提供了并行排序：</p>
<ul>
<li><code>public static &lt;T extends Comparable&lt;? super T&gt;&gt; void parallelSort(T[] a)</code></li>
<li><code>public static &lt;T&gt; void parallelSort(T[] a, Comparator&lt;? super T&gt; cmp)</code></li>
</ul>
<p>并行排序 使用 Fork/Join 框架使排序任务可以在线程池中的多个线程中进行。当小于某个临界值时或者分块为1，其实和普通的 sort 方法一样。否则就用的是 Fork/Join。</p>
<p>先来看一个上面两个方法的应用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">int[] nums = &#123;2,6,9,4,5,0,1&#125;;</div><div class="line">Arrays.sort(nums);</div><div class="line">for(int i = 0; i &lt; nums.length; i++)</div><div class="line">System.out.println(nums[i] + &quot;,&quot;);</div></pre></td></tr></table></figure>
<p>由于 <code>Integer</code> 实现了 <code>Comparable</code> 接口，而且 <code>compareTo</code> 的实现是按照升序排列：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public int compareTo(Integer anotherInteger) &#123;</div><div class="line">    return compare(this.value, anotherInteger.value);</div><div class="line">&#125;</div><div class="line">public static int compare(int x, int y) &#123;</div><div class="line">    return (x &lt; y) ? -1 : ((x == y) ? 0 : 1);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果我们想降序排列要怎么做呢？这就需要使用 <code>Comparator</code> 来自定义了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    Integer[] nums = &#123;2,6,9,4,5,0,1&#125;;</div><div class="line">    Arrays.sort(nums, new MyComparator());</div><div class="line">    for(int i = 0; i &lt; nums.length; i++)</div><div class="line">    System.out.println(nums[i] + &quot;,&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static class MyComparator implements Comparator&lt;Integer&gt; &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int compare(Integer t1, Integer t2) &#123;</div><div class="line">        return (t1 &lt; t2) ? 1 : ((t1 == t2) ? 0 : -1);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再来介绍一下排序所用的算法。<br>其实 <code>Collections</code> 的排序算法最后调用的也是 <code>Arrays.sort</code> 方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public static &lt;T&gt; void sort(T[] a, Comparator&lt;? super T&gt; c) &#123;</div><div class="line">    if (c == null) &#123;</div><div class="line">        sort(a);</div><div class="line">    &#125; else &#123;</div><div class="line">        if (LegacyMergeSort.userRequested)</div><div class="line">            legacyMergeSort(a, c);</div><div class="line">        else</div><div class="line">            TimSort.sort(a, 0, a.length, c, null, 0, 0);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在不指定 <code>Comparator</code> 情况下，用的是 <code>DualPivotQuicksort</code>（快速排序） 和 <code>ComparableTimSort</code>（归并排序升级版，结合了合并排序和插入排序算法）。<br>在指定 <code>Comparator</code> 情况下一般用的是 <code>TimSort</code>，<code>legacyMergeSort</code> 基本已经废弃不用。<code>TimSort</code> 和 <code>ComparableTimSort</code> 的区别是 <code>ComparableTimSort</code> 需要对象是 <code>Comparable</code> 可比较的，不需要特定 <code>Comparator</code> ，而 <code>TimSort</code> 利用提供的 <code>Comparator</code> 进行排序。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li><code>binarySearch</code>：搜索，采用二分法查找数组中的数据对应的索引。</li>
<li><code>copyOf</code>：复制。</li>
<li><code>equals</code>：判断两个数组是否相等。</li>
<li><code>fill</code>：填充</li>
<li><code>hashCode</code>：返回数组的内容的哈希码。</li>
<li><code>toString</code>：数组转为字符串</li>
<li><code>stream</code>：数组转为流</li>
</ul>
<h2 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h2><h3 id="排序-1"><a href="#排序-1" class="headerlink" title="排序"></a>排序</h3><ul>
<li><code>public static &lt;T extends Comparable&lt;? super T&gt;&gt; void sort(List&lt;T&gt; list)</code></li>
<li><code>public static &lt;T&gt; void sort(List&lt;T&gt; list, Comparator&lt;? super T&gt; c)</code></li>
</ul>
<h3 id="返回线程安全的集合"><a href="#返回线程安全的集合" class="headerlink" title="返回线程安全的集合"></a>返回线程安全的集合</h3><ul>
<li><code>synchronizedCollection(Collection&lt;T&gt; c)</code></li>
<li><code>synchronizedCollection(Collection&lt;T&gt; c, Object mutex)</code></li>
<li><code>synchronizedList(List&lt;T&gt; list)</code></li>
<li><code>synchronizedList(List&lt;T&gt; list, Object mutex)</code></li>
<li><code>synchronizedMap(Map&lt;K,V&gt; m)</code>：返回一个线程安全的 SynchronizedMap 类，但是同样是线程安全的 ConcurrentHashMap 类性能优于  SynchronizedMap。</li>
<li><code>synchronizedSet(Set&lt;T&gt; s)</code></li>
<li><code>synchronizedSet(Set&lt;T&gt; s, Object mutex)</code></li>
<li><code>synchronizedSortedMap(SortedMap&lt;K,V&gt; m)</code></li>
<li><code>synchronizedSortedSet(SortedSet&lt;T&gt; s)</code></li>
</ul>
<p>部分方法对应一个可以设置同步对象锁的重载方法。</p>
<h3 id="返回只读的集合"><a href="#返回只读的集合" class="headerlink" title="返回只读的集合"></a>返回只读的集合</h3><ul>
<li><code>unmodifiableCollection(Collection&lt;? extends T&gt; c)</code></li>
<li><code>unmodifiableList(List&lt;? extends T&gt; list)</code></li>
<li><code>unmodifiableMap(Map&lt;? extends K, ? extends V&gt; m)</code></li>
<li><code>unmodifiableSet(Set&lt;? extends T&gt; s)</code></li>
<li><code>unmodifiableSortedMap(SortedMap&lt;K, ? extends V&gt; m)</code></li>
<li><code>unmodifiableSortedSet(SortedSet&lt;T&gt; s)</code></li>
</ul>
]]></content>
    
    <summary type="html">
    
      简单介绍算法类 Arrays 和 Collections 的使用
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="String" scheme="http://yoursite.com/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>Java 基础 -- 集合的使用</title>
    <link href="http://yoursite.com/2013/06/06/java-basic-map-collection/"/>
    <id>http://yoursite.com/2013/06/06/java-basic-map-collection/</id>
    <published>2013-06-06T02:00:00.000Z</published>
    <updated>2019-03-14T07:27:52.849Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Java 开发过程中，集合类是我们经常要接触和使用的类，从本文开始，将用一系列的文章来对这个知识点进行梳理和总结。<br>本文先对 Java 集合相关知识做一个概括性的描述，后面会有一系列的文章再细分介绍集合框架。<br>下面先来看一下 Java 集合框架的类图。</p>
<p><img src="http://www.plantuml.com/plantuml/svg/XLCnRzHW3DtpAwBkxIzWAA83e8A4heBPpHc8BfTSly-fT89EI1KZ0mYXIaXiJ30WCVRVt07_WZh-Wcrz3JUqb_VivpnRBuUH852_R8gJcXeiznx2EPH_hYutxzvklrnkF__SN5tl5KKBIumhgB3yzUtZziU7ybLHDH1ZUJS4MCS4xdLDWnNLNHkB2olQVd__-_hDvjFNfEFMvGe2d3Re2Ug2bpw2rOseRWd3yuGDcdM1SEwvnt1Ul-39JCDff00LbSbkWhUKZkh1EOHrSdGVualk4_GCOU6PuxfTuDnpZCXizM2EBTMq7hiIVH8G1yZRtNbzSE2CwJCNz_UJaxpWJCcl5BmtVOlQqsrBKMY9kuNJwygJLkoDSrlZUhPB34WbbsI7SXdGN6aK76t8upgI3GXQzAJ77Wq-mZE7PKsdqLMPdeYJEfdgO5jJjVyC5iEJkhEUhmRDCDr4a2TgqXHfB9HxYXLr8O4PGRMmdpPFTc9vLQ4RZu6Bb95y_PoKdPJs7u3oHKv9-lnH-L_fPWXlWShok-r-3MznyoVliEImYVHAadQE6XIYqt5Qc66oQfBuxocDye4qTlGxlhKm9i7AnSDOOQawy5d9hpa69w-OvEGdrpQJ9nabj4JmeZZ4Tjulcxy0" alt="效果图"></p>
<p>整个集合框架就围绕一组标准接口而设计。你可以直接使用这些接口的标准实现，诸如： <code>LinkedList</code>、<code>HashSet</code>和 <code>TreeSet</code> 等,除此之外你也可以通过这些接口实现自己的集合，比如通过实现 <code>List</code> 接口来实现线程安全的 <code>CopyOnWriteArrayList</code> 类等。<br>上面图中的类都在 java.util.<em> 包下面，本文也只介绍这个包下面的类，其他比如 java.util.concurrent.</em> 包的类将放在另外的文章中介绍。</p>
<h2 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h2><p>Java 集合框架的容器类可以主要分为两种外加一种算法类：</p>
<ul>
<li>集合（Collection）：存储一个元素集合。</li>
<li>图（Map）：存储键/值对映射。</li>
<li>算法类：Arrays、Collections。它们实现集合接口的对象里的方法执行的一些有用的计算，例如：搜索和排序。</li>
</ul>
<p>从另外一个维度分，又可以分为：</p>
<ul>
<li>接口：Map、SortedMap、Collection、List、Queue、Set</li>
<li>抽象类：AbstractMap、AbstrCollection、AbstrList等</li>
<li>具体类：HashMap、TreeMap、Vector、ArrayList等</li>
<li>算法类：Arrays、Collections</li>
</ul>
<h2 id="特点介绍"><a href="#特点介绍" class="headerlink" title="特点介绍"></a>特点介绍</h2><p>ArrayList适合于进行大量的随机访问的情况下使用，LinkedList适合在表中进行插入、删除时使用，二者都是非线程安全。</p>
<p>Vector 是线程安全的，它是 ArrayList 的多线程版本。<br>Vector 内部是通过使用 <code>synchronized</code> 方法来保证线程安全的，相对于 <code>CopyOnWriteArrayList</code> 来说性能较低。<br>HashTable 是线程安全的，它是 HashMap 的多线程版本。<code>HashTable</code> 内部是通过使用 <code>synchronized</code> 方法来保证线程安全的，但在线程竞争激烈的情况下它的效率就比较低。这时可以考虑使用 <code>ConcurrentHashMap</code>，这个后面会介绍。<br>HashTable 即不支持 null key也不支持null value。HashMap 中null可以作为key，这样的key只有一个，可以有一个或者多个value所对应的key为null。<br>HashMap 非线程安全，底层主要是基于数组和链表来实现的，它之所以有相当快的查询速度主要是因为它是通过计算散列码来决定存储的位置。适用于在Map中插入、删除和定位元素。</p>
<p>Colleciton 用于存放多个单对象，Map 用于存放 Key-Value 形式的键值对。</p>
<p>Set 和 List 都继承自 Collection 接口。它们最大的最大区别就是 Set 中的元素不可以重复，List 中允许重复元素。<br>Map中不允许出现重复的键（Key）。</p>
<p>WeakHashMap，直接使用 HashMap 有时候会带来内存溢出的风险，使用 WaekHashMap 实例化 Map。当使用者不再有对象引用的时候，WeakHashMap 将自动被移除对应 Key 值的对象。</p>
<p>TreeMap 非线程安全，底层通过红黑树（Red-Black tree）实现，也就意味着 <code>containsKey()</code>，<code>get()</code>, <code>put()</code>, <code>remove()</code> 都有着 log(n) 的时间复杂度。TreeMap 是自动实现排序的，按照key的字典顺序来排序（升序）或者自定义的 Comparator 接口来排序。在需要使用排序的 Map 时推荐使用 TreeMap。</p>
<p>Deque 是双端队列，你可以从任意一端插入或者抽取元素。</p>
<h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><ul>
<li>iterator() 是 Collection 接口的方法；listIterator() 是 List 接口的方法；</li>
<li>listIterator 有add()方法，可以向List中添加对象；而 iterator 不能；</li>
<li>listIterator 和 iterator 都有hasNext()和next()方法，可以实现顺序向后遍历；但是 listIterator 有hasPrevious()和previous()方法，可以实现逆向（顺序向前）遍历；iterator 就不可以；</li>
<li>listIterator 可以定位当前的索引位置，nextIndex()和previousIndex()可以实现；iterator 没有此功能；</li>
<li>都可实现删除对象，但是 listIterator 可以实现对象的修改，set()方法可以实现；iterator 仅能遍历，不能修改；</li>
</ul>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://www.runoob.com/java/java-collections.html" target="_blank" rel="external">http://www.runoob.com/java/java-collections.html</a><br><a href="http://www.runoob.com/java/java-vector-class.html" target="_blank" rel="external">http://www.runoob.com/java/java-vector-class.html</a></p>
<!-- plantuml 代码 -->
<!--  

@startuml
Title "Java 集合框架图"

namespace 算法 {
class Arrays
class Collections
}

namespace 比较器 {
class Comparable
class Comparator
}

namespace Map {
interface Map
interface SortedMap
interface NavigableMap
abstract class AbstractMap
abstract class Dictionary
class HashMap
class WeakHashMap
class LinkedHashMap
class Hashtable
class IdentityHashMap

class TreeMap

Map <|.. AbstractMap
AbstractMap <|-- HashMap
AbstractMap <|-- WeakHashMap
HashMap <|-- LinkedHashMap
Map <|.. Hashtable
Dictionary  <|-- Hashtable
Map  <|-- SortedMap
SortedMap  <|-- NavigableMap
AbstractMap <|-- TreeMap
NavigableMap <|.. TreeMap
AbstractMap <|-- IdentityHashMap
}

namespace Collection {
interface Collection
interface List
interface Set
interface Queue
interface Deque
interface SortedSet
interface NavigableSet
abstract class AbstractCollection
abstract class AbstractList
abstract class AbstractSet
abstract class AbstractQueue
abstract class AbstractSequentialList

class HashSet
class TreeSet
class LinkedHashSet
class Vector
class Stack
class ArrayList
class LinkedList


Collection <|-- List
Collection <|--  Set
Collection <|--  Queue
Collection <|.. AbstractCollection
AbstractCollection  <|-- AbstractList
List  <|.. AbstractList
AbstractList <|-- AbstractSequentialList
AbstractCollection  <|-- AbstractSet
Set <|.. AbstractSet
Queue <|-- Deque
AbstractCollection  <|-- AbstractQueue
Queue <|.. AbstractQueue
Set <|--  SortedSet
SortedSet  <|--  NavigableSet
AbstractSet <|-- HashSet
AbstractSet <|-- TreeSet
NavigableSet <|.. TreeSet
HashSet <|--  LinkedHashSet
AbstractList <|--  Vector
AbstractList <|--  ArrayList
AbstractSequentialList <|-- LinkedList
Vector <|-- Stack
}
@enduml

-->
]]></content>
    
    <summary type="html">
    
      简单介绍集合的使用
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="String" scheme="http://yoursite.com/tags/String/"/>
    
  </entry>
  
</feed>
