<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>孤舟蓑笠翁，独钓寒江雪</title>
  <subtitle>程序猿的世界</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-11T13:47:48.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>寒江蓑笠</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android Architecture Components -- Room</title>
    <link href="http://yoursite.com/2017/12/02/android-architecture-components-room/"/>
    <id>http://yoursite.com/2017/12/02/android-architecture-components-room/</id>
    <published>2017-12-02T02:00:00.000Z</published>
    <updated>2018-03-11T13:47:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><a href="https://developer.android.com/training/data-storage/room/index.html" target="_blank" rel="external">官方文档</a><br>首先来介绍一下 Google 推出的 Android 架构组件（Architecture Components），测试版组件 Google 2017 IO 大会上发布，1.0 稳定版已经于2017年11月07正式推出。为 App 开发构架提供指南，并为常见任务，如生命周期管理、数据持久性等提供了一系列库。有了这些基础组件的帮助，开发者能够使用更少的样板代码写出模块化 App，将精力用于创新而非重复体力劳动。</p>
<p>Room 相当于一个 ORM 框架，使用他能帮助程序员方便快捷地实现数据存储功能。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="组件介绍"><a href="#组件介绍" class="headerlink" title="组件介绍"></a>组件介绍</h3><ul>
<li>数据库（Database）：你可以使用该组件创建数据库的持有者。该注解定义了实体列表，该类的内容定义了数据库中的 DAO 列表。这也是访问底层连接的主要入口点。注解类应该是抽象的并且扩展自 <code>RoomDatabase</code>。在运行时，你可以通过调用 <code>Room.databaseBuilder()</code> 或者 <code>Room.inMemoryDatabaseBuilder()</code> 获取实例。</li>
<li>实体（Entity）：这个组件代表了持有数据库表记录的类。对每种实体来说，创建了一个数据库表来持有所有项。你必须通过 Database中 的 <code>entities</code> 数组来引用实体类。实体的每个成员变量都被持久化在数据库中，除非你注解其为 <code>@Ignore</code>。</li>
<li>数据访问对象（DAO）：这个组件代表了作为 DAO 的类或者接口。DAO 是 Room 的主要组件，负责定义访问数据库的方法。被注解 <code>@Database</code> 的类必须包含一个无参数的抽象方法并返回被 <code>@Dao</code> 注解的类型。当编译时生成代码时，Room 会创建该类的实现。</li>
</ul>
<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>在 build.gradle 中添加一下依赖：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">        maven &#123; url &apos;https://maven.google.com&apos; &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    implementation &quot;android.arch.persistence.room:runtime:1.0.0&quot;</div><div class="line">    annotationProcessor &quot;android.arch.persistence.room:compiler:1.0.0&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@Database(entities = &#123;User.class&#125;, version = 1, exportSchema = false)</div><div class="line">public abstract class AppDatabase extends RoomDatabase &#123;</div><div class="line">    public abstract UserDao userDao();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">@Entity(tableName = &quot;user&quot;)</div><div class="line">public class User &#123;</div><div class="line">    @PrimaryKey</div><div class="line">    private int uid;</div><div class="line">    @ColumnInfo(name = &quot;first_name&quot;)</div><div class="line">    private String firstName;</div><div class="line">    @ColumnInfo(name = &quot;last_name&quot;)</div><div class="line">    private String lastName;</div><div class="line">    @Ignore</div><div class="line">    Bitmap picture;//不进行持久化</div><div class="line"></div><div class="line">    public int getUid() &#123;</div><div class="line">        return uid;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setUid(int uid) &#123;</div><div class="line">        this.uid = uid;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getFirstName() &#123;</div><div class="line">        return firstName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setFirstName(String firstName) &#123;</div><div class="line">        this.firstName = firstName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getLastName() &#123;</div><div class="line">        return lastName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setLastName(String lastName) &#123;</div><div class="line">        this.lastName = lastName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Bitmap getPicture() &#123;</div><div class="line">        return picture;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setPicture(Bitmap picture) &#123;</div><div class="line">        this.picture = picture;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当一个类被 <code>@Entity</code> 注解，并被 <code>@Database</code> 注解的 <code>entities</code> 属性引用时，Room 为这个实体在数据库中创建一个表。<br>默认情况，Room 为实体类的每个成员变量创建一个列。如果一个实体类的某个成员变量不想被持久化，你可以使用 <code>Ignore</code> 注解标记。<br>为了持久化成员变量，Room 必须可以访问它。你可以使成员变量是公共的，或者提供 <code>getter和setter</code> 方法。如果你使用 <code>getter/setter</code> 方法，请记住它们在 Room 中遵循 Java Beans 的概念。<br>默认情况下，Room 使用类名作为数据库表的表名。如果你想要数据库表有一个其他的名字，设置 <code>@Entity</code> 注解的 <code>tableName</code> 属性即可。<br>注意：SQLite中的表名是大小写敏感的。<br>和 <code>tablename</code> 属性相似，Room 使用成员名作为列名，如果你想要改变类名，在成员上添加 <code>@ColumnInfo</code> 注解并设置 <code>name</code> 即可。</p>
<h3 id="数据访问对象"><a href="#数据访问对象" class="headerlink" title="数据访问对象"></a>数据访问对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">@Dao</div><div class="line">public interface UserDao &#123;</div><div class="line">    @Query(&quot;SELECT * FROM user&quot;)</div><div class="line">    List&lt;User&gt; getAll();</div><div class="line"></div><div class="line">    @Query(&quot;SELECT * FROM user WHERE uid IN (:userIds)&quot;)</div><div class="line">    List&lt;User&gt; loadAllByIds(int[] userIds);</div><div class="line"></div><div class="line">    @Query(&quot;SELECT * FROM user WHERE first_name LIKE :first AND &quot;</div><div class="line">            + &quot;last_name LIKE :last LIMIT 1&quot;)</div><div class="line">    User findByName(String first, String last);</div><div class="line"></div><div class="line">    @Insert</div><div class="line">    void insertAll(User... users);</div><div class="line"></div><div class="line">    @Delete</div><div class="line">    void delete(User ... user);</div><div class="line"></div><div class="line">    @Update</div><div class="line">    void update(User... user);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public DBManager(Context context) &#123;</div><div class="line">    mDatabase = Room.databaseBuilder(context.getApplicationContext(),</div><div class="line">            AppDatabase.class, &quot;users&quot;).build();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译过程中如果出现下面的警告：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Error:(11, 17) 警告: Schema export directory is not provided to the annotation processor so we cannot export the schema. You can either provide `room.schemaLocation` annotation processor argument OR set exportSchema to false.</div></pre></td></tr></table></figure>
<p>解决办法：<br>在 <code>AppDatabase</code> 中添加 <code>exportSchema = false</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@Database(entities = &#123;User.class&#125;, version = 1, exportSchema = false)</div><div class="line">public abstract class AppDatabase extends RoomDatabase &#123;</div><div class="line">    public abstract UserDao userDao();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="数据库升级"><a href="#数据库升级" class="headerlink" title="数据库升级"></a>数据库升级</h3><p>比如我们想在数据库中新加一个字段：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class User &#123;</div><div class="line">    ...</div><div class="line">    @ColumnInfo(name = &quot;is_male&quot;)</div><div class="line">    private boolean isMale;</div><div class="line"></div><div class="line">    private String address;</div><div class="line">    ...</div><div class="line"></div><div class="line">    public boolean isMale() &#123;</div><div class="line">        return isMale;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setMale(boolean male) &#123;</div><div class="line">        isMale = male;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getAddress() &#123;</div><div class="line">        return address;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setAddress(String address) &#123;</div><div class="line">        this.address = address;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Room允许你编写 <code>Migration</code> 类来保护用户数据。每个 <code>Migration</code> 类指定一个 startVersion 和 endVersion。在运行时，Room 运行每个 <code>Migration</code> 类的 <code>migrate()</code> 方法，使用正确的顺序迁移至数据库的更新版本。<br>然后在创建数据库的时候使用 <code>addMigrations()</code> 方法：<br><code>AppDatabase</code> 中的 <code>version</code> 必须增加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@Database(entities = &#123;User.class&#125;, version = 3, exportSchema = false)</div><div class="line">public abstract class AppDatabase extends RoomDatabase &#123;</div><div class="line">    public abstract UserDao userDao();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>否则会报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">E AndroidRuntime: java.lang.IllegalStateException: Room cannot verify the data integrity. Looks like you&apos;ve changed schema but forgot to update the version number. You can simply fix this by increasing the version number.</div><div class="line">E AndroidRuntime: 	at android.arch.persistence.room.RoomOpenHelper.checkIdentity(RoomOpenHelper.java:119)</div><div class="line">E AndroidRuntime: 	at android.arch.persistence.room.RoomOpenHelper.onOpen(RoomOpenHelper.java:100)</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public DBManager(Context context) &#123;</div><div class="line">    mDatabase = Room.databaseBuilder(context.getApplicationContext(),</div><div class="line">            AppDatabase.class, &quot;users&quot;).addMigrations(MIGRATION_1_2,  MIGRATION_2_3).build();</div><div class="line">&#125;</div><div class="line"></div><div class="line">static final Migration MIGRATION_1_2 = new Migration(1, 2) &#123;</div><div class="line">    @Override</div><div class="line">    public void migrate(SupportSQLiteDatabase database) &#123;</div><div class="line">        database.execSQL(&quot;ALTER TABLE user ADD is_male INTEGER NOT NULL DEFAULT 0&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">static final Migration MIGRATION_2_3 = new Migration(2, 3) &#123;</div><div class="line">    @Override</div><div class="line">    public void migrate(SupportSQLiteDatabase database) &#123;</div><div class="line">        database.execSQL(&quot;ALTER TABLE user ADD address TEXT&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这里添加 <code>boolean</code> 型的字段，SQL 语句必须设置为 <code>NOT NULL</code>，而且要设置默认值，否则会报错。</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.jianshu.com/p/587f48dccf0a" target="_blank" rel="external">http://www.jianshu.com/p/587f48dccf0a</a><br><a href="https://developer.android.com/topic/libraries/architecture/room.html" target="_blank" rel="external">https://developer.android.com/topic/libraries/architecture/room.html</a></p>
]]></content>
    
    <summary type="html">
    
      本文介绍 Android 数据库架构组件 Room 的基本使用
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Architecture Components" scheme="http://yoursite.com/tags/Architecture-Components/"/>
    
      <category term="Room" scheme="http://yoursite.com/tags/Room/"/>
    
  </entry>
  
  <entry>
    <title>Retrofit 2 使用指南</title>
    <link href="http://yoursite.com/2017/10/22/open-source-retrofit-guide/"/>
    <id>http://yoursite.com/2017/10/22/open-source-retrofit-guide/</id>
    <published>2017-10-22T02:00:00.000Z</published>
    <updated>2018-03-11T13:47:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Retrofit 是 Squareup 公司开源的网络请求框架，它其实是对 OkHttp 的一层封装，使用面向接口的方式进行网络请求，利用动态生成的代理类封装了网络接口请求的底层，并且提供了对 RxJava 的支持。<br>写这篇文章的时候，Retrofit 已经发布 2.3.0 了，本文就以此版本来介绍。<br><a href="https://github.com/square/retrofit" target="_blank" rel="external">GitHub 地址</a></p>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>添加依赖：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">compile &apos;com.squareup.retrofit2:retrofit:2.3.0&apos;</div><div class="line">compile &apos;com.squareup.retrofit2:converter-gson:2.3.0&apos;</div><div class="line">compile &apos;com.squareup.retrofit2:adapter-rxjava2:2.3.0&apos;</div></pre></td></tr></table></figure>
<p>注意 <code>compile &#39;com.squareup.retrofit2:adapter-rxjava2:2.3.0&#39;</code> 是添加了对RxJava2的支持，一定要注意RxJava的版本对应问题，否则会报错：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">Caused by: java.lang.IllegalArgumentException: Unable to create call adapter for io.reactivex.Observable&lt;com.example.heqiang.testsomething.testretrofit.TestRetrofit$TestBean&gt;</div><div class="line">   for method MyService.getDataRx</div><div class="line">   at retrofit2.ServiceMethod$Builder.methodError(ServiceMethod.java:752)</div><div class="line">   at retrofit2.ServiceMethod$Builder.createCallAdapter(ServiceMethod.java:237)</div><div class="line">   at retrofit2.ServiceMethod$Builder.build(ServiceMethod.java:162)</div><div class="line">   at retrofit2.Retrofit.loadServiceMethod(Retrofit.java:170)</div><div class="line">   at retrofit2.Retrofit$1.invoke(Retrofit.java:147)</div><div class="line">   at java.lang.reflect.Proxy.invoke(Proxy.java:393)</div><div class="line">   at $Proxy0.getDataRx(Unknown Source)</div><div class="line">   at com.example.heqiang.testsomething.testretrofit.TestRetrofit.getDataRx(TestRetrofit.java:68)</div><div class="line">   at com.example.heqiang.testsomething.rxjava.RxJavaActivity.testRetrofitRx(RxJavaActivity.java:105)</div><div class="line">   	... 11 more</div><div class="line">Caused by: java.lang.IllegalArgumentException: Could not locate call adapter for io.reactivex.Observable&lt;com.example.heqiang.testsomething.testretrofit.TestRetrofit$TestBean&gt;.</div><div class="line"> Tried:</div><div class="line">  * retrofit2.adapter.rxjava.RxJavaCallAdapterFactory</div><div class="line">  * retrofit2.ExecutorCallAdapterFactory</div><div class="line">   at retrofit2.Retrofit.nextCallAdapter(Retrofit.java:241)</div><div class="line">   at retrofit2.Retrofit.callAdapter(Retrofit.java:205)</div><div class="line">   at retrofit2.ServiceMethod$Builder.createCallAdapter(ServiceMethod.java:235)</div></pre></td></tr></table></figure>
<p>先上代码：</p>
<p>MyService.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyService</span> </span>&#123;</div><div class="line">    <span class="meta">@GET</span>(<span class="string">"hq/urls"</span>)</div><div class="line">    Call&lt;TestRetrofit.TestBean&gt; getData();</div><div class="line">    <span class="comment">// 支持RxJava</span></div><div class="line">    <span class="meta">@GET</span>(<span class="string">"hq/urls"</span>)</div><div class="line">    Observable&lt;TestRetrofit.TestBean&gt; getDataRx();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>TestRetrofit.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRetrofit</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> MyService mMyService;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestRetrofit</span><span class="params">(Context context)</span></span>&#123;</div><div class="line"></div><div class="line">        Cache cache = <span class="keyword">new</span> Cache(<span class="keyword">new</span> File(context.getExternalCacheDir(),<span class="string">"test"</span>),<span class="number">100</span>*<span class="number">1024</span>*<span class="number">1024</span>);</div><div class="line">        Log.e(<span class="string">"Test"</span>, <span class="string">"cache dir = "</span> + context.getExternalCacheDir());</div><div class="line">        OkHttpClient client = <span class="keyword">new</span> OkHttpClient.Builder()</div><div class="line">                .retryOnConnectionFailure(<span class="keyword">true</span>)</div><div class="line">                .connectTimeout(<span class="number">20</span>, TimeUnit.SECONDS)</div><div class="line">                .cache(cache)</div><div class="line">                .build();</div><div class="line"></div><div class="line">        Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">                <span class="comment">//这里如果不指定client，那么会生成一个默认的OkHttpClient</span></div><div class="line">                .client(client)</div><div class="line">                .baseUrl(<span class="string">"http://*.*.*.*/"</span>)</div><div class="line">                .addConverterFactory(GsonConverterFactory.create())</div><div class="line">                <span class="comment">//加入对RxJava2的支持</span></div><div class="line">                <span class="comment">//.addCallAdapterFactory(RxJava2CallAdapterFactory.create())</span></div><div class="line">                .build();</div><div class="line">        mMyService = retrofit.create(MyService.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getData</span><span class="params">()</span></span>&#123;</div><div class="line">        Call&lt;TestBean&gt; call = mMyService.getData();</div><div class="line">        call.enqueue(<span class="keyword">new</span> Callback&lt;TestBean&gt;() &#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call&lt;TestBean&gt; call, Response&lt;TestBean&gt; response)</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"Test"</span>,<span class="string">"onResponse = "</span>+response.body().toString());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call&lt;TestBean&gt; call, Throwable t)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBean</span></span>&#123;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">int</span>  code;</div><div class="line">        <span class="keyword">public</span> String message;</div><div class="line">        <span class="keyword">public</span> String redirect;</div><div class="line">        <span class="keyword">public</span> ArrayList&lt;String&gt; value;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"code = "</span>+code+<span class="string">", message = "</span>+message+<span class="string">",redirect = "</span>+ redirect+<span class="string">", value="</span>+value.toString();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="结合RxJava"><a href="#结合RxJava" class="headerlink" title="结合RxJava"></a>结合RxJava</h2><p>在上面的代码中去掉 <code>addCallAdapterFactory(RxJava2CallAdapterFactory.create())</code> 的注释，再加上定义的 <code>Observable&lt;TestRetrofit.TestBean&gt; getDataRx()</code> 方法，就添加了对 RxJava2 的支持。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getDataRx</span><span class="params">()</span></span>&#123;</div><div class="line">    mMyService.getDataRx().subscribeOn(Schedulers.io())</div><div class="line">            .observeOn(AndroidSchedulers.mainThread())</div><div class="line">            .subscribe(<span class="keyword">new</span> Observer&lt;TestBean&gt;() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">                    Log.e(<span class="string">"Test"</span>,<span class="string">"onError"</span>);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(@NonNull Disposable d)</span> </span>&#123;</div><div class="line"></div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(TestBean testBean)</span> </span>&#123;</div><div class="line">                    Log.e(<span class="string">"Test"</span>,<span class="string">"onNext = "</span>+testBean.toString());</div><div class="line">                &#125;</div><div class="line">            &#125;);</div></pre></td></tr></table></figure>
<h2 id="CallAdapter"><a href="#CallAdapter" class="headerlink" title="CallAdapter"></a>CallAdapter</h2><p><code>CallAdapter</code> 其实就是对 <code>Call</code> 的转换，上面的对 RxJava 支持时用到的 <code>RxJava2CallAdapterFactory</code> 其实就是 <code>CallAdapter.Factory</code> 的子类，当然我们也可以自定义实现一个 <code>CallAdapter</code>。</p>
<h2 id="Converter"><a href="#Converter" class="headerlink" title="Converter"></a>Converter</h2><p>在默认情况下 Retrofit 只支持将 HTTP 的响应体转换换为 <code>ResponseBody</code>，那么接口的返回值都是 <code>Call&lt;ResponseBody&gt;</code>，如果我们需要把 <code>ResponseBody</code> 转换成我们需要的类型就需要 <code>Converter</code>。<br><code>Converter</code> 就是对数据的转换，代码中 <code>addConverterFactory(GsonConverterFactory.create())</code> 就是指定了 Gson 将 <code>ResponseBody</code>转换我们想要的类型。<br>显然我们也可以自定义一个 <code>Converter</code>。</p>
<h2 id="注解的使用"><a href="#注解的使用" class="headerlink" title="注解的使用"></a>注解的使用</h2><h3 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h3><ul>
<li>GET</li>
<li>POST</li>
<li>PUT</li>
<li>DELETE</li>
<li>PATCH</li>
<li>HEAD</li>
<li>OPTIONS</li>
<li>HTTP</li>
</ul>
<p>前面 6 种都是HTTP协议请求方式，使用方法和前面例子中的类似，都接受一个字符串来和 BaseUrl 组成请求Url。<br>HTTP 方式是对上面 6 中的扩展，用法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@HTTP</span>(method = <span class="string">"GET"</span>, path = <span class="string">"blog"</span>, hasBody = <span class="keyword">false</span>)</div><div class="line"><span class="function">Call&lt;ResponseBody&gt; <span class="title">getBlog</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<h3 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h3><ul>
<li>Path</li>
<li>Query</li>
<li>QueryMap</li>
</ul>
<p>上面三种都是一个完整Url的组成部分，Path 用在 Url 的 path 部分，Query 和 QueryMap 用在参数部分，也就是Url中的 ? 后面的部分。QueryMap 相当于多个 Query。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"day/&#123;year&#125;/&#123;month&#125;/&#123;day&#125;"</span>)</div><div class="line"><span class="function">Observable&lt;DailyDataResponse&gt; <span class="title">getDailyData</span><span class="params">(</span></span></div><div class="line">        @Path(<span class="string">"year"</span>) <span class="keyword">int</span> year,@<span class="title">Path</span><span class="params">(<span class="string">"month"</span>)</span> <span class="keyword">int</span> month,@<span class="title">Path</span><span class="params">(<span class="string">"day"</span>)</span> <span class="keyword">int</span> day);</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"day"</span>)</div><div class="line"><span class="function">Call&lt;Response&gt; <span class="title">getDailyData</span><span class="params">(</span></span></div><div class="line">        @Query(<span class="string">"year"</span>) <span class="keyword">int</span> year,@<span class="title">Query</span><span class="params">(<span class="string">"month"</span>)</span> <span class="keyword">int</span> month,@<span class="title">Query</span><span class="params">(<span class="string">"day"</span>)</span> <span class="keyword">int</span> day);</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"day"</span>)</div><div class="line"><span class="function">Call&lt;Response&gt; <span class="title">getDailyData</span><span class="params">(</span></span></div><div class="line">        @QueryMap Map&lt;String, Integer&gt; map);</div></pre></td></tr></table></figure>
<ul>
<li>Field ：POST请求，提交单个数据</li>
<li>Body：POST请求，相当于多个@Field，以对象的形式提交</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FormUrlEncoded</span></div><div class="line"><span class="meta">@POST</span>(<span class="string">"add2gank"</span>)</div><div class="line"><span class="function">Observable&lt;AddToGankResponse&gt; <span class="title">add2Gank</span><span class="params">(@Field(<span class="string">"url"</span>)</span> String url, @<span class="title">Field</span><span class="params">(<span class="string">"desc"</span>)</span> String desc, @<span class="title">Field</span><span class="params">(<span class="string">"who"</span>)</span> String who,</span></div><div class="line">                            @<span class="title">Field</span><span class="params">(<span class="string">"type"</span>)</span> String type,@<span class="title">Field</span><span class="params">(<span class="string">"debug"</span>)</span> <span class="keyword">boolean</span> debug);</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@POST</span>(<span class="string">"add2gank"</span>)</div><div class="line"><span class="function">Call&lt;Response&gt; <span class="title">add2Gank</span><span class="params">(@Body ExtrasBean bean)</span></span>;</div></pre></td></tr></table></figure>
<h3 id="动态Url"><a href="#动态Url" class="headerlink" title="动态Url"></a>动态Url</h3><p>前面的使用都是基于BaseUrl的，如果我们想请求不同Url时只能重新生成一个 Retrofit 实例，实际上我们还可以通过 <code>@Url</code> 来操作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span></div><div class="line"><span class="function"><span class="keyword">public</span> Call&lt;ResponseBody&gt; <span class="title">getImage</span><span class="params">(@Url String url)</span></span>;</div></pre></td></tr></table></figure>
<p>如果参数指定的 url 是一个以 <code>http</code> 开头的 url，那么就完全使用这个url，和前面指定的 BaseUrl 完全没有联系，如果 url 指定的只有类似 <code>/id/name</code> 的path，而没有指定 scheme 和 host，那么它就会用 BaseUrl 的 scheme 和 host。<br><strong> <font color="#ff0000">这里注意</font> </strong>：只是用 BaseUrl 的 scheme 和 host，如果 BaseUrl 是 <a href="http://www.test.com/v/" target="_blank" rel="external">http://www.test.com/v/</a> ，那么还是会把 path 中的 v  去掉，组成 <a href="http://www.test.com/id/name" target="_blank" rel="external">http://www.test.com/id/name</a> 。</p>
<!--  
http://www.jianshu.com/p/308f3c54abdd
-->
]]></content>
    
    <summary type="html">
    
      介绍 Retrofit 2 的一些基本用法
    
    </summary>
    
      <category term="Android开源项目" scheme="http://yoursite.com/categories/Android%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Android开源项目" scheme="http://yoursite.com/tags/Android%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="Retrofit" scheme="http://yoursite.com/tags/Retrofit/"/>
    
  </entry>
  
  <entry>
    <title>RxJava 使用指南（二）-- Flowable 和 Subscriber</title>
    <link href="http://yoursite.com/2017/10/14/open-source-rxjava-guide-flowable/"/>
    <id>http://yoursite.com/2017/10/14/open-source-rxjava-guide-flowable/</id>
    <published>2017-10-14T02:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>前面文章已经介绍过，Flowable/Subscriber 也是一对观察者模式的组合，和 Observable/Observer 的区别是 Flowable/Subscriber 是支持背压的，背压是个什么呢？</p>
<h2 id="Backpressure（背压）"><a href="#Backpressure（背压）" class="headerlink" title="Backpressure（背压）"></a>Backpressure（背压）</h2><p>背压是指在异步场景中，被观察者发送事件速度远快于观察者的处理速度的情况下，一种告诉上游的被观察者降低发送速度的策略。<br>在 Observable/Observer 组合的使用中是不支持背压的，下面通过一个例子来看一下这种场景：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(@NonNull ObservableEmitter&lt;Integer&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(i &lt; Long.MAX_VALUE)&#123;</div><div class="line">            e.onNext(i);</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;).subscribeOn(Schedulers.newThread())</div><div class="line">        .observeOn(Schedulers.newThread())</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Thread.sleep(<span class="number">1000</span>);</div><div class="line">                Log.e(<span class="string">"Test"</span>,<span class="string">"i = "</span>+integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>这里上游数据发射和下游的数据处理在各自的独立线程中执行，如果在同一个线程中不存在背压的情形。下游对数据的处理会堵塞上游数据的发送，上游发送一条数据后会等下游处理完之后再发送下一条。<br>在例子中，上游发射数据时，并不知道下游数据有没有处理完，就会源源不断的发射数据，而下游数据会间隔两秒钟才处理一次，这样就会产生很多下游没来得及处理的数据，这些数据既不会丢失，也不会被垃圾回收机制回收，而是存放在一个异步缓存池中，如果缓存池中的数据一直得不到处理，越积越多，最后就会造成内存溢出，这便是 Rxjava 中的背压问题。<br>可以通过 Monitors 发现内存使用快速增长。</p>
<p><img src="/images/open-source-rxjava-guide-flowable/observer.png" alt="效果图"></p>
<h2 id="Flowable"><a href="#Flowable" class="headerlink" title="Flowable"></a>Flowable</h2><p><code>Flowable</code> 就是为了解决背压问题的产物，因此才会把它们和 Observable/Observer 区分开来使用。<br>由于基于Flowable发射的数据流，以及对数据加工处理的各操作符都添加了背压支持，附加了额外的逻辑，其运行效率要比 <code>Observable</code> 低得多。<br>因为只有上下游运行在各自的线程中，且上游发射数据速度大于下游接收处理数据的速度时，才会产生背压问题。<br>所以，如果能够确定上下游在同一个线程中工作，或者上下游工作在不同的线程中，而下游处理数据的速度高于上游发射数据的速度，则不会产生背压问题，就没有必要使用 <code>Flowable</code>，以免影响性能。<br><code>Flowable</code> </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">Flowable.create(<span class="keyword">new</span> FlowableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(@NonNull FlowableEmitter&lt;Integer&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(i &lt; Long.MAX_VALUE)&#123;</div><div class="line">            e.onNext(i);</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;, BackpressureStrategy.DROP)</div><div class="line">        .subscribeOn(Schedulers.io())</div><div class="line">        .observeOn(Schedulers.newThread())</div><div class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</div><div class="line">                s.request(Long.MAX_VALUE);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">100</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                Log.e(<span class="string">"Test"</span>,<span class="string">"i = "</span>+integer);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>这里注意三点：</p>
<ol>
<li><code>Flowable.create</code> 参数中多了个 <code>BackpressureStrategy</code>。</li>
<li><code>onSubscribe</code> 回调的参数不是 <code>Disposable</code> 而是 <code>Subscription</code>。而且需要调用 <code>Subscription.request</code> 发起数据请求，否则Subscriber不会接受数据。</li>
<li>数据发射器是 <code>FlowableEmitter</code> 而不是 <code>ObservableEmitter</code>。</li>
</ol>
<p><img src="/images/open-source-rxjava-guide-flowable/drop.png" alt="效果图"></p>
<p>打印结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">E/Test: i = 110</div><div class="line">E/Test: i = 111</div><div class="line">E/Test: i = 112</div><div class="line">E/Test: i = 113</div><div class="line">E/Test: i = 114</div><div class="line">E/Test: i = 115</div><div class="line">E/Test: i = 116</div><div class="line">E/Test: i = 117</div><div class="line">E/Test: i = 118</div><div class="line">E/Test: i = 119</div><div class="line">E/Test: i = 120</div><div class="line">E/Test: i = 121</div><div class="line">E/Test: i = 122</div><div class="line">E/Test: i = 123</div><div class="line">E/Test: i = 124</div><div class="line">E/Test: i = 125</div><div class="line">E/Test: i = 126</div><div class="line">E/Test: i = 127</div><div class="line">E/Test: i = 19044130</div><div class="line">E/Test: i = 19044131</div><div class="line">E/Test: i = 19044132</div><div class="line">E/Test: i = 19044133</div><div class="line">E/Test: i = 19044134</div><div class="line">E/Test: i = 19044135</div><div class="line">E/Test: i = 19044136</div><div class="line">E/Test: i = 19044137</div><div class="line">E/Test: i = 19044138</div></pre></td></tr></table></figure>
<p>可以看到 127 —— 19044130 中间的数据被丢掉了，这是因为前面128条数据是正常发射的，后面的数据由于异步缓存池处于存满的状态而无法接收，当清理缓存池时上游正在发射19044130，此时可以放入缓存池从而可以正常接收。</p>
<h2 id="BackpressureStrategy（背压策略）"><a href="#BackpressureStrategy（背压策略）" class="headerlink" title="BackpressureStrategy（背压策略）"></a>BackpressureStrategy（背压策略）</h2><p><code>Flowable</code> 的异步缓存池不同于 <code>Observable</code>，<code>Observable</code>的异步缓存池没有大小限制，可以无限制向里添加数据，直至OOM,而 <code>Flowable</code> 的异步缓存池有个固定容量，其大小为128。<br><code>BackpressureStrategy</code> 的作用便是用来设置 <code>Flowable</code> 异步缓存池中的存储数据超限时的策略。<br><code>BackpressureStrategy</code> 提供了一下几种背压策略：</p>
<ul>
<li>MISSING：这种策略模式下相当于没有指定任何的背压策略，不会对数据做缓存或丢弃处理，需要下游通过背压操作符（onBackpressureBuffer()/onBackpressureDrop()/onBackpressureLatest()）指定背压策略。</li>
<li>ERROR：这种策略模式下如果缓存池中的数据超限了，则会抛出 <code>MissingBackpressureException</code> 异常</li>
<li>BUFFER：这种策略模式下没有为异步缓存池限制大小，可以无限制向里添加数据，不会抛出 <code>MissingBackpressureException</code> 异常，但会导致OOM。</li>
<li>DROP：这种策略模式下如果异步缓存池满了，会丢掉将要放入缓存池中的数据。</li>
<li>LATEST：这种策略模式下与 Drop 策略一样，如果缓存池满了，会丢掉将要放入缓存池中的数据，不同的是，不管缓存池的状态如何，LATEST都会将最后一条数据强行放入缓存池中。</li>
</ul>
<h2 id="背压操作符"><a href="#背压操作符" class="headerlink" title="背压操作符"></a>背压操作符</h2><p>RxJava 提供了下面的操作符来指定背压策略。</p>
<ul>
<li>onBackpressureBuffer()：对应BUFFER策略</li>
<li>onBackpressureDrop()：对应DROP策略</li>
<li>onBackpressureLatest()：对应LATEST策略</li>
</ul>
<p>因此下面代码效果是等同的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">Flowable.create(<span class="keyword">new</span> FlowableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(@NonNull FlowableEmitter&lt;Integer&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(i &lt; <span class="number">800</span>)&#123;</div><div class="line">            e.onNext(i);</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;, BackpressureStrategy.DROP)</div><div class="line">        .subscribeOn(Schedulers.io())</div><div class="line">        .observeOn(Schedulers.newThread())</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Thread.sleep(<span class="number">100</span>);</div><div class="line">                Log.e(<span class="string">"Test"</span>,<span class="string">"i = "</span>+integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Flowable.range(<span class="number">0</span>, <span class="number">800</span>)</div><div class="line">        .onBackpressureDrop()</div><div class="line">        .subscribeOn(Schedulers.io())</div><div class="line">        .observeOn(Schedulers.newThread())</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Thread.sleep(<span class="number">100</span>);</div><div class="line">                Log.e(<span class="string">"Test"</span>,<span class="string">"i = "</span>+integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h2 id="Subscription"><a href="#Subscription" class="headerlink" title="Subscription"></a>Subscription</h2><p>前我们已经介绍过，<code>Flowable</code> 的 <code>subscribe</code> 方法需要的参数是 <code>Subscription</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subscription</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">(<span class="keyword">long</span> n)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="request"><a href="#request" class="headerlink" title="request"></a>request</h3><p><code>request(long n)</code> 用于发起接收数据的请求，如果不调用这个方法，虽然被观察者会正常发送数据，但是观察者是不会去接收数据的。参数 <code>n</code> 代表请求的数据量。<br>但是要注意一点，上游数据的发送是不受这个影响的，无论你设置多少，上游数据都正常发送。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">Flowable.create(<span class="keyword">new</span> FlowableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(@NonNull FlowableEmitter&lt;Integer&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(i &lt; <span class="number">100</span>)&#123;</div><div class="line">            e.onNext(i);</div><div class="line">            i++;</div><div class="line">            Thread.sleep(<span class="number">100</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;, BackpressureStrategy.DROP)</div><div class="line">        .subscribeOn(Schedulers.io())</div><div class="line">        .observeOn(Schedulers.newThread())</div><div class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</div><div class="line">                s.request(<span class="number">10</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">100</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                Log.e(<span class="string">"Test"</span>,<span class="string">"i = "</span>+integer);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>上面的代码只完成了 10 条数据的接收。<code>request(long n)</code>是可以累加的，比如下面代码可以完成 20 条数据的接收。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</div><div class="line">    s.request(<span class="number">10</span>);</div><div class="line">    s.request(<span class="number">10</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="cancel"><a href="#cancel" class="headerlink" title="cancel"></a>cancel</h3><p><code>cancel()</code> 方法用于取消订阅关系。</p>
<h2 id="FlowableEmitter"><a href="#FlowableEmitter" class="headerlink" title="FlowableEmitter"></a>FlowableEmitter</h2><p><code>FlowableEmitter</code> 有如下方法：</p>
<ul>
<li>setDisposable：设置Disposable</li>
<li>setCancellable：设置Cancellable</li>
<li>requested：当前未完成的请求数量</li>
<li>isCancelled：订阅关系是否取消</li>
<li>serialize：</li>
<li>tryOnError：</li>
</ul>
]]></content>
    
    <summary type="html">
    
      本文介绍 RxJava 中 Flowable 和 Subscriber的用法
    
    </summary>
    
      <category term="Android开源项目" scheme="http://yoursite.com/categories/Android%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Android开源项目" scheme="http://yoursite.com/tags/Android%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="RxJava" scheme="http://yoursite.com/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>RxJava 使用指南（二）-- 操作符介绍</title>
    <link href="http://yoursite.com/2017/10/12/open-source-rxjava-guide-operator/"/>
    <id>http://yoursite.com/2017/10/12/open-source-rxjava-guide-operator/</id>
    <published>2017-10-12T02:00:00.000Z</published>
    <updated>2018-03-11T13:47:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="map-和-flatmap-（变换）"><a href="#map-和-flatmap-（变换）" class="headerlink" title="map 和 flatmap （变换）"></a>map 和 flatmap （变换）</h2><p>这一组操作符提供数据的变换工作，就是把数据对象变换成其他类型的数据对象，它们都接受一个 <code>Function</code> 类型的参数。但是它们的用法上还是有区别的。</p>
<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>先来说一下 <code>map()</code> 操作的使用场景，如果在数据流的传递过程中，我们需要根据当前数据流对象转换或提取生成一种其他类型的数据流对象，可以使用 <code>map()</code> 。<br>它需要一个 <code>Function</code> 参数，<code>Function</code> 对象的两个参数是转换的源数据和目标数据类型。<br>比如我们有一个请求网络图片的场景，被订阅者发出的数据是原始的 <code>byte</code> 类型数据，在设置给 <code>ImageView</code> 前我们要转换成 <code>Bitmap</code> 类型的数据，那么就可以用这个操作符。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;<span class="keyword">byte</span> []&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(@NonNull ObservableEmitter&lt;<span class="keyword">byte</span> []&gt; observableEmitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">byte</span> [] data = getBitmapDataSync(mUrl);</div><div class="line">        observableEmitter.onNext(data);</div><div class="line">        observableEmitter.onComplete();</div><div class="line">    &#125;</div><div class="line">&#125;).subscribeOn(Schedulers.io())</div><div class="line">        .map(<span class="keyword">new</span> Function&lt;<span class="keyword">byte</span>[], Bitmap&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Bitmap <span class="title">apply</span><span class="params">(@NonNull <span class="keyword">byte</span>[] bytes)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                <span class="keyword">return</span> generateBitmap(bytes);</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .observeOn(AndroidSchedulers.mainThread())</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Bitmap&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Bitmap bitmap)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                mImageView.setImageBitmap(bitmap);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h3 id="flatmap"><a href="#flatmap" class="headerlink" title="flatmap"></a>flatmap</h3><p><code>flatMap(Function&lt;? super T, ? extends ObservableSource&lt;? extends R&gt;&gt; mapper)</code> 中同样需要一个 <code>Function</code> 对象作为参数，但是 <code>Function</code> 的目标数据类型变成了 <code>Observable</code>。<br><code>flatMap</code> 一般用于输出一个 <code>Observable</code>，而其随后的 <code>subscribe</code> 中的参数也跟 <code>Observable</code> 中的参数一样。<br>下面再提供一个使用场景，这个场景属于嵌套的网络请求，比如我们想先进行一次网络请求得到图片的url，然后根据url再进行网络请求得到图片，最后设置给 <code>ImageView</code> ，这种情况下由url到 <code>Bitmap</code> 的转换用 <code>map</code> 是无法实现的，可以使用 <code>flatmap</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(@NonNull ObservableEmitter&lt;String&gt; observableEmitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        String url = getImageUrl(mUrl);</div><div class="line">        observableEmitter.onNext(url);</div><div class="line">        observableEmitter.onComplete();</div><div class="line">    &#125;</div><div class="line">&#125;).subscribeOn(Schedulers.io())</div><div class="line">        .observeOn(Schedulers.io())</div><div class="line">        .flatMap(<span class="keyword">new</span> Function&lt;String, ObservableSource&lt;Bitmap&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> ObservableSource&lt;Bitmap&gt; <span class="title">apply</span><span class="params">(@NonNull <span class="keyword">final</span> String url)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                <span class="keyword">return</span> Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Bitmap&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(@NonNull ObservableEmitter&lt;Bitmap&gt; observableEmitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                        Bitmap bitmap = getBitmap(url);</div><div class="line">                        observableEmitter.onNext(bitmap);</div><div class="line">                        observableEmitter.onComplete();</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .observeOn(AndroidSchedulers.mainThread())</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Bitmap&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Bitmap bitmap)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                mImageView.setImageBitmap(bitmap);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h2 id="filter-和-distinct-（过滤）"><a href="#filter-和-distinct-（过滤）" class="headerlink" title="filter 和 distinct （过滤）"></a>filter 和 distinct （过滤）</h2><p>这一组操作符提供数据的过滤工作，<code>filter</code> 对不符合条件的数据进行过滤，<code>distinct</code> 提供去重的功能。最常用的用法之一是过滤 null 对象,它帮我们免去了在 <code>onNext()</code> 函数调用中再去检测 null 值。</p>
<h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p><code>filter(Predicate&lt;? super T&gt; predicate)</code> 接受 <code>Predicate</code> 对象参数，它的 <code>test()</code> 方法给出一个过滤条件，如果满足条件，则继续向下传递，如果不满足，则过滤掉。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Observable.range(<span class="number">0</span>,<span class="number">10</span>)</div><div class="line">        .filter(<span class="keyword">new</span> Predicate&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(@NonNull Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                <span class="keyword">return</span> integer % <span class="number">2</span> == <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;).subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"accept : "</span> + integer);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面的示例会过滤掉奇数，把偶数打印出来。</p>
<h3 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h3><p><code>distinct()</code> 过滤掉重复的数据项，过滤规则为：只允许还没有发射过的数据项通过。它还有重载的两个方法 <code>distinct(Function&lt;? super T, K&gt; keySelector)</code> 和 <code>distinct(Function&lt;? super T, K&gt; keySelector, Callable&lt;? extends Collection&lt;? super K&gt;&gt; collectionSupplier)</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">6</span>)</div><div class="line">        .distinct()</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Log.i(TAG,<span class="string">"accept : "</span> + integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h2 id="mergeWith-和-concatWith-（组合）"><a href="#mergeWith-和-concatWith-（组合）" class="headerlink" title="mergeWith 和 concatWith （组合）"></a>mergeWith 和 concatWith （组合）</h2><p>这一组操作符提供数据的组合工作。</p>
<h3 id="mergeWith"><a href="#mergeWith" class="headerlink" title="mergeWith"></a>mergeWith</h3><p><code>mergeWith(ObservableSource&lt;? extends T&gt; other)</code> 合并两个 <code>Observable</code>，它们数据可能会交错发射。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</div><div class="line">        .mergeWith(Observable.just(<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>))</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Log.i(TAG,<span class="string">"accept : "</span> + integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h3 id="concatWith"><a href="#concatWith" class="headerlink" title="concatWith"></a>concatWith</h3><p><code>concatWith(ObservableSource&lt;? extends T&gt; other)</code>合并两个 <code>Observable</code>，它们数据会按顺序发射，一个 <code>Observable</code> 的数据发送完了另外一个才会发射。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</div><div class="line">        .concatWith(Observable.just(<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>))</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Log.i(TAG,<span class="string">"accept : "</span> + integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h2 id="zipWith（聚合）"><a href="#zipWith（聚合）" class="headerlink" title="zipWith（聚合）"></a>zipWith（聚合）</h2><p><code>zipWith(ObservableSource&lt;? extends U&gt; other, BiFunction&lt;? super T, ? super U, ? extends R&gt; zipper)</code> 将两个 <code>Obversable</code> 发射的数据，通过一个函数 <code>BiFunction</code> 的 <code>apply()</code> 方法对对应位置的数据处理后放到一个新的 <code>Observable</code> 中发射，所发射的数据个数与最少的 <code>Observabel</code> 中的一样。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</div><div class="line">        .zipWith(Observable.just(<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>, <span class="string">"four"</span>, <span class="string">"five"</span>), <span class="keyword">new</span> BiFunction&lt;Integer, String, String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(@NonNull Integer integer, @NonNull String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                <span class="keyword">return</span> integer + s;</div><div class="line">            &#125;</div><div class="line">        &#125;).subscribe(<span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"accept : "</span> + s);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>打印结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">I/RxJava: accept : 1one</div><div class="line">I/RxJava: accept : 2two</div><div class="line">I/RxJava: accept : 3three</div><div class="line">I/RxJava: accept : 4four</div><div class="line">I/RxJava: accept : 5five</div></pre></td></tr></table></figure>
<h2 id="take、-takeLast、takeUntil-和-takeWhile"><a href="#take、-takeLast、takeUntil-和-takeWhile" class="headerlink" title="take、 takeLast、takeUntil 和 takeWhile"></a>take、 takeLast、takeUntil 和 takeWhile</h2><h3 id="take"><a href="#take" class="headerlink" title="take"></a>take</h3><p><code>take(long count)</code> 观察者只接受被观察者发出的前 <code>count</code> 个数据。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</div><div class="line">        .take(<span class="number">3</span>)</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Log.i(TAG,<span class="string">"accept : "</span> + integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h3 id="takeLast"><a href="#takeLast" class="headerlink" title="takeLast"></a>takeLast</h3><p><code>takeLast(int count)</code> 观察者只接受被观察者发出的后面 <code>count</code> 个数据。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</div><div class="line">        .take(<span class="number">3</span>)</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Log.i(TAG,<span class="string">"accept : "</span> + integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h3 id="takeUntil"><a href="#takeUntil" class="headerlink" title="takeUntil"></a>takeUntil</h3><p><code>takeUntil(Predicate&lt;? super T&gt; stopPredicate)</code> 当条件满足是停止发射数据，<code>takeUntil(ObservableSource&lt;U&gt; other)</code> 当 other 发射第一个数据后即停止第一个 <code>Observable</code> 数据的发射。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</div><div class="line">        .takeUntil(<span class="keyword">new</span> Predicate&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(@NonNull Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                <span class="keyword">return</span> integer == <span class="number">3</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Log.i(TAG,<span class="string">"accept : "</span> + integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h3 id="takeWhile"><a href="#takeWhile" class="headerlink" title="takeWhile"></a>takeWhile</h3><p><code>takeWhile(Predicate&lt;? super T&gt; predicate)</code> 当满足条件是才会发射数据，遇到不满足条件的情况，就中断退出发射。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</div><div class="line">        .takeWhile(<span class="keyword">new</span> Predicate&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(@NonNull Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                <span class="keyword">return</span> integer &lt; <span class="number">3</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Log.i(TAG,<span class="string">"accept : "</span> + integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h2 id="sample"><a href="#sample" class="headerlink" title="sample"></a>sample</h2><p><code>sample(long period, TimeUnit unit)</code> 相当于采样操作，它会定时地扫描被观察者发送的数据，并接收被观察者最近发射的数据。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Observable.interval(<span class="number">2</span>, TimeUnit.SECONDS)</div><div class="line">        .subscribeOn(Schedulers.io())</div><div class="line">        .observeOn(Schedulers.io())</div><div class="line">        .sample(<span class="number">3</span>, TimeUnit.SECONDS)</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Long&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Log.i(TAG,<span class="string">"accept : "</span> + aLong);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">I/RxJava: accept : 0</div><div class="line">I/RxJava: accept : 1</div><div class="line">I/RxJava: accept : 3</div><div class="line">I/RxJava: accept : 4</div><div class="line">I/RxJava: accept : 6</div><div class="line">I/RxJava: accept : 7</div><div class="line">I/RxJava: accept : 9</div><div class="line">I/RxJava: accept : 10</div><div class="line">I/RxJava: accept : 12</div></pre></td></tr></table></figure>
<h2 id="skip-和-skipLast"><a href="#skip-和-skipLast" class="headerlink" title="skip 和 skipLast"></a>skip 和 skipLast</h2><h3 id="skip"><a href="#skip" class="headerlink" title="skip"></a>skip</h3><p><code>skip(long count)</code> 用于过滤被观察者发送的前 n 项数据。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Observable.interval(<span class="number">1</span>, TimeUnit.SECONDS)</div><div class="line">        .skip(<span class="number">6</span>)</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Long&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Log.i(TAG,<span class="string">"accept : "</span> + aLong);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">I/RxJava: accept : 6</div><div class="line">I/RxJava: accept : 7</div><div class="line">I/RxJava: accept : 8</div><div class="line">I/RxJava: accept : 9</div><div class="line">I/RxJava: accept : 10</div></pre></td></tr></table></figure>
<h3 id="skipLast"><a href="#skipLast" class="headerlink" title="skipLast"></a>skipLast</h3><p><code>skipLast(int count)</code> 用于过滤最后 n 项数据。</p>
<h2 id="repeat、repeatUntil-和-repeatWhen"><a href="#repeat、repeatUntil-和-repeatWhen" class="headerlink" title="repeat、repeatUntil 和 repeatWhen"></a>repeat、repeatUntil 和 repeatWhen</h2><p>这组操作符提供在调用 <code>onCompleted()</code> 事件后提供重复调用 <code>Observable</code> 事件的操作。</p>
<h3 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h3><p><code>repeat</code> 提供重复调用 <code>Observable</code> 事件的操作。</p>
<ul>
<li>repeat()：无限次重复（Long.MAX_VALUE）</li>
<li>repeat(long times)：重复 times 次</li>
</ul>
<h3 id="repeatUntil"><a href="#repeatUntil" class="headerlink" title="repeatUntil"></a>repeatUntil</h3><p><code>repeatUntil(BooleanSupplier stop)</code> 重复调用 <code>Observable</code> 事件的操作直到 stop 条件满足。</p>
<h3 id="repeatWhen"><a href="#repeatWhen" class="headerlink" title="repeatWhen"></a>repeatWhen</h3><p><code>repeatWhen(final Function&lt;? super Observable&lt;Object&gt;, ? extends ObservableSource&lt;?&gt;&gt; handler)</code> 当满足一定条件重复调用 <code>Observable</code> 事件的操作。</p>
<h2 id="retry、retryUntil-和-retryWhen"><a href="#retry、retryUntil-和-retryWhen" class="headerlink" title="retry、retryUntil 和 retryWhen"></a>retry、retryUntil 和 retryWhen</h2><p>这组操作符提供在调用 <code>onError()</code> 事件后提供重新调用 <code>Observable</code> 事件的操作。</p>
<h2 id="时间节点处理操作"><a href="#时间节点处理操作" class="headerlink" title="时间节点处理操作"></a>时间节点处理操作</h2><p>特定的时间节点处理方法：</p>
<ul>
<li>doOnEach：发射数据的时候执行</li>
<li>doAfterNext：数据发射成功后</li>
<li>doOnNext：调用onNext方法时</li>
<li>doOnComplete：调用onComplete方法时</li>
<li>doOnError：调用onError时</li>
<li>doFinally：onComplete，onError或者取消订阅关系后</li>
</ul>
]]></content>
    
    <summary type="html">
    
      本文介绍 RxJava 的操作符的用法
    
    </summary>
    
      <category term="Android开源项目" scheme="http://yoursite.com/categories/Android%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Android开源项目" scheme="http://yoursite.com/tags/Android%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="RxJava" scheme="http://yoursite.com/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>RxJava 使用指南（一）-- 基本概念、数据流创建和线程调度</title>
    <link href="http://yoursite.com/2017/10/10/open-source-rxjava-guide-base/"/>
    <id>http://yoursite.com/2017/10/10/open-source-rxjava-guide-base/</id>
    <published>2017-10-10T02:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>RxJava 很早就开始接触和使用了，但只是仅仅会一些简单的使用而已，于是打算通过一系列的博客来加深对RxJava的理解。<br><a href="https://github.com/ReactiveX/RxJava/" target="_blank" rel="external">RxJava Github地址</a><br>写这篇文章的时候，RxJava最新版本已经是 <code>2.1.5</code> 了，那么我们就以最新版本为基础来介绍 RxJava 的使用。<br>使用之前要加入一下依赖：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile &apos;io.reactivex.rxjava2:rxjava:2.1.5&apos;</div><div class="line">    compile &apos;io.reactivex.rxjava2:rxandroid:2.0.1&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>RxAndroid 是一个 RxJava 扩展库，更好的兼容了 Android 特性，比如主线程，UI事件等。</p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>RxJava 官方的解释是一个在 Java VM 上使用可观测的序列来组成异步的、基于事件的程序的库。简要概括一下，它就是一个实现异步操作的库。它的本质体现在异步两个字上面。<br>RxJava 的异步的实现，是通过一种扩展的观察者模式来实现的，观察者模式相信我们都不陌生。<br>RxJava 提供众多的操作符以及它的链式操作可以替代深度回调逻辑，可以使代码简短优雅。<br>想要使用RxJava，我们先来了解一下几个基本概念。</p>
<ul>
<li>Observable (可观察者，即被观察者)：发射数据流</li>
<li>Observer (观察者)：接收数据流</li>
<li>Consumer：它也是一个 Observer，只有一个 accept() 回调</li>
<li>subscribe (订阅)：建立 Observable 和 Observer 的联系</li>
<li>subscribeOn：为 Observable 对数据的处理指定一个调度器</li>
<li>observeOn：为下游对数据的操作指定一个调度器</li>
<li>Disposable：用于解除订阅以及查询订阅关系是否解除</li>
<li>Operators操作符：可以理解为对数据流的操作，包括创建、过滤、变换、组合、聚合等。</li>
<li>Flowable：(被观察者)：发射数据流，支持背压</li>
<li>Publisher：Flowable 的父类</li>
<li>Subscriber：(观察者)，支持背压</li>
<li>Subscription：可以通过request发起请求数据，通过cancel取消订阅关系。</li>
<li>Single/SingleObserver：一种观察者模式组合</li>
<li>Completable/CompletableObserver：一种观察者模式组合</li>
<li>Maybe/MaybeObserver：一种观察者模式组合</li>
</ul>
<p>订阅关系：Observable/Observer是一对，Flowable/Subscriber是一对。</p>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>正如我们实现一个基本的观察者模式一样，你要创建被观察者和观察者，然后通过订阅事件使他们联系起来。<br>下面介绍一个RxJava的最基本的实现：</p>
<h3 id="创建Observable"><a href="#创建Observable" class="headerlink" title="创建Observable"></a>创建Observable</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Observable&lt;String&gt; observable = Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(@NonNull ObservableEmitter&lt;String&gt; observableEmitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        observableEmitter.onNext(<span class="string">"Hello "</span>);</div><div class="line">        observableEmitter.onNext(<span class="string">"World"</span>);</div><div class="line">        observableEmitter.onComplete();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><code>ObservableEmitter</code> 相当于一个事件发射器，每执行一次 <code>onNext()</code>，观察者就会收到一次数据，数据发送完毕后调用 <code>onComplete()</code> 方法。<br>在事件处理过程中出异常时，触发<code>onError()</code> ，同时队列自动终止，不允许再有事件发出。在一个正确运行的事件序列中， <code>onCompleted()</code> 和 <code>onError()</code> 有且只有一个，并且是事件序列中的最后一个。需要注意的是，<code>onCompleted()</code> 和 <code>onError()</code> 二者也是互斥的，即在队列中调用了其中一个，就不应该再调用另一个。</p>
<h3 id="创建Observer"><a href="#创建Observer" class="headerlink" title="创建Observer"></a>创建Observer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">Observer&lt;String&gt; observer = <span class="keyword">new</span> Observer&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(@NonNull Disposable d)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(@NonNull String s)</span> </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"onNext : "</span> + s);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(@NonNull Throwable e)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"onComplete"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>观察者的 <code>onNext()</code> 回调会收到被观察者发送的数据。</p>
<h3 id="subscribe（订阅）"><a href="#subscribe（订阅）" class="headerlink" title="subscribe（订阅）"></a>subscribe（订阅）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">observable.subscribe(observer);</div></pre></td></tr></table></figure>
<p>执行后输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">I/RxJava: onNext : Hello </div><div class="line">I/RxJava: onNext : World</div><div class="line">I/RxJava: onComplete</div></pre></td></tr></table></figure>
<p>通过上面三步实现了 RxJava 最简单的用法，其中并没有涉及到线程切换等操作，这些后面再介绍。</p>
<h2 id="创建Observable-1"><a href="#创建Observable-1" class="headerlink" title="创建Observable"></a>创建Observable</h2><p>前面的例子介绍了使用 <code>Observable.create()</code> 操作符来创建 <code>Observable</code>，下面再介绍一下 RxJava 提供的其他方法。</p>
<h3 id="just"><a href="#just" class="headerlink" title="just()"></a>just()</h3><p><code>just(T item1, ...)</code>创建 <code>Observable</code> 并自动调用 <code>onNext()</code>发射数据，可以接受一个或者多个参数， <code>just()</code> 中传递的参数将在 <code>Observer</code> 的 <code>onNext()</code> 方法中接收到。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="string">"Hello"</span>, <span class="string">"World"</span>)</div><div class="line">        .subscribe(<span class="keyword">new</span> Observer&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(@NonNull Disposable d)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(@NonNull String s)</span> </span>&#123;</div><div class="line">                Log.i(TAG,<span class="string">"onNext : "</span> + s);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(@NonNull Throwable e)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">                Log.i(TAG,<span class="string">"onComplete"</span>);</div><div class="line">            &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">I/RxJava: onNext : Hello</div><div class="line">I/RxJava: onNext : World</div><div class="line">I/RxJava: onComplete</div></pre></td></tr></table></figure>
<h3 id="defer"><a href="#defer" class="headerlink" title="defer()"></a>defer()</h3><p><code>defer(Callable&lt;? extends ObservableSource&lt;? extends T&gt;&gt; supplier)</code> 当观察者订阅时，才创建 Observable。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Observable.defer(<span class="keyword">new</span> Callable&lt;ObservableSource&lt;String&gt;&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ObservableSource&lt;String&gt; <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"defer call"</span>);</div><div class="line">        <span class="keyword">return</span> Observable.just(<span class="string">"Hello"</span>, <span class="string">"World"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;).subscribe(<span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"accept : "</span> + s);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这里新建了一个 <code>Consumer</code> 对象来作为观察者。</p>
<h3 id="fromArray"><a href="#fromArray" class="headerlink" title="fromArray()"></a>fromArray()</h3><p><code>fromArray(T... items)</code> 接受一个数组参数，创建 <code>Observable</code> 并自动调用 <code>onNext()</code> 将数组中的数据逐一发送。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Observable.fromArray(<span class="keyword">new</span> String[]&#123;<span class="string">"Hello"</span>,<span class="string">"World"</span>&#125;)</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Log.i(TAG,<span class="string">"accept : "</span> + s);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h3 id="fromIterable"><a href="#fromIterable" class="headerlink" title="fromIterable()"></a>fromIterable()</h3><p><code>fromIterable(Iterable&lt;? extends T&gt; source)</code> 接受一个集合参数，创建 <code>Observable</code> 并将集合中的数据逐一发送。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList();</div><div class="line">list.add(<span class="string">"Hello"</span>);</div><div class="line">list.add(<span class="string">"World"</span>);</div><div class="line">Observable.fromIterable(list)</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Log.i(TAG,<span class="string">"accept : "</span> + s);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h3 id="interval"><a href="#interval" class="headerlink" title="interval()"></a>interval()</h3><p><code>interval(long period, TimeUnit unit)</code> 按照一个固定的时间间隔 <code>period</code> 来发射数据，可以作为一个定时器来使用。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">Observable.interval(<span class="number">2</span>, TimeUnit.SECONDS)</div><div class="line">        .subscribe(<span class="keyword">new</span> Observer&lt;Long&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(@NonNull Disposable d)</span> </span>&#123;</div><div class="line">                mDisposable = d;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(@NonNull Long aLong)</span> </span>&#123;</div><div class="line">                Log.i(TAG,<span class="string">"onNext : "</span> + aLong);</div><div class="line">                <span class="keyword">if</span>(aLong == <span class="number">5</span>)</div><div class="line">                    mDisposable.dispose();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(@NonNull Throwable e)</span> </span>&#123;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>上面例子中当数据等于5解除订阅关系，停止发射数据。</p>
<h3 id="range"><a href="#range" class="headerlink" title="range()"></a>range()</h3><p><code>range(final int start, final int count)</code> 创建一个被观察者并发射从 <code>start</code> 到 <code>count</code> 的整数序列给观察者。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Observable.range(<span class="number">1</span>,<span class="number">5</span>)</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Log.i(TAG,<span class="string">"accept : "</span> + integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h3 id="timer"><a href="#timer" class="headerlink" title="timer()"></a>timer()</h3><p><code>timer(long delay, TimeUnit unit)</code>创建一个 Observable 并在它在一个给定的延迟 <code>delay</code> 后发射一个特殊的值（0）给观察者。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Observable.timer(<span class="number">5</span>, TimeUnit.SECONDS)</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Long&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Log.i(TAG,<span class="string">"accept : "</span> + aLong);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h2 id="创建Observer-1"><a href="#创建Observer-1" class="headerlink" title="创建Observer"></a>创建Observer</h2><p>RxJava 支持多种不同方式的 <code>Observer</code> 回调。</p>
<ul>
<li>subscribe()：忽略 <code>onNext</code> 以及 <code>onComplete</code> 等事件。</li>
<li>subscribe(Observer&lt;? super T&gt; observer)：以 <code>Observer</code> 为参数。</li>
<li>subscribe(Consumer&lt;? super T&gt; onNext)：只接受 <code>onNext</code></li>
<li>subscribe(Consumer&lt;? super T&gt; onNext, Consumer&lt;? super Throwable&gt; onError)：接受 <code>onNext</code> 和 <code>onError</code></li>
<li>subscribe(Consumer&lt;? super T&gt; onNext, Consumer&lt;? super Throwable&gt; onError, Action onComplete)：接受 <code>onNext</code> <code>onError</code> 和 <code>onComplete</code></li>
<li>subscribe(Consumer&lt;? super T&gt; onNext, Consumer&lt;? super Throwable&gt; onError, Action onComplete, Consumer&lt;? super Disposable&gt; onSubscribe)：接受 <code>onNext</code> <code>onError</code> 和 <code>onComplete</code>，接受参数为 <code>Disposable</code> 的一个回调，用于解除订阅，这中实现就和 <code>Observer</code> 类似了，四个回调。</li>
</ul>
<h2 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h2><h3 id="Scheduler（调度器）"><a href="#Scheduler（调度器）" class="headerlink" title="Scheduler（调度器）"></a>Scheduler（调度器）</h3><p>在上面的例子中，并没有涉及到线程切换的操作。如果只是这样在一个线程中同步使用还没有将RxJava的优势体现出来。我们在使用过程中会经常遇到这种情况，比如，我们会将网络请求等耗时操作放到后台线程中，将UI操作放到主线程中执行。<br>RxJava 提供了线程调度的功能，我们可以借助于 <code>Scheduler</code> 来完成。另外 RxAndroid 提供了 <code>AndroidSchedulers</code> 调度器来供开发者使用。<br><code>Scheduler</code> 和 <code>AndroidSchedulers</code> 提供了6种线程调度器：</p>
<table>
<thead>
<tr>
<th style="text-align:center">调度器</th>
<th style="text-align:center">使用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Schedulers.io()</td>
<td style="text-align:center">主要用于一些耗时IO操作，比如读写文件，数据库存取，网络交互等。这个调度器具有线程缓存机制，它会根据需要，增加或者减少线程池中的线程数量。需要注意的是Schedulers.io()中的线程池数量是无限制大的，大量的I/0操作将创建许多线程，我们需要在性能和线程数量中做出取舍。</td>
</tr>
<tr>
<td style="text-align:center">Schedulers.computation()</td>
<td style="text-align:center">计算所使用的 Scheduler。这个计算指的是 CPU 密集型计算，即不会被 I/O 等操作限制性能的操作，例如图形的计算。这个 Scheduler 使用的固定的线程池，大小为 CPU 核数。不要把 I/O 操作放在 computation() 中，否则 I/O 操作的等待时间会浪费 CPU。</td>
</tr>
<tr>
<td style="text-align:center">Schedulers.newThread()</td>
<td style="text-align:center">开启一个新的线程，不具有线程缓存机制，因为创建一个新的线程比复用一个线程更耗时耗力，因此，Schedulers.newThread( )的效率没有Schedulers.io( )高。</td>
</tr>
<tr>
<td style="text-align:center">Schedulers.from(Executor executor)</td>
<td style="text-align:center">使用指定的 Executor 来作为线程调度器</td>
</tr>
<tr>
<td style="text-align:center">Schedulers.single()</td>
<td style="text-align:center">拥有一个线程单例，所有的任务都在这一个线程中执行。</td>
</tr>
<tr>
<td style="text-align:center">Schedulers.trampoline()</td>
<td style="text-align:center">在当前线程执行一个任务，但不是立即执行，用trampoline()将它加入队列。这个调度器将会处理它的队列并且按程序运行队列中每一个任务。</td>
</tr>
<tr>
<td style="text-align:center">AndroidSchedulers.mainThread()</td>
<td style="text-align:center">Android中的主线程执行任务，为Android开发定制。</td>
</tr>
</tbody>
</table>
<h3 id="实现线程调度"><a href="#实现线程调度" class="headerlink" title="实现线程调度"></a>实现线程调度</h3><p>实现线程的调度可以通过 <code>subscribeOn()</code> 和 <code>observerOn()</code> 实现。</p>
<ul>
<li>subscribeOn()：指定被观察者在哪个调度器上执行，跟调用的位置没有关系。直到遇到observeOn改变线程调度器。</li>
<li>observerOn()：指定下游观察者对数据的操作运行在哪个调度器上。在调用位置切换线程。</li>
</ul>
<p>使用时需要注意：</p>
<ul>
<li><code>subscribeOn()</code> 可以多次调用，但只有第一次的调用会起作用。</li>
<li><code>observerOn()</code> 可以多次调用，每调用一次切换一次线程。</li>
</ul>
<h4 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h4><p>在这个例子中，我们通过 <code>subscribeOn(Schedulers.io())</code> 指定被观察者在IO线程中进行图片下载，然后通过 <code>observeOn(AndroidSchedulers.mainThread())</code> 在主线程中更新UI。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Bitmap&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(@NonNull ObservableEmitter&lt;Bitmap&gt; observableEmitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"current thread : "</span>+Thread.currentThread().getName());</div><div class="line">        Bitmap bitmap = mHttpModel.getBitmapSync(mUrl);</div><div class="line">        observableEmitter.onNext(bitmap);</div><div class="line">        observableEmitter.onComplete();</div><div class="line">    &#125;</div><div class="line">&#125;).subscribeOn(Schedulers.io())</div><div class="line">        .observeOn(AndroidSchedulers.mainThread())</div><div class="line">        .subscribe(<span class="keyword">new</span> Observer&lt;Bitmap&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(@NonNull Disposable d)</span> </span>&#123;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(@NonNull Bitmap bitmap)</span> </span>&#123;</div><div class="line">                Log.i(TAG,<span class="string">"current thread : "</span>+Thread.currentThread().getName());</div><div class="line">                mImageView.setImageBitmap(bitmap);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(@NonNull Throwable e)</span> </span>&#123;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">RxJava: current thread : RxCachedThreadScheduler-1</div><div class="line">RxJava: current thread : main</div></pre></td></tr></table></figure>
<h4 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h4><p>这个例子主要来介绍一下线程调度的时机问题，被观察者所在的线程肯定是由 <code>subscribeOn()</code> 来指定，然后就直到遇到 <code>observeOn()</code> 再切换线程，否则就在当前线程执行下去。<br>看下面一段伪代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Observable.create                           <span class="comment">//被观察者在io线程执行，因为后面通过subscribeOn指定io线程</span></div><div class="line">.map                                        <span class="comment">//没有遇到线程操作，依然在io线程</span></div><div class="line">.subscribeOn(Schedulers.io())</div><div class="line">.map                                        <span class="comment">//没有遇到线程操作，依然在io线程</span></div><div class="line">.observeOn(AndroidSchedulers.mainThread())  <span class="comment">//切换线程</span></div><div class="line">.map                                        <span class="comment">//遇到线程切换，在主线程</span></div><div class="line">.observeOn(Schedulers.io())                 <span class="comment">//切换线程</span></div><div class="line">.subscribe                                  <span class="comment">//遇到线程切换，在io线程</span></div></pre></td></tr></table></figure>
<blockquote>
<p>如果我们不指定线程调度器，被观察者和观察者会在什么线程执行呢？我们通过在前面的例子中添加一些打印信息会发现，它们会默认在当前线程中执行。</p>
</blockquote>
<h3 id="doOnSubscribe"><a href="#doOnSubscribe" class="headerlink" title="doOnSubscribe()"></a>doOnSubscribe()</h3><p>这里再提一个方法 <code>doOnSubscribe()</code>，它是在 <code>subscribe()</code> 调用后而且在事件发送前执行。前面我们说过，有多个 <code>subscribeOn()</code> 来对别观察者指定线程，只会有第一个起作用，但是多个 <code>subscribeOn()</code> 却可以影响 <code>doOnSubscribe()</code> 的执行线程。<br>先来测试一下我们的结论：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(@NonNull ObservableEmitter&lt;Integer&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"subscribe current thread : "</span>+Thread.currentThread().getName());</div><div class="line">        e.onNext(<span class="number">1</span>);</div><div class="line">        e.onComplete();</div><div class="line">    &#125;</div><div class="line">&#125;).subscribeOn(Schedulers.io())</div><div class="line">        .subscribeOn(AndroidSchedulers.mainThread())</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Log.i(TAG,<span class="string">"accept current thread : "</span>+Thread.currentThread().getName());</div><div class="line">                Log.i(TAG,<span class="string">"accept : "</span> + integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>这里通过 <code>subscribeOn</code> 两次指定被观察者执行线程，一个是IO线程，一个指定主线程。<br>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">I/RxJava: subscribe current thread : RxCachedThreadScheduler-1</div><div class="line">I/RxJava: accept current thread : RxCachedThreadScheduler-1</div><div class="line">I/RxJava: accept : 1</div></pre></td></tr></table></figure>
<p>执行在 IO 线程，是第一次指定生效。<br>上面例子稍加改动，再来看一下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(@NonNull ObservableEmitter&lt;Integer&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"subscribe current thread : "</span>+Thread.currentThread().getName());</div><div class="line">        e.onNext(<span class="number">1</span>);</div><div class="line">        e.onComplete();</div><div class="line">    &#125;</div><div class="line">&#125;).subscribeOn(Schedulers.io())</div><div class="line">        .doOnSubscribe(<span class="keyword">new</span> Consumer&lt;Disposable&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Disposable disposable)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Log.i(TAG,<span class="string">"doOnSubscribe current thread : "</span>+Thread.currentThread().getName());</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .subscribeOn(AndroidSchedulers.mainThread())</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Log.i(TAG,<span class="string">"accept current thread : "</span>+Thread.currentThread().getName());</div><div class="line">                Log.i(TAG,<span class="string">"accept : "</span> + integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">I/RxJava: doOnSubscribe current thread : main</div><div class="line">I/RxJava: subscribe current thread : RxCachedThreadScheduler-1</div><div class="line">I/RxJava: accept current thread : RxCachedThreadScheduler-1</div><div class="line">I/RxJava: accept : 1</div></pre></td></tr></table></figure>
<p>可以看到，<code>subscribeOn</code> 是可以重新指定 <code>doOnSubscribe</code> 的执行线程的。</p>
<h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><p><a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="external">http://gank.io/post/560e15be2dca930e00da1083</a></p>
]]></content>
    
    <summary type="html">
    
      本文介绍 RxJava 的基本概念以及简单使用，介绍 Observable 创建数据流的多种操作符的用法以及线程调度的方法和它们之间的区别。
    
    </summary>
    
      <category term="Android开源项目" scheme="http://yoursite.com/categories/Android%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Android开源项目" scheme="http://yoursite.com/tags/Android%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="RxJava" scheme="http://yoursite.com/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>Android -- 使用 TaskDescription 定制任务管理器 Title</title>
    <link href="http://yoursite.com/2017/10/08/android-knowledge-point-taskdescription/"/>
    <id>http://yoursite.com/2017/10/08/android-knowledge-point-taskdescription/</id>
    <published>2017-10-08T02:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>最近有个需求，就是要代码动态修改 APP 在任务管理器中名称显示，不要问我问什么有这样的需求，因为需求就这样。哈哈……<br>对于如何控制 APP 在任务管理器中的 Title，我们可能知道，可以通过在 AndroidManifest.xml 中设置 <code>application</code> 或者主 <code>activity</code> 的 <code>android:label</code> 来实现，而且 <code>activity</code> 的优先级高于 <code>application</code>，也就是说两者都设置这个标签的话，主 <code>activity</code> 的值覆盖 <code>application</code>,在桌面上的 APP 名称和 <code>activity</code> 的 <code>title</code> 的名称都是 <code>activity</code> 的 <code>label</code> 值。<br>但是 <code>label</code> 的值在代码中是无法进行动态设置的，而且 <code>ActivityInfo</code> 的生成是在 AMS 进程进行的，想要修改也不太容易，后面甚至想到了用 HOOK 技术 HOOK PMS 以及 AMS 相关 API 的方法。<br>由于一直想当然的认为任务管理器中也是读取的是 <code>ActivityInfo</code> 的 <code>labelRes</code> 或者 <code>nonLocalizedLabel</code> 来实现的，因此就一直在修改 <code>android:label</code> 上想办法。<br>这里再来个插曲介绍一下 <code>nonLocalizedLabel</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PackageItemInfo</span> </span>&#123;</div><div class="line">    ......</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> labelRes;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> CharSequence nonLocalizedLabel;</div><div class="line">    ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它是怎么赋值的呢？</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">TypedValue v = args.sa.peekValue(args.labelRes);</div><div class="line"><span class="keyword">if</span> (v != <span class="keyword">null</span> &amp;&amp; (outInfo.labelRes=v.resourceId) == <span class="number">0</span>) &#123;</div><div class="line">    outInfo.nonLocalizedLabel = v.coerceToString();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看明白了吗？<br>这里的 <code>labelRes</code> 就代表 <code>android:label</code> 的资源ID，如果资源ID为0,那么表示不是通过给资源ID的方式来赋值的，可能就直接给 <code>android:label</code> 了一个字符串。<br>类似这样的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:label=<span class="string">"Test"</span></div></pre></td></tr></table></figure>
<h2 id="使用TaskDescription"><a href="#使用TaskDescription" class="headerlink" title="使用TaskDescription"></a>使用TaskDescription</h2><p>后面通过查看任务管理器的源码发现，里面用到了一个 <code>TaskDescription</code>，通过获取 <code>TaskDescription</code> 来获得 Task 的 Title。<br><code>TaskDescription</code> 是 Android 5.0 加入的一个类，通过它可以设置或者获取任务列表里面的 <code>Activity</code> 信息。<br><code>Activity</code> 提供了 <code>setTaskDescription()</code> 方法，其需要 <code>TaskDescription</code> 实例，而 <code>TaskDescription</code> 提供了多个构造器，注意 <code>color</code> 传入必须是非透明。<br>在 <code>Activity</code> 里面使用下面代码解决了该需求问题：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String title = ...;</div><div class="line">Bitmap icon = ...;</div><div class="line">setTaskDescription(<span class="keyword">new</span> ActivityManager.TaskDescription(</div><div class="line">        title, icon, getResources().getColor(R.color.colorPrimary)));</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      介绍使用 TaskDescription 定制任务管理器 Title
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="TaskDescription" scheme="http://yoursite.com/tags/TaskDescription/"/>
    
  </entry>
  
  <entry>
    <title>Android 架构 android-architecture 之 todo-mvp 介绍</title>
    <link href="http://yoursite.com/2017/09/06/android-architecture-google-mvp-basic/"/>
    <id>http://yoursite.com/2017/09/06/android-architecture-google-mvp-basic/</id>
    <published>2017-09-06T02:00:00.000Z</published>
    <updated>2018-03-11T13:47:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>todo-mvp 是对 MVP 的一种基础的实现，里面没有用到其他的框架，下面来具体分析一下。<br><a href="https://github.com/googlesamples/android-architecture/tree/todo-mvp/" target="_blank" rel="external">Github地址</a></p>
<h2 id="源码简介"><a href="#源码简介" class="headerlink" title="源码简介"></a>源码简介</h2><p>按功能划分模块，包结构如图：</p>
<p><img src="/images/android-architecture-google-mvp-basic/image1.png" alt="效果图"></p>
<ol>
<li>tasks、addedittask、taskdetail和statistics：四个功能界面</li>
<li>data：数据层的代码，即 MVP 中的 Model 层</li>
<li>util：一些工具类</li>
<li>BasePresenter和BaseView：Presenter和View的基类</li>
</ol>
<p>各个包中的类：</p>
<p><img src="/images/android-architecture-google-mvp-basic/image2.png" alt="效果图"></p>
<h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><ol>
<li>定义一个协议类 <code>Contract</code>，它定义了两个接口 <code>View</code> 和 <code>Presenter</code>，分别继承自 V 和 P 的基类 <code>BaseView</code> 和 <code>BasePresenter</code>。</li>
<li>创建一个 <code>Presenter</code>，并实现协议类中的 <code>Presenter</code> 接口，实现<code>Presenter</code> 类的两个参数分别是 <code>TasksRepository</code> （M）和 <code>View</code> （V）实现类，建立 M 和 V 联系的桥梁。</li>
<li>在 <code>Activity</code> 中实例化 <code>Presenter</code>，建立 M 和 V 的联系，实例化 <code>Fragment</code>。</li>
<li>在 <code>Fragment</code> 中实现了 <code>View</code> 接口，作为 <code>View</code> （V）实现类。</li>
</ol>
<p>V 层监听用户的操作，并把用户的操作传递到P层，并把P层中的指令转化为UI操作，并呈现出来。<br>P 层建立 M 和 V 的联系，响应 V 层的操作并向 M 层获取数据，然后传递到 V 层。<br>M 层负责数据的存储与查询。</p>
<p>以 taskdetail 为例，用一个类图来展示它们的关系：</p>
<p><img src="http://www.plantuml.com/plantuml/svg/XLHBJiCm4Dtx55PNYL1xWYugg92Gg5JHgdjZ3wr5OaVsj1M2xhW5Kk_0XWqIjw5S0pjfVeQqMJbltlER6OyziiWChjE4p2KcG7kJnVIm_pZiNt_UFx_Vldg4I8LW7XW7EcVsqOuPifbU6mw4a4jcOI5XIuSl_NuU7mCocLnfXOPn7FWWwS2TQ31eYAuDMwQWa9IBSDUAaFjE3LZmkNMQLmnoAXYcKQj8K73Dj7UGQIjHcwSZgmRei9NDoIIADdJm6vsl-lnCBgW5h4ZHd6RbEYQxK5CNcGlzMKS1hIihBzXeARpThMP2gkMD4f8pLsDqhtK2J577bXk8A-fARoVIMiVrsqOnzLyPNKa1-PH5BK41pT0u5KN_4pSLOx3So0obLcrTCt1KYnewNsMxD_cs82GMYPU8W0GGsXZNQVONpLl1AjIvyuHP-y_uEh_JuqhJUWZE77VeqIog7uugJSFPxRop1RK8v7TuHqQWX7ieVW40" alt="效果图"></p>
<h3 id="V-和-P-的基类"><a href="#V-和-P-的基类" class="headerlink" title="V 和 P 的基类"></a>V 和 P 的基类</h3><p>先来看一下 V 的基类 <code>BaseView&lt;T&gt;</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseView</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setPresenter</span><span class="params">(T presenter)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>BaseView</code> 是一个泛型接口，里面只有一个抽象方法 <code>setPresenter(T presenter)</code> ，用来设置 Presenter 。<br>P 的基类 <code>BasePresenter</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BasePresenter</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它也只定义来一个方法 <code>start()</code>，用来在 <code>Activity</code> 或者 Fragm<code>ent</code> 的 <code>onResume()</code> 方法中调用，来进行数据的查询。</p>
<h3 id="功能模块"><a href="#功能模块" class="headerlink" title="功能模块"></a>功能模块</h3><ul>
<li>tasks：包括菜单抽屉界面，主界面显示任务列表</li>
<li>addedittask：点击添加任务界面</li>
<li>taskdetail：点击任务后的详情界面</li>
<li>statistics：任务统计界面，点击抽屉菜单可以弹出</li>
</ul>
<p>这四个包对应了四个功能界面，它们内部的结构大同小异，包括了：</p>
<ul>
<li>Activity</li>
<li>Fragment</li>
<li>Contract</li>
<li>Presenter</li>
</ul>
<p>那么我们就选取其中的 taskdetail 模块来进行介绍。</p>
<p>在 <code>TaskDetailActivity</code> 中实例化 <code>TaskDetailFragment</code>、<code>TasksRepository</code> 和 <code>TaskDetailPresenter</code>，其中 <code>TaskDetailFragment</code> 和 <code>TasksRepository</code> 作为 <code>TaskDetailPresenter</code> 的参数。<br>来看一下 <code>TaskDetailPresenter</code> 的构造函数：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">TaskDetailPresenter</span><span class="params">(@Nullable String taskId,</span></span></div><div class="line">                           @NonNull TasksRepository tasksRepository,</div><div class="line">                           @NonNull TaskDetailContract.View taskDetailView) &#123;</div><div class="line">    mTaskId = taskId;</div><div class="line">    mTasksRepository = checkNotNull(tasksRepository, <span class="string">"tasksRepository cannot be null!"</span>);</div><div class="line">    mTaskDetailView = checkNotNull(taskDetailView, <span class="string">"taskDetailView cannot be null!"</span>);</div><div class="line"></div><div class="line">    mTaskDetailView.setPresenter(<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这里调用了 <code>TaskDetailFragment</code> 的 <code>setPresenter</code> 方法来设置 P 模块。</p>
<p>分别调用 <code>TasksRepository</code>  和 <code>TaskDetailFragment</code> 的相应的方法来实现数据的操作以及视图的更新。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</div><div class="line">    openTask();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">openTask</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (Strings.isNullOrEmpty(mTaskId)) &#123;</div><div class="line">        mTaskDetailView.showMissingTask();</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mTaskDetailView.setLoadingIndicator(<span class="keyword">true</span>);</div><div class="line">    mTasksRepository.getTask(mTaskId, <span class="keyword">new</span> TasksDataSource.GetTaskCallback() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTaskLoaded</span><span class="params">(Task task)</span> </span>&#123;</div><div class="line">            <span class="comment">// The view may not be able to handle UI updates anymore</span></div><div class="line">            <span class="keyword">if</span> (!mTaskDetailView.isActive()) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            mTaskDetailView.setLoadingIndicator(<span class="keyword">false</span>);</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == task) &#123;</div><div class="line">                mTaskDetailView.showMissingTask();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                showTask(task);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDataNotAvailable</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="comment">// The view may not be able to handle UI updates anymore</span></div><div class="line">            <span class="keyword">if</span> (!mTaskDetailView.isActive()) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            mTaskDetailView.showMissingTask();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showTask</span><span class="params">(@NonNull Task task)</span> </span>&#123;</div><div class="line">    String title = task.getTitle();</div><div class="line">    String description = task.getDescription();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (Strings.isNullOrEmpty(title)) &#123;</div><div class="line">        mTaskDetailView.hideTitle();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        mTaskDetailView.showTitle(title);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (Strings.isNullOrEmpty(description)) &#123;</div><div class="line">        mTaskDetailView.hideDescription();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        mTaskDetailView.showDescription(description);</div><div class="line">    &#125;</div><div class="line">    mTaskDetailView.showCompletionStatus(task.isCompleted());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>TaskDetailFragment</code> 中调用 <code>TaskDetailPresenter</code> 的对应方法来实现数据的增删改查。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onResume();</div><div class="line">    mPresenter.start();</div><div class="line">&#125;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">    fab.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">            mPresenter.editTask();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">...</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (item.getItemId()) &#123;</div><div class="line">        <span class="keyword">case</span> R.id.menu_delete:</div><div class="line">            mPresenter.deleteTask();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showCompletionStatus</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> complete)</span> </span>&#123;</div><div class="line">    Preconditions.checkNotNull(mDetailCompleteStatus);</div><div class="line"></div><div class="line">    mDetailCompleteStatus.setChecked(complete);</div><div class="line">    mDetailCompleteStatus.setOnCheckedChangeListener(</div><div class="line">            <span class="keyword">new</span> CompoundButton.OnCheckedChangeListener() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCheckedChanged</span><span class="params">(CompoundButton buttonView, <span class="keyword">boolean</span> isChecked)</span> </span>&#123;</div><div class="line">                    <span class="keyword">if</span> (isChecked) &#123;</div><div class="line">                        mPresenter.completeTask();</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        mPresenter.activateTask();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Data-Model层"><a href="#Data-Model层" class="headerlink" title="Data Model层"></a>Data Model层</h3><p>App需要的数据都是通过Data模块来提供，由它去完成访问网络和数据库等。</p>
<p><img src="http://www.plantuml.com/plantuml/svg/dPB1IWCn48RlUOhGKqNR9-XXfO88RH5Rl8_9j0sTtPHaTa7KcsyXz1syU15y6-jh6BVhrYvn1M_9Fr--6S8adi5ndfAO6IQKdV7rvNRpijqyZgr6-dX-VNzwwmWn0x_oPy0mjRbJA0Vt_Ruimv5LGFjA2tc5Q-iDMtVR2gMMyOUlwjre8mUzNjpQ54H9OJ96DuTGRevo9uxb0hcCkyd4PfESI8uiw38Q0j4Dg9LKrU4ey8Kr-llH_isKdSaMaaDueKzadP_lmDzD7WeyL7tTIb7DA9kk2VcVtC5eDGkAJG5_E-DStAa8mGsh8NPVsAsB3kSE_RAHXhqBx2bHD6zj-Y0Ip7HOvqy0" alt="效果图"></p>
<ul>
<li>接口 <code>TasksDataSource</code> 定义了操作数据的各种方法。</li>
<li>类 <code>TasksLocalDataSource</code> 实现了<code>TasksDataSource</code> 接口，可以操作本地数据库来实现数据的存储和读取。 </li>
<li>类 <code>TasksRemoteDataSource</code> 实现了<code>TasksDataSource</code> 接口，用来模拟网络数据的读取上上传。</li>
<li>类 <code>TasksRepository</code> 实现了<code>TasksDataSource</code> 接口，提供来对数据访问的能力，它持有 <code>TasksLocalDataSource</code> 和 <code>TasksRemoteDataSource</code> 的对象，由它们真正实现对本地数据和网络数据的操作。</li>
</ul>
<h3 id="util工具类"><a href="#util工具类" class="headerlink" title="util工具类"></a>util工具类</h3><p>这部分不再介绍，想了解详情的看代码即可。</p>
]]></content>
    
    <summary type="html">
    
      介绍 Google 开源的 Android 架构中的 MVP 架构
    
    </summary>
    
      <category term="Android 架构" scheme="http://yoursite.com/categories/Android-%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Android 架构" scheme="http://yoursite.com/tags/Android-%E6%9E%B6%E6%9E%84/"/>
    
      <category term="android-architecture" scheme="http://yoursite.com/tags/android-architecture/"/>
    
  </entry>
  
  <entry>
    <title>Android 架构 android-architecture 简介</title>
    <link href="http://yoursite.com/2017/09/05/android-architecture-google-samples/"/>
    <id>http://yoursite.com/2017/09/05/android-architecture-google-samples/</id>
    <published>2017-09-05T02:00:00.000Z</published>
    <updated>2018-03-11T13:47:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>开发框架对于每个 Android 开发者来说也是必须要面对的话题，从 MVC 到 MVP，再到 MVVM。并不能说哪种框架说最好的，他们各有自己的特点，那么我们就需要从自己的项目实际出发来选择合适的架构。<br>Google 也给出了 Android 架构的示例，即 android-architecture。目前已经开源在 Github 上面供开发者学习使用。<br><a href="https://github.com/googlesamples/android-architecture/" target="_blank" rel="external">GitHub 地址</a><br>本文作为 android-architecture 开篇之作来简单介绍一下这个项目。</p>
<h2 id="源码简介"><a href="#源码简介" class="headerlink" title="源码简介"></a>源码简介</h2><p><code>git clone</code> 之后，用 <code>git branch -a</code> 来查看分支，每个分支代表一个简单的架构示例。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">* master</div><div class="line">  remotes/origin/HEAD -&gt; origin/master</div><div class="line">  remotes/origin/deprecated-todo-databinding</div><div class="line">  remotes/origin/deprecated-todo-mvp-contentproviders</div><div class="line">  remotes/origin/deprecated-todo-mvp-loaders</div><div class="line">  remotes/origin/dev-todo-mvp-clean-fix-memory-leak</div><div class="line">  remotes/origin/dev-todo-mvp-kotlin</div><div class="line">  remotes/origin/dev-todo-mvp-tablet</div><div class="line">  remotes/origin/dev-todo-mvvm-live</div><div class="line">  remotes/origin/dev-todo-mvvm-live-kotlin</div><div class="line">  remotes/origin/dev-todo-mvvm-rxjava</div><div class="line">  remotes/origin/master</div><div class="line">  remotes/origin/revert-375-feature/mikeBreaksThenHeFixes</div><div class="line">  remotes/origin/todo-mvp</div><div class="line">  remotes/origin/todo-mvp-clean</div><div class="line">  remotes/origin/todo-mvp-dagger</div><div class="line">  remotes/origin/todo-mvp-rxjava</div><div class="line">  remotes/origin/todo-mvvm-databinding</div><div class="line">  remotes/origin/todo-mvvm-live</div></pre></td></tr></table></figure>
<p><code>deprecated</code> 表示废弃的项目，<code>dev</code> 表示仍在完善中的项目。</p>
]]></content>
    
    <summary type="html">
    
      介绍 Google 开源的 Android 架构 android-architecture 中的各个项目
    
    </summary>
    
      <category term="Android 架构" scheme="http://yoursite.com/categories/Android-%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Android 架构" scheme="http://yoursite.com/tags/Android-%E6%9E%B6%E6%9E%84/"/>
    
      <category term="android-architecture" scheme="http://yoursite.com/tags/android-architecture/"/>
    
  </entry>
  
  <entry>
    <title>J2V8 -- 注册 Java 回调函数</title>
    <link href="http://yoursite.com/2017/08/10/open-source-j2v8-registerting-java-callback/"/>
    <id>http://yoursite.com/2017/08/10/open-source-j2v8-registerting-java-callback/</id>
    <published>2017-08-10T02:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文译自<a href="https://eclipsesource.com/blogs/2015/06/06/registering-java-callbacks-with-j2v8/" target="_blank" rel="external">Registering Java Callbacks with J2V8</a>，并加入了自己的一些理解。</p>
<p>使用 J2V8 时是可以使用 JavaScript 来调用 Java 的方法的，下面就介绍一些如何注册 Java 的回调函数来供 JavaScript 调用。</p>
<h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>在 JavaScript 中，函数也即是对象，可以被操作也可以被传递。在使用 J2V8 时，任何的 JavaScript 方法都可以映射到 Java 的方法之上，当这些方法被调用时，J2V8 就会调用 Java 的方法来代替，并把参数传递给 Java 的方法。</p>
<h2 id="注册-Java-方法"><a href="#注册-Java-方法" class="headerlink" title="注册 Java 方法"></a>注册 Java 方法</h2><p>Java 的方法可以通过两种方法注册为回调函数，可以通过实现 <code>JavaCallback</code> 接口来实现（如果没有返回值时，也可以通过 <code>JavaVoidCallback</code> 来实现），或者是反射地把已经实现的 Java 方法注册为回调函数。</p>
<h3 id="JavaCallback"><a href="#JavaCallback" class="headerlink" title="JavaCallback"></a>JavaCallback</h3><p>先来看下面一段代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">V8 v8 = V8.createV8Runtime();</div><div class="line">JavaVoidCallback callback = <span class="keyword">new</span> JavaVoidCallback() &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(<span class="keyword">final</span> V8Object receiver, <span class="keyword">final</span> V8Array parameters)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (parameters.length() &gt; <span class="number">0</span>) &#123;</div><div class="line">            Object arg1 = parameters.get(<span class="number">0</span>);</div><div class="line">            Log.e(<span class="string">"Test"</span>, <span class="string">"arg1 = "</span> + arg1);</div><div class="line">            <span class="keyword">if</span> (arg1 <span class="keyword">instanceof</span> Releasable) &#123;</div><div class="line">                ((Releasable) arg1).release();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">v8.registerJavaMethod(callback, <span class="string">"print"</span>);</div><div class="line">v8.executeScript(<span class="string">"print('hello, world');"</span>);</div><div class="line"></div><div class="line">v8.release();</div></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arg1 = hello, world</div></pre></td></tr></table></figure>
<p>上面的例子中创建了 <code>JavaVoidCallback</code> 的一个匿名内部类，把该类的一个实例注册为一个全局的作用域中的方法，并命名为 <code>print</code> 方法，那么我们在 JavaScript 中就可以向调用其他 JavaScript 的方法一样来调用 <code>print</code> 方法了。</p>
<h3 id="通过反射来注册"><a href="#通过反射来注册" class="headerlink" title="通过反射来注册"></a>通过反射来注册</h3><p>先来看下面一段代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Console</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(<span class="keyword">final</span> String message)</span> </span>&#123;</div><div class="line">        Log.i(<span class="string">"Test INFO"</span>,<span class="string">"[INFO] "</span> + message);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(<span class="keyword">final</span> String message)</span> </span>&#123;</div><div class="line">        Log.e(<span class="string">"Test ERROR"</span>,<span class="string">"[ERROR] "</span> + message);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</div><div class="line">    V8 v8 = V8.createV8Runtime();</div><div class="line">    Console console = <span class="keyword">new</span> Console();</div><div class="line">    V8Object v8Console = <span class="keyword">new</span> V8Object(v8);</div><div class="line">    v8.add(<span class="string">"console"</span>, v8Console);</div><div class="line">    v8Console.registerJavaMethod(console, <span class="string">"log"</span>, <span class="string">"log"</span>, <span class="keyword">new</span> Class&lt;?&gt;[] &#123; String.class &#125;);</div><div class="line">    v8Console.registerJavaMethod(console, <span class="string">"error"</span>, <span class="string">"error"</span>, <span class="keyword">new</span> Class&lt;?&gt;[] &#123; String.class &#125;);</div><div class="line">    v8Console.release();</div><div class="line">    v8.executeScript(<span class="string">"console.log('hello, world');"</span>);</div><div class="line">    v8.release();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[INFO] hello, world</div></pre></td></tr></table></figure>
<p>在上面的例子中，一个已经实现的类的方法被注册为回调函数。</p>
<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>参数可以从 JavaScript  传递到 Java，如果是通过实现 <code>JavaCallback</code> 来注册回调函数，那么参数会以 <code>V8Array</code> 的形式来传递。<code>V8Array</code> 包含了一些 <code>V8Object</code> 对象或者是一些原始数据。这些 <code>V8Array</code> 并不需要我们去释放，因为它不是由开发者创建的。但是任何从这个 <code>V8Array</code> 中获取的作为参数的 <code>V8Object</code> 都需要手动的进行释放，因为它们是作为方法调用的结果返回给你的。<br>如果方法是通过反射的方式进行注册的，那么这个方法的所有的参数类型都是已知的。在这种情形下，传递给 Javascript 函数的参数必须与作为它的回调函数的 Java 方法的一致。</p>
<h2 id="接收器"><a href="#接收器" class="headerlink" title="接收器"></a>接收器</h2><p>当 JavaScript 调用通过 Java 注册的回调函数时，这个被调用的 JavaScript 对象会作为第一个参数进行传递。<br>看下面一段 JavaScript 代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> array1 = [&#123;<span class="attr">first</span>:<span class="string">'Ian'</span>&#125;, &#123;<span class="attr">first</span>:<span class="string">'Jordi'</span>&#125;, &#123;<span class="attr">first</span>:<span class="string">'Holger'</span>&#125;];</div><div class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array1.length; i++ ) &#123;</div><div class="line">  print.call(array1[i], <span class="string">" says Hi."</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这中情况下 <code>print</code> 方法会被调用，并且 “says Hi.” 会被作为参数传递到 Java。但是当前的 JavaScript 会作为一个接收器被传递过来。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonPrinter</span> <span class="keyword">implements</span> <span class="title">JavaVoidCallback</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(<span class="keyword">final</span> V8Object receiver, <span class="keyword">final</span> V8Array parameters)</span> </span>&#123;</div><div class="line">        Log.e(<span class="string">"Test"</span>,receiver.getString(<span class="string">"first"</span>) + parameters.get(<span class="number">0</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReceiver</span><span class="params">()</span> </span>&#123;</div><div class="line">    V8 v8 = V8.createV8Runtime();</div><div class="line">    v8.registerJavaMethod(<span class="keyword">new</span> PersonPrinter(), <span class="string">"print"</span>);</div><div class="line">    v8.executeVoidScript(<span class="string">""</span></div><div class="line">            + <span class="string">"var array1 = [&#123;first:'Ian'&#125;, &#123;first:'Jordi'&#125;, &#123;first:'Holger'&#125;];\n"</span></div><div class="line">            + <span class="string">"for ( var i = 0; i &lt; array1.length; i++ ) &#123;\n"</span></div><div class="line">            + <span class="string">"  print.call(array1[i], \" says Hi.\");\n"</span></div><div class="line">            + <span class="string">"&#125;\n"</span>);</div><div class="line">    v8.release();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Ian says Hi.</div><div class="line">Jordi says Hi.</div><div class="line">Holger says Hi.</div></pre></td></tr></table></figure>
<p>把调用者也打印出来了。</p>
<h2 id="V8Function-类"><a href="#V8Function-类" class="headerlink" title="V8Function 类"></a>V8Function 类</h2><p>在 J2V8 3.0 版本中，引入了一种 <code>V8Function</code> 类。<code>V8Function</code> 类是 <code>V8Object</code> 的子类，只要一个函数通过是 <code>getObject()</code> 调用被返回的话，那么返回的就是一个 <code>V8Function</code> 对象。<code>V8Function</code> 类有一个 <code>call()</code> 方法，可以使用它来在 Java 中调用 JavaScript 方法。</p>
]]></content>
    
    <summary type="html">
    
      介绍 J2V8 如何注册 Java 回调函数
    
    </summary>
    
      <category term="V8" scheme="http://yoursite.com/categories/V8/"/>
    
    
      <category term="V8" scheme="http://yoursite.com/tags/V8/"/>
    
      <category term="J2V8" scheme="http://yoursite.com/tags/J2V8/"/>
    
  </entry>
  
  <entry>
    <title>J2V8 -- 开始使用J2V8</title>
    <link href="http://yoursite.com/2017/08/07/open-source-j2v8-getting-started/"/>
    <id>http://yoursite.com/2017/08/07/open-source-j2v8-getting-started/</id>
    <published>2017-08-07T02:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文译自<a href="https://eclipsesource.com/blogs/tutorials/getting-started-with-j2v8/" target="_blank" rel="external">Getting Started With J2V8</a>，并加入了自己的一些理解。</p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>J2V8 是对 Google 的目前非常流行的 JavaScript 引擎 V8 的 Java 封装，J2V8 的开发使 Android 高效执行 JavaScript 带来了可能。<a href="https://tabrisjs.com/" target="_blank" rel="external">Tabris.js</a> 就是基于 J2V8 开发的一款移动端 App。J2V8 可以运行在 Windows，Linux 以及 Mac OS 上面。这篇入门教程主要来介绍如何使用J2V8来在Android上面运行JavaScript脚本。<br><a href="https://github.com/eclipsesource/J2V8" target="_blank" rel="external">Github源码地址</a><br>J2V8 非常注重性能和内存的消耗，为了达到这些目的在设计的时候做了很大的努力。<br>如果一段 Javascript 代码的执行结果是一个32位整数，那么它可以直接作为一个原始类型被访问，而不必转化为一个包装类的实例。这对于64位的浮点数（doubles）和布尔类型的数据来说同样是适用的。<br>J2V8 使用了一套“懒加载”技术，也就是说，一个 JavaScript 只有在它被需要使用的时候才会通过 JNI 复制到 Java 中，如果 Javascript 返回了一个大型的数组，这个数组的内容直到数组中的元素的被需要的时候才会被加载到 Java 中。<br>J2V8 仅仅是对 V8 的 Java 封装并暴露出来一系列的接口供 Java 调用，V8 引擎是用 C++ 写的，为了使用 V8，就需要使用JNI来进行调用。C++ 中需要开发者进行内存管理，有申请就需要有对应的释放。V8 的垃圾回收器会帮助我们做一些工作，但是一些 Native 的一些句柄对象如果不再使用的时候仍然需要我们调用 <code>release()</code> 去释放它们。<br>如果有内存泄漏，当程序运行结束时会有一些报告，比如会有一些打印和异常抛出。</p>
<h2 id="J2V8的使用"><a href="#J2V8的使用" class="headerlink" title="J2V8的使用"></a>J2V8的使用</h2><p>J2V8目前支持的平台</p>
<ul>
<li>j2v8</li>
<li>j2v8_android</li>
<li>j2v8_android_armv7l</li>
<li>j2v8_android_x86</li>
<li>j2v8_linux_x86_64</li>
<li>j2v8_macosx_x86_64</li>
<li>j2v8_win32_x86</li>
<li>j2v8_win32_x86_64</li>
</ul>
<p>仅介绍在 Android 环境下的使用。</p>
<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>在build.gradle中添加依赖：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile &apos;com.eclipsesource.j2v8:j2v8:4.5.0@aar&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><p>运行下面一段 Hello World 代码，这段脚本将两个字符串连接起来并且返回了结果字符串的长度：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">var</span> hello = <span class="string">'hello, '</span>;</div><div class="line"> <span class="keyword">var</span> world = <span class="string">'world!'</span>;</div><div class="line">hello.concat(world).length;</div></pre></td></tr></table></figure>
<p>要使用J2V8，首先你必须创建一个运行时环境，J2V8为此提供了一个静态工厂方法。在创建一个运行时环境时，同时也会加载J2V8的本地库。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">V8 runtime = V8.createV8Runtime();</div><div class="line"><span class="keyword">int</span> result = runtime.executeIntegerScript(<span class="string">""</span></div><div class="line">        + <span class="string">"var hello = 'hello, ';\n"</span></div><div class="line">        + <span class="string">"var world = 'world!';\n"</span></div><div class="line">        + <span class="string">"hello.concat(world).length;\n"</span>);</div><div class="line">Log.e(<span class="string">"Test"</span>,<span class="string">"JS result = "</span>+result);</div><div class="line">runtime.release();</div></pre></td></tr></table></figure>
<p>会打印：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">JS result = 13</div></pre></td></tr></table></figure>
<p>为了执行脚本，它提供了多个基于不同返回值的执行方法。在这个例子里，我们使用了 <code>executeIntegerScript()</code> 这个方法，因为脚本执行的结果是一个int类型的整数，并且不需要任何的类型转换和包装。当应用结束时，运行时环境必须被释放。<br>稍微改动一下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">V8 runtime = V8.createV8Runtime();</div><div class="line">String result = runtime.executeStringScript(<span class="string">""</span></div><div class="line">        + <span class="string">"var hello = 'hello, ';\n"</span></div><div class="line">        + <span class="string">"var world = 'world!';\n"</span></div><div class="line">        + <span class="string">"hello.concat(world);\n"</span>);</div><div class="line">Log.e(<span class="string">"Test"</span>,<span class="string">"JS result = "</span>+result);</div><div class="line">runtime.release();</div></pre></td></tr></table></figure>
<p>会打印：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">JS result = hello, world!</div></pre></td></tr></table></figure>
<p>这里我们使用 <code>executeStringScript()</code> 方法返回的是一个 <code>String</code> 的对象。</p>
<h2 id="获取Javascript对象"><a href="#获取Javascript对象" class="headerlink" title="获取Javascript对象"></a>获取Javascript对象</h2><p>使用J2V8你可以从Java中获取javascript对象的句柄，下面用一段代码来演示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">testJ2V8</span><span class="params">()</span></span>&#123;</div><div class="line">    V8 runtime = V8.createV8Runtime();</div><div class="line">    runtime.executeVoidScript(<span class="string">""</span></div><div class="line">            + <span class="string">"var person = &#123;&#125;;\n"</span></div><div class="line">            + <span class="string">"var hockeyTeam = &#123;name : 'WolfPack'&#125;;\n"</span></div><div class="line">            + <span class="string">"person.first = 'Ian';\n"</span></div><div class="line">            + <span class="string">"person['last'] = 'Bull';\n"</span></div><div class="line">            + <span class="string">"person.hockeyTeam = hockeyTeam;\n"</span>);</div><div class="line"></div><div class="line">    V8Object person = runtime.getObject(<span class="string">"person"</span>);</div><div class="line">    V8Object hockeyTeam = person.getObject(<span class="string">"hockeyTeam"</span>);</div><div class="line">    Log.e(<span class="string">"Test"</span>,<span class="string">" JS result name = "</span>+hockeyTeam.getString(<span class="string">"name"</span>));</div><div class="line">    person.release();</div><div class="line">    hockeyTeam.release();</div><div class="line"></div><div class="line">    runtime.release();</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">JS result name = WolfPack</div></pre></td></tr></table></figure>
<p>因为 <code>V8Object</code> 是底层 Javascript 对象的引用，那么我们也可以对这个对象进行操作，比如现在为Javascript增加新的属性，比如 <code>hockeyTeam.add(&quot;captain&quot;, person);</code> 在进行了这一步操作之后，新添加的属性 <code>captain</code> 可以在Javascript中立刻被访问到。以下代码可以验证这一点：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hockeyTeam.add(<span class="string">"captain"</span>, person);</div><div class="line">Log.e(<span class="string">"Test"</span>,<span class="string">" JS result  "</span>+runtime.executeBooleanScript(<span class="string">"person === hockeyTeam.captain"</span>));</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">JS result  true</div></pre></td></tr></table></figure>
<h2 id="V8Array"><a href="#V8Array" class="headerlink" title="V8Array"></a>V8Array</h2><p><code>V8Array</code> 继承自 <code>V8Object</code>，因此提供了相同的存取器方法（accessor / mutator methods，相当于setter / getter方法）。除此之外，<code>V8Array</code> 的元素也可以通过索引来进行访问。<code>V8Object</code> 和 <code>V8Array</code> 都遵循了流式编程模型 ，这使得创建新的JavaScript对象变得非常简单。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">V8Object player1 = <span class="keyword">new</span> V8Object(runtime).add(<span class="string">"name"</span>, <span class="string">"John"</span>);</div><div class="line">V8Object player2 = <span class="keyword">new</span> V8Object(runtime).add(<span class="string">"name"</span>, <span class="string">"Chris"</span>);</div><div class="line">V8Array players = <span class="keyword">new</span> V8Array(runtime).push(player1).push(player2);</div><div class="line">hockeyTeam.add(<span class="string">"players"</span>, players);</div><div class="line">player1.release();</div><div class="line">player2.release();</div><div class="line">players.release();</div></pre></td></tr></table></figure>
<h2 id="调用JavaScript函数"><a href="#调用JavaScript函数" class="headerlink" title="调用JavaScript函数"></a>调用JavaScript函数</h2><p>除了执行JavaScript脚本，也可以使用J2V8来调用JavaScript函数。既可以返回一个结果，也可以没有返回值。请看以下javascript函数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> hockeyTeam = &#123;</div><div class="line">     <span class="attr">name</span>      : <span class="string">'WolfPack'</span>,</div><div class="line">     <span class="attr">players</span>   : [],</div><div class="line">     <span class="attr">addPlayer</span> : <span class="function"><span class="keyword">function</span>(<span class="params">player</span>) </span>&#123;</div><div class="line">                   <span class="keyword">this</span>.players.push(player);</div><div class="line">                   <span class="keyword">return</span> <span class="keyword">this</span>.players.size;</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为了在Java中调用上述对象中的函数，我们仅仅只需要一个 <code>hockeyTeam</code> 的句柄。通过这个对象句柄，我们可以向执行脚本一样执行函数。不同与脚本的是，可以传递给函数一个 <code>V8Array</code> 作为它的参数。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">V8 runtime = V8.createV8Runtime();</div><div class="line">runtime.executeVoidScript(<span class="string">""</span></div><div class="line">        + <span class="string">"var hockeyTeam = &#123;\n"</span></div><div class="line">        + <span class="string">"name      : 'WolfPack',\n"</span></div><div class="line">        + <span class="string">"players   : [],\n"</span></div><div class="line">        + <span class="string">"addPlayer : function(player) &#123;\n"</span></div><div class="line">        + <span class="string">"              this.players.push(player);\n"</span></div><div class="line">        + <span class="string">"              return this.players.length;\n"</span></div><div class="line">        + <span class="string">"&#125;\n"</span></div><div class="line">        + <span class="string">"&#125;\n"</span>);</div><div class="line"></div><div class="line">V8Object hockeyTeam = runtime.getObject(<span class="string">"hockeyTeam"</span>);</div><div class="line">V8Object player1 = <span class="keyword">new</span> V8Object(runtime).add(<span class="string">"name"</span>, <span class="string">"John"</span>);</div><div class="line">V8Array parameters = <span class="keyword">new</span> V8Array(runtime).push(player1);</div><div class="line"><span class="keyword">int</span> size = hockeyTeam.executeIntegerFunction(<span class="string">"addPlayer"</span>, parameters);</div><div class="line">Log.e(<span class="string">"Test"</span>, <span class="string">"JS result size = "</span>+size);</div><div class="line">parameters.release();</div><div class="line">player1.release();</div><div class="line">hockeyTeam.release();</div><div class="line">runtime.release();</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">JS result size = 1</div></pre></td></tr></table></figure>
<p>参数数组的元素被映射为 JavaSscrip t函数的参数。参数数组元素的数量和在函数中声明的参数的数量不必相符，<code>undefined</code> 会被作为默认的值。</p>
]]></content>
    
    <summary type="html">
    
      介绍 J2V8 的基本用法，如何在 Android 中使用 J2V8，如何通过 Java 来调用 JavaScript 的对象和方法。
    
    </summary>
    
      <category term="V8" scheme="http://yoursite.com/categories/V8/"/>
    
    
      <category term="V8" scheme="http://yoursite.com/tags/V8/"/>
    
      <category term="J2V8" scheme="http://yoursite.com/tags/J2V8/"/>
    
  </entry>
  
  <entry>
    <title>WebApp 和 NativeApp 的世纪之战</title>
    <link href="http://yoursite.com/2017/08/05/mobile-internet-webapp-vs-nativeapp/"/>
    <id>http://yoursite.com/2017/08/05/mobile-internet-webapp-vs-nativeapp/</id>
    <published>2017-08-05T02:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>自从Android系统在手机上应用开始，在移动端 Native App 和 Web App之间的战争似乎就没有停止过，Web App 及其各种变体向Native App 发起了无数次的冲锋，但Native App的地位仍然是岿然不动，甚至我们一提起移动互联网，就专指 Native App。这和 PC 端的景象完全不一样。随着轻应用、Hybrid App 、React Native、Weex已经微信小程序的出现，我们不得不再一次审视这个问题。</p>
<h2 id="WebApp的特点"><a href="#WebApp的特点" class="headerlink" title="WebApp的特点"></a>WebApp的特点</h2><p>WebApp 之所以有资本向 Native App 发起挑战，那么它自身还是有实力的：</p>
<ul>
<li>跨平台：所有系统都能运行，Android、IOS和Web</li>
<li>免安装：打开浏览器，就能使用</li>
<li>快速部署：升级只需在服务器更新代码</li>
<li>超链接：可以与其他网站互连，可以被搜索引擎检索</li>
</ul>
<p>Web在PC端的这些优点，使得互联网和原生应用分庭抗礼，除了一些工具性的软件，一个浏览器基本可以满足我们的日常需要：购物，娱乐等等。<br>但是移动互联网毕竟不是PC互联网，它的一些缺点也限制了它的使用。</p>
<ul>
<li>体验差。手机App的操作流畅性，远超网站。</li>
<li>业界不支持。所有公司的移动端开发重点，几乎都是原生app。</li>
<li>用户不在乎。大多数用户都选择使用手机app，而不是网站。</li>
</ul>
<p>那么，之所以业界不支持和用户不在乎的原因无非就是性能差，从而造成用户体验差。</p>
<h2 id="WebApp的性能问题"><a href="#WebApp的性能问题" class="headerlink" title="WebApp的性能问题"></a>WebApp的性能问题</h2><p>Web app输给Native app的地方，不是界面（UI），而是操作性能。</p>
<ul>
<li>Web基于DOM，而DOM很慢。浏览器打开网页时，需要解析文档，在内存中生成DOM结构，如果遇到复杂的文档，这个过程是很慢的。可以想象一下，如果网页上有上万个、甚至几十万个形状（不管是图片或CSS），生成DOM需要多久？更不要提与其中某一个形状互动了。</li>
<li>DOM拖慢JavaScript。所有的DOM操作都是同步的，会堵塞浏览器。JavaScript 操作 DOM 时，必须等前一个操作结束，才能执行后一个操作。只要一个操作有卡顿，整个网页就会短暂失去响应。浏览器重绘网页的频率是60FPS（即16毫秒/帧），JavaScript 做不到在16毫秒内完成 DOM 操作，因此产生了跳帧。用户体验上的不流畅、不连贯就源于此。</li>
<li>虽然现在浏览器也支持多线程，比如JS解析在一个线程，渲染在一个线程，但一般是按照先解析再渲染再执行 JS 这样的顺序执行的。</li>
<li>在Android早期的版本中，webview的性能很差</li>
</ul>
<p>上面这些原因，对于PC还不至于造成严重的性能问题，但是手机的硬件资源相对有限，用户互动又相对频繁，结果跟 Native App 一比，就完全落在了下风。</p>
<h2 id="WebApp的优化方向"><a href="#WebApp的优化方向" class="headerlink" title="WebApp的优化方向"></a>WebApp的优化方向</h2><ul>
<li>多线程浏览器。每个网页应该由多个线程进行处理，主线程只负责布局和渲染，而且应该在16毫秒内完成。Mozilla 的 Servo 就是这样一个项目，JS解析，页面渲染和JS执行在三个能并发执行的任务中进行。Chrome也支持多线程。</li>
<li>多进程浏览器。</li>
<li>并发布局。把页面中那些不会影响其它元素属性的独立部分识别出来，让它们与剩余部分并行渲染。</li>
<li>DOM 的异步操作。JavaScript 对 DOM 的操作不再是同步的，而是触发后，交给Event Loop机制进行监听。</li>
<li>非 DOM 方案。浏览器不再将网页处理成 DOM 结构，而是变为其他结构。React 的 Virtual DOM 方案就是这一类的尝试，还有更激进的方案，比如用数据库取代 DOM。</li>
<li>采用原生的渲染方案。布局的解析在JS端完成，渲染在Native端完成。</li>
<li>优化WebView性能，目前chromium支持硬件渲染。</li>
</ul>
<p>目前，WebView以及JS引擎的优化日新月异，因此，我们相信可以带动WebApp的崛起。</p>
<h2 id="WebApp的进化史"><a href="#WebApp的进化史" class="headerlink" title="WebApp的进化史"></a>WebApp的进化史</h2><p><img src="/images/mobile-internet-webapp-vs-nativeapp/webapp-evolution.png" alt="效果图"></p>
<p><img src="/images/mobile-internet-webapp-vs-nativeapp/webapps.png" alt="效果图"></p>
<!--           
M站、轻应用 -> PWA -> HybridApp -> React Native、Weex
                                -> DCloud、APICloud、AppCan -> 微信小程序、支付宝小程序

 - M站、轻应用：
   - 代表的是在手机浏览器上浏览网页，这个和PC端是没有差别的。这个阶段还不能称为应用，称为Web，它还是采用传统的B/S结构，强烈依赖浏览器和网络，离线能力可以忽略不计。
 - PWA：
   - 本质其实为web，依赖与浏览器的支持，只是针对移动端进行了优化，加入了推送、缓存、添加至launcher，自定义启动画面等符合Native应用设计标准的接口，是对Web app的一种扩展，使得Web app在界面和功能上更像Native app。
 - HybridApp：
   - H5+WebView+原生的开发模式，部分功能用纯 Web 来实现。
 - React Native、Weex：
   - 扩展 JS 实现 UI，原生渲染。既有Native的体验，又有JS的开发效率
   - 具有调用和扩展原生组件以及系统API的能力
   - ReactNative 原生渲染，虚拟 Dom；weex 采用真实 Dom。
   - ReactNative UI用ReactJS实现；Weex UI用Vue.js实现 
 - DCloud、APICloud、AppCan： 
   - 这一类可以归结为HTML5+应用，C/S结构，Web渲染
   - 支持对原生API的调用及扩展。
   - 运行需要在官方提供的基座上运行
   - 比起纯Web应用，性能和体验会提升很多
 - 微信小程序、支付宝小程序：
   - 微信小程序是微信全新定义的规范，是基于 xml+js 的，不支持也不兼容 HTML，兼容受限的部分 CSS 写法。是基于 xml 和 js 定义的一套标记语言、全新的生态、一个轻OS。
   - 它是C/S架构的。
   - 具有调用原生系统API的能力。

把小程序放在后面是觉得背靠微信这座大山，它更有机会把这个生态做起来。
-->
<h2 id="WebApp的未来"><a href="#WebApp的未来" class="headerlink" title="WebApp的未来"></a>WebApp的未来</h2><p><a href="https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2650994254&amp;idx=1&amp;sn=b5a291309cb35e229bdc66052200a39f&amp;chksm=bdbf0e1d8ac8870bd7a6a1b80cd6dbc906251c8b31ea5959419846b312b3b84b8048aa05cc3f&amp;mpshare=1&amp;scene=2&amp;srcid=0928TYbsbovyAI1YJ7aXvfl9&amp;from=timeline&amp;isappinstalled=0&amp;key=9289b6ec21f92a5928c971e763199c62958da88ae7805f55d3594ba99548c4cba2da3c66d7d31038140a81ad4b95694b&amp;ascene=2&amp;uin=MjgyMTI0MDAzMg==&amp;devicetype=android-21&amp;version=26031933&amp;nettype=WIFI&amp;pass_ticket=9nkAV8PvXod8+giTIP0YLiH5aU7EbFOiU8wA5OZrfdzQWSgzai7BiNlh3Ko9rg9y&amp;wx_header=1" target="_blank" rel="external">微信小程序，大多数人误解的8个问题 </a>这篇文章写的很好，大家可以阅读一下。</p>
<p>小程序和直达服务等形态应该是移动端App的未来，在移动互联网下半场你想打开一个应用，可能就不需要去应用商店下载个App，等下载完安装后使用，只需要打开微信就行了，找到相关应用就可以了。<br>直达服务依据手机OS生态，可以做到与手机系统服务的紧密结合，小程序依据微信生态，但绝不是把微信作为一个入口或者是作为一个应用商店这么简单的事，它的野心是一个OS生态。</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.ruanyifeng.com/blog/2015/02/future-of-dom.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2015/02/future-of-dom.html</a><br><a href="https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2650994254&amp;idx=1&amp;sn=b5a291309cb35e229bdc66052200a39f&amp;chksm=bdbf0e1d8ac8870bd7a6a1b80cd6dbc906251c8b31ea5959419846b312b3b84b8048aa05cc3f&amp;mpshare=1&amp;scene=2&amp;srcid=0928TYbsbovyAI1YJ7aXvfl9&amp;from=timeline&amp;isappinstalled=0&amp;key=9289b6ec21f92a5928c971e763199c62958da88ae7805f55d3594ba99548c4cba2da3c66d7d31038140a81ad4b95694b&amp;ascene=2&amp;uin=MjgyMTI0MDAzMg==&amp;devicetype=android-21&amp;version=26031933&amp;nettype=WIFI&amp;pass_ticket=9nkAV8PvXod8+giTIP0YLiH5aU7EbFOiU8wA5OZrfdzQWSgzai7BiNlh3Ko9rg9y&amp;wx_header=1" target="_blank" rel="external">https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2650994254&amp;idx=1&amp;sn=b5a291309cb35e229bdc66052200a39f&amp;chksm=bdbf0e1d8ac8870bd7a6a1b80cd6dbc906251c8b31ea5959419846b312b3b84b8048aa05cc3f&amp;mpshare=1&amp;scene=2&amp;srcid=0928TYbsbovyAI1YJ7aXvfl9&amp;from=timeline&amp;isappinstalled=0&amp;key=9289b6ec21f92a5928c971e763199c62958da88ae7805f55d3594ba99548c4cba2da3c66d7d31038140a81ad4b95694b&amp;ascene=2&amp;uin=MjgyMTI0MDAzMg==&amp;devicetype=android-21&amp;version=26031933&amp;nettype=WIFI&amp;pass_ticket=9nkAV8PvXod8+giTIP0YLiH5aU7EbFOiU8wA5OZrfdzQWSgzai7BiNlh3Ko9rg9y&amp;wx_header=1</a><br><a href="http://36kr.com/p/209983.html" target="_blank" rel="external">http://36kr.com/p/209983.html</a><br><a href="http://naotu.baidu.com/file/1eb556f3380e8189be859348527ec518?token=a5a049eb4c618e70" target="_blank" rel="external">http://naotu.baidu.com/file/1eb556f3380e8189be859348527ec518?token=a5a049eb4c618e70</a></p>
<!--           
http://blog.csdn.net/u011643473/article/details/43192083
http://blog.csdn.net/talking12391239/article/details/21168489
http://www.imweb.io/topic/58e3bfa845e5c13468f567d5
https://www.baidu.com/s?word=weex+react+native+%E5%B0%8F%E7%A8%8B%E5%BA%8F&tn=50000021_hao_pg&ie=utf-8&sc=UWd1pgw-pA7EnHc1FMfqnHRsPWfsP1TdPH0drauW5y99U1Dznzu9m1YLrHD4PHbdP6&ssl_sample=s_4%2Cs_30&srcqid=1343649615270981180
http://www.bijishequ.com/detail/356228?p=
http://www.jianshu.com/p/20a3d10a4d57
https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&mid=2650994254&idx=1&sn=b5a291309cb35e229bdc66052200a39f&chksm=bdbf0e1d8ac8870bd7a6a1b80cd6dbc906251c8b31ea5959419846b312b3b84b8048aa05cc3f&mpshare=1&scene=2&srcid=0928TYbsbovyAI1YJ7aXvfl9&from=timeline&isappinstalled=0&key=9289b6ec21f92a5928c971e763199c62958da88ae7805f55d3594ba99548c4cba2da3c66d7d31038140a81ad4b95694b&ascene=2&uin=MjgyMTI0MDAzMg==&devicetype=android-21&version=26031933&nettype=WIFI&pass_ticket=9nkAV8PvXod8+giTIP0YLiH5aU7EbFOiU8wA5OZrfdzQWSgzai7BiNlh3Ko9rg9y&wx_header=1
http://naotu.baidu.com/file/1eb556f3380e8189be859348527ec518?token=a5a049eb4c618e70
http://blog.csdn.net/edu_enth/article/details/56007422
-->
]]></content>
    
    <summary type="html">
    
      分析一下WebApp的特点、性能问题、优化方向、进化史以及未来发展方向
    
    </summary>
    
      <category term="移动互联网" scheme="http://yoursite.com/categories/%E7%A7%BB%E5%8A%A8%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
    
      <category term="WebApp" scheme="http://yoursite.com/tags/WebApp/"/>
    
      <category term="NativeApp" scheme="http://yoursite.com/tags/NativeApp/"/>
    
  </entry>
  
  <entry>
    <title>Android：使用JitPack发布Github开源库</title>
    <link href="http://yoursite.com/2017/07/21/android-use-jitpack-to-publish-github-project/"/>
    <id>http://yoursite.com/2017/07/21/android-use-jitpack-to-publish-github-project/</id>
    <published>2017-07-21T02:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>JitPack 是一个发布流程非常简单的自定义的 Maven 仓库，可以用来发布自己的 JVM 或者 Android 开源库。<br>JitPack 的官方文档在这里 <a href="https://jitpack.io/docs/ANDROID/" target="_blank" rel="external">Publish an Android library</a>。<br>参考我的Github上面一个<a href="https://github.com/heqiangflytosky/FastScrollWebView" target="_blank" rel="external">开源项目</a>。<br>下面来介绍一下使用JitPack发布一个开源项目的步骤。</p>
<h2 id="GitHub准备"><a href="#GitHub准备" class="headerlink" title="GitHub准备"></a>GitHub准备</h2><h3 id="代码准备"><a href="#代码准备" class="headerlink" title="代码准备"></a>代码准备</h3><p>首先将需要发布的library工程准备好。<br>打开根目录的build.gradle，在 dependencies 节点添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    ...</div><div class="line">    dependencies &#123;</div><div class="line">        ...</div><div class="line">        classpath &apos;com.github.dcendents:android-maven-gradle-plugin:1.3&apos;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如图：</p>
<p><img src="/images/android-use-jitpack-to-publish-github-project/jitpack-root-gradle.png" alt="效果图"></p>
<p>然后打开 library/build.gradle，添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">apply plugin: &apos;com.github.dcendents.android-maven&apos;</div><div class="line">group=&apos;com.github.&lt;YourUsername&gt;&apos;</div><div class="line">...</div></pre></td></tr></table></figure>
<p>如图：<br><img src="/images/android-use-jitpack-to-publish-github-project/jiapack-lib-gradle.png" alt="效果图"></p>
<p>检查一下工程的 gradle/wrapper/ 目录下面是否有下面两个文件，并检查一下确保这两个文件没有添加到.gitignore文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gradle-wrapper.jar</div><div class="line">gradle-wrapper.properties</div></pre></td></tr></table></figure>
<p>如果没有的话用<code>gradle wrappe</code>和<code>./gradlew install</code>生成一下。<br>然后就可以把工程push到Github上面。</p>
<h3 id="Github配置"><a href="#Github配置" class="headerlink" title="Github配置"></a>Github配置</h3><p>push到Github上以后，要添加一个Release版本，如图点击项目中的 release 按钮：</p>
<p><img src="/images/android-use-jitpack-to-publish-github-project/jitpack-github-add-release.png" alt="效果图"></p>
<p>如果还没有发布过版本，点击Create a new release 按钮，如果以前发布过，点击 Draft a new release，然后填写版本信息：</p>
<p><img src="/images/android-use-jitpack-to-publish-github-project/jiapack-github-add-version.png" alt="效果图"></p>
<p>填写完成后点击Publish release。</p>
<h2 id="发布到jitpack"><a href="#发布到jitpack" class="headerlink" title="发布到jitpack"></a>发布到jitpack</h2><p>复制项目地址，打开 <a href="https://jitpack.io/" target="_blank" rel="external">https://jitpack.io/</a> ，把项目地址粘贴到输入框，然后点击 look up 然后就可以看到你创建的开源库了：</p>
<p><img src="/images/android-use-jitpack-to-publish-github-project/gitpack-look-up.png" alt="效果图"></p>
<p>点击 get it，在页面下方就可以看到使用方法了。</p>
<p><img src="/images/android-use-jitpack-to-publish-github-project/jitpack-get-it.png" alt="效果图"></p>
<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="Error-Unable-to-load-class-‘org-gradle-internal-logging-LoggingManagerInternal"><a href="#Error-Unable-to-load-class-‘org-gradle-internal-logging-LoggingManagerInternal" class="headerlink" title="Error:Unable to load class ‘org.gradle.internal.logging.LoggingManagerInternal"></a>Error:Unable to load class ‘org.gradle.internal.logging.LoggingManagerInternal</h3><p><img src="/images/android-use-jitpack-to-publish-github-project/jitpack-error-1.png" alt="效果图"></p>
<p>gradle 版本和 android-maven-gradle-plugin 版本不协调，我原来用的gradle版本是1.3.0，android-maven-gradle-plugin版本是1.5，把android-maven-gradle-plugin版本改为1.3就可以了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">classpath &apos;com.android.tools.build:gradle:1.3.0&apos;</div><div class="line">classpath &apos;com.github.dcendents:android-maven-gradle-plugin:1.3&apos;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      介绍使用JitPack发布Github开源库的流程
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="JitPack" scheme="http://yoursite.com/tags/JitPack/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 绘制 UML 图 -- PlantUML + Gravizo</title>
    <link href="http://yoursite.com/2017/07/08/development-tool-markdown-plant-uml/"/>
    <id>http://yoursite.com/2017/07/08/development-tool-markdown-plant-uml/</id>
    <published>2017-07-08T02:00:00.000Z</published>
    <updated>2018-03-11T13:47:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们在工作中会经常使用UML图，实现UML的工具有很多，首先是绘图软件，但是所有的绘图软件有这样一个问题：这些软件绘制成的图片无法进行版本控制。也就是说如果后面你想修改软件的话，如果在软件里面的原图没有保存的话，就要重新再画了。这对于我们习惯于版本控制的码农来说显然是无法忍受的。<br>那么下面介绍一种可以在Markdown中使用的绘制UML工具 —— PlantUML，以及渲染引擎 Gravizo。</p>
<h2 id="PlantUML简介"><a href="#PlantUML简介" class="headerlink" title="PlantUML简介"></a>PlantUML简介</h2><p>可以登陆<a href="http://plantuml.com/" target="_blank" rel="external">PlantUML官网</a>看一下，里面有支持的UML类型以及使用方法。</p>
<p><img src="/images/development-tool-markdown-plant-uml/plantuml-uml-supported.png" alt="支持的类型"></p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>打开<a href="http://www.plantuml.com/plantuml" target="_blank" rel="external">在线作图网址</a>，在上面的代码框里面输入代码。<br>完成后点击 Submit 按钮提交查看预览图，同时在预览图下面的 URL 地址框里面会有生成的 UML 图的 png 地址图，当然你也可以选择生成 SVG 或者 ASCII Art。把这个图片地址复制到 Markdown 就可以使用了。<br>比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">@startuml</div><div class="line">Title &quot;BundleLauncher类图&quot;</div><div class="line">interface BundleExtractor</div><div class="line">abstract class BundleLauncher</div><div class="line">abstract class SoBundleLauncher</div><div class="line">abstract class AssetBundleLauncher</div><div class="line"></div><div class="line">BundleLauncher &lt;|-- ActivityLauncher</div><div class="line">BundleLauncher &lt;|-- SoBundleLauncher</div><div class="line">SoBundleLauncher &lt;|-- ApkBundleLauncher</div><div class="line">BundleExtractor &lt;|.. SoBundleLauncher</div><div class="line">SoBundleLauncher &lt;|-- AssetBundleLauncher</div><div class="line">AssetBundleLauncher &lt;|-- WebBundleLauncher</div><div class="line"></div><div class="line">class ActivityLauncher &#123;</div><div class="line">+ public preloadBundle(Bundle bundle)</div><div class="line">&#125;</div><div class="line"></div><div class="line">class SoBundleLauncher &#123;</div><div class="line">+ public preloadBundle(Bundle bundle)</div><div class="line">&#125;</div><div class="line"></div><div class="line">class ApkBundleLauncher &#123;</div><div class="line">+ public loadBundle(Bundle bundle)</div><div class="line">&#125;</div><div class="line"></div><div class="line">class AssetBundleLauncher &#123;</div><div class="line">+ public loadBundle(Bundle bundle)</div><div class="line">&#125;</div><div class="line">@enduml</div></pre></td></tr></table></figure>
<p><img src="http://www.plantuml.com/plantuml/png/2yaioKbLK78gpKl9IVL9BCrBpaWjUhvnzzFP-vIuClDAKelI4fDJ5I3ohXKbHOd99Vb5N8b9nM2cGd9EOd6n0gfsTDdWVFpoZiN5gILeIhXG-GesDRgw2ex99PbbcIMLS5NO567OXYu0DQiW6qqTcX-1olJqY3ODYnUmY44KXwSceViM6X1e_bEevj9MA2XDoibCLYWeIit9Jqo1QDI0K0f9O4gJgnPc0eRhI3O18roGZI16FnPV4sS20000" alt="UML类图"></p>
<p>如果想修改怎么办？<br>打开<a href="http://www.plantuml.com/plantuml/uml/SyfFKj2rKt3CoKnELR1Io4ZDoSa70000" target="_blank" rel="external">在线作图网址</a>，把图片的 url 复制到下面的 url 框里面，点击 Submit ，在上面代码框里面会出现该图片对应的代码，然后修改即可。修改完成后再次生成图片即可。<br>是不是相当的方便呢？</p>
<h2 id="基本通用语法教程"><a href="#基本通用语法教程" class="headerlink" title="基本通用语法教程"></a>基本通用语法教程</h2><p>这里只介绍一些通用的语法命令，其他具体的语法请参考<a href="http://translate.plantuml.com/zh/PlantUML_Language_Reference_Guide_ZH.pdf" target="_blank" rel="external">官方文档</a></p>
<ol>
<li>添加标题</li>
</ol>
<p>可以用 <code>Title</code> 后面加标题</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Title &quot;继承关系图&quot;</div><div class="line"></div><div class="line">Father &lt;|-- Son</div></pre></td></tr></table></figure>
<p><img src="http://www.plantuml.com/plantuml/png/2yaioKbLK7g-U_cpplrFMpS_txpxwUnzIbnSReab6Qb52ZOrkheAmVbv0000" alt="PlantUML"></p>
<ol>
<li>注释</li>
</ol>
<p>所有以单引号开头的行 ‘ 都是注释。你也可以使用多行注释,多行注释以 /‘ 开头 ‘/ 结尾。</p>
<h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><h4 id="方法和属性的访问权限"><a href="#方法和属性的访问权限" class="headerlink" title="方法和属性的访问权限"></a>方法和属性的访问权限</h4><table>
<thead>
<tr>
<th style="text-align:center">标识</th>
<th style="text-align:center">属性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center">private</td>
</tr>
<tr>
<td style="text-align:center">#</td>
<td style="text-align:center">protected</td>
</tr>
<tr>
<td style="text-align:center">+</td>
<td style="text-align:center">public</td>
</tr>
<tr>
<td style="text-align:center">~</td>
<td style="text-align:center">package private</td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">class Dummy &#123;</div><div class="line">- private field1</div><div class="line"># protected field2</div><div class="line">+ public field3</div><div class="line">~ package method1()</div><div class="line">- private method3()</div><div class="line"># protected method4()</div><div class="line">+ public method2()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://www.plantuml.com/plantuml/png/Iyv9B2vMS2dDpQrKgERILIWeoYnBB4bLICjCpKanv5862kINf2QNfAP0X8ouj1KAIfDoCfCXV6EkEeM2nEJinFHKXTpKaepy54CDJIHp86B6G35aeo2Y9a1Hk6aG8IEWK2q0" alt="UML类图"></p>
<h4 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h4><ul>
<li>继承</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Father &lt;|-- Son</div></pre></td></tr></table></figure>
<p><img src="http://www.plantuml.com/plantuml/png/SqiioKWjKh2fqTLL2CxF0m00" alt="UML类图"></p>
<ul>
<li>实现</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">abstract class AbstractList</div><div class="line">interface List</div><div class="line">List &lt;|.. AbstractList</div></pre></td></tr></table></figure>
<p><img src="http://www.plantuml.com/plantuml/png/IqmgBYbAJ2vHICv9B2vMS8HoVJABIxWoyqfIYz8IarCLm5mGeM1JewU7eWe0" alt="UML类图"></p>
<ul>
<li>组合</li>
</ul>
<p>关联关系的一种特例，他体现的是一种contains-a的关系，这种关系比聚合更强，也称为强聚合；他同样体现整体与部分间的关系，但此时整体与部分是不可分的，整体的生命周期结束也就意味着部分的生命周期结束。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Human *-- Brain</div></pre></td></tr></table></figure>
<p><img src="http://www.plantuml.com/plantuml/png/yoZDJSnJqDBLLN0gIipC0m00" alt="UML类图"></p>
<ul>
<li>聚合</li>
</ul>
<p>关联关系的一种特例，他体现的是整体与部分、拥有的关系，即has-a的关系，此时整体与部分之间是可分离的，他们可以具有各自的生命周期。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Company o-- Human</div></pre></td></tr></table></figure>
<p><img src="http://www.plantuml.com/plantuml/png/SyxFBKZCgrJ8rzLLy2ZDJSm30000" alt="UML类图"></p>
<ul>
<li>关联</li>
</ul>
<p>类与类之间的联接。强依赖关系，表现在代码层面，为被关联类B以类属性的形式出现在关联类A中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">class Water</div><div class="line">class Human</div><div class="line">Human --&gt; Water</div></pre></td></tr></table></figure>
<p><img src="http://www.plantuml.com/plantuml/png/Iyv9B2vM24yiIItYIWQpFKfp4_EumAI2hguTH0u0" alt="UML类图"></p>
<ul>
<li>依赖</li>
</ul>
<p>类与类之间的联接。一个类A使用到了另一个类B，而这种使用关系是具有偶然性的、临时性的、非常弱的，表现在代码层面，类B作为参数被类A在某个方法中使用，例如人和烟草的关系。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Human ..&gt; Cigarette</div></pre></td></tr></table></figure>
<p><img src="http://www.plantuml.com/plantuml/png/yoZDJSnJqDEpKt3EJ4yiIYqfIGK0" alt="UML类图"></p>
<h4 id="域"><a href="#域" class="headerlink" title="域"></a>域</h4><p>在作图时，如果遇到了名称相同包名不同的类这时就要用域来进行区分。可以用 <code>namespace</code>，也可以直接用包名：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class BaseClass</div><div class="line"></div><div class="line">namespace net.dummy #DDDDDD &#123;</div><div class="line">    .BaseClass &lt;|-- Person</div><div class="line">    Meeting o-- Person</div><div class="line">    </div><div class="line">    .BaseClass &lt;|- Meeting</div><div class="line">&#125;</div><div class="line"></div><div class="line">namespace net.foo &#123;</div><div class="line">  net.dummy.Person  &lt;|- Person</div><div class="line">  .BaseClass &lt;|-- Person</div><div class="line"></div><div class="line">  net.dummy.Meeting o-- Person</div><div class="line">&#125;</div><div class="line"></div><div class="line">BaseClass &lt;|-- net.unused.Person</div><div class="line"></div><div class="line">class net.unused.Person &#123;</div><div class="line">  + public void test();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://www.plantuml.com/plantuml/png/TKvB2i8m4Dtd50_SAD9SG5VgLl0ACHabq2J5IGgYlRjjf87M-bR3lA-k5JCEYkauN49uvOWRfGcUeZJ9kITMfmoy17h8eiR-NLMuq8E3pzIPA5f_HvY-5soZL7Jpobi8kQZKosyIigsa_banCIxCwUjcna6UV68oSipGcVqXygmjcdIjhKORh44aZklDJdGV" alt="UML类图"></p>
<h3 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h3><p>语法参考<a href="http://plantuml.com/sequence-diagram" target="_blank" rel="external">官方网站</a></p>
<h2 id="PlantUML-Gravizo"><a href="#PlantUML-Gravizo" class="headerlink" title="PlantUML + Gravizo"></a>PlantUML + Gravizo</h2><p>上面用 PlantUML 来绘制 UML 的方法，我们需要去在线编写代码生成 UML 图片，然后再把图片地址集成到 Markdown 里面，步骤还是稍微繁琐，现在介绍 Gravizo 的使用可以解决这个问题。<br><a href="http://www.gravizo.com/" target="_blank" rel="external">Gravizo</a> 是一个绘图引擎，只需要用 Url 包含 PlantUML 代码放到一个 <code>img</code> 标签中，就可以在线实时的绘制出我们需要的 UML 图。<br>比如下面的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;img src=&apos;https://g.gravizo.com/svg?</div><div class="line">abstract class AbstractList;</div><div class="line">interface List;</div><div class="line">List &lt;|.. AbstractList;</div><div class="line">&apos;/&gt;</div></pre></td></tr></table></figure>
<p>把上面的代码放到 Markdown 里面，就可以实时的把 UML 图绘制出来了。</p>
<p><img src="https://g.gravizo.com/svg?
abstract class AbstractList;
interface List;
List <|.. AbstractList;
"></p>
<p>当然这个也需要集成的 Markdown 里面支持 Gravizo 才能显示出来，Hexo 博客是可以显示出来的，CSDN 博客就显示不出来。</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://www.jianshu.com/p/1256e2643923" target="_blank" rel="external">http://www.jianshu.com/p/1256e2643923</a><br><a href="http://www.jianshu.com/p/e92a52770832" target="_blank" rel="external">http://www.jianshu.com/p/e92a52770832</a><br><a href="https://yq.aliyun.com/articles/25405" target="_blank" rel="external">https://yq.aliyun.com/articles/25405</a></p>
]]></content>
    
    <summary type="html">
    
      介绍使用 PlantUML 绘制 UML 图，以及渲染引擎组合 PlantUML + Gravizo 的使用
    
    </summary>
    
      <category term="开发工具" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="开发工具" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Markdown" scheme="http://yoursite.com/tags/Markdown/"/>
    
      <category term="PlantUML" scheme="http://yoursite.com/tags/PlantUML/"/>
    
      <category term="Gravizo" scheme="http://yoursite.com/tags/Gravizo/"/>
    
  </entry>
  
  <entry>
    <title>Android：关于Drawable的缓存机制应该了解的知识</title>
    <link href="http://yoursite.com/2017/06/15/android-knowledge-point-drawable-cache/"/>
    <id>http://yoursite.com/2017/06/15/android-knowledge-point-drawable-cache/</id>
    <published>2017-06-15T02:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题演示"><a href="#问题演示" class="headerlink" title="问题演示"></a>问题演示</h2><p>下面我们通过一个实例来演示一个我们在使用Drawable过程中经常会遇到的一个问题。</p>
<p>首先贴出UI布局文件，这里放了两个 <code>ImageView</code>，它们的寬高不一样，而且对他们加以蓝色的背景。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">              <span class="attr">xmlns:mz</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">              <span class="attr">android:id</span>=<span class="string">"@+id/root"</span></div><div class="line">              <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">              <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">              <span class="attr">android:padding</span>=<span class="string">"40dp"</span></div><div class="line">              <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/first"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"100dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"200dp"</span></div><div class="line">        <span class="attr">android:scaleType</span>=<span class="string">"fitXY"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"#1E90FF"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/second"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"200dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></div><div class="line">        <span class="attr">android:layout_marginTop</span>=<span class="string">"50dp"</span></div><div class="line">        <span class="attr">android:scaleType</span>=<span class="string">"fitXY"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"#1E90FF"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h3><p>首先我们给第一个<code>ImageView</code>设置一个显示图片。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> BitmapDrawable firstDrawable = (BitmapDrawable) getResources()</div><div class="line">        .getDrawable(R.drawable.test_mutate);</div><div class="line">mFirstImage = (ImageView) findViewById(R.id.first);</div><div class="line">mSecondImage = (ImageView) findViewById(R.id.second);</div><div class="line"></div><div class="line">mFirstImage.setImageDrawable(firstDrawable);</div></pre></td></tr></table></figure></p>
<p>看下面的效果，因为第二个我们没有设置前景图片，因此会现实背景图片。这个很正常，我们不会有什么疑问。</p>
<p><img src="/images/android-knowledge-point-drawable-cache/drawable-1.png" alt="效果图"></p>
<h3 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h3><p>接下来我们在原来代码的基础上添加下面代码，为第二个<code>ImageView</code>设置图片。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">......</div><div class="line">mSecondImage.setImageDrawable(firstDrawable);</div></pre></td></tr></table></figure>
<p>看一下效果图，第一个图片的现实效果和<strong>实例1</strong>变的不一样了，你也许会感觉这个很正常，因为同一个<code>Drawable</code>对象设置给两个大小不同的<code>ImageView</code>，第二个尺寸改变以后第一个也跟着改变了。</p>
<p><img src="/images/android-knowledge-point-drawable-cache/drawable-2.png" alt="效果图"></p>
<h3 id="实例3"><a href="#实例3" class="headerlink" title="实例3"></a>实例3</h3><p>那么我们再实例化一个<code>Drawable</code>对象设置给第二个<code>ImageView</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> BitmapDrawable firstDrawable = (BitmapDrawable) getResources()</div><div class="line">        .getDrawable(R.drawable.test_mutate);</div><div class="line"><span class="keyword">final</span> BitmapDrawable secondDrawable = (BitmapDrawable) getResources()</div><div class="line">        .getDrawable(R.drawable.test_mutate);</div><div class="line">mFirstImage = (ImageView) findViewById(R.id.first);</div><div class="line">mSecondImage = (ImageView) findViewById(R.id.second);</div><div class="line"></div><div class="line">mFirstImage.setImageDrawable(firstDrawable);</div><div class="line">mSecondImage.setImageDrawable(secondDrawable);</div></pre></td></tr></table></figure>
<p>看一下效果图，这下显示正常了，这个也可以理解，两个不同的<code>Drawable</code>对象设置给不同的<code>ImageView</code>，他们互不干涉。那么真的是这样的吗？再接着往下面看。</p>
<p><img src="/images/android-knowledge-point-drawable-cache/drawable-3.png" alt="效果图"></p>
<h3 id="实例4"><a href="#实例4" class="headerlink" title="实例4"></a>实例4</h3><p>我们在上面的代码的基础上把第二个<code>Drawable</code>的 alpha 设置为15 0 。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">......</div><div class="line">secondDrawable.setAlpha(<span class="number">150</span>);</div></pre></td></tr></table></figure>
<p>看下面效果图，奇怪的现象发生了，第一个图片也变成半透明的了，为什么呢？</p>
<p><img src="/images/android-knowledge-point-drawable-cache/drawable-4.png" alt="效果图"></p>
<p><strong>问题1:</strong>为什么设置第二个图片的 alpha 会对第一个图片有影响？</p>
<h3 id="实例5"><a href="#实例5" class="headerlink" title="实例5"></a>实例5</h3><p>你也许听说过 <code>mutate()</code> 的作用，那么现在我们改一下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">......</div><div class="line">secondDrawable.mutate().setAlpha(<span class="number">150</span>);</div></pre></td></tr></table></figure>
<p>看下面效果图，现在正常了。</p>
<p><img src="/images/android-knowledge-point-drawable-cache/drawable-5.png" alt="效果图"></p>
<p><strong>问题2:</strong> <code>mutate()</code> 方法是做什么的？</p>
<h3 id="实例6"><a href="#实例6" class="headerlink" title="实例6"></a>实例6</h3><p>下面我们再对代码稍作修改：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> BitmapDrawable firstDrawable = (BitmapDrawable) getResources()</div><div class="line">        .getDrawable(R.drawable.test_mutate);</div><div class="line"></div><div class="line">mFirstImage = (ImageView) findViewById(R.id.first);</div><div class="line">mSecondImage = (ImageView) findViewById(R.id.second);</div><div class="line"></div><div class="line">mFirstImage.setImageDrawable(firstDrawable);</div><div class="line">mSecondImage.setImageDrawable(firstDrawable.getConstantState().newDrawable());</div></pre></td></tr></table></figure>
<p>这样两个图片也能正常显示出来了。</p>
<p><img src="/images/android-knowledge-point-drawable-cache/drawable-3.png" alt="效果图"></p>
<p>修改一下最后一行代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Drawable drawable = firstDrawable.getConstantState().newDrawable();</div><div class="line">mSecondImage.setImageDrawable(drawable);</div><div class="line">drawable.setAlpha(<span class="number">150</span>);</div></pre></td></tr></table></figure>
<p>这样的效果仍然是两个图片都是半透明的。</p>
<p>也需要调用<code>drawable.mutate().setAlpha(150);</code>才能使第二个半透明，第一个没有半透明。</p>
<p><strong>问题3:</strong> <code>Drawable.getConstantState().newDrawable()</code>又是怎么回事？</p>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>首先通过<strong>实例3</strong>我们可以得到这样的结论：分别两次调用<code>getResources().getDrawable(R.drawable.test_mutate)</code>肯定不是指向同一个对象的。为了验证真实性，我们添加Log。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Log.e(&quot;Test&quot;,&quot;firstDrawable = &quot;+firstDrawable+&quot;, secondDrawable = &quot;+secondDrawable);</div></pre></td></tr></table></figure>
<p>有下面打印：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">3110  3110 E Test    : firstDrawable = android.graphics.drawable.BitmapDrawable@3109294, secondDrawable = android.graphics.drawable.BitmapDrawable@d2fb13d</div></pre></td></tr></table></figure>
<p>那么，<code>firstDrawable</code>和<code>secondDrawable</code>肯定不是指向同一个对象了。</p>
<h3 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h3><p>我们来分析<strong>问题1</strong>为什么设置第二个图片的 alpha 会对第一个图片有影响？<br>两个完全不同的<code>ImageView</code>因为设置了资源id相同的图片就产生了关联，现在我们可以猜想，<code>firstDrawable</code>和<code>secondDrawable</code>肯定存在某种联系的。此时我们可能立刻想到为了优化性能，Android内部是不是针对相同的资源使用了同一份位图信息呢？是不是有什么缓存机制呢？带着这个疑问我们先来分析<code>Resources</code>的源码。<br>在<code>Resources</code>类中，我们找到了<code>loadDrawable()</code>方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="keyword">final</span> DrawableCache caches;</div><div class="line">...</div><div class="line">    <span class="keyword">final</span> Drawable cachedDrawable = caches.getInstance(key, theme);</div><div class="line">    <span class="keyword">if</span> (cachedDrawable != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> cachedDrawable;</div><div class="line">    &#125;</div><div class="line">...</div></pre></td></tr></table></figure>
<p>这里会从<code>caches</code>里面获取曾经加载过的资源，如果找到就直接返回缓存。具体这个缓存是怎么放进去的我们就不再详细分析了。前面我们也说了，<code>firstDrawable</code>和<code>secondDrawable</code>是不同的对象，那他们在这个缓存里肯定也不是同一个<code>Drawable</code>了。<br>再直接往下看，<code>DrawableCache</code>是什么呢？<br><code>DrawableCache</code>继承自<code>ThemedResourceCache</code>。<br>下来看一下<code>DrawableCache</code>的<code>getInstance()</code>方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Drawable <span class="title">getInstance</span><span class="params">(<span class="keyword">long</span> key, Resources.Theme theme)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Drawable.ConstantState entry = get(key, theme);</div><div class="line">    <span class="keyword">if</span> (entry != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> entry.newDrawable(mResources, theme);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在我们知道了，<code>caches</code>里面缓存的不是<code>Drawable</code>对象，而是<code>Drawable.ConstantState</code>对象。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstantState</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Drawable <span class="title">newDrawable</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Drawable <span class="title">newDrawable</span><span class="params">(Resources res)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> newDrawable();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Drawable <span class="title">newDrawable</span><span class="params">(Resources res, Theme theme)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> newDrawable(<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getChangingConfigurations</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addAtlasableBitmaps</span><span class="params">(Collection&lt;Bitmap&gt; atlasList)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isAtlasable</span><span class="params">(Bitmap bitmap)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> bitmap != <span class="keyword">null</span> &amp;&amp; bitmap.getConfig() == Bitmap.Config.ARGB_8888;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canApplyTheme</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>ConstantState</code>类是一个抽象类，<code>BitmapDrawable.BitmapState</code>便是它的实现类之一。由于<code>getResources().getDrawable(R.drawable.test_mutate)</code>得到的是<code>BitmapDrawable</code>，那么我们就重点分析这个类。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BitmapState</span> <span class="keyword">extends</span> <span class="title">ConstantState</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Paint mPaint;</div><div class="line"></div><div class="line">    <span class="keyword">int</span>[] mThemeAttrs = <span class="keyword">null</span>;</div><div class="line">    Bitmap mBitmap = <span class="keyword">null</span>;</div><div class="line">    ColorStateList mTint = <span class="keyword">null</span>;</div><div class="line">    Mode mTintMode = DEFAULT_TINT_MODE;</div><div class="line">    <span class="keyword">int</span> mGravity = Gravity.FILL;</div><div class="line">    <span class="keyword">float</span> mBaseAlpha = <span class="number">1.0f</span>;</div><div class="line">    Shader.TileMode mTileModeX = <span class="keyword">null</span>;</div><div class="line">    Shader.TileMode mTileModeY = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">int</span> mTargetDensity = DisplayMetrics.DENSITY_DEFAULT;</div><div class="line">    <span class="keyword">boolean</span> mAutoMirrored = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> mChangingConfigurations;</div><div class="line">    <span class="keyword">boolean</span> mRebuildShader;</div><div class="line"></div><div class="line">    BitmapState(Bitmap bitmap) &#123;</div><div class="line">        mBitmap = bitmap;</div><div class="line">        mPaint = <span class="keyword">new</span> Paint(DEFAULT_PAINT_FLAGS);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    BitmapState(BitmapState bitmapState) &#123;</div><div class="line">        mBitmap = bitmapState.mBitmap;</div><div class="line">        mTint = bitmapState.mTint;</div><div class="line">        mTintMode = bitmapState.mTintMode;</div><div class="line">        mThemeAttrs = bitmapState.mThemeAttrs;</div><div class="line">        mChangingConfigurations = bitmapState.mChangingConfigurations;</div><div class="line">        mGravity = bitmapState.mGravity;</div><div class="line">        mTileModeX = bitmapState.mTileModeX;</div><div class="line">        mTileModeY = bitmapState.mTileModeY;</div><div class="line">        mTargetDensity = bitmapState.mTargetDensity;</div><div class="line">        mBaseAlpha = bitmapState.mBaseAlpha;</div><div class="line">        mPaint = <span class="keyword">new</span> Paint(bitmapState.mPaint);</div><div class="line">        mRebuildShader = bitmapState.mRebuildShader;</div><div class="line">        mAutoMirrored = bitmapState.mAutoMirrored;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canApplyTheme</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mThemeAttrs != <span class="keyword">null</span> || mTint != <span class="keyword">null</span> &amp;&amp; mTint.canApplyTheme();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addAtlasableBitmaps</span><span class="params">(Collection&lt;Bitmap&gt; atlasList)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (isAtlasable(mBitmap) &amp;&amp; atlasList.add(mBitmap)) &#123;</div><div class="line">            <span class="keyword">return</span> mBitmap.getWidth() * mBitmap.getHeight();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Drawable <span class="title">newDrawable</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BitmapDrawable(<span class="keyword">this</span>, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Drawable <span class="title">newDrawable</span><span class="params">(Resources res)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BitmapDrawable(<span class="keyword">this</span>, res);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getChangingConfigurations</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mChangingConfigurations</div><div class="line">                | (mTint != <span class="keyword">null</span> ? mTint.getChangingConfigurations() : <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>newDrawable()</code>方法里面返回的是一个新的<code>BitmapDrawable</code>对象，但是所有相同资源的<code>BitmapDrawable</code>对象共用同一个<code>BitmapState</code>对象。我们注意到<code>BitmapState</code>的<code>mBitmap</code>属性，这也验证了前面的猜想，它们共用同一个<code>Bitmap</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">private BitmapDrawable(BitmapState state, Resources res) &#123;</div><div class="line">    mBitmapState = state;</div><div class="line"></div><div class="line">    updateLocalState(res);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line">public void setAlpha(int alpha) &#123;</div><div class="line">    final int oldAlpha = mBitmapState.mPaint.getAlpha();</div><div class="line">    if (alpha != oldAlpha) &#123;</div><div class="line">        mBitmapState.mPaint.setAlpha(alpha);</div><div class="line">        invalidateSelf();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么我们<code>setAlpha()</code>操作实际改变的是<code>mBitmapState</code>的属性值，这也就不难理解<strong>问题1</strong>了，因为它们用的是同一个<code>BitmapState</code>对象。<br>为了验证这个结论，我们添加打印：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Log.e(<span class="string">"Test"</span>,<span class="string">"firstDrawable = "</span>+firstDrawable.getConstantState()+<span class="string">", secondDrawable = "</span>+secondDrawable.getConstantState());</div></pre></td></tr></table></figure>
<p>打印如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">4433  4433 E Test    : firstDrawable = android.graphics.drawable.BitmapDrawable$BitmapState@3109294, secondDrawable = android.graphics.drawable.BitmapDrawable$BitmapState@3109294</div></pre></td></tr></table></figure>
<p>它们确实是指向同一个对象的。</p>
<p>它们的关系可以用下图表示：</p>
<p><img src="/images/android-knowledge-point-drawable-cache/drawable-6.jpg" alt="效果图"></p>
<h3 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h3><p>接下来再来分析<strong>问题2:</strong> <code>mutate()</code> 方法是做什么的？</p>
<p>我们先来看一下<code>Drawable</code>中对这个方法的解释：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Make this drawable mutable. This operation cannot be reversed. A mutable</div><div class="line"> * drawable is guaranteed to not share its state with any other drawable.</div><div class="line"> * This is especially useful when you need to modify properties of drawables</div><div class="line"> * loaded from resources. By default, all drawables instances loaded from</div><div class="line"> * the same resource share a common state; if you modify the state of one</div><div class="line"> * instance, all the other instances will receive the same modification.</div><div class="line"> *</div><div class="line"> * Calling this method on a mutable Drawable will have no effect.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@return</span> This drawable.</div><div class="line"> * <span class="doctag">@see</span> ConstantState</div><div class="line"> * <span class="doctag">@see</span> #getConstantState()</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> Drawable <span class="title">mutate</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>mutate()</code>返回的<code>Drawable</code>对象不再与同资源的其他<code>Drawable</code>共用 state，那么它的属性改变后就不再影响其他的<code>Drawable</code>了。</p>
<p>在<code>BitmapDrawable</code>的<code>mutate()</code>方法里面确实又新建了一个<code>BitmapState</code>对象。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * A mutable BitmapDrawable still shares its Bitmap with any other Drawable</div><div class="line"> * that comes from the same resource.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@return</span> This drawable.</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Drawable <span class="title">mutate</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!mMutated &amp;&amp; <span class="keyword">super</span>.mutate() == <span class="keyword">this</span>) &#123;</div><div class="line">        mBitmapState = <span class="keyword">new</span> BitmapState(mBitmapState);</div><div class="line">        mMutated = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它们的关系可以用下图表示：</p>
<p><img src="/images/android-knowledge-point-drawable-cache/drawable-7.jpg" alt="效果图"></p>
<p><strong>注意：</strong> mutate操作是不可逆转的，已经调用过<code>mutate()</code>方法的<code>BitmapDrawable</code>对象再调用<code>mutate()</code>是不起作用的。这点在代码中可以清楚的看到。</p>
<h3 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h3><p>记下来分析<strong>问题3:</strong> <code>Drawable.getConstantState().newDrawable()</code>又是怎么回事？<br>经过上面的源码分析，这个很容易就理解了，它就是获得<code>Drawable</code>的<code>ConstantState</code>来重新实例化一个<code>Drawable</code>，两个<code>Drawable</code>还是共用一个<code>ConstantState</code>。<br>这个和重新调用<code>getResources().getDrawable(R.drawable.test_mutate)</code>原理是一样的。</p>
<h3 id="附加问题"><a href="#附加问题" class="headerlink" title="附加问题"></a>附加问题</h3><p>那为什么设置 alpha 两个图片互有影响，而在<strong>实例3</strong>中第二个<code>Drawable</code>大小尺寸改变却没有影响呢？<br>这就要附带分析一下<code>ImageView</code>的<code>ScaleType</code>原理。<br>我们从<code>ImageView.setImageDrawable</code>开始分析，这个方法的调用流程如图：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">├── ImageView.setImageDrawable</div><div class="line">     └── ImageView.updateDrawable</div><div class="line">          └── configureBounds()</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">configureBounds</span><span class="params">()</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="keyword">if</span> (dwidth &lt;= <span class="number">0</span> || dheight &lt;= <span class="number">0</span> || ScaleType.FIT_XY == mScaleType) &#123;</div><div class="line">        mDrawable.setBounds(<span class="number">0</span>, <span class="number">0</span>, vwidth, vheight);</div><div class="line">        mDrawMatrix = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDraw(canvas);</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (mDrawMatrix == <span class="keyword">null</span> &amp;&amp; mPaddingTop == <span class="number">0</span> &amp;&amp; mPaddingLeft == <span class="number">0</span>) &#123;</div><div class="line">        mDrawable.draw(canvas);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">int</span> saveCount = canvas.getSaveCount();</div><div class="line">        canvas.save();</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (mCropToPadding) &#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> scrollX = mScrollX;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> scrollY = mScrollY;</div><div class="line">            canvas.clipRect(scrollX + mPaddingLeft, scrollY + mPaddingTop,</div><div class="line">                    scrollX + mRight - mLeft - mPaddingRight,</div><div class="line">                    scrollY + mBottom - mTop - mPaddingBottom);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        canvas.translate(mPaddingLeft, mPaddingTop);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mDrawMatrix != <span class="keyword">null</span>) &#123;</div><div class="line">            canvas.concat(mDrawMatrix);</div><div class="line">        &#125;</div><div class="line">        mDrawable.draw(canvas);</div><div class="line">        canvas.restoreToCount(saveCount);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>configureBounds()</code>里面根据不同的<code>ScaleType</code>会进行不同的变换，包括设置绘制边界、缩放、位移、绘制是的矩阵变换等等。<br>在<code>onDraw()</code>方法中再把这个<code>Drawable</code>绘制到<code>Canvas</code>上，这些改变变化的只是<code>Drawable</code>本身，而对<code>ConstantState</code>不会有改变。<br>为了验证这个结论，我们在<strong>实例3</strong>代码基础上，添加一些Log。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">(View v)</span></span>&#123;</div><div class="line">    Log.e(<span class="string">"Test"</span>,<span class="string">"1 rect1 = "</span>+mFirstImage.getDrawable().getBounds());</div><div class="line">    Log.e(<span class="string">"Test"</span>,<span class="string">"2 rect2 = "</span>+mSecondImage.getDrawable().getBounds());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>打印如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">21313 21313 E Test    : 1 rect1 = Rect(0, 0 - 200, 400)</div><div class="line">21313 21313 E Test    : 2 rect2 = Rect(0, 0 - 400, 200)</div></pre></td></tr></table></figure>
<p>它们的<code>Drawable.mBounds</code>是不同的。</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://android-developers.googleblog.com/2009/05/drawable-mutations.html" target="_blank" rel="external">https://android-developers.googleblog.com/2009/05/drawable-mutations.html</a></p>
]]></content>
    
    <summary type="html">
    
      在Android中，出于对内存优化的考虑，对于图片的存储使用了缓存机制，资源id相同的图片使用了同一个位图信息，如果对这些机制不了解的话开发过程中就会造成一些困扰。本文通过实例和分析Drawable的缓存机制源码的方式来介绍一下Drawable的缓存机制，并且了解一下Drawable.mutate()的用法。
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android 深入理解 dumpsys</title>
    <link href="http://yoursite.com/2017/06/13/android-source-code-analysis-dumpsys/"/>
    <id>http://yoursite.com/2017/06/13/android-source-code-analysis-dumpsys/</id>
    <published>2017-06-13T02:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>在我的博客 <a href="http://www.heqiangfly.com/2014/10/15/android-development-skills-dumpsys/" target="_blank" rel="external">Android实用技巧之adb命令：dumpsys命令的使用</a> 一文中详细介绍了 dumpsys 的基本用法，那么本文将介绍一下它是如何实现的以及它的工作原理。<br>dumpsys 相关源码位置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">frameworks/native/cmds/dumpsys/dumpsys.cpp</div></pre></td></tr></table></figure>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>看到 dumpsys 源码我们发现，它的实现较为简单，全部的代码都在 dumpsys.cpp 中，编译得到 dumpsys 二进制文件。实现基本的思路就是向 servicemanager 获取相关的系统服务，然后调用相应系统服务的 <code>dump()</code> 方法打印相关数据。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* <span class="keyword">const</span> argv[])</span></span></div><div class="line">&#123;</div><div class="line">    signal(SIGPIPE, SIG_IGN);</div><div class="line">    <span class="comment">// 获取service_manager对象</span></div><div class="line">    sp&lt;IServiceManager&gt; sm = defaultServiceManager();</div><div class="line">    <span class="comment">// 清除输出缓冲区的内容</span></div><div class="line">    fflush(<span class="built_in">stdout</span>);</div><div class="line">    <span class="keyword">if</span> (sm == <span class="literal">NULL</span>) &#123;</div><div class="line">	......</div><div class="line">        <span class="keyword">return</span> <span class="number">20</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Vector&lt;String16&gt; services;</div><div class="line">    Vector&lt;String16&gt; args;</div><div class="line">    <span class="keyword">bool</span> showListOnly = <span class="literal">false</span>;</div><div class="line">    <span class="comment">// 解析dumpsys命令的参数，参数 l 表示只输出服务列表</span></div><div class="line">    <span class="keyword">if</span> ((argc == <span class="number">2</span>) &amp;&amp; (<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">"-l"</span>) == <span class="number">0</span>)) &#123;</div><div class="line">        showListOnly = <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 获取需要输出的服务列表</span></div><div class="line">    <span class="keyword">if</span> ((argc == <span class="number">1</span>) || showListOnly) &#123;</div><div class="line">        <span class="comment">// 不带参数表示要输出所有的服务</span></div><div class="line">        services = sm-&gt;listServices();</div><div class="line">        services.sort(sort_func);</div><div class="line">        args.add(String16(<span class="string">"-a"</span>));</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 根据参数添加指定服务到services列表</span></div><div class="line">        services.add(String16(argv[<span class="number">1</span>]));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;argc; i++) &#123;</div><div class="line">            args.add(String16(argv[i]));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">const</span> <span class="keyword">size_t</span> N = services.size();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (N &gt; <span class="number">1</span>) &#123;</div><div class="line">        ......</div><div class="line">        <span class="comment">// 打印出当前的服务列表</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</div><div class="line">            <span class="comment">// 根据服务名称获取服务对象</span></div><div class="line">            sp&lt;IBinder&gt; service = sm-&gt;checkService(services[i]);</div><div class="line">            <span class="keyword">if</span> (service != <span class="literal">NULL</span>) &#123;</div><div class="line">                aout &lt;&lt; <span class="string">"  "</span> &lt;&lt; services[i] &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 如果带有 l 参数，不再往下执行打印详细信息</span></div><div class="line">    <span class="keyword">if</span> (showListOnly) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 调用各个service的dump方法来完成服务信息的输出</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</div><div class="line">        <span class="comment">// 根据服务名称获取服务对象</span></div><div class="line">        sp&lt;IBinder&gt; service = sm-&gt;checkService(services[i]);</div><div class="line">        <span class="keyword">if</span> (service != <span class="literal">NULL</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (N &gt; <span class="number">1</span>) &#123;</div><div class="line">                aout &lt;&lt; <span class="string">"------------------------------------------------------------"</span></div><div class="line">                        <span class="string">"-------------------"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">                aout &lt;&lt; <span class="string">"DUMP OF SERVICE "</span> &lt;&lt; services[i] &lt;&lt; <span class="string">":"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span> err = service-&gt;dump(STDOUT_FILENO, args);</div><div class="line">            ......</div><div class="line">        &#125;</div><div class="line">        ......</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>我们都知道，Android的系统服务都是 <code>Binder</code> 的子类，他们都是由 servicemanager 来管理的，他们分别运行在不同的进程中。Android系统服务运行在 system_server 进程，servicemanager 运行在 servicemanager 进程中。他们之间的协作通过进程间的通信来完成。<br><code>Binder.dump()</code>方法就是打印系统服务信息的方法，Android 系统服务重新实现了父类的 <code>dump()</code> 方法来实现系统服务信息的输出，输出的信息完全有系统服务自己来控制。</p>
]]></content>
    
    <summary type="html">
    
      在Android开发过程中 dumpsys 命令是一个我们会经常使用的非常实用的命令，我们非常有必要来探究一下它是如何来带给我们一个如此便捷的查看Android各个服务信息的方式的。本文基于 Android6.0 来分析 dumpsys 源码以及其工作原理。
    
    </summary>
    
      <category term="Android源码分析" scheme="http://yoursite.com/categories/Android%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="dumpsys" scheme="http://yoursite.com/tags/dumpsys/"/>
    
      <category term="Android源码分析" scheme="http://yoursite.com/tags/Android%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Android 插件化框架Small解析--动态注册组件原理及启动插件Activity流程</title>
    <link href="http://yoursite.com/2017/05/12/open-source-android-plugins-small-principle/"/>
    <id>http://yoursite.com/2017/05/12/open-source-android-plugins-small-principle/</id>
    <published>2017-05-12T02:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="动态注册组件原理"><a href="#动态注册组件原理" class="headerlink" title="动态注册组件原理"></a>动态注册组件原理</h2><p>动态的注册组件就是我们常说的Hook技术。<br>想要了解插件化的Hook技术我们需要先了解一下 <code>Activity</code> 的启动流程，<code>Activity</code> 的启动流程要涉及到App进程以及system_server进程，system_server进程的AMS负责 <code>Activity</code> 的真实性校验以及生命周期管理，App进程负责创建 <code>Activity</code> 对象以及回调生命周期的方法。<br>由于<code>Activity</code> 的检验过程是在AMS进程完成的，我们对system_server进程里面的操作无能为力，只有在我们APP进程里面执行的过程才是有可能被Hook掉的，因此，所有的Hook我们只能在App进程完成，那么在AMS进程里面进行校验的 <code>Activity</code> 也必须是真实存在的。<br>因此，Hook的基本思路就是当调用AMS时，就用我们真实注册的存在的 <code>Activity</code> 信息（对应上一篇文章的AndroidManifest.xml中的A、A1、A2….A33等 <code>Activity</code>），AMS回调到App进程时替换为插件中需要启动的 <code>Activity</code> 信息，从而达到欺骗系统的目的。<br>可以先看一下我的博客<a href="http://www.heqiangfly.com/2016/04/10/android-source-code-analysis-activity-start-process/" target="_blank" rel="external">startActivity 流程</a>，通过看启动流程图我们可以清晰的看到，涉及到 <code>Acitivity</code> 的AMS进程和App进程的边界操作有两个：startActivity和对LAUNCH_ACTIVITY消息的处理，这也就是我们需要Hook的两个重要点。<br>下面通过实际代码来进程介绍。<br>前面我们说过，替换 <code>Instrumentation</code> 对象和 <code>ActivityThreadHandlerCallback</code> 是插件化工作中的重头戏。这里用到了我们说的“Hook”技术。<br><code>Instrumentation</code>类看一下<a href="https://developer.android.com/reference/android/app/Instrumentation.html?hl=zh-cn" target="_blank" rel="external">官方文档对这个类的解释</a>，该类跟踪 <code>Application</code> 及 <code>Activity</code> 的整个生命周期，它的一些方法在 <code>Application</code> 及 <code>Activity</code> 所有生命周期函数的调用中，都会先调用这些方法。<br>熟悉 <code>Activity</code> 启动流程的同学都知道，启动 <code>Activity</code> 是由 <code>Activity</code> 的 <code>startActivityForResult()</code> 方法启动，通过 <code>Instrumentation</code> 的 <code>execStartActivity</code> 方法激活生命周期。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivityForResult</span><span class="params">(Intent intent, <span class="keyword">int</span> requestCode, @Nullable Bundle options)</span> </span>&#123;</div><div class="line">    ……</div><div class="line">    <span class="keyword">if</span> (mParent == <span class="keyword">null</span>) &#123;</div><div class="line">        Instrumentation.ActivityResult ar =</div><div class="line">            mInstrumentation.execStartActivity(</div><div class="line">                <span class="keyword">this</span>, mMainThread.getApplicationThread(), mToken, <span class="keyword">this</span>,</div><div class="line">                intent, requestCode, options);</div><div class="line">        <span class="keyword">if</span> (ar != <span class="keyword">null</span>) &#123;</div><div class="line">            mMainThread.sendActivityResult(</div><div class="line">                mToken, mEmbeddedID, requestCode, ar.getResultCode(),</div><div class="line">                ar.getResultData());</div><div class="line">        &#125;</div><div class="line">    ……</div></pre></td></tr></table></figure>
<p><code>Activity</code> 的实例化在 <code>ActivityThread</code> 的 <code>performLaunchActivity()</code> 方法中通过 <code>Instrumentation</code> 的 <code>newActivity()</code> 方法实例化。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Activity <span class="title">performLaunchActivity</span><span class="params">(ActivityClientRecord r, Intent customIntent)</span> </span>&#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    Activity activity = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        java.lang.ClassLoader cl = r.packageInfo.getClassLoader();</div><div class="line">        activity = mInstrumentation.newActivity( <span class="comment">// Override entry 2</span></div><div class="line">                cl, component.getClassName(), r.intent);</div><div class="line">        StrictMode.incrementExpectedActivityCount(activity.getClass());</div><div class="line">        r.intent.setExtrasClassLoader(cl);</div><div class="line">        r.intent.prepareToEnterProcess();</div><div class="line">        <span class="keyword">if</span> (r.state != <span class="keyword">null</span>) &#123;</div><div class="line">            r.state.setClassLoader(cl);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>‘onCreate()’ 生命周期函数的调用也是在 <code>ActivityThread.performLaunchActivity()</code> 中调用 <code>Instrumentation</code> 的 <code>callActivityOnCreate()</code> 方法来实现的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Activity <span class="title">performLaunchActivity</span><span class="params">(ActivityClientRecord r, Intent customIntent)</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    activity.mCalled = <span class="keyword">false</span>;</div><div class="line">    <span class="comment">// 调用Activity.onCreate方法</span></div><div class="line">    <span class="keyword">if</span> (r.isPersistable()) &#123;</div><div class="line">        mInstrumentation.callActivityOnCreate(activity, r.state, r.persistentState);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        mInstrumentation.callActivityOnCreate(activity, r.state);</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因此，得到了这个对象，我们就可以进入并跟踪 <code>Application</code> 和 <code>Activity</code> 的生命周期流程。<br>Small 想要做到动态注册 <code>Activity</code>，首先在宿主 Manifest 中注册一个命名特殊的占坑 <code>Activity</code> 来欺骗 <code>startActivityForResult</code> 以获得生命周期，再欺骗 <code>performLaunchActivity</code> 来获得插件 <code>Activity</code> 实例，又为了处理之间的信息传递，因此有了后面的 <code>ActivityThreadHandlerCallback</code>。</p>
<p>接下来我们就在 <code>ApkBundleLauncher.InstrumentationWrapper</code> 来看一下这些是如何实现的。<br>先来看一下 <code>execStartActivity</code> 方法：<br><code>execStartActivity</code>方法有两个实现，一个是API Level 20以前的，一个是API Level 20以后的，仅仅是参数不同而已。<br>由于前面我们用 <code>ApkBundleLauncher.InstrumentationWrapper</code> 替换了 <code>mInstrumentation</code>，因此会调用到 <code>ApkBundleLauncher.InstrumentationWrapper</code> 中的 <code>execStartActivity()</code> 方法。该方法做的工作后面再详细介绍。主要是把需要启动的真实 <code>Activity</code> 替换为占坑 <code>Activity</code>。<br>熟悉 <code>Activity</code> 流程的同学都知道，真正启动 <code>Activity</code> 时，<code>ActivityManagerService</code> 调用 <code>ApplicationThread.scheduleLaunchActivity</code> 接口，通知相应的进程执行启动 <code>Activity</code> 的操作，<code>ApplicationThread</code> 把这个启动 <code>Activity</code> 的操作转发给 <code>ActivityThread</code>，<code>ActivityThread</code> 通过 <code>ClassLoader</code> 导入相应的 <code>Activity</code> 类，然后把它启动。<br>具体的在 <code>ActivityThread.ApplicationThread.scheduleLaunchActivity</code> 方法中会调用 <code>sendMessage(H.LAUNCH_ACTIVITY, r)</code>，该消息由 <code>ActivityThread</code> 中的消息处理对象 <code>mH</code> 来处理，由于我们把 <code>mH</code> 的 <code>mCallback</code> 替换为了<code>ActivityThreadHandlerCallback</code>，因此也会对 <code>LAUNCH_ACTIVITY</code> 消息进行拦截处理，处理完后再由<code>mH</code> 来处理正常的流程。<br>这里解释一下为什么要调用 <code>ensureInjectMessageHandler</code> 来反射替换 <code>ActivityThread</code> 的 <code>Handler</code> 对象 <code>mH</code> 的 <code>mCallback</code> 呢？<br>先看一下 <code>Handler</code> 源码中的 <code>dispatchMessage()</code> 方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Handle system messages here.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (msg.callback != <span class="keyword">null</span>) &#123;</div><div class="line">        handleCallback(msg);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        handleMessage(msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里会先执行 <code>mCallback</code> 的 <code>handleMessage()</code>，在返回false的情况下再执行自身的 <code>handleMessage()</code>。<br>这样就可以在 <code>ActivityThreadHandlerCallback</code> 中处理一些事情，然后在调用 <code>mH</code> 的方法。</p>
<h2 id="启动插件Activity流程"><a href="#启动插件Activity流程" class="headerlink" title="启动插件Activity流程"></a>启动插件Activity流程</h2><p>这里以 <code>ApkBundleLauncher</code> 来作为 <code>Bundle</code> 的 <code>BundleLauncher</code> 为例进行说明。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">├── Small.openUri()</div><div class="line">     ├── Bundle.getLaunchableBundle(uri)</div><div class="line">     │    └── Bundle.matchesRule()</div><div class="line">     └── Bundle.launchFrom(context)</div><div class="line">          └──ApkBundleLauncher.launchBundle()</div><div class="line">               ├── ApkBundleLauncher.prelaunchBundle()</div><div class="line">               │    └── Bundle.getActivityName()</div><div class="line">               └── BundleLauncher.launchBundle()</div><div class="line">                    └── Activity.startActivityForResult()</div><div class="line">                         └── InstrumentationWrapper.execStartActivity()</div><div class="line">                              ├── InstrumentationWrapper.wrapIntent()</div><div class="line">                              └── InstrumentationWrapper.dequeueStubActivity</div><div class="line">----------------------------------消息处理----------------------------------</div><div class="line">├── ActivityThreadHandlerCallback.LAUNCH_ACTIVITY</div><div class="line">     └── redirectActivity()</div><div class="line">----------------------------------消息处理----------------------------------</div><div class="line">├── InstrumentationWrapper.callActivityOnCreate()</div></pre></td></tr></table></figure>
<h3 id="根据URI匹配Bundle"><a href="#根据URI匹配Bundle" class="headerlink" title="根据URI匹配Bundle"></a>根据URI匹配Bundle</h3><p>匹配插件中注册的 <code>Activity</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> Bundle <span class="title">getLaunchableBundle</span><span class="params">(Uri uri)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (sPreloadBundles != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (Bundle bundle : sPreloadBundles) &#123;</div><div class="line">            <span class="keyword">if</span> (bundle.matchesRule(uri)) &#123;</div><div class="line">                <span class="keyword">if</span> (bundle.mApplicableLauncher == <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (!bundle.enabled) <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// Illegal bundle (invalid signature, etc.)</span></div><div class="line">                <span class="keyword">return</span> bundle;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 如果没有找到就用webview来显示这个uri</span></div><div class="line">    <span class="keyword">if</span> (uri.getScheme() != <span class="keyword">null</span>) &#123;</div><div class="line">        Bundle bundle = <span class="keyword">new</span> Bundle();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            bundle.url = <span class="keyword">new</span> URL(uri.toString());</div><div class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        bundle.prepareForLaunch();</div><div class="line">        bundle.setQuery(uri.getEncodedQuery()); <span class="comment">// Fix issue #6 from Spring-Xu.</span></div><div class="line">        bundle.mApplicableLauncher = <span class="keyword">new</span> WebBundleLauncher();</div><div class="line">        bundle.mApplicableLauncher.prelaunchBundle(bundle);</div><div class="line">        <span class="keyword">return</span> bundle;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> Boolean <span class="title">matchesRule</span><span class="params">(Uri uri)</span> </span>&#123;</div><div class="line">    <span class="comment">/* e.g.</span></div><div class="line">     *  input</div><div class="line">     *      - uri: http://base/abc.html</div><div class="line">     *      - self.uri: http://base</div><div class="line">     *      - self.rules: abc.html -&gt; AbcController</div><div class="line">     *  output</div><div class="line">     *      - target =&gt; AbcController</div><div class="line">     */</div><div class="line">    <span class="comment">// 将uri和Bundle.uriString进行匹配，如果不匹配直接返回false</span></div><div class="line">    String uriString = uri.toString();</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.uriString == <span class="keyword">null</span> || !uriString.startsWith(<span class="keyword">this</span>.uriString)) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 截取类似 http://code.wequick.net/small-sample/detail?from=app.home 后面的字段?from=app.home进行解析</span></div><div class="line">    String srcPath = uriString.substring(<span class="keyword">this</span>.uriString.length());</div><div class="line">    <span class="comment">// 获取 ? 后面的字符</span></div><div class="line">    String srcQuery = uri.getEncodedQuery();</div><div class="line">    <span class="keyword">if</span> (srcQuery != <span class="keyword">null</span>) &#123;</div><div class="line">        srcPath = srcPath.substring(<span class="number">0</span>, srcPath.length() - srcQuery.length() - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ......</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.path = dstPath;</div><div class="line">    <span class="keyword">this</span>.query = dstQuery;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>BundleLauncher.launchBundle()</code> 启动 <code>Activity</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">launchBundle</span><span class="params">(Bundle bundle, Context context)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(bundle.isLaunchable()) &#123;</div><div class="line">        <span class="keyword">if</span>(context <span class="keyword">instanceof</span> Activity) &#123;</div><div class="line">            Activity activity = (Activity)context;</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.shouldFinishPreviousActivity(activity)) &#123;</div><div class="line">                activity.finish();</div><div class="line">            &#125;</div><div class="line">            activity.startActivityForResult(bundle.getIntent(), <span class="number">10000</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            context.startActivity(bundle.getIntent());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="启动真实的Activity"><a href="#启动真实的Activity" class="headerlink" title="启动真实的Activity"></a>启动真实的Activity</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prelaunchBundle</span><span class="params">(Bundle bundle)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.prelaunchBundle(bundle);</div><div class="line">    Intent intent = <span class="keyword">new</span> Intent();</div><div class="line">    bundle.setIntent(intent);</div><div class="line"></div><div class="line">    <span class="comment">// 获取该插件的入口Activity</span></div><div class="line">    String activityName = bundle.getActivityName();</div><div class="line">    <span class="comment">// 判断一下ActivityLauncher中的sActivityClasses是否包含该Activity，这里面只包含宿主app和Small框架里面的Activity</span></div><div class="line">    <span class="keyword">if</span> (!ActivityLauncher.containsActivity(activityName)) &#123;</div><div class="line">        <span class="comment">// 一般启动插件Activity的情况下面是会走到这里的</span></div><div class="line">        <span class="comment">// sLoadedActivities 包含的是插件里面定义的Activity，在启动初始化时解析的</span></div><div class="line">        <span class="keyword">if</span> (sLoadedActivities == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ActivityNotFoundException(<span class="string">"Unable to find explicit activity class "</span> +</div><div class="line">                    <span class="string">"&#123; "</span> + activityName + <span class="string">" &#125;"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!sLoadedActivities.containsKey(activityName)) &#123;</div><div class="line">            <span class="keyword">if</span> (activityName.endsWith(<span class="string">"Activity"</span>)) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ActivityNotFoundException(<span class="string">"Unable to find explicit activity class "</span> +</div><div class="line">                        <span class="string">"&#123; "</span> + activityName + <span class="string">" &#125;"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 再次进行一些模糊匹配</span></div><div class="line">            String tempActivityName = activityName + <span class="string">"Activity"</span>;</div><div class="line">            <span class="keyword">if</span> (!sLoadedActivities.containsKey(tempActivityName)) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ActivityNotFoundException(<span class="string">"Unable to find explicit activity class "</span> +</div><div class="line">                        <span class="string">"&#123; "</span> + activityName + <span class="string">"(Activity) &#125;"</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            activityName = tempActivityName;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 设置ComponentName</span></div><div class="line">    intent.setComponent(<span class="keyword">new</span> ComponentName(Small.getContext(), activityName));</div><div class="line"></div><div class="line">    <span class="comment">// Intent extras - params</span></div><div class="line">    String query = bundle.getQuery();</div><div class="line">    <span class="keyword">if</span> (query != <span class="keyword">null</span>) &#123;</div><div class="line">        intent.putExtra(Small.KEY_QUERY, <span class="string">'?'</span>+query);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="启动流程拦截，启动占坑位Activity"><a href="#启动流程拦截，启动占坑位Activity" class="headerlink" title="启动流程拦截，启动占坑位Activity"></a>启动流程拦截，启动占坑位Activity</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InstrumentationWrapper</span> <span class="keyword">extends</span> <span class="title">Instrumentation</span></span></div><div class="line">            <span class="keyword">implements</span> <span class="title">InstrumentationInternal</span> &#123;</div><div class="line"></div><div class="line">        ......</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> ActivityResult <span class="title">execStartActivity</span><span class="params">(</span></span></div><div class="line">                Context who, IBinder contextThread, IBinder token, Activity target,</div><div class="line">                Intent intent, <span class="keyword">int</span> requestCode, android.os.Bundle options) &#123;</div><div class="line">            <span class="comment">// 将intent 中真正的Activity替换为占坑位的Activity</span></div><div class="line">            wrapIntent(intent);</div><div class="line">            <span class="comment">// 通过反射替换ActivityThread 的 Message Handler mH变量的 mCallback 为ActivityThreadHandlerCallback</span></div><div class="line">            <span class="comment">// 用于恢复Activity Info 到真实的Activity</span></div><div class="line">            ensureInjectMessageHandler(sActivityThread);</div><div class="line">            <span class="comment">// 反射调用启动Activity</span></div><div class="line">            <span class="keyword">return</span> ReflectAccelerator.execStartActivity(mBase,</div><div class="line">                    who, contextThread, token, target, intent, requestCode, options);</div><div class="line">        &#125;</div><div class="line">        ......</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">wrapIntent</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">            <span class="comment">// 此处为插件中注册的真正的Activity</span></div><div class="line">            ComponentName component = intent.getComponent();</div><div class="line">            String realClazz;</div><div class="line">            <span class="keyword">if</span> (component == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">// 如果component为空，交给宿主来处理这个intent</span></div><div class="line">                component = intent.resolveActivity(Small.getContext().getPackageManager());</div><div class="line">                <span class="keyword">if</span> (component != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="comment">// 系统或者宿主处理掉了，直接返回</span></div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">// 如果Action没有处理掉，看一下插件注册的Activity能否处理</span></div><div class="line">                realClazz = resolveActivity(intent);</div><div class="line">                <span class="keyword">if</span> (realClazz == <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="comment">// 如果插件也不能处理，就直接返回，无能为力了……</span></div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                realClazz = component.getClassName();</div><div class="line">                <span class="keyword">if</span> (realClazz.startsWith(STUB_ACTIVITY_PREFIX)) &#123;</div><div class="line">                    <span class="comment">// 如果这个Activity已经是占坑位的Activity，进行解开回原来的Activity</span></div><div class="line">                    realClazz = unwrapIntent(intent);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (sLoadedActivities == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">            <span class="comment">// 从sLoadedActivities中获得真正Activity的信息</span></div><div class="line">            ActivityInfo ai = sLoadedActivities.get(realClazz);</div><div class="line">            <span class="keyword">if</span> (ai == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">            <span class="comment">// 把真实的Activity放到Category中并用'&gt;'进行标识</span></div><div class="line">            intent.addCategory(REDIRECT_FLAG + realClazz);</div><div class="line">            <span class="comment">// 获取一个占坑位的Activity</span></div><div class="line">            String stubClazz = dequeueStubActivity(ai, realClazz);</div><div class="line">            <span class="comment">// 将真正需要启动的Activity替换为占坑位的Activity</span></div><div class="line">            intent.setComponent(<span class="keyword">new</span> ComponentName(Small.getContext(), stubClazz));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> String <span class="title">dequeueStubActivity</span><span class="params">(ActivityInfo ai, String realActivityClazz)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (ai.launchMode == ActivityInfo.LAUNCH_MULTIPLE) &#123;</div><div class="line">                <span class="comment">// 如果是普通的启动模式，用 A和A1 Activity，这两个Activity是可以重复使用的</span></div><div class="line">                <span class="comment">// 看是否有windowIsTranslucent属性</span></div><div class="line">                Resources.Theme theme = Small.getContext().getResources().newTheme();</div><div class="line">                theme.applyStyle(ai.getThemeResource(), <span class="keyword">true</span>);</div><div class="line">                TypedArray sa = theme.obtainStyledAttributes(</div><div class="line">                        <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; android.R.attr.windowIsTranslucent &#125;);</div><div class="line">                <span class="keyword">boolean</span> translucent = sa.getBoolean(<span class="number">0</span>, <span class="keyword">false</span>);</div><div class="line">                sa.recycle();</div><div class="line">                <span class="comment">// 如果有就用A1,没有就用A</span></div><div class="line">                <span class="keyword">return</span> translucent ? STUB_ACTIVITY_TRANSLUCENT : STUB_ACTIVITY_PREFIX;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 根据启动模式匹配合适的占坑位Activity</span></div><div class="line">            <span class="keyword">int</span> availableId = -<span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> stubId = -<span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> countForMode = STUB_ACTIVITIES_COUNT;</div><div class="line">            <span class="keyword">int</span> countForAll = countForMode * <span class="number">3</span>; <span class="comment">// 3=[singleTop, singleTask, singleInstance]</span></div><div class="line">            <span class="keyword">if</span> (mStubQueue == <span class="keyword">null</span>) &#123;</div><div class="line">                mStubQueue = <span class="keyword">new</span> String[countForAll];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span> offset = (ai.launchMode - <span class="number">1</span>) * countForMode;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; countForMode; i++) &#123;</div><div class="line">                String usedActivityClazz = mStubQueue[i + offset];</div><div class="line">                <span class="keyword">if</span> (usedActivityClazz == <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (availableId == -<span class="number">1</span>) availableId = i;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (usedActivityClazz.equals(realActivityClazz)) &#123;</div><div class="line">                    stubId = i;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (stubId != -<span class="number">1</span>) &#123;</div><div class="line">                availableId = stubId;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (availableId != -<span class="number">1</span>) &#123;</div><div class="line">                mStubQueue[availableId + offset] = realActivityClazz;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                Log.e(TAG, <span class="string">"Launch mode "</span> + ai.launchMode + <span class="string">" is full"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> STUB_ACTIVITY_PREFIX + ai.launchMode + availableId;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">`</div></pre></td></tr></table></figure>
<h3 id="消息拦截"><a href="#消息拦截" class="headerlink" title="消息拦截"></a>消息拦截</h3><p>由于前面介绍的反射替换 <code>ActivityThread</code> 的 <code>mH</code> 对象的 <code>mCallback</code>，这里拦截了四种消息：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityThreadHandlerCallback</span> <span class="keyword">implements</span> <span class="title">Handler</span>.<span class="title">Callback</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LAUNCH_ACTIVITY = <span class="number">100</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CREATE_SERVICE = <span class="number">114</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONFIGURATION_CHANGED = <span class="number">118</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ACTIVITY_CONFIGURATION_CHANGED = <span class="number">125</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Configuration mApplicationConfig;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">            <span class="keyword">case</span> LAUNCH_ACTIVITY:</div><div class="line">                redirectActivity(msg);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> CREATE_SERVICE:</div><div class="line">                ensureServiceClassesLoadable(msg);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> CONFIGURATION_CHANGED:</div><div class="line">                recordConfigChanges(msg);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> ACTIVITY_CONFIGURATION_CHANGED:</div><div class="line">                <span class="keyword">return</span> relaunchActivityIfNeeded(msg);</div><div class="line"></div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 这里返回false，不影响 mH 对消息的处理</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="LAUNCH-ACTIVITY"><a href="#LAUNCH-ACTIVITY" class="headerlink" title="LAUNCH_ACTIVITY"></a>LAUNCH_ACTIVITY</h4><p>对 <code>LAUNCH_ACTIVITY</code> 的处理主要是将启动的占坑位的 <code>Activity</code> 重新替换为真实的 <code>Activity</code> </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">redirectActivity</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">        Object<span class="comment">/*ActivityClientRecord*/</span> r = msg.obj;</div><div class="line">        <span class="comment">// 通过反射获取intent</span></div><div class="line">        Intent intent = ReflectAccelerator.getIntent(r);</div><div class="line">        <span class="comment">// 解开intent，获取真实的Activity名称</span></div><div class="line">        String targetClass = unwrapIntent(intent);</div><div class="line">        <span class="keyword">boolean</span> hasSetUp = Small.hasSetUp();</div><div class="line">        <span class="keyword">if</span> (targetClass == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// 在宿主中注册的Activity</span></div><div class="line">            <span class="keyword">if</span> (hasSetUp) <span class="keyword">return</span>; <span class="comment">// nothing to do</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span> (intent.hasCategory(Intent.CATEGORY_LAUNCHER)) &#123;</div><div class="line">                <span class="comment">// 带CATEGORY_LAUNCHER属性的Activity</span></div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Launching an activity in remote process. Set up Small for it.</span></div><div class="line">            Small.setUpOnDemand();</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!hasSetUp) &#123;</div><div class="line">            <span class="comment">// Restarting an activity after application recreated,</span></div><div class="line">            <span class="comment">// maybe upgrading or somehow the application was killed in background.</span></div><div class="line">            Small.setUp();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 替换为真正的 activityInfo</span></div><div class="line">        ActivityInfo targetInfo = sLoadedActivities.get(targetClass);</div><div class="line">        ReflectAccelerator.setActivityInfo(r, targetInfo);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="拦截OnCreate方法"><a href="#拦截OnCreate方法" class="headerlink" title="拦截OnCreate方法"></a>拦截OnCreate方法</h3><p>对 <code>Activity</code> 的 <code>OnCreate</code> 调用的拦截由 <code>InstrumentationWrapper.callActivityOnCreate()</code> 来进行处理。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callActivityOnCreate</span><span class="params">(Activity activity, android.os.Bundle icicle)</span> </span>&#123;</div><div class="line">    <span class="keyword">do</span> &#123;</div><div class="line">        <span class="keyword">if</span> (sLoadedActivities == <span class="keyword">null</span>) <span class="keyword">break</span>;</div><div class="line">        ActivityInfo ai = sLoadedActivities.get(activity.getClass().getName());</div><div class="line">        <span class="keyword">if</span> (ai == <span class="keyword">null</span>) <span class="keyword">break</span>;</div><div class="line">        <span class="comment">//用来设置Activity的一些转屏和键盘状态</span></div><div class="line">        applyActivityInfo(activity, ai);</div><div class="line">        ReflectAccelerator.ensureCacheResources();</div><div class="line">    &#125; <span class="keyword">while</span> (<span class="keyword">false</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 重新设置 mInstrumentation ，防止被改变</span></div><div class="line">    <span class="keyword">if</span> (sBundleInstrumentation != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Field f = Activity.class.getDeclaredField(<span class="string">"mInstrumentation"</span>);</div><div class="line">            f.setAccessible(<span class="keyword">true</span>);</div><div class="line">            Object instrumentation = f.get(activity);</div><div class="line">            <span class="keyword">if</span> (instrumentation != sBundleInstrumentation) &#123;</div><div class="line">                f.set(activity, sBundleInstrumentation);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 再调用 mInstrumentation 的callActivityOnCreate方法</span></div><div class="line">    sHostInstrumentation.callActivityOnCreate(activity, icicle);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另外还有对 <code>OnStop</code>，<code>OnDestroy</code>等其他生命周期方法的拦截，这里就不一一介绍了。</p>
<!--     
http://blog.csdn.net/u013210620/article/details/54692417?utm_source=itdadao&utm_medium=referral
http://weishu.me/2016/03/21/understand-plugin-framework-activity-management/
-->
]]></content>
    
    <summary type="html">
    
      结合 Activity 的启动流程来分析如何启动插件 Activity，以此来介绍Small插件化一个核心技术--动态注册组件
    
    </summary>
    
      <category term="Android开源项目" scheme="http://yoursite.com/categories/Android%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Android开源项目" scheme="http://yoursite.com/tags/Android%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="插件化框架" scheme="http://yoursite.com/tags/%E6%8F%92%E4%BB%B6%E5%8C%96%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Small" scheme="http://yoursite.com/tags/Small/"/>
    
  </entry>
  
  <entry>
    <title>Android 插件化框架Small解析--初始化</title>
    <link href="http://yoursite.com/2017/05/10/open-source-android-plugins-small-init/"/>
    <id>http://yoursite.com/2017/05/10/open-source-android-plugins-small-init/</id>
    <published>2017-05-10T02:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>接下来的一系列文件将会从源码角度来分析Small的架构以及插件化原理及其实现。</p>
<h2 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h2><p>Small里面比较核心的类有下面三个：</p>
<ul>
<li>Small：接口类，提供用户能使用的各类接口</li>
<li>Bundle：代表插件类，保存了插件的全部信息</li>
<li>BundleLauncher：插件加载类，根据加载的不同插件类型，有多个子类，如下图：</li>
</ul>
<p><img src="/images/open-source-android-plugins-small-init/small-bundle-launcher-class-uml.png" alt="UML类图"><br> <!-- plantuml url:http://www.plantuml.com/plantuml/png/bP0z3W8X48LxJZ6bnkoUm6PDxEmih84T8v40uSTerBjh5ZGAn60rCE_D1s-4ycZtb2EiWXebhi_UKkwr9PIvwGXSKkUIlA51yGCMwbR_rWVdq6SMyds7vQthOE1Ud8I_l5qrK_5QtaWiSynyMSQdhU-RQPK8bLuqxv3bQTCYidnm9GimWKd1mLYKcevnS1OBiAdCoVr5A7xtDw7OooUYPRwIketm0000 --></p>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>先来看一下宿主 App 中的初始化部分，主要在 <code>Application</code> 和 <code>LaunchActivity</code> 中进行。我们把在 <code>Application</code> 处理的称为第一阶段，在 <code>LaunchActivity</code> 中进行的称为第二阶段和第三阶段。</p>
<h3 id="第一阶段：预处理"><a href="#第一阶段：预处理" class="headerlink" title="第一阶段：预处理"></a>第一阶段：预处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> <span class="keyword">extends</span> <span class="title">android</span>.<span class="title">app</span>.<span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Application</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// This should be the very first of the application lifecycle.</span></div><div class="line">        <span class="comment">// It's also ahead of the installing of content providers by what we can avoid</span></div><div class="line">        <span class="comment">// the ClassNotFound exception on if the provider is unimplemented in the host.</span></div><div class="line">        Small.preSetUp(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line"></div><div class="line">        <span class="comment">// Optional</span></div><div class="line">        Small.setBaseUri(<span class="string">"http://code.wequick.net/small-sample/"</span>);</div><div class="line">        Small.setWebViewClient(<span class="keyword">new</span> MyWebViewClient());</div><div class="line">        <span class="comment">//指定是否从 assets 读取插件</span></div><div class="line">        Small.setLoadFromAssets(BuildConfig.LOAD_FROM_ASSETS);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 <code>Application</code> 构造函数中调用了 <code>Small.preSetUp(this)</code> 来进行一些设置的工作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preSetUp</span><span class="params">(Application context)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (sContext != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    sContext = context;</div><div class="line"></div><div class="line">    <span class="comment">// 注册BundleLauncher</span></div><div class="line">    registerLauncher(<span class="keyword">new</span> ActivityLauncher());</div><div class="line">    registerLauncher(<span class="keyword">new</span> ApkBundleLauncher());</div><div class="line">    registerLauncher(<span class="keyword">new</span> WebBundleLauncher());</div><div class="line">    Bundle.onCreateLaunchers(context);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先注册了一些默认的 <code>BundleLauncher</code>，保存在 <code>sBundleLaunchers</code> 静态变量中。然后调用 <code>Bundle.onCreateLaunchers(context)</code> 来调用 <code>BundleLauncher.onCreate()</code>方法。<br>在几个 <code>BundleLauncher</code> 的子类中，<code>ApkBundleLauncher</code> 重新实现了 <code>onCreate()</code>方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Application app)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(app);</div><div class="line"></div><div class="line">    Object<span class="comment">/*ActivityThread*/</span> thread;</div><div class="line">    List&lt;ProviderInfo&gt; providers;</div><div class="line">    Instrumentation base;</div><div class="line">    ApkBundleLauncher.InstrumentationWrapper wrapper;</div><div class="line">    Field f;</div><div class="line"></div><div class="line">    <span class="comment">// 通过反射获取当前 ActivityThread 对象</span></div><div class="line">    thread = ReflectAccelerator.getActivityThread(app);</div><div class="line"></div><div class="line">    <span class="comment">// 替换 mInstrumentation 变量，关键点在这里，下面会详述</span></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        f = thread.getClass().getDeclaredField(<span class="string">"mInstrumentation"</span>);</div><div class="line">        f.setAccessible(<span class="keyword">true</span>);</div><div class="line">        base = (Instrumentation) f.get(thread);</div><div class="line">        wrapper = <span class="keyword">new</span> ApkBundleLauncher.InstrumentationWrapper(base);</div><div class="line">        f.set(thread, wrapper);</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Failed to replace instrumentation for thread: "</span> + thread);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 通过反射替换ActivityThread 的 Message Handler mH变量的 mCallback 为ActivityThreadHandlerCallback</span></div><div class="line">    <span class="comment">// 用于恢复Activity Info 到真实的Activity</span></div><div class="line">    ensureInjectMessageHandler(thread);</div><div class="line"></div><div class="line">    <span class="comment">// 获取该APP的 ProviderInfo 列表</span></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        f = thread.getClass().getDeclaredField(<span class="string">"mBoundApplication"</span>);</div><div class="line">        f.setAccessible(<span class="keyword">true</span>);</div><div class="line">        Object<span class="comment">/*AppBindData*/</span> data = f.get(thread);</div><div class="line">        f = data.getClass().getDeclaredField(<span class="string">"providers"</span>);</div><div class="line">        f.setAccessible(<span class="keyword">true</span>);</div><div class="line">        providers = (List&lt;ProviderInfo&gt;) f.get(data);</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Failed to get providers from thread: "</span> + thread);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 将这些变量保存起来</span></div><div class="line">    sActivityThread = thread;</div><div class="line">    sProviders = providers;</div><div class="line">    sHostInstrumentation = base;</div><div class="line">    sBundleInstrumentation = wrapper;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>InstrumentationWrapper</code> 继承自 <code>Instrumentation</code> 并覆盖了下面几个方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">execStartActivity()</div><div class="line">callActivityOnCreate()</div><div class="line">callActivityOnStop()</div><div class="line">callActivityOnDestroy()</div><div class="line">onException()</div></pre></td></tr></table></figure>
<p>为什么说替换 <code>Instrumentation</code> 对象是重头戏呢？这里我们先了解一些这个类。<br>先看一下<a href="https://developer.android.com/reference/android/app/Instrumentation.html?hl=zh-cn" target="_blank" rel="external">官方文档对这个类的解释</a>，该类跟踪 Application 及 Activity 的整个生命周期，它的一些方法在 Application 及 Activity 所有生命周期函数的调用中，都会先调用这些方法，因此，得到了这个对象，我们就可以进入并跟踪 Application 和 Activity 的生命周期流程。<br>Small 想要做到动态注册 <code>Activity</code>，首先在宿主 Manifest 中注册一个命名特殊的占坑 <code>Activity</code> 来欺骗 <code>startActivityForResult</code> 以获得生命周期，再欺骗 <code>performLaunchActivity</code> 来获得插件 <code>Activity</code> 实例，又为了处理之间的信息传递，因此有了后面的 <code>ActivityThreadHandlerCallback</code>。<br>我们可以在 small/src/main/AndroidManifest.xml 中找到这些占坑位的 <code>Activity</code>： A、A1、A2….A33等。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">package</span>=<span class="string">"net.wequick.small"</span>&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- permission for web view --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">application</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- Stub Activities --&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 1 standard mode --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".A"</span></span></div><div class="line">            <span class="attr">android:configChanges</span>=<span class="string">"locale|fontScale|keyboard|keyboardHidden|layoutDirection|mcc|mnc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|touchscreen|uiMode"</span>/&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".A1"</span> <span class="attr">android:theme</span>=<span class="string">"@android:style/Theme.Translucent"</span></span></div><div class="line">            <span class="attr">android:configChanges</span>=<span class="string">"locale|fontScale|keyboard|keyboardHidden|layoutDirection|mcc|mnc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|touchscreen|uiMode"</span>/&gt;</div><div class="line">        <span class="comment">&lt;!-- 4 singleTop mode --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".A10"</span> <span class="attr">android:launchMode</span>=<span class="string">"singleTop"</span></span></div><div class="line">            <span class="attr">android:configChanges</span>=<span class="string">"locale|fontScale|keyboard|keyboardHidden|layoutDirection|mcc|mnc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|touchscreen|uiMode"</span>/&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".A11"</span> <span class="attr">android:launchMode</span>=<span class="string">"singleTop"</span></span></div><div class="line">            <span class="attr">android:configChanges</span>=<span class="string">"locale|fontScale|keyboard|keyboardHidden|layoutDirection|mcc|mnc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|touchscreen|uiMode"</span>/&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".A12"</span> <span class="attr">android:launchMode</span>=<span class="string">"singleTop"</span></span></div><div class="line">            <span class="attr">android:configChanges</span>=<span class="string">"locale|fontScale|keyboard|keyboardHidden|layoutDirection|mcc|mnc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|touchscreen|uiMode"</span>/&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".A13"</span> <span class="attr">android:launchMode</span>=<span class="string">"singleTop"</span></span></div><div class="line">            <span class="attr">android:configChanges</span>=<span class="string">"locale|fontScale|keyboard|keyboardHidden|layoutDirection|mcc|mnc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|touchscreen|uiMode"</span>/&gt;</div><div class="line">        <span class="comment">&lt;!-- 4 singleTask mode --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".A20"</span> <span class="attr">android:launchMode</span>=<span class="string">"singleTask"</span></span></div><div class="line">            <span class="attr">android:configChanges</span>=<span class="string">"locale|fontScale|keyboard|keyboardHidden|layoutDirection|mcc|mnc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|touchscreen|uiMode"</span>/&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".A21"</span> <span class="attr">android:launchMode</span>=<span class="string">"singleTask"</span></span></div><div class="line">            <span class="attr">android:configChanges</span>=<span class="string">"locale|fontScale|keyboard|keyboardHidden|layoutDirection|mcc|mnc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|touchscreen|uiMode"</span>/&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".A22"</span> <span class="attr">android:launchMode</span>=<span class="string">"singleTask"</span></span></div><div class="line">            <span class="attr">android:configChanges</span>=<span class="string">"locale|fontScale|keyboard|keyboardHidden|layoutDirection|mcc|mnc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|touchscreen|uiMode"</span>/&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".A23"</span> <span class="attr">android:launchMode</span>=<span class="string">"singleTask"</span></span></div><div class="line">            <span class="attr">android:configChanges</span>=<span class="string">"locale|fontScale|keyboard|keyboardHidden|layoutDirection|mcc|mnc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|touchscreen|uiMode"</span>/&gt;</div><div class="line">        <span class="comment">&lt;!-- 4 singleInstance mode --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".A30"</span> <span class="attr">android:launchMode</span>=<span class="string">"singleInstance"</span></span></div><div class="line">            <span class="attr">android:configChanges</span>=<span class="string">"locale|fontScale|keyboard|keyboardHidden|layoutDirection|mcc|mnc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|touchscreen|uiMode"</span>/&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".A31"</span> <span class="attr">android:launchMode</span>=<span class="string">"singleInstance"</span></span></div><div class="line">            <span class="attr">android:configChanges</span>=<span class="string">"locale|fontScale|keyboard|keyboardHidden|layoutDirection|mcc|mnc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|touchscreen|uiMode"</span>/&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".A32"</span> <span class="attr">android:launchMode</span>=<span class="string">"singleInstance"</span></span></div><div class="line">            <span class="attr">android:configChanges</span>=<span class="string">"locale|fontScale|keyboard|keyboardHidden|layoutDirection|mcc|mnc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|touchscreen|uiMode"</span>/&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".A33"</span> <span class="attr">android:launchMode</span>=<span class="string">"singleInstance"</span></span></div><div class="line">            <span class="attr">android:configChanges</span>=<span class="string">"locale|fontScale|keyboard|keyboardHidden|layoutDirection|mcc|mnc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|touchscreen|uiMode"</span>/&gt;</div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- Web Activity --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".webkit.WebActivity"</span></span></div><div class="line">            <span class="attr">android:screenOrientation</span>=<span class="string">"portrait"</span></div><div class="line">            <span class="attr">android:windowSoftInputMode</span>=<span class="string">"stateHidden|adjustPan"</span></div><div class="line">            <span class="attr">android:hardwareAccelerated</span>=<span class="string">"true"</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这也就是 Small 插件化的基本原理，该原理部分后面会有博客详细介绍。</p>
<h3 id="第二阶段：加载插件"><a href="#第二阶段：加载插件" class="headerlink" title="第二阶段：加载插件"></a>第二阶段：加载插件</h3><h4 id="一些配置工作"><a href="#一些配置工作" class="headerlink" title="一些配置工作"></a>一些配置工作</h4><p>在 <code>LaunchActivity</code> 的 <code>onStart()</code> 方法中调用了 <code>Small.setUp()</code>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LaunchActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</div><div class="line">        ...</div><div class="line">        Small.setUp(LaunchActivity.<span class="keyword">this</span>, <span class="keyword">new</span> net.wequick.small.Small.OnCompleteListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">long</span> tEnd = System.nanoTime();</div><div class="line">                se.putLong(<span class="string">"setUpFinish"</span>, tEnd).apply();</div><div class="line">                <span class="keyword">long</span> offset = tEnd - tStart;</div><div class="line">                <span class="keyword">if</span> (offset &lt; MIN_INTRO_DISPLAY_TIME) &#123;</div><div class="line">                    <span class="comment">// 这个延迟仅为了让 "Small Logo" 显示足够的时间, 实际应用中不需要</span></div><div class="line">                    getWindow().getDecorView().postDelayed(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                            <span class="comment">// 启动main插件</span></div><div class="line">                            Small.openUri(<span class="string">"main"</span>, LaunchActivity.<span class="keyword">this</span>);</div><div class="line">                            finish();</div><div class="line">                        &#125;</div><div class="line">                    &#125;, (MIN_INTRO_DISPLAY_TIME - offset) / <span class="number">1000000</span>);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    Small.openUri(<span class="string">"main"</span>, LaunchActivity.<span class="keyword">this</span>);</div><div class="line">                    finish();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>在 <code>Small.setUp()</code> 方法内部主要调用了 <code>Bundle.loadLaunchableBundles(listener)</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadLaunchableBundles</span><span class="params">(Small.OnCompleteListener listener)</span> </span>&#123;</div><div class="line">    Context context = Small.getContext();</div><div class="line"></div><div class="line">    <span class="keyword">boolean</span> synchronous = (listener == <span class="keyword">null</span>);</div><div class="line">    <span class="keyword">if</span> (synchronous) &#123;</div><div class="line">        loadBundles(context);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Asynchronous</span></div><div class="line">    <span class="keyword">if</span> (sThread == <span class="keyword">null</span>) &#123;</div><div class="line">        sThread = <span class="keyword">new</span> LoadBundleThread(context);</div><div class="line">        sHandler = <span class="keyword">new</span> LoadBundleHandler(listener);</div><div class="line">        sThread.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于我们注册了了 <code>Small.OnCompleteListener</code>，这里会开启一个线程来调用 <code>loadBundles()</code> 方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadBundles</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    JSONObject manifestData;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">//获取 /data/data/&lt;application package&gt;/files 目录下的 bundle.json</span></div><div class="line">        File patchManifestFile = getPatchManifestFile();</div><div class="line">        <span class="comment">//获取 SharedPreferences 存储的bundle.json文件</span></div><div class="line">        String manifestJson = getCacheManifest();</div><div class="line">        <span class="keyword">if</span> (manifestJson != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// 加载SharedPreferences中的缓存的文件并保存到patchManifestFile文件中</span></div><div class="line">            <span class="keyword">if</span> (!patchManifestFile.exists()) patchManifestFile.createNewFile();</div><div class="line">            PrintWriter pw = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> FileOutputStream(patchManifestFile));</div><div class="line">            pw.print(manifestJson);</div><div class="line">            pw.flush();</div><div class="line">            pw.close();</div><div class="line">            <span class="comment">// 清除SharedPreferences中的缓存</span></div><div class="line">            setCacheManifest(<span class="keyword">null</span>);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (patchManifestFile.exists()) &#123;</div><div class="line">            <span class="comment">// 从patchManifestFile中读取数据</span></div><div class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(patchManifestFile));</div><div class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">            String line;</div><div class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</div><div class="line">                sb.append(line);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            br.close();</div><div class="line">            manifestJson = sb.toString();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 从 `assets/bundle.json' 加载</span></div><div class="line">            InputStream builtinManifestStream = context.getAssets().open(BUNDLE_MANIFEST_NAME);</div><div class="line">            <span class="keyword">int</span> builtinSize = builtinManifestStream.available();</div><div class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[builtinSize];</div><div class="line">            builtinManifestStream.read(buffer);</div><div class="line">            builtinManifestStream.close();</div><div class="line">            manifestJson = <span class="keyword">new</span> String(buffer, <span class="number">0</span>, builtinSize);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        manifestData = <span class="keyword">new</span> JSONObject(manifestJson);</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 解析数据</span></div><div class="line">    Manifest manifest = parseManifest(manifestData);</div><div class="line">    <span class="keyword">if</span> (manifest == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">    setupLaunchers(context);</div><div class="line"></div><div class="line">    loadBundles(manifest.bundles);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 <code>loadBundles()</code> 方法中首先会解析 bundle.json 数据，这个数据可能会保存在三个地方，它们的读取是有优先级的，SharedPreferences缓存&gt;App DATA File&gt;Assets。<br>然后调用 <code>setupLaunchers()</code> 设置前面在 <code>preSetup()</code> 方法中注册的几个 <code>BundleLauncher</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setupLaunchers</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (sBundleLaunchers == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (BundleLauncher launcher : sBundleLaunchers) &#123;</div><div class="line">        launcher.setUp(context);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们分别看一下这几个 <code>BundleLauncher</code> 的 <code>setUp()</code> 方法都做了什么工作：</p>
<ol>
<li>ActivityLauncher.setUp()</li>
</ol>
<p>这里是将在宿主App里面注册的 <code>Activity</code> 添加到 <code>sActivityClasses</code> 中去，这里包括了 app、app+stub、small下面 AndroidMenifest.xml里面注册的 <code>Activity</code>，当然就包括了前面说的占坑位的几个 <code>Activity</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.setUp(context);</div><div class="line"></div><div class="line">    <span class="comment">// Read the registered classes in host's manifest file</span></div><div class="line">    File sourceFile = <span class="keyword">new</span> File(context.getApplicationInfo().sourceDir);</div><div class="line">    BundleParser parser = BundleParser.parsePackage(sourceFile, context.getPackageName());</div><div class="line">    parser.collectActivities();</div><div class="line">    ActivityInfo[] as = parser.getPackageInfo().activities;</div><div class="line">    <span class="keyword">if</span> (as != <span class="keyword">null</span>) &#123;</div><div class="line">        sActivityClasses = <span class="keyword">new</span> HashSet&lt;String&gt;();</div><div class="line">        <span class="keyword">for</span> (ActivityInfo ai : as) &#123;</div><div class="line">            sActivityClasses.add(ai.name);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>ApkBundleLauncher.setUp()</li>
</ol>
<p>这里是对通过动态代理对所有经过 <code>TaskStackBuilder</code> 创建的 PendingIntent 进行 Hook，调用 <code>wrapIntent</code> 用占坑 <code>Activity</code> 来代替真正的 <code>Activity</code>。<br>另外还有个方法 <code>Small.wrapIntent(Intent)</code>，不是通过<code>TaskStackBuilder</code> 创建的 <code>PendingIntent</code> 需要调用这个方法来进行处理。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.setUp(context);</div><div class="line"></div><div class="line">    Field f;</div><div class="line"></div><div class="line">    <span class="comment">// AOP for pending intent</span></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        f = TaskStackBuilder.class.getDeclaredField(<span class="string">"IMPL"</span>);</div><div class="line">        f.setAccessible(<span class="keyword">true</span>);</div><div class="line">        <span class="keyword">final</span> Object impl = f.get(TaskStackBuilder.class);</div><div class="line">        InvocationHandler aop = <span class="keyword">new</span> InvocationHandler() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">                Intent[] intents = (Intent[]) args[<span class="number">1</span>];</div><div class="line">                <span class="keyword">for</span> (Intent intent : intents) &#123;</div><div class="line">                    sBundleInstrumentation.wrapIntent(intent);</div><div class="line">                    intent.setAction(Intent.ACTION_MAIN);</div><div class="line">                    intent.addCategory(Intent.CATEGORY_LAUNCHER);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> method.invoke(impl, args);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        Object newImpl = Proxy.newProxyInstance(context.getClassLoader(), impl.getClass().getInterfaces(), aop);</div><div class="line">        f.set(TaskStackBuilder.class, newImpl);</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception ignored) &#123;</div><div class="line">        ignored.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>WebBundleLauncher.setUp()</li>
</ol>
<p>看到注释这样解释：在android 7.0以后的版本中，当第一次创建WebView的时候，它会用WebView的Assets路径替换掉原Application Assets路径，这里就提前在这里先创建一个WebView来避免这个事件的发生。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.setUp(context);</div><div class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &lt; <span class="number">24</span>) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">    Bundle.postUI(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="comment">// In android 7.0+, on firstly create WebView, it will replace the application</span></div><div class="line">            <span class="comment">// assets with the one who has join the WebView asset path.</span></div><div class="line">            <span class="comment">// If this happens after our assets replacement,</span></div><div class="line">            <span class="comment">// what we have done would be come to naught!</span></div><div class="line">            <span class="comment">// So, we need to push it enOOOgh ahead! (#347)</span></div><div class="line">            <span class="keyword">new</span> android.webkit.WebView(Small.getContext());</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 <code>setupLaunchers(context)</code> 方法执行完以后，就会调用 <code>loadBundles(manifest.bundles)</code> 方法来加载插件。</p>
<h4 id="加载插件"><a href="#加载插件" class="headerlink" title="加载插件"></a>加载插件</h4><p>先来看一下 <code>Bundle.loadBundles(List&lt;Bundle&gt; bundles)</code>方法，这个方法的主要工作就是在注册的所有 <code>BundleLauncher</code> 中为 <code>bundles</code> 列表中的所有 <code>Bundle</code> 找到适合它们的 <code>BundleLauncher</code>，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadBundles</span><span class="params">(List&lt;Bundle&gt; bundles)</span> </span>&#123;</div><div class="line">    sPreloadBundles = bundles;</div><div class="line"></div><div class="line">    <span class="comment">// 1. 为每个Bundle寻找合适的BundleLauncher</span></div><div class="line">    <span class="keyword">for</span> (Bundle bundle : bundles) &#123;</div><div class="line">        bundle.prepareForLaunch();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Handle I/O</span></div><div class="line">    <span class="keyword">if</span> (sIOActions != <span class="keyword">null</span>) &#123;</div><div class="line">        ExecutorService executor = Executors.newFixedThreadPool(sIOActions.size());</div><div class="line">        <span class="keyword">for</span> (Runnable action : sIOActions) &#123;</div><div class="line">            executor.execute(action);</div><div class="line">        &#125;</div><div class="line">        executor.shutdown();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (!executor.awaitTermination(LOADING_TIMEOUT_MINUTES, TimeUnit.MINUTES)) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Failed to load bundles! (TIMEOUT &gt; "</span></div><div class="line">                        + LOADING_TIMEOUT_MINUTES + <span class="string">"minutes)"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        sIOActions = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Wait for the things to be done on UI thread before `postSetUp`,</span></div><div class="line">    <span class="comment">// as on 7.0+ we should wait a WebView been initialized. (#347)</span></div><div class="line">    <span class="keyword">while</span> (sRunningUIActionCount != <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">100</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Notify `postSetUp' to all launchers</span></div><div class="line">    <span class="keyword">for</span> (BundleLauncher launcher : sBundleLaunchers) &#123;</div><div class="line">        launcher.postSetUp();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Wait for the things to be done on UI thread after `postSetUp`,</span></div><div class="line">    <span class="comment">// like creating a bundle application.</span></div><div class="line">    <span class="keyword">while</span> (sRunningUIActionCount != <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">100</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Free all unused temporary variables</span></div><div class="line">    <span class="keyword">for</span> (Bundle bundle : bundles) &#123;</div><div class="line">        <span class="keyword">if</span> (bundle.parser != <span class="keyword">null</span>) &#123;</div><div class="line">            bundle.parser.close();</div><div class="line">            bundle.parser = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        bundle.mBuiltinFile = <span class="keyword">null</span>;</div><div class="line">        bundle.mExtractPath = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="prepareForLaunch"><a href="#prepareForLaunch" class="headerlink" title="prepareForLaunch()"></a>prepareForLaunch()</h5><p>我们先来看一下 <code>Bundle.prepareForLaunch()</code> 方法，这里是要在 <code>sBundleLaunchers</code> 中为当前的 <code>Bundle</code> 找到一个合适的 <code>BundleLauncher</code> 并赋值给 <code>mApplicableLauncher</code>，并开始解析插件。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">prepareForLaunch</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mIntent != <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (mApplicableLauncher == <span class="keyword">null</span> &amp;&amp; sBundleLaunchers != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (BundleLauncher launcher : sBundleLaunchers) &#123;</div><div class="line">            <span class="keyword">if</span> (launcher.resolveBundle(<span class="keyword">this</span>)) &#123;</div><div class="line">                mApplicableLauncher = launcher;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里又分别调用了 <code>sBundleLaunchers</code> 中各个 <code>BundleLauncher</code> 的 <code>resolveBundle()</code> 方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">resolveBundle</span><span class="params">(Bundle bundle)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!preloadBundle(bundle)) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    loadBundle(bundle);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>各个  <code>BundleLauncher</code> 都分别重新实现了 <code>preloadBundle(bundle)</code> 和 <code>loadBundle(bundle)</code> 方法，我们分别来看一下。<br><em>ActivityLauncher</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preloadBundle</span><span class="params">(Bundle bundle)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (sActivityClasses == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    String pkg = bundle.getPackageName();</div><div class="line">    <span class="keyword">return</span> (pkg == <span class="keyword">null</span> || pkg.equals(<span class="string">"main"</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里在 <code>mPackageName</code> 为 main 时才会返回true，<code>ActivityLauncher</code> 是用来启动宿主 <code>Activity</code> 的，它并没有实现 <code>loadBundle</code> 方法，因此就算 <code>preloadBundle()</code>方法返回true，它也不会有任何处理的。</p>
<p><em>SoBundleLauncher.preloadBundle()</em></p>
<p>因为 <code>ApkBundleLauncher</code> 没有覆盖 <code>preloadBundle()</code> 方法，那么就到了它的父类 <code>SoBundleLauncher.preloadBundle()</code>方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preloadBundle</span><span class="params">(Bundle bundle)</span> </span>&#123;</div><div class="line">    String packageName = bundle.getPackageName();</div><div class="line">    <span class="keyword">if</span> (packageName == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 获取支持的插件类型，ApkBundleLauncher 支持 `app` 和 `lib`，WebBundleLauncher 支持`web`</span></div><div class="line">    String[] types = getSupportingTypes();</div><div class="line">    <span class="keyword">if</span> (types == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="keyword">boolean</span> supporting = <span class="keyword">false</span>;</div><div class="line">    String bundleType = bundle.getType();</div><div class="line">    <span class="keyword">if</span> (bundleType != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 如果在 `bundle.json' 中设置了type，就去根据type来找到合适的BundleLauncher</span></div><div class="line">        <span class="keyword">for</span> (String type : types) &#123;</div><div class="line">            <span class="keyword">if</span> (type.equals(bundleType)) &#123;</div><div class="line">                supporting = <span class="keyword">true</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 如果没有指定type，就尝试根据包名来判断，看里面是否包含app、lib或者web等</span></div><div class="line">        <span class="comment">//  - com.example.[type].any</span></div><div class="line">        <span class="comment">//  - com.example.[type]any</span></div><div class="line">        String[] pkgs = packageName.split(<span class="string">"\\."</span>);</div><div class="line">        <span class="keyword">int</span> N = pkgs.length;</div><div class="line">        String aloneType = N &gt; <span class="number">1</span> ? pkgs[N - <span class="number">2</span>] : <span class="keyword">null</span>;</div><div class="line">        String lastComponent = pkgs[N - <span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span> (String type : types) &#123;</div><div class="line">            <span class="keyword">if</span> ((aloneType != <span class="keyword">null</span> &amp;&amp; aloneType.equals(type))</div><div class="line">                    || lastComponent.startsWith(type)) &#123;</div><div class="line">                supporting = <span class="keyword">true</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//如果该BundleLauncher不支持该Bundle类型，直接返回</span></div><div class="line">    <span class="keyword">if</span> (!supporting) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 获取提取路径，ApkBundleLauncher和AssetBundleLauncher分别有不同的定义。</span></div><div class="line">    File extractPath = getExtractPath(bundle);</div><div class="line">    <span class="keyword">if</span> (extractPath != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (!extractPath.exists()) &#123;</div><div class="line">            extractPath.mkdirs();</div><div class="line">        &#125;</div><div class="line">        bundle.setExtractPath(extractPath);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 获取基础插件文件/data/data/&lt;包名&gt;/app_small_base/&lt;包名&gt;.apk文件</span></div><div class="line">    File plugin = bundle.getBuiltinFile();</div><div class="line">    <span class="comment">// 解析AndroidManifest.xml文件，得到插件的版本，主题风格，Activity，收集intent-filter等</span></div><div class="line">    BundleParser parser = BundleParser.parsePackage(plugin, packageName);</div><div class="line">    <span class="comment">// 获取patch插件文件/data/data/&lt;包名&gt;/app_small_patch/&lt;包名&gt;.apk文件</span></div><div class="line">    File patch = bundle.getPatchFile();</div><div class="line">    <span class="comment">// 解析文件</span></div><div class="line">    BundleParser patchParser = BundleParser.parsePackage(patch, packageName);</div><div class="line">    <span class="keyword">if</span> (parser == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (patchParser == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            parser = patchParser; <span class="comment">// use patch</span></div><div class="line">            plugin = patch;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (patchParser != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 防止patch版本过低</span></div><div class="line">        <span class="keyword">if</span> (patchParser.getPackageInfo().versionCode &lt;= parser.getPackageInfo().versionCode) &#123;</div><div class="line">            Log.d(TAG, <span class="string">"Patch file should be later than built-in!"</span>);</div><div class="line">            patch.delete();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            parser = patchParser; <span class="comment">// use patch</span></div><div class="line">            plugin = patch;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    bundle.setParser(parser);</div><div class="line"></div><div class="line">    <span class="comment">// 检查插件是否被修改过</span></div><div class="line">    <span class="keyword">long</span> lastModified = plugin.lastModified();</div><div class="line">    <span class="keyword">long</span> savedLastModified = Small.getBundleLastModified(packageName);</div><div class="line">    <span class="keyword">if</span> (savedLastModified != lastModified) &#123;</div><div class="line">        <span class="comment">// 如果被修改过，进行一些检验工作</span></div><div class="line">        <span class="keyword">if</span> (!parser.verifyAndExtract(bundle, <span class="keyword">this</span>)) &#123;</div><div class="line">            bundle.setEnabled(<span class="keyword">false</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">// Got it, but disabled</span></div><div class="line">        &#125;</div><div class="line">        Small.setBundleLastModified(packageName, lastModified);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 保存插件的版本</span></div><div class="line">    PackageInfo pluginInfo = parser.getPackageInfo();</div><div class="line">    bundle.setVersionCode(pluginInfo.versionCode);</div><div class="line">    bundle.setVersionName(pluginInfo.versionName);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>插件的解析由 <code>BundleParser</code> 类来完成，不再详述，可以自己分析源码。</p>
<p><em>ApkBundleLauncher.loadBundle()</em></p>
<p>为插件创建 <code>LoadedApk</code> 对象，加载dex文件以及lib库，提取Activity并放入sLoadedActivities列表，收集intentFilter并存入sLoadedIntentFilters列表。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadBundle</span><span class="params">(Bundle bundle)</span> </span>&#123;</div><div class="line">    String packageName = bundle.getPackageName();</div><div class="line"></div><div class="line">    BundleParser parser = bundle.getParser();</div><div class="line">    <span class="comment">// 收集activity</span></div><div class="line">    parser.collectActivities();</div><div class="line">    PackageInfo pluginInfo = parser.getPackageInfo();</div><div class="line"></div><div class="line">    <span class="comment">// 获取插件文件的路径</span></div><div class="line">    String apkPath = parser.getSourcePath();</div><div class="line">    <span class="keyword">if</span> (sLoadedApks == <span class="keyword">null</span>) sLoadedApks = <span class="keyword">new</span> ConcurrentHashMap&lt;String, LoadedApk&gt;();</div><div class="line">    LoadedApk apk = sLoadedApks.get(packageName);</div><div class="line">    <span class="keyword">if</span> (apk == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 为该Bundle创建LoadedApk对象</span></div><div class="line">        apk = <span class="keyword">new</span> LoadedApk();</div><div class="line">        apk.packageName = packageName;</div><div class="line">        apk.path = apkPath;</div><div class="line">        apk.nonResources = parser.isNonResources();</div><div class="line">        <span class="keyword">if</span> (pluginInfo.applicationInfo != <span class="keyword">null</span>) &#123;</div><div class="line">            apk.applicationName = pluginInfo.applicationInfo.className;</div><div class="line">        &#125;</div><div class="line">        apk.packagePath = bundle.getExtractPath();</div><div class="line">        apk.optDexFile = <span class="keyword">new</span> File(apk.packagePath, FILE_DEX);</div><div class="line"></div><div class="line">        <span class="comment">// 加载dex文件</span></div><div class="line">        <span class="keyword">final</span> LoadedApk fApk = apk;</div><div class="line">        Bundle.postIO(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    fApk.dexFile = DexFile.loadDex(fApk.path, fApk.optDexFile.getPath(), <span class="number">0</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="comment">// 提取特定ABI的 native libraries 路径</span></div><div class="line">        String libDir = parser.getLibraryDirectory();</div><div class="line">        <span class="keyword">if</span> (libDir != <span class="keyword">null</span>) &#123;</div><div class="line">            apk.libraryPath = <span class="keyword">new</span> File(apk.packagePath, libDir);</div><div class="line">        &#125;</div><div class="line">        sLoadedApks.put(packageName, apk);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (pluginInfo.activities == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Record activities for intent redirection</span></div><div class="line">    <span class="keyword">if</span> (sLoadedActivities == <span class="keyword">null</span>) sLoadedActivities = <span class="keyword">new</span> ConcurrentHashMap&lt;String, ActivityInfo&gt;();</div><div class="line">    <span class="keyword">for</span> (ActivityInfo ai : pluginInfo.activities) &#123;</div><div class="line">        sLoadedActivities.put(ai.name, ai);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 收集 intent-filters for implicit action</span></div><div class="line">    ConcurrentHashMap&lt;String, List&lt;IntentFilter&gt;&gt; filters = parser.getIntentFilters();</div><div class="line">    <span class="keyword">if</span> (filters != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (sLoadedIntentFilters == <span class="keyword">null</span>) &#123;</div><div class="line">            sLoadedIntentFilters = <span class="keyword">new</span> ConcurrentHashMap&lt;String, List&lt;IntentFilter&gt;&gt;();</div><div class="line">        &#125;</div><div class="line">        sLoadedIntentFilters.putAll(filters);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 设置该插件的manifest中定义的入口Activity	</span></div><div class="line">    bundle.setEntrance(parser.getDefaultActivityName());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>AssetBundleLauncher.loadBundle()</em></p>
<p><code>WebBundleLauncher</code> 的 <code>loadBundle()</code> 方法也由它的父类 <code>AssetBundleLauncher</code> 来处理，由于 <code>AssetBundleLauncher</code> 是继承自 <code>SoBundleLauncher</code>，因此 <code>preloadBundle()</code> 也由 <code>SoBundleLauncher</code> 处理。<br>这个方法主要是将插件文件路径转化为index文件路径<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadBundle</span><span class="params">(Bundle bundle)</span> </span>&#123;</div><div class="line">    String packageName = bundle.getPackageName();</div><div class="line">    <span class="comment">// 获取插件路径</span></div><div class="line">    File unzipDir = <span class="keyword">new</span> File(getBasePath(), packageName);</div><div class="line">    <span class="comment">// 获取indexfile文件，WebBundleLauncher就是在unzipDir后面加上/index.html</span></div><div class="line">    File indexFile = <span class="keyword">new</span> File(unzipDir, getIndexFileName());</div><div class="line"></div><div class="line">    <span class="comment">// Prepare index url</span></div><div class="line">    String uri = indexFile.toURI().toString();</div><div class="line">    <span class="keyword">if</span> (bundle.getQuery() != <span class="keyword">null</span>) &#123;</div><div class="line">        uri += <span class="string">"?"</span> + bundle.getQuery();</div><div class="line">    &#125;</div><div class="line">    URL url;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        url = <span class="keyword">new</span> URL(uri);</div><div class="line">    &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</div><div class="line">        Log.e(TAG, <span class="string">"Failed to parse url "</span> + uri + <span class="string">" for bundle "</span> + packageName);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    String scheme = url.getProtocol();</div><div class="line">    <span class="keyword">if</span> (!scheme.equals(<span class="string">"http"</span>) &amp;&amp;</div><div class="line">            !scheme.equals(<span class="string">"https"</span>) &amp;&amp;</div><div class="line">            !scheme.equals(<span class="string">"file"</span>)) &#123;</div><div class="line">        Log.e(TAG, <span class="string">"Unsupported scheme "</span> + scheme + <span class="string">" for bundle "</span> + packageName);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    bundle.setURL(url);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="BundleLauncher-postSetUp"><a href="#BundleLauncher-postSetUp" class="headerlink" title="BundleLauncher.postSetUp()"></a>BundleLauncher.postSetUp()</h5><p>这里也会调用 <code>BundleLauncher</code> 各个子类的 <code>BundleLauncher</code>方法。</p>
<p>但是仅有 <code>ApkBundleLauncher</code> 覆盖了基类的空实现。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postSetUp</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.postSetUp();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (sLoadedApks == <span class="keyword">null</span>) &#123;</div><div class="line">        Log.e(TAG, <span class="string">"Could not find any APK bundles!"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Collection&lt;LoadedApk&gt; apks = sLoadedApks.values();</div><div class="line"></div><div class="line">    <span class="comment">// Merge all the resources in bundles and replace the host one</span></div><div class="line">    <span class="keyword">final</span> Application app = Small.getContext();</div><div class="line">    String[] paths = <span class="keyword">new</span> String[apks.size() + <span class="number">1</span>];</div><div class="line">    <span class="comment">// 添加宿主app的资源路径</span></div><div class="line">    paths[<span class="number">0</span>] = app.getPackageResourcePath(); </div><div class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</div><div class="line">    <span class="comment">// 添加各个插件的资源路径</span></div><div class="line">    <span class="keyword">for</span> (LoadedApk apk : apks) &#123;</div><div class="line">        <span class="keyword">if</span> (apk.nonResources) <span class="keyword">continue</span>; <span class="comment">// ignores the empty entry to fix #62</span></div><div class="line">        paths[i++] = apk.path; <span class="comment">// add plugin asset path</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (i != paths.length) &#123;</div><div class="line">        paths = Arrays.copyOf(paths, i);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 进行资源的合并，后面有文章详细介绍</span></div><div class="line">    ReflectAccelerator.mergeResources(app, sActivityThread, paths);</div><div class="line"></div><div class="line">    <span class="comment">// 合并插件的dex文件到宿主的class loader</span></div><div class="line">    ClassLoader cl = app.getClassLoader();</div><div class="line">    i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> N = apks.size();</div><div class="line">    String[] dexPaths = <span class="keyword">new</span> String[N];</div><div class="line">    DexFile[] dexFiles = <span class="keyword">new</span> DexFile[N];</div><div class="line">    <span class="keyword">for</span> (LoadedApk apk : apks) &#123;</div><div class="line">        dexPaths[i] = apk.path;</div><div class="line">        dexFiles[i] = apk.dexFile;</div><div class="line">        <span class="keyword">if</span> (Small.getBundleUpgraded(apk.packageName)) &#123;</div><div class="line">            <span class="comment">// If upgraded, delete the opt dex file for recreating</span></div><div class="line">            <span class="keyword">if</span> (apk.optDexFile.exists()) apk.optDexFile.delete();</div><div class="line">            Small.setBundleUpgraded(apk.packageName, <span class="keyword">false</span>);</div><div class="line">        &#125;</div><div class="line">        i++;</div><div class="line">    &#125;</div><div class="line">    ReflectAccelerator.expandDexPathList(cl, dexPaths, dexFiles);</div><div class="line"></div><div class="line">    <span class="comment">// 为宿主class loader扩展它的native library路径，这个路径包含了插件的native library路径</span></div><div class="line">    List&lt;File&gt; libPathList = <span class="keyword">new</span> ArrayList&lt;File&gt;();</div><div class="line">    <span class="keyword">for</span> (LoadedApk apk : apks) &#123;</div><div class="line">        <span class="keyword">if</span> (apk.libraryPath != <span class="keyword">null</span>) &#123;</div><div class="line">            libPathList.add(apk.libraryPath);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (libPathList.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">        ReflectAccelerator.expandNativeLibraryDirectories(cl, libPathList);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 调用所有插件Application的`onCreate' 方法</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">final</span> LoadedApk apk : apks) &#123;</div><div class="line">        String bundleApplicationName = apk.applicationName;</div><div class="line">        <span class="keyword">if</span> (bundleApplicationName == <span class="keyword">null</span>) <span class="keyword">continue</span>;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">final</span> Class applicationClass = Class.forName(bundleApplicationName);</div><div class="line">            Bundle.postUI(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        BundleApplicationContext appContext = <span class="keyword">new</span> BundleApplicationContext(app, apk);</div><div class="line">                        Application bundleApplication = Instrumentation.newApplication(</div><div class="line">                                applicationClass, appContext);</div><div class="line">                        sHostInstrumentation.callApplicationOnCreate(bundleApplication);</div><div class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Lazy init content providers</span></div><div class="line">    <span class="keyword">if</span> (mLazyInitProviders != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Method m = sActivityThread.getClass().getDeclaredMethod(</div><div class="line">                    <span class="string">"installContentProviders"</span>, Context.class, List.class);</div><div class="line">            m.setAccessible(<span class="keyword">true</span>);</div><div class="line">            m.invoke(sActivityThread, app, mLazyInitProviders);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Failed to lazy init content providers: "</span> + mLazyInitProviders);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Free temporary variables</span></div><div class="line">    sLoadedApks = <span class="keyword">null</span>;</div><div class="line">    sProviders = <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此，插件的初始化部分介绍完毕。</p>
]]></content>
    
    <summary type="html">
    
      分析Small框架的初始化流程，包括预处理，加载插件等
    
    </summary>
    
      <category term="Android开源项目" scheme="http://yoursite.com/categories/Android%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Android开源项目" scheme="http://yoursite.com/tags/Android%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="插件化框架" scheme="http://yoursite.com/tags/%E6%8F%92%E4%BB%B6%E5%8C%96%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Small" scheme="http://yoursite.com/tags/Small/"/>
    
  </entry>
  
  <entry>
    <title>Android 插件化框架Small解析--开始了解Small</title>
    <link href="http://yoursite.com/2017/05/08/open-source-android-plugins-small-sample/"/>
    <id>http://yoursite.com/2017/05/08/open-source-android-plugins-small-sample/</id>
    <published>2017-05-08T02:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Small是一个非常简洁的插件化框架，它的口号是做最轻巧的跨平台插件化框架。<br><a href="http://code.wequick.net/Small/cn/home" target="_blank" rel="external">Small 官方使用文档</a><br><a href="https://github.com/wequick/Small" target="_blank" rel="external">Small Github源码地址</a><br>那么首先我们从官方给出的 Sample 中初步了解一下Small框架。</p>
<h2 id="运行DevSample"><a href="#运行DevSample" class="headerlink" title="运行DevSample"></a>运行DevSample</h2><p>从上面给出的Small Github源码地址中现在Small源码。<br>在 Small/Android/ 下面有两个目录：</p>
<ul>
<li>Sample/：使用者模式</li>
<li>DevSample/：开发者模式</li>
</ul>
<p>他们有什么区别呢？可以看他们编译后的结果：<br>Sample：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">| type |      name      |  PP  | sdk |  aapt  | support | file(armeabi)  |   size   |</div><div class="line">|------|----------------|------|-----|--------|---------|----------------|----------|</div><div class="line">| host | app            |      | 25  | 25.0.2 | 25.1.0  |                |          |</div><div class="line">| stub | app+stub       |      | 25  | 25.0.2 | 25.1.0  |                |          |</div><div class="line">| app  | app.main       | 0x77 | 25  | 25.0.2 | 25.1.0  | *_main.so      | 11.7 KB  |</div><div class="line">| app  | app.mine       | 0x16 | 25  | 25.0.2 |         | *_mine.so      | 47.6 KB  |</div><div class="line">| app  | app.ok-if-stub | 0x6a | 25  | 25.0.2 |         | *_stub.so      | 19.7 KB  |</div><div class="line">| app  | app.detail     | 0x67 | 25  | 25.0.2 | 25.1.0  | *_detail.so    | 7.4 KB   |</div><div class="line">| app  | app.home       | 0x70 | 25  | 25.0.2 |         | *_home.so      | 11.3 KB  |</div><div class="line">| lib  | lib.analytics  | 0x76 | 25  | 25.0.2 |         | *_analytics.so | 126.6 KB |</div><div class="line">| lib  | lib.utils      | 0x73 | 25  | 25.0.2 | 25.1.0  | *_utils.so     | 6.8 KB   |</div><div class="line">| lib  | lib.style      | 0x79 | 25  | 25.0.2 | 25.1.0  | *_style.so     | 5.5 KB   |</div><div class="line">| web  | web.about      |      | 25  | 25.0.2 | 25.1.0  | *_about.so     | 24.3 KB  |</div></pre></td></tr></table></figure>
<p>DevSample：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">| type |      name      |  PP  | sdk |  aapt  | support |        file         |   size   |</div><div class="line">|------|----------------|------|-----|--------|---------|---------------------|----------|</div><div class="line">| host | app            |      | 25  | 25.0.2 | 25.1.0  |                     |          |</div><div class="line">| stub | app+stub       |      | 25  | 25.0.2 | 25.1.0  |                     |          |</div><div class="line">| app  | app.main       | 0x77 | 25  | 25.0.2 | 25.1.0  | *.main.apk          | 11.7 KB  |</div><div class="line">| app  | app.mine       | 0x16 | 25  | 25.0.2 |         | *.mine.apk          | 47.6 KB  |</div><div class="line">| app  | app.ok-if-stub | 0x6a | 25  | 25.0.2 |         | *.appok_if_stub.apk | 19.7 KB  |</div><div class="line">| app  | app.detail     | 0x67 | 25  | 25.0.2 | 25.1.0  | *.detail.apk        | 7.4 KB   |</div><div class="line">| app  | app.home       | 0x70 | 25  | 25.0.2 |         | *.home.apk          | 11.3 KB  |</div><div class="line">| lib  | lib.afterutils | 0x45 | 25  | 25.0.2 | 25.1.0  | *.afterutils.apk    | 3.7 KB   |</div><div class="line">| lib  | lib.analytics  | 0x76 | 25  | 25.0.2 |         | *.analytics.apk     | 126.6 KB |</div><div class="line">| lib  | lib.utils      | 0x73 | 25  | 25.0.2 | 25.1.0  | *.utils.apk         | 6.8 KB   |</div><div class="line">| lib  | lib.style      | 0x79 | 25  | 25.0.2 | 25.1.0  | *.style.apk         | 5.5 KB   |</div><div class="line">| web  | web.about      |      | 25  | 25.0.2 | 25.1.0  | *.about.apk         | 24.3 KB  |</div></pre></td></tr></table></figure>
<p>编译后的结果 Sample 是 <em>.so，DevSample 是 </em>.apk。<br>造成这样的区别原因是在开发者模式的 build.gradle 里面有下面的设置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">small &#123;</div><div class="line">    buildToAssets = true</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>buildToAssets</code> 决定是否将插件作为 apk 文件打包到宿主 apk 的 assets 目录下。默认为 false，即作为 so 文件打包到宿主 apk 的 lib 目录下。<br>配套的，还需要在宿主的 <code>Application</code> 里指定读取插件的位置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate();</div><div class="line">    ...</div><div class="line">    Small.setLoadFromAssets(BuildConfig.LOAD_FROM_ASSETS);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (Small.isLoadFromAssets()) &#123;</div><div class="line">    mBuiltinAssetName = pkg + <span class="string">".apk"</span>;</div><div class="line">    mBuiltinFile = <span class="keyword">new</span> File(FileUtils.getInternalBundlePath(), mBuiltinAssetName);</div><div class="line">    mPatchFile = <span class="keyword">new</span> File(FileUtils.getDownloadBundlePath(), mBuiltinAssetName);</div><div class="line">    <span class="comment">// Extract from assets to files</span></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        extractBundle(mBuiltinAssetName, mBuiltinFile);</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    String soName = <span class="string">"lib"</span> + pkg.replaceAll(<span class="string">"\\."</span>, <span class="string">"_"</span>) + <span class="string">".so"</span>;</div><div class="line">    mBuiltinFile = <span class="keyword">new</span> File(sUserBundlesPath, soName);</div><div class="line">    mPatchFile = <span class="keyword">new</span> File(FileUtils.getDownloadBundlePath(), soName);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，<code>BuildConfig.LOAD_FROM_ASSETS</code> 为 true 时，从 /data/data/<packagename>/small_base 下面读取 apk 格式插件，为 false 时从 <code>nativeLibraryDir</code> 中读取 so 格式插件。</packagename></p>
<p>那么现在我们就导入 DevSample 工程。</p>
<h3 id="导入DevSample工程"><a href="#导入DevSample工程" class="headerlink" title="导入DevSample工程"></a>导入DevSample工程</h3><p>打开Android Studio，File-&gt;Open-&gt;Open File or Project… 选择DevSample文件夹然后打开。<br>如图：</p>
<p><img src="/images/open-source-android-plugins-small-sample/small-dev-sample-import-project.png" alt="效果图"></p>
<p>DevSample 示例工程中有下面的模块：</p>
<ul>
<li>app 宿主工程</li>
<li>app.* 应用插件，包含Activity/Fragment的插件</li>
<li>lib.* 公共库插件</li>
<li>web.* 本地网页插件</li>
<li>app+* <a href="http://code.wequick.net/Small/cn/stub-module" target="_blank" rel="external">宿主分身模块</a></li>
<li>gradle-small Small中的一个gradle自定义插件，用于打包组件</li>
</ul>
<p>出于业务需求考虑，Small定义了两类插件：公共库插件与应用插件。<br><em>应用插件</em>相对简单，就是用来把大应用拆分成一个个小的业务单元。而<em>公共库插件</em>则是为这些业务单元提供公共的代码与资源，比如可以将在多个应用插件间可以复用的一些主题、界面边距资源提取出来作为一个公共库插件。</p>
<h3 id="编译插件"><a href="#编译插件" class="headerlink" title="编译插件"></a>编译插件</h3><p>在运行前必须要编译生成插件。</p>
<ol>
<li>编译公共库插件：</li>
</ol>
<p>指的是编译lib.*的插件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gradlew buildLib -q (-q是安静模式，可以让输出更好看，也可以不加)</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">Small building library 1 of 5 - app (0x7f)</div><div class="line">Small building library 2 of 5 - lib.utils (0x73)</div><div class="line">      [lib.utils] split library res files...                          [  OK  ]</div><div class="line">      [lib.utils] slice asset package and reset package id...         [  OK  ]</div><div class="line">      [lib.utils] split library R.java files...                       [  OK  ]</div><div class="line">      [lib.utils] add flags: 10000...                                 [  OK  ]</div><div class="line">      [lib.utils] split R.class...                                    [  OK  ]</div><div class="line">      -&gt; smallLibs/net.wequick.example.small.lib.utils.apk (7004 bytes = 6.8 KB)</div><div class="line">Small building library 3 of 5 - lib.afterutils (0x45)</div><div class="line">      [lib.afterutils] remove resources dir...                        [  OK  ]</div><div class="line">      [lib.afterutils] remove resources.arsc...                       [  OK  ]</div><div class="line">      [lib.afterutils] remove R.java...                               [  OK  ]</div><div class="line">      [lib.afterutils] add flags: 1...                                [  OK  ]</div><div class="line">      -&gt; smallLibs/net.wequick.example.small.lib.afterutils.apk (3744 bytes = 3.7 KB)</div><div class="line">Small building library 4 of 5 - lib.analytics (0x76)</div><div class="line">      [lib.analytics] remove resources dir...                         [  OK  ]</div><div class="line">      [lib.analytics] remove resources.arsc...                        [  OK  ]</div><div class="line">      [lib.analytics] remove R.java...                                [  OK  ]</div><div class="line">      [lib.analytics] add flags: 1...                                 [  OK  ]</div><div class="line">      -&gt; smallLibs/net.wequick.example.lib.analytics.apk (129638 bytes = 126.6 KB)</div><div class="line">Small building library 5 of 5 - lib.style (0x79)</div><div class="line">      [lib.style] split library res files...                          [  OK  ]</div><div class="line">      [lib.style] slice asset package and reset package id...         [  OK  ]</div><div class="line">      [lib.style] split library R.java files...                       [  OK  ]</div><div class="line">      [lib.style] split R.class...                                    [  OK  ]</div><div class="line">      -&gt; smallLibs/com.example.mysmall.lib.style.apk (5603 bytes = 5.5 KB)</div></pre></td></tr></table></figure>
<ol>
<li>编译应用插件</li>
</ol>
<p>指的是编译app.*的插件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gradlew buildBundle -q (-q是安静模式，可以让输出更好看，也可以不加)</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">Small building bundle 1 of 6 - app.detail (0x67)</div><div class="line">      [app.detail] split library res files...                         [  OK  ]</div><div class="line">      [app.detail] slice asset package and reset package id...        [  OK  ]</div><div class="line">      [app.detail] split library R.java files...                      [  OK  ]</div><div class="line">      [app.detail] split R.class...                                   [  OK  ]</div><div class="line">      -&gt; smallLibs/net.wequick.example.small.app.detail.apk (7616 bytes = 7.4 KB)</div><div class="line">Small building bundle 2 of 6 - app.home (0x70)</div><div class="line">      [app.home] split library res files...                           [  OK  ]</div><div class="line">      [app.home] slice asset package and reset package id...          [  OK  ]</div><div class="line">      [app.home] split library R.java files...                        [  OK  ]</div><div class="line">      [app.home] split R.class...                                     [  OK  ]</div><div class="line">      -&gt; smallLibs/net.wequick.example.small.app.home.apk (11582 bytes = 11.3 KB)</div><div class="line">Small building bundle 3 of 6 - app.main (0x77)</div><div class="line">      [app.main] split library res files...                           [  OK  ]</div><div class="line">      [app.main] slice asset package and reset package id...          [  OK  ]</div><div class="line">      [app.main] split library R.java files...                        [  OK  ]</div><div class="line">      [app.main] add flags: 10000...                                  [  OK  ]</div><div class="line">      [app.main] split R.class...                                     [  OK  ]</div><div class="line">      -&gt; smallLibs/net.wequick.example.small.app.main.apk (12017 bytes = 11.7 KB)</div><div class="line">Small building bundle 4 of 6 - app.mine (0x16)</div><div class="line">      [app.mine] split library res files...                           [  OK  ]</div><div class="line">      [app.mine] slice asset package and reset package id...          [  OK  ]</div><div class="line">      [app.mine] split library R.java files...                        [  OK  ]</div><div class="line">      [app.mine] add flags: 11111110...                               [  OK  ]</div><div class="line">      [app.mine] split R.class...                                     [  OK  ]</div><div class="line">      -&gt; smallLibs/net.wequick.example.small.app.mine.apk (48747 bytes = 47.6 KB)</div><div class="line">Small building bundle 5 of 6 - app.ok-if-stub (0x6a)</div><div class="line">      [app.ok-if-stub] split library res files...                     [  OK  ]</div><div class="line">      [app.ok-if-stub] slice asset package and reset package id...    [  OK  ]</div><div class="line">      [app.ok-if-stub] split library R.java files...                  [  OK  ]</div><div class="line">      [app.ok-if-stub] split R.class...                               [  OK  ]</div><div class="line">      -&gt; smallLibs/net.wequick.example.small.appok_if_stub.apk (20197 bytes = 19.7 KB)</div></pre></td></tr></table></figure>
<p>单独编译一个组件可以使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gradlew -p app.main assembleRelease</div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gradlew :app.main:assembleRelease</div></pre></td></tr></table></figure>
<p>编译后生成的文件在 Android/Sample/app/smallLibs 目录中。</p>
<ol>
<li>检查编译情况</li>
</ol>
<p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gradlew small</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">:small</div><div class="line"></div><div class="line">### Compile-time</div><div class="line"></div><div class="line"></div><div class="line">  gradle-small plugin : 1.2.0-alpha6 (project)</div><div class="line">            small aar : 1.2.0-alpha6 (project)</div><div class="line">          gradle core : 3.3</div><div class="line">       android plugin : 2.3.0</div><div class="line">                   OS : Linux 3.8.0-35-generic (amd64)</div><div class="line"></div><div class="line"></div><div class="line">### Bundles</div><div class="line"></div><div class="line">| type |      name      |  PP  | sdk |  aapt  | support |        file         |   size   |</div><div class="line">|------|----------------|------|-----|--------|---------|---------------------|----------|</div><div class="line">| host | app            |      | 25  | 25.0.2 | 25.1.0  |                     |          |</div><div class="line">| stub | app+stub       |      | 25  | 25.0.2 | 25.1.0  |                     |          |</div><div class="line">| app  | app.main       | 0x77 | 25  | 25.0.2 | 25.1.0  | *.main.apk          | 11.7 KB  |</div><div class="line">| app  | app.mine       | 0x16 | 25  | 25.0.2 |         | *.mine.apk          | 47.6 KB  |</div><div class="line">| app  | app.ok-if-stub | 0x6a | 25  | 25.0.2 |         | *.appok_if_stub.apk | 19.7 KB  |</div><div class="line">| app  | app.detail     | 0x67 | 25  | 25.0.2 | 25.1.0  | *.detail.apk        | 7.4 KB   |</div><div class="line">| app  | app.home       | 0x70 | 25  | 25.0.2 |         | *.home.apk          | 11.3 KB  |</div><div class="line">| lib  | lib.afterutils | 0x45 | 25  | 25.0.2 | 25.1.0  | *.afterutils.apk    | 3.7 KB   |</div><div class="line">| lib  | lib.analytics  | 0x76 | 25  | 25.0.2 |         | *.analytics.apk     | 126.6 KB |</div><div class="line">| lib  | lib.utils      | 0x73 | 25  | 25.0.2 | 25.1.0  | *.utils.apk         | 6.8 KB   |</div><div class="line">| lib  | lib.style      | 0x79 | 25  | 25.0.2 | 25.1.0  | *.style.apk         | 5.5 KB   |</div><div class="line">| web  | web.about      |      | 25  | 25.0.2 | 25.1.0  | *.about.apk         | 24.3 KB  |</div><div class="line"></div><div class="line"></div><div class="line">BUILD SUCCESSFUL</div><div class="line"></div><div class="line">Total time: 4.21 secs</div></pre></td></tr></table></figure>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>点击<br><img src="/images/open-source-android-plugins-small-sample/small-dev-sample-run-module.png" alt="效果图"><br>运行需要的组件。<br>app.home 无法单独运行是因为它只包含一个 <code>Fragment</code>，没有 Launcher Activity。<br>如果需要修改某个插件，修改完后重新编译该插件，在重新编译宿主工程就可以了。</p>
<h3 id="清除插件"><a href="#清除插件" class="headerlink" title="清除插件"></a>清除插件</h3><p>清除基础库：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gradlew cleanLib -q</div></pre></td></tr></table></figure>
<p>清除所有插件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gradlew cleanBundle -q</div></pre></td></tr></table></figure>
<h2 id="Small工程解析"><a href="#Small工程解析" class="headerlink" title="Small工程解析"></a>Small工程解析</h2><h3 id="插件路由"><a href="#插件路由" class="headerlink" title="插件路由"></a>插件路由</h3><p>在宿主工程 app 的 assets 目录下面有个文件 bundle.json，它就想一个插件路由表一样，Small 中用它来对插件进行管理：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</div><div class="line">  &quot;bundles&quot;: [</div><div class="line">    &#123;</div><div class="line">      &quot;uri&quot;: &quot;lib.utils&quot;,</div><div class="line">      &quot;pkg&quot;: &quot;net.wequick.example.small.lib.utils&quot;</div><div class="line">    &#125;,</div><div class="line">    ...</div><div class="line">    &#123;</div><div class="line">      &quot;uri&quot;: &quot;mine&quot;,</div><div class="line">      &quot;pkg&quot;: &quot;net.wequick.example.small.app.mine&quot;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;uri&quot;: &quot;detail&quot;,</div><div class="line">      &quot;pkg&quot;: &quot;net.wequick.example.small.app.detail&quot;,</div><div class="line">      &quot;rules&quot;: &#123;</div><div class="line">        &quot;sub&quot;: &quot;Sub&quot;</div><div class="line">        &quot;page&quot;: MyPage&quot;</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;uri&quot;: &quot;stub&quot;,</div><div class="line">      &quot;type&quot;: &quot;app&quot;,</div><div class="line">      &quot;pkg&quot;: &quot;net.wequick.example.small.appok_if_stub&quot;</div><div class="line">    &#125;,</div><div class="line">    ...</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>bundle.json 中的每一个元素都是对一个插件的声明。</p>
<ul>
<li>uri：跳转插件的界面都是通过uri来指定的，也就是一个uri唯一对应一个插件</li>
<li>pkg：插件的包名</li>
<li>type：插件类型：app应用插件；lib公共库插件</li>
<li>rules：插件的子路由表</li>
</ul>
<p>在加载插件时会根据type类型来寻找合适的 <code>BundleLauncher</code>，如果这里没有指定type，那么就要根据包名来判断插件类型，比如包名里面要包含 app 、lib 或者 web 等。</p>
<h4 id="主路由"><a href="#主路由" class="headerlink" title="主路由"></a>主路由</h4><p>在代码中通过：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Small.openUri(<span class="string">"detail"</span>, context);</div></pre></td></tr></table></figure>
<p>来通过包名来查找对应插件，调用该插件下面的 Launcher Activity。即 <code>net.wequick.example.small.app.detail</code>下面的<code>MainActivity</code>。</p>
<h4 id="子路由"><a href="#子路由" class="headerlink" title="子路由"></a>子路由</h4><p>如果是：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Small.openUri(<span class="string">"detail/Sub"</span>, context);</div></pre></td></tr></table></figure>
<p>就会调用 <code>net.wequick.example.small.app.detail</code> 下面的 <code>SubActivity</code>。</p>
<h4 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h4><p>在调用插件的时候还可以传递参数：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Small.openUri(<span class="string">"detail?from=app.home"</span>, context);</div></pre></td></tr></table></figure>
<p>在调起的插件<code>app.detail/MainActivity</code>中通过下面方法来查询参数：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Uri uri = Small.getUri(<span class="keyword">this</span>);</div><div class="line"><span class="keyword">if</span> (uri != <span class="keyword">null</span>) &#123;</div><div class="line">    String from = uri.getQueryParameter(<span class="string">"from"</span>);</div><div class="line">    <span class="comment">// Do stuff by `from'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      根据官方提供的例子初步了解Small的用法
    
    </summary>
    
      <category term="Android开源项目" scheme="http://yoursite.com/categories/Android%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Android开源项目" scheme="http://yoursite.com/tags/Android%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="插件化框架" scheme="http://yoursite.com/tags/%E6%8F%92%E4%BB%B6%E5%8C%96%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Small" scheme="http://yoursite.com/tags/Small/"/>
    
  </entry>
  
  <entry>
    <title>Android 性能优化之旋转屏幕优化</title>
    <link href="http://yoursite.com/2017/04/26/android-performance-optimization-rotate-screen/"/>
    <id>http://yoursite.com/2017/04/26/android-performance-optimization-rotate-screen/</id>
    <published>2017-04-26T02:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在桌面转屏发现响应不够迅速，对比其他产品有很大的提升空间，针对此问题进行了一些分析和优化。</p>
<h2 id="问题分析和解决方法"><a href="#问题分析和解决方法" class="headerlink" title="问题分析和解决方法"></a>问题分析和解决方法</h2><p>首先简单介绍一下旋转屏幕的流程，首先各个界面要进行重绘，在重绘过程中要进行冻屏，只有所有<code>Window</code>都进行绘制完成了才进行转屏，因此这里面就有个木桶效应，转屏的时间取决于重绘最慢的那个。<br>首先分析Log，找出可以优化的点：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">adb shell dumpsys window <span class="_">-d</span> <span class="built_in">enable</span> 10</div><div class="line">adb logcat -v threadtime <span class="_">-s</span> WindowManager | grep -E <span class="string">"Screen frozen for|Dismissing screen|Orientation start waiting for draw|Orientation not waiting for draw"</span></div></pre></td></tr></table></figure>
<p><code>adb shell dumpsys window -d enable 10</code>是使能<code>DEBUG_ORIENTATION</code>，开启打印转屏相关的Log。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">WindowManager: Orientation start waiting <span class="keyword">for</span> draw mDrawState=DRAW_PENDING in Window&#123;<span class="number">249e41f</span> u0 StatusBar&#125;, <span class="function">surface <span class="title">Surface</span><span class="params">(name=StatusBar)</span></span></div><div class="line">WindowManager: Orientation start waiting <span class="keyword">for</span> draw mDrawState=DRAW_PENDING in Window&#123;<span class="number">731</span>dc6a u0 com.android.launcher/com.android.launcher.Launcher&#125;, <span class="function">surface <span class="title">Surface</span><span class="params">(name=com.android.launcher/com.android.launcher.Launcher)</span></span></div><div class="line">WindowManager: Orientation start waiting <span class="keyword">for</span> draw mDrawState=DRAW_PENDING in Window&#123;b22eda5 u0 com.android.systemui.ImageWallpaper&#125;, <span class="function">surface <span class="title">Surface</span><span class="params">(name=com.android.systemui.ImageWallpaper)</span></span></div><div class="line">WindowManager: Orientation start waiting <span class="keyword">for</span> draw mDrawState=DRAW_PENDING in Window&#123;<span class="number">731</span>dc6a u0 com.android.launcher/com.android.launcher.Launcher&#125;, <span class="function">surface <span class="title">Surface</span><span class="params">(name=com.android.launcher/com.android.launcher.Launcher)</span></span></div><div class="line">WindowManager: Orientation start waiting <span class="keyword">for</span> draw mDrawState=DRAW_PENDING in Window&#123;<span class="number">731</span>dc6a u0 com.android.launcher/com.android.launcher.Launcher&#125;, <span class="function">surface <span class="title">Surface</span><span class="params">(name=com.android.launcher/com.android.launcher.Launcher)</span></span></div><div class="line">WindowManager: Orientation start waiting <span class="keyword">for</span> draw mDrawState=DRAW_PENDING in Window&#123;<span class="number">94517</span>ed u0 com.android.launcher/com.android.launcher.Launcher&#125;, <span class="function">surface <span class="title">Surface</span><span class="params">(name=com.android.launcher/com.android.launcher.Launcher)</span></span></div><div class="line">WindowManager: Orientation not waiting <span class="keyword">for</span> draw in Window&#123;<span class="number">94517</span>ed u0 com.android.launcher/com.android.launcher.Launcher&#125;, <span class="function">surface <span class="title">Surface</span><span class="params">(name=com.android.launcher/com.android.launcher.Launcher)</span></span></div><div class="line">WindowManager: Orientation not waiting <span class="keyword">for</span> draw in Window&#123;b22eda5 u0 com.android.systemui.ImageWallpaper&#125;, <span class="function">surface <span class="title">Surface</span><span class="params">(name=com.android.systemui.ImageWallpaper)</span></span></div><div class="line">WindowManager: Orientation not waiting <span class="keyword">for</span> draw in Window&#123;<span class="number">249e41f</span> u0 StatusBar&#125;, <span class="function">surface <span class="title">Surface</span><span class="params">(name=StatusBar)</span></span></div><div class="line">WindowManager: Screen frozen <span class="keyword">for</span> +968ms due to Window&#123;<span class="number">249e41f</span> u0 StatusBar&#125;</div><div class="line">WindowManager: **** Dismissing screen rotation animation</div></pre></td></tr></table></figure>
<p>通过Log发现，转屏是要等<code>StatusBar</code>，<code>Launcher</code>和<code>ImageWallpaper</code>绘制完才会开始的。<br>根据<code>Screen frozen for +968ms due to Window{249e41f u0 StatusBar}</code>发现目前的瓶颈在状态栏这里，首先分析一下状态栏的代码，可以借助于 TraceView 工具迅速定位到耗时较多方法的位置，发现在<code>NotificationPanelView</code>的<code>onConfigurationChanged</code>函数中有一项耗时的操作，先进行这部分优化。<br>然后看效果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">WindowManager: Screen frozen <span class="keyword">for</span> +<span class="number">747</span>ms due to Window&#123;<span class="number">3</span>aaa434 u0 com.android.launcher/com.android.launcher.Launcher&#125;</div></pre></td></tr></table></figure>
<p>发现这个时候瓶颈已经不再<code>StatusBar</code>这里了，接下面再优化<code>Launcher</code>就可以。<br>接下来看看<code>ImageWallpaper</code>是不是有优化的余地呢？<br>通过 TraceView 工具发现在<code>ImageWallpaper.drawFrame()</code>方法中，每次旋转屏幕都会在<code>updateWallpaperLocked()</code>中调用<code>mWallpaperManager.getBitmap()</code>进行解码图片，这个也是没有必要的，只初始化一次就可以了，可以进行如下的修改：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Load bitmap if it is not yet loaded or if it was loaded at a different size</span></div><div class="line"><span class="keyword">if</span> (mBackground == <span class="keyword">null</span><span class="comment">/* || surfaceDimensionsChanged*/</span>) &#123;</div></pre></td></tr></table></figure>
<p>只在<code>mBackground</code>为<code>null</code>是加在壁纸图片。<br>第三步的任务就是优化<code>Launcher</code>了，此处的优化点各不相同，而且较多，就不一一介绍了。</p>
]]></content>
    
    <summary type="html">
    
      介绍开发过程中遇到的旋转屏幕卡顿问题的解决过程
    
    </summary>
    
      <category term="Android性能优化" scheme="http://yoursite.com/categories/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Android性能优化" scheme="http://yoursite.com/tags/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Android 动态壁纸</title>
    <link href="http://yoursite.com/2017/03/10/android-demo-live-wallpaper-snow/"/>
    <id>http://yoursite.com/2017/03/10/android-demo-live-wallpaper-snow/</id>
    <published>2017-03-10T02:00:00.000Z</published>
    <updated>2017-12-01T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/heqiangflytosky/LiveWallPaper" target="_blank" rel="external">Github源码地址</a></p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>动态壁纸，顾名思义就是有动画效果的壁纸，它是针对静态壁纸的一种表述方式，它不但可以实现动态效果，而且还可以与用户的触摸事件进行交互。<br>其实在Android的源码里面已经有一些动态壁纸的Demo，Android 内置的动态壁纸都在 packages/wallpapers/ 这个目录里，其中LivePicker目录里包含的是动态墙纸的选择列表的代码，也就是你在桌面选择添加动态墙纸时出现的系统里所有动态墙纸的那个列表的实现代码。<br>如果你想自己来实现一个动态壁纸也是一件简单的事情，本文中实现了一个雪花飞舞的动态壁纸效果，而且具有与用户交互的功能，当触摸屏幕时会在触摸点的位置生成一个雪花。</p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://github.com/heqiangflytosky/LiveWallPaper/raw/master/img/livewallpaper_snow.gif"></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>下面先来看一下AndroidManifest.xml文件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">package</span>=<span class="string">"com.android.hq.livewallpaper"</span></span></div><div class="line">          <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span></span></div><div class="line">                  <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">                  <span class="attr">android:hardwareAccelerated</span>=<span class="string">"true"</span></div><div class="line"></div><div class="line">                  <span class="attr">android:uiOptions</span>=<span class="string">"splitActionBarWhenNarrow"</span></div><div class="line">                  <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span> &gt;</div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">".SnowWallPaper"</span></span></div><div class="line">                 <span class="attr">android:label</span>=<span class="string">"雪花飞舞"</span></div><div class="line">                 <span class="attr">android:permission</span>=<span class="string">"android.permission.BIND_WALLPAPER"</span>&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.service.wallpaper.WallpaperService"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">"android.service.wallpaper"</span> <span class="attr">android:resource</span>=<span class="string">"@xml/snow"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;/<span class="name">service</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure></p>
<ul>
<li><code>android:label=&quot;雪花飞舞&quot;</code>可以为壁纸设置一个名称</li>
<li><code>android:permission=&quot;android.permission.BIND_WALLPAPER&quot;</code> 允许绑定壁纸权限，必须添加</li>
<li><code>action android:name=&quot;android.service.wallpaper.WallpaperService&quot;</code> 这个action把其当做一个动态壁纸加载进动态壁纸选择器的列表，必须添加</li>
</ul>
<p>xml/snow.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">wallpaper</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">           <span class="attr">android:thumbnail</span>=<span class="string">"@drawable/snow_thumbnail"</span></div><div class="line">           <span class="attr">android:author</span>=<span class="string">"@string/author"</span>/&gt;</div></pre></td></tr></table></figure></p>
<p><code>android:thumbnail</code>可以为壁纸设置一个缩略图，可以在选择动态壁纸的时候显示</p>
<p>WallpaperService.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SnowWallPaper</span> <span class="keyword">extends</span> <span class="title">WallpaperService</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String TAG = <span class="string">"WallpaperService"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 必须实现这个方法来返回我们自定义引擎的实例</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Engine <span class="title">onCreateEngine</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SnowEngine();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//自定义引擎类</span></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SnowEngine</span> <span class="keyword">extends</span> <span class="title">Engine</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> SnowUtils mSnowUtils;</div><div class="line">        <span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> MyHandler();</div><div class="line">        Bitmap mBackground;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_DRAW_FRAME = <span class="number">1</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_PRODUCE_SNOW = <span class="number">2</span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SnowEngine</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SurfaceHolder surfaceHolder)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.onCreate(surfaceHolder);</div><div class="line">            setTouchEventsEnabled(<span class="keyword">true</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 手指触摸屏幕时会调用此方法</span></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.onTouchEvent(event);</div><div class="line">            <span class="keyword">if</span>(event.getAction() == MotionEvent.ACTION_DOWN)&#123;</div><div class="line">                mSnowUtils.produceInstantFlake((<span class="keyword">int</span>)event.getX(), (<span class="keyword">int</span>)event.getY());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//壁纸由隐藏转换为显示状态时会调用这个方法</span></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onVisibilityChanged</span><span class="params">(<span class="keyword">boolean</span> visible)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.onVisibilityChanged(visible);</div><div class="line">            <span class="keyword">if</span> (visible) &#123;</div><div class="line">                mHandler.obtainMessage(MSG_DRAW_FRAME).sendToTarget();</div><div class="line">                mHandler.obtainMessage(MSG_PRODUCE_SNOW).sendToTarget();</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//当壁纸隐藏时不再进行绘制</span></div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                mHandler.removeCallbacksAndMessages(<span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSurfaceChanged</span><span class="params">(SurfaceHolder holder, <span class="keyword">int</span> format, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.onSurfaceChanged(holder, format, width, height);</div><div class="line">            drawFrame();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOffsetsChanged</span><span class="params">(<span class="keyword">float</span> xOffset, <span class="keyword">float</span> yOffset, <span class="keyword">float</span> xOffsetStep, <span class="keyword">float</span> yOffsetStep, <span class="keyword">int</span> xPixelOffset, <span class="keyword">int</span> yPixelOffset)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.onOffsetsChanged(xOffset, yOffset, xOffsetStep, yOffsetStep, xPixelOffset, yPixelOffset);</div><div class="line">            drawFrame();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSurfaceDestroyed</span><span class="params">(SurfaceHolder holder)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.onSurfaceDestroyed(holder);</div><div class="line">            mHandler.removeCallbacksAndMessages(<span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 具体的绘制都在这个方法里面实现</span></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawFrame</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">            SurfaceHolder sh = getSurfaceHolder();</div><div class="line">            <span class="keyword">final</span> Rect frame = sh.getSurfaceFrame();</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> dw = frame.width();</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> dh = frame.height();</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(mSnowUtils == <span class="keyword">null</span>)&#123;</div><div class="line">                mSnowUtils = <span class="keyword">new</span> SnowUtils(getApplicationContext());</div><div class="line">                mSnowUtils.init(dw, dh);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (mBackground == <span class="keyword">null</span>) &#123;</div><div class="line">                mBackground = BitmapFactory.decodeResource(getResources(),R.drawable.snow_bg);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            Canvas c = sh.lockCanvas();</div><div class="line">            <span class="keyword">if</span>(c != <span class="keyword">null</span>)&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="comment">// 先绘制一个静态的背景图片</span></div><div class="line">                    drawBackground(c,dw,dh);</div><div class="line">                    <span class="comment">// 绘制动态的雪花</span></div><div class="line">                    mSnowUtils.draw(c);</div><div class="line">                &#125;<span class="keyword">finally</span> &#123;</div><div class="line">                    sh.unlockCanvasAndPost(c);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawBackground</span><span class="params">(Canvas c,<span class="keyword">int</span> w, <span class="keyword">int</span> h)</span></span>&#123;</div><div class="line">            <span class="keyword">if</span> (mBackground != <span class="keyword">null</span>) &#123;</div><div class="line">                RectF dest = <span class="keyword">new</span> RectF(<span class="number">0</span>, <span class="number">0</span>, w, h);</div><div class="line">                c.drawBitmap(mBackground, <span class="keyword">null</span>, dest, <span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span></span>&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">                <span class="keyword">switch</span> (msg.what)&#123;</div><div class="line">                    <span class="keyword">case</span> MSG_DRAW_FRAME:</div><div class="line">                        drawFrame();</div><div class="line">                        removeMessages(MSG_DRAW_FRAME);</div><div class="line">                        sendMessageDelayed(obtainMessage(MSG_DRAW_FRAME), <span class="number">50</span>);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> MSG_PRODUCE_SNOW:</div><div class="line">                        mSnowUtils.produceSnowFlake();</div><div class="line">                        removeMessages(MSG_PRODUCE_SNOW);</div><div class="line">                        sendMessageDelayed(obtainMessage(MSG_PRODUCE_SNOW), <span class="number">1000</span>);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">default</span>:</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>从代码中我们可以看到，<code>drawFrame()</code>方法承担了具体的绘制工作，绘制工作分为两部分，一部分是绘制静态的背景，第二部分是绘制动态的雪花，如果去掉第二部分，就是一个静态壁纸了。<br>其实静态壁纸和动态壁纸是一样的，静态壁纸只是绘制一张图片，动态背景就要不断的绘制动画。<br>具体介绍参考我的博客<a href=""></a>。</p>
]]></content>
    
    <summary type="html">
    
      通过具体例子来介绍Android动态壁纸的实现
    
    </summary>
    
      <category term="Android Demo" scheme="http://yoursite.com/categories/Android-Demo/"/>
    
    
      <category term="Android Demo" scheme="http://yoursite.com/tags/Android-Demo/"/>
    
  </entry>
  
</feed>
